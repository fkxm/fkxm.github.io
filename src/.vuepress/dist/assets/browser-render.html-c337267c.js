import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as d,c as r,a as e,b as n,e as o,f as a}from"./app-60f9b323.js";const i={},l=a('<h2 id="从输入-url-到页面渲染的过程" tabindex="-1"><a class="header-anchor" href="#从输入-url-到页面渲染的过程" aria-hidden="true">#</a> 从输入 URL 到页面渲染的过程</h2><p>加载过程：</p><ol><li><code>DNS</code> 解析域名成 <code>IP</code> 地址</li><li>浏览器向 <code>IP</code> 地址所在的服务器发起 <code>HTTP</code> 请求</li><li>服务器处理 <code>HTTP</code> 请求，并返回给浏览器。</li></ol><p>渲染过程：</p><ol><li>根据 <code>HTML</code> 代码生成 <code>DOM</code> 树</li><li>根据 <code>CSS</code> 代码生成 <code>CSSOM</code></li><li>将 <code>DOM</code> 树与 <code>CSSOM</code> 合并成渲染树 <code>Render Tree</code></li><li>遍历渲染树，进行布局与绘制</li></ol><p>渲染阻塞：若遇到 <code>&lt;script&gt;</code> 则暂停渲染，优先执行 <code>JS</code> 代码，直至渲染完成。</p><p>所以建议：</p><ul><li><code>&lt;style&gt;</code> 放在 <code>&lt;head&gt;</code> 里：避免页面结构渲染完成，而样式还没开始渲染。</li><li><code>&lt;script&gt;</code> 放在 <code>&lt;body&gt;</code> 的最后：优先渲染页面，避免执行 JS 代码时暂停渲染。</li></ul><h3 id="script-标签中的-defer-和-async" tabindex="-1"><a class="header-anchor" href="#script-标签中的-defer-和-async" aria-hidden="true">#</a> script 标签中的 defer 和 async</h3><p><code>&lt;script&gt;</code>：阻断 <code>HTML</code> 解析，只有下载好并执行完脚本才会继续解析 <code>HTML</code>。<br><code>&lt;script async&gt;</code>：解析 <code>HTML</code> 过程中，异步下载脚本，下载成功立马执行，会阻断 <code>HTML</code> 的解析。<br><code>&lt;script defer&gt;</code>：完全不会阻断 <code>HTML</code> 的解析，解析完成后再执行脚本。</p><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220728232104.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="spa、csr-与-ssr" tabindex="-1"><a class="header-anchor" href="#spa、csr-与-ssr" aria-hidden="true">#</a> SPA、CSR 与 SSR</h2><p>SPA（Single Page Application）单页面应用程序，是前后端分离时提出的一种解决方案。在一个应用中，只有一个完整的HTML页面，页面中有一个根节点容器。由 JS 代码把需要加载的 DOM 片段插入到该容器中。<br> SPA 工作原理：使用前端路由，通过改变页面的URL，在不重新请求页面的情况下，实现局部更新页面视图。</p><p>CSR（Client Side Render）客户端渲染：客户端请求页面 URL 时，服务端返回带有根节点容器的 HTML。再次请求得到 JS，向根节点容器插入 DOM 片段并进行事件绑定等操作。动态数据则通过 AJAX 请求。<strong>普通的 SPA 是 CSR</strong>。</p><p>SSR（Server Side Render）服务端渲染：客户端请求页面 URL 时，服务端返回带有数据的 HTML，客户端只需要解析HTML，直接构建 DOM 树。</p><p>SEO（Search Engine Optimization ） 搜索引擎优化：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。搜索引擎爬虫会爬取服务器返回的 HTML 文档，网页内容能被搜索到。</p><p>可以通过在网页中右键显示网页源代码能否查看到完整页面内容判断是否为服务端渲染。<br> 可以通过服务端渲染框架 Nuxt、Next 分别将 SPA 的 Vue 网页、React 网页改造为 SSR。</p><h3 id="ssr-与-csr-对比" tabindex="-1"><a class="header-anchor" href="#ssr-与-csr-对比" aria-hidden="true">#</a> SSR 与 CSR 对比</h3><table><thead><tr><th></th><th>SSR</th><th>CSR</th></tr></thead><tbody><tr><td>优点</td><td>1. 首屏加载速度快：客户端直接解析服务端返回的 HTML<br>2. SEO 友好，爬虫可直接爬取返回的 HTML 页面数据</td><td>1. 前后端分离<br>2. 用户体验好：页面局部改变，无需请求完整页面<br>3. 节省服务器性能</td></tr><tr><td>缺点</td><td>1. 前后端耦合<br>2. 用户体验差：页面局部改变，需要请求完整页面<br>3. 耗费服务器性能</td><td>1. 首屏加载速度慢：客户端等待 JS 加载完成才能渲染页面<br>2. SEO 不友好：通过 JS 渲染页面，爬虫爬不到页面数据</td></tr></tbody></table><p>参考资料</p>',20),p={href:"https://juejin.cn/post/6890810591968477191",target:"_blank",rel:"noopener noreferrer"},h=a(`<h3 id="window-onload-与-domcontentloaded" tabindex="-1"><a class="header-anchor" href="#window-onload-与-domcontentloaded" aria-hidden="true">#</a> window.onload 与 DOMContentLoaded</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 页面的全部资源加载完才执行，包括图片视频</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// DOM 渲染完成就执行，图片视频可能还没加载完（优先使用这个）</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="回流与重绘" tabindex="-1"><a class="header-anchor" href="#回流与重绘" aria-hidden="true">#</a> 回流与重绘</h2><p><strong>回流比重绘的性能代价高。 回流一定引起重绘，重绘不一定引起回流。</strong></p><h3 id="回流" tabindex="-1"><a class="header-anchor" href="#回流" aria-hidden="true">#</a> 回流</h3><p>回流（reflow）：当 DOM 元素的内容、尺寸、结构、位置发生改变，浏览器重新渲染部分或全部文档。</p>`,6),u={class:"hint-container tip"},S=e("p",{class:"hint-container-title"},"提示",-1),f={href:"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Introduction#normal_flow",target:"_blank",rel:"noopener noreferrer"},g=a('<p>会导致回流的操作：</p><ul><li>浏览器窗口大小发生改变</li><li>元素尺寸、位置发生改变</li><li>元素内容变化（文字大小、文字数量、图片大小等）</li><li>添加或者删除<strong>可见</strong>的 <code>DOM</code> 元素</li><li>激活 <code>CSS</code> 伪类（例如：<code>:hover</code>）</li></ul><h3 id="重绘" tabindex="-1"><a class="header-anchor" href="#重绘" aria-hidden="true">#</a> 重绘</h3><p>重绘（repaint）：当 DOM 元素的样式（背景色、边框颜色、文字颜色等）发生改变，浏览器重新绘制该 DOM 元素。</p>',4);function k(_,b){const t=c("ExternalLinkIcon");return d(),r("div",null,[l,e("ul",null,[e("li",null,[e("a",p,[n("谈谈我对服务端渲染(SSR)的理解"),o(t)])])]),h,e("div",u,[S,e("p",null,[n("文档流（又称标准流、正常流，英文：Normal flow）是指在不对页面进行任何布局控制时，浏览器默认的 HTML 布局方式 —— 引自 "),e("a",f,[n("MDN"),o(t)])])]),g])}const L=s(i,[["render",k],["__file","browser-render.html.vue"]]);export{L as default};
