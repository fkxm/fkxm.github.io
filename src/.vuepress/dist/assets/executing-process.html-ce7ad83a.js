import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as o}from"./app-60f9b323.js";const t={},e=o(`<h2 id="全局代码执行过程" tabindex="-1"><a class="header-anchor" href="#全局代码执行过程" aria-hidden="true">#</a> 全局代码执行过程</h2><h3 id="初始化全局对象" tabindex="-1"><a class="header-anchor" href="#初始化全局对象" aria-hidden="true">#</a> 初始化全局对象</h3><p>js引擎会在执行代码之前，会在堆内存创建一个全局对象：Global Object(GO)</p><ul><li>该对象所有的作用域都可以访问;</li><li>里面包含<code>Date</code>、<code>Array</code>、<code>String</code>、<code>Number</code>、<code>setTimeout</code>、<code>setInterval</code>等;</li><li>其中还有一个window属性指向自己;</li></ul><h3 id="执行上下文栈" tabindex="-1"><a class="header-anchor" href="#执行上下文栈" aria-hidden="true">#</a> 执行上下文栈</h3><ol><li>v8引擎为了执行代码, v8引擎内部会有一个执行上下文栈(Execution Context Stack, ECStack)(函数调用栈)</li><li>因为我们执行的是全局代码, 为了全局代码能够正常的执行, 需要创建 全局执行上下文(Global Execution Context)(全局代码需要被执行时才会创建)</li></ol><p>GEC被放入到ECS中里面包含两部分内容：</p><ul><li><p>第一部分：在代码执行前，在parser转成AST的过程中，会将全局定义的变量、函数等加入到<code>GlobalObject</code>中，但是并不会赋值;这个过程也称之为变量的作用域提升</p></li><li><p>第二部分：在代码执行中，对变量赋值，或者执行其他的函数</p></li></ul><p>GEC被放入到ECS中:</p><p><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220914171411.png" alt="全局代码执行过程1" loading="lazy"><br> GEC开始执行代码:</p><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220914171612.png" alt="全局代码执行过程2" tabindex="0" loading="lazy"><figcaption>全局代码执行过程2</figcaption></figure><h2 id="函数代码执行过程" tabindex="-1"><a class="header-anchor" href="#函数代码执行过程" aria-hidden="true">#</a> 函数代码执行过程</h2><p>在执行的过程中执行到一个函数时，就会根据函数体创建一个函数执行上下文（Functional Execution Context，简称FEC），并且压入到ECStack中。</p><p>FEC中包含三部分内容:</p><ul><li>第一部分：在解析函数成为AST树结构时，会创建一个Activation Object（AO）(AO中包含形参、arguments、函数定义和指向函数对象、定义的变量)</li><li>第二部分：作用域链：由VO（在函数中就是AO对象）和父级VO组成，查找时会一层层查找</li><li>第三部分：this绑定的值</li></ul><p>FEC被放入到ECS中:</p><p><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220914173128.png" alt="函数代码执行过程1" loading="lazy"><br> FEC开始执行代码:</p><p><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220914173615.png" alt="函数代码执行过程2" loading="lazy"><br><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220914173936.png" alt="函数代码执行过程3" loading="lazy"></p><p>注意：</p><ul><li>当我们查找一个变量时,真实的查找路径是沿着作用域链来查找</li><li>函数的父级作用于跟它定义的位置有关,与调用位置没有关系</li></ul><h2 id="嵌套函数代码执行过程" tabindex="-1"><a class="header-anchor" href="#嵌套函数代码执行过程" aria-hidden="true">#</a> 嵌套函数代码执行过程</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 示例代码</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
  <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">20</span>

  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220914180240.png" alt="嵌套函数代码执行过程" tabindex="0" loading="lazy"><figcaption>嵌套函数代码执行过程</figcaption></figure><h2 id="函数调用函数执行过程" tabindex="-1"><a class="header-anchor" href="#函数调用函数执行过程" aria-hidden="true">#</a> 函数调用函数执行过程</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 示例代码</span>
<span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;hello,global&quot;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;hello,bar&quot;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220914180649.png" alt="函数调用函数执行过程" tabindex="0" loading="lazy"><figcaption>函数调用函数执行过程</figcaption></figure><h2 id="作用域提升面试题" tabindex="-1"><a class="header-anchor" href="#作用域提升面试题" aria-hidden="true">#</a> 作用域提升面试题</h2><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220914194704.png" alt="面试题1" tabindex="0" loading="lazy"><figcaption>面试题1</figcaption></figure><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/微信图片_20220914194916.png" alt="面试题2" tabindex="0" loading="lazy"><figcaption>面试题2</figcaption></figure><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/1.png" alt="面试题3" tabindex="0" loading="lazy"><figcaption>面试题3</figcaption></figure><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/2.png" alt="面试题4" tabindex="0" loading="lazy"><figcaption>面试题4</figcaption></figure><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/3.png" alt="面试题5" tabindex="0" loading="lazy"><figcaption>面试题5</figcaption></figure><h2 id="js内存管理及垃圾回收" tabindex="-1"><a class="header-anchor" href="#js内存管理及垃圾回收" aria-hidden="true">#</a> JS内存管理及垃圾回收</h2><ul><li>JS对于基本数据类型内存的分配会在执行时，直接在栈空间进行分配</li><li>JS对于复杂数据类型内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针返回值变量引用</li></ul><p>常见的GC算法</p><ul><li>引用计数法：当一个对象有一个引用指向它时，那么这个对象的引用就+1，当一个对象的引用为0时，这个对象就可以被销毁掉</li></ul><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/1.PNG" alt="引用计数法" tabindex="0" loading="lazy"><figcaption>引用计数法</figcaption></figure><ul><li>标记清除法：这个算法是设置一个根对象（root object），垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对于哪些没有引用到的对象，就认为是不可用的对象</li></ul><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220914202146.png" alt="标记清除法" tabindex="0" loading="lazy"><figcaption>标记清除法</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><p>GEC(global excution context)全局执行上下文：执行全局代码</p></li><li><p>FEC(function excution context)函数执行上下文：执行函数代码</p></li><li><p>全局：VO:GO(es5之前)</p></li><li><p>函数：VO:AO(es5之前)</p></li></ul>`,41),p=[e];function c(i,l){return a(),s("div",null,p)}const d=n(t,[["render",c],["__file","executing-process.html.vue"]]);export{d as default};
