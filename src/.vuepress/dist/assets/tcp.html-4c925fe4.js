import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as i,c as a,a as e,b as r,e as l,f as t}from"./app-60f9b323.js";const n={},s=t('<p>TCP（<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol，传输控制协议 ）是一种基于连接的、可靠的传输层协议。TCP 协议建立连接的本质是交换双方的状态（比如序号）<br> UDP（<strong>U</strong>ser <strong>D</strong>atagram <strong>P</strong>rotocol，用户数据报协议）是一种基于非连接的、不可靠的传输层协议</p><p>TCP 与 UDP 的区别：</p><ul><li>TCP 基于连接（类比打电话），稳定。常用于文件传输、网页浏览等</li><li>UDP 基于非连接（类比写信），速度快，但不稳定会丢包。常用于语音通话、视频直播。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>DDOS(distributed denial of service)：分布式拒绝服务。比如 SYN 攻击：通过向服务端不停发送 <code>SYN</code> 请求，但不响应<code>SYN+ACK</code> 报文，从而消耗服务端的资源。</p></div><h2 id="tcp-报文" tabindex="-1"><a class="header-anchor" href="#tcp-报文" aria-hidden="true">#</a> TCP 报文</h2><p><code>TCP</code>被封装在<code>IP</code>数据报中</p><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220509041225.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>序号（seq）：在初次建立连接的时候，客户端和服务端都会为本次的连接随机初始化一个序号（解决<strong>网络包乱序</strong>的问题）</p><p>确认号（ack）：表示「接收端」告诉「发送端」对上一个数据包已经成功接收（解决<strong>网络包丢失</strong>的问题）</p><p>标志位：SYN/FIN/ACK。<code>SYN</code> 用来同步建立连接，<code>FIN</code> 断开连接，<code>ACK</code> 应答</p><h2 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手" aria-hidden="true">#</a> 三次握手</h2><p>握手过程：</p><ol><li>客户端向服务端发送 <code>SYN</code>，<code>seq = x</code><br> （x 是客户端随机生成的初始序号 <code>ISN</code>）</li><li>服务端接收到客户端的 <code>SYN</code> 后，向客户端发送 <code>SYN</code>、<code>ACK</code>，<code>seq = y</code>，<code>ack = x + 1</code>。<br> （<code>y</code> 是服务端随机生成的初始序号 <code>ISN</code>，确认号 <code>ack</code> = 对方的序号 + 1）</li><li>客户端接收到服务端的 <code>SYN</code>、<code>ACK</code> 后，向服务端发送 <code>ACK</code>，<code>ack = y + 1</code>。完成握手。</li></ol><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220509041553.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>简单理解：</p><ul><li>A：我要跟你通信，你听得到吗？</li><li>B：可以听到，你听得到吗？</li><li>A：我可以听到</li></ul><h2 id="为什么需要至少三次握手" tabindex="-1"><a class="header-anchor" href="#为什么需要至少三次握手" aria-hidden="true">#</a> 为什么需要至少三次握手</h2><p>为了防止失效的连接请求报文段被服务端接收，从而产生错误。为了在不可靠的信道上建立起可靠连接，必须<strong>至少握手三次</strong>。</p><p>假设两次握手后，建立连接：</p><ol><li>客户端发送的 <code>SYN</code> 可能在某个网络节点滞留，长时间未收到服务端的 <code>ACK</code>。</li><li>客户端会再次重发 <code>SYN</code>，\b服务端成功接收到后，返回 <code>SYN + ACK</code>，此时成功建立连接，双方进入数据传输状态。</li><li>但是如果第一次发送的 <code>SYN</code> 因为网络恢复正常，又送达到服务端。服务端会误认为是客户端又发起了一个新的连接，返回 <code>SYN + ACK</code>，服务端进入等待数据状态。</li><li>最终导致双方状态不一致。</li></ol><h2 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手" aria-hidden="true">#</a> 四次挥手</h2><p>挥手过程：</p><ol><li>客户端发送 <code>FIN</code>，表示释放连接</li><li>服务端收到客户端的 <code>FIN</code> 后，回复 <code>ACK</code></li><li>服务端可能还有数据要发送给客户端，等服务端确认自己已经没有数据需要发送给客户端之后，就发送 <code>FIN</code> 给客户端</li><li>客户端收到服务端的 <code>FIN</code> 之后，回应 <code>ACK</code></li></ol><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220509041702.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>简单理解：</p><ul><li>A：我要跟你断开通信</li><li>B：知道了，等一下，我还有东西要发给你</li><li>B：好了，我发完了</li><li>A：好的，我知道了</li></ul><h2 id="为什么需要四次挥手" tabindex="-1"><a class="header-anchor" href="#为什么需要四次挥手" aria-hidden="true">#</a> 为什么需要四次挥手</h2><p>服务端接收到客户端的 <code>FIN</code>，并回复 <code>ACK</code> 之后，可能还有数据要发送，确认没有数据要发送后再发送 <code>FIN</code>。</p><h2 id="为什么需要超时等待-2msl" tabindex="-1"><a class="header-anchor" href="#为什么需要超时等待-2msl" aria-hidden="true">#</a> 为什么需要超时等待 2MSL</h2><p>MSL：Maximum Segment Lifetime 最大报文寿命，超过这个时间报文将被丢弃。</p><p>原因：</p><ol><li>保证服务端能够收到 <code>ACK</code>（如果收不到，服务端会重发 <code>FIN</code>）</li><li>确保在下次创建新连接时，不会出现先前连接的报文。</li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',33),p={href:"https://www.bilibili.com/video/BV1kV411j7hA",target:"_blank",rel:"noopener noreferrer"};function h(g,u){const o=d("ExternalLinkIcon");return i(),a("div",null,[s,e("ul",null,[e("li",null,[e("a",p,[r("一条视频讲清楚TCP协议与UDP协议-什么是三次握手与四次挥手"),l(o)])])])])}const N=c(n,[["render",h],["__file","tcp.html.vue"]]);export{N as default};
