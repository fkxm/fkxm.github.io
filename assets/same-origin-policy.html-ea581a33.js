import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as p,a,b as o,e as c,f as l}from"./app-62caafbf.js";const u={},i=l(`<h2 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h2><p>同源策略：浏览器的安全策略，用于限制一个源如何与另一个源的资源进行交互，保障用户隐私、数据安全，避免 XSS、CSFR 等网络攻击。</p><p>浏览器默认开启了同源策略，向其他源发出的请求可以发出，但响应会被浏览器拦截，可以通过插件关闭（不建议）。另外，Postman 没有使用同源策略，才能随意前后端联调。</p><h2 id="源" tabindex="-1"><a class="header-anchor" href="#源" aria-hidden="true">#</a> 源</h2><p>源 = 协议 + 域名+ 端口号<br> URL = 协议 + 域名 + 端口号 + 资源路径 [+ 参数 + 查询 + 锚点]<br> 同源：<strong>协议、域名、端口号</strong>完全一致。即便两个不同的域名指向同一个ip地址，也非同源</p><p><code>https://example.com</code> 与以下 URL 同源判断：</p><table><thead><tr><th>URL</th><th style="text-align:center;">判断</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td><code>http://example.com</code></td><td style="text-align:center;">不同源</td><td style="text-align:center;">协议不同</td></tr><tr><td><code>https://www.example.com</code></td><td style="text-align:center;">不同源</td><td style="text-align:center;">子域名不同</td></tr><tr><td><code>https://www.example.cn</code></td><td style="text-align:center;">不同源</td><td style="text-align:center;">主域名不同</td></tr><tr><td><code>https://example.com:443</code></td><td style="text-align:center;">同源</td><td style="text-align:center;">https 默认端口443<br>http 默认端口 80</td></tr></tbody></table><img class="medium-img" src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/域名.png"><p>顶级域有 <code>.com</code>、<code>.org</code>、<code>.edu</code>、<code>.cn</code>、<code>.us</code> 等<br><code>www.</code> 是互联网早期常用的子域名，表示提供网站服务，以与 <code>mail.</code> 邮件服务等作区分。<br> 顶级域名需要备案，而二级域名不需要单独备案，只要它所处的一级域名已经备案，就能直接解析。<br> 通过 <code>window.origin</code> 或 <code>location.origin</code> 可以得到当前网页源</p><h2 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h2><p>跨域：绕开浏览器的同源策略限制，在不同域之间相互请求资源。实现跨域有三种常用方式：JSONP、CORS、服务器代理。</p><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h3><p>JSONP：<strong>JSON</strong> with <strong>P</strong>adding。利用 <code>script</code> 标签不受浏览器同源策略的限制，进行跨域 <code>GET</code> 请求。注意它不是 <code>AJAX</code> 请求。</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 前端 --&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zh-CN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://backend.com/data?callback=getName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 后端：将数据传入回调函数，再拼接为字符串返回。</span>
<span class="token comment">// query.callback 即 getName</span>
response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token punctuation">.</span>callback<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">({
    &quot;name&quot;: &quot;Nevermore&quot;
  })</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span>
</code></pre></div><p>过程：</p><ol><li>前端利用 <code>script</code> 标签的 <code>src</code> 属性可以请求外部的 JS 文件的特性，向后端发送 <code>GET</code> 请求</li><li>后端将数据传入回调函数</li><li>浏览器加载 <code>script</code> 标签，因为指定了类型 <code>type=&quot;text/javascript&quot;</code>，于是执行服务端返回的函数</li></ol><p>优缺点：</p><ul><li>优点：使用简单，没有兼容性问题</li><li>缺点：只支持 GET 请求</li></ul><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> CORS</h3><p>CORS：<strong>C</strong>ross-<strong>O</strong>rigin <strong>R</strong>esource <strong>S</strong>haring，跨源资源共享（又称跨域资源共享）</p><p>请求又分简单请求与复杂请求（非简单请求）：简单请求不会触发 CORS 的 <code>OPTIONS</code>预检请求，复杂请求一般会修改数据库数据，浏览器需要预先检查下服务器是否允许该请求。</p><p>简单请求主要满足以下两大条件：</p><p>条件 1：使用下列方法之一：</p><ul><li>GET</li><li>HEAD</li><li>POST</li></ul><p>条件 2：<code>Content-Type</code> 的值仅限于下列三者之一：</p><ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul><p>POST 提交 JSON 数据是复杂请求，POST 提交 form 表单数据是简单请求。</p><p>如何通过 CORS 跨域：</p><ul><li>对于简单请求：服务端在响应头设置</li></ul><div class="language-http" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://server</span></span>
// 或 * 允许所有源访问
<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">* </span></span>
</code></pre></div><ul><li>对于复杂请求：服务端在响应头设置</li></ul><div class="language-http" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://client</span></span>
<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Methods</span><span class="token punctuation">:</span> <span class="token header-value">GET, HEAD, PUT, POST, DELETE, PATCH, OPTIONS</span></span>
<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Headers</span><span class="token punctuation">:</span> <span class="token header-value">Content-Type</span></span>
</code></pre></div><p>如果需要携带 <code>Cookie</code>：</p><ul><li>客户端 AJAX 请求需要设置<code>xhr.withCredentials: true</code></li><li>服务端响应头需要设置 <code>Access-Control-Allow-Credentials: true</code></li></ul><h3 id="服务器代理" tabindex="-1"><a class="header-anchor" href="#服务器代理" aria-hidden="true">#</a> 服务器代理</h3><p>Nginx 反向代理，监听某个域名的，再转发到另一个域名。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,38),r={href:"https://juejin.cn/post/6844903767226351623",target:"_blank",rel:"noopener noreferrer"};function d(k,g){const n=t("ExternalLinkIcon");return e(),p("div",null,[i,a("ul",null,[a("li",null,[a("a",r,[o("九种跨域方式实现原理（完整版）"),c(n)])])])])}const x=s(u,[["render",d],["__file","same-origin-policy.html.vue"]]);export{x as default};
