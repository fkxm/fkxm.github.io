import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,f as o}from"./app-c618f770.js";const n={},l=o("<p>媒体查询</p><p><code>@media only screen and (min-width: 375px) and (max-width: 413px) {}</code></p><p>em 相对于自己的 font-size（不常用）</p><p>rem 相对于根元素 html 的 font-size（常用）</p><ul><li>动态设置html的font-size（font-size：视口的宽度 / 10，可引入lib-flexible）</li><li>换算成rem的单位（webpack、pxtorem插件、Less混入）</li></ul><p>vh 相对于视口高度的百分比（100vh）</p><p>vw 相对于视口宽度百分比（100vw）</p><p>vmax、vmin 获取视口高度与宽度相比的最大、最小值（手机横竖旋转视口宽高会对调）</p><p>window.screen.height 显示屏高度</p><p>window.innerHeight 视口高度（除去浏览器导航栏等浏览器自带功能键的高度）</p><p>document.body.clientHeight 网页文档 body 高度</p><p><strong>vw相比于rem的优势</strong>（1rem = 10vw）：</p><ul><li>不需要去计算html的font-size，也不需要给html设置font-size；</li><li>不会因为设置html的font-size，而必须给body再设置一个font-size，防止继承；</li><li>因为不依赖font-size的尺寸，所以不用担心某些原因html的font-size尺寸被篡改，导致页面尺寸混乱；</li><li>更加语义化，1vw刚好是百分之一的viewport的大小；</li><li>具备rem之前所有的优点；</li></ul>",13),p=[l];function s(r,m){return i(),t("div",null,p)}const f=e(n,[["render",s],["__file","responsive.html.vue"]]);export{f as default};
