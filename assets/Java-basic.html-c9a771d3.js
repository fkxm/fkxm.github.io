import{_ as e}from"./HashMap-aff1b9db.js";import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c,a as n,b as a,e as d,f as s}from"./app-c618f770.js";const r="/assets/stringBulder-1bb1039e.png",p="/assets/拷贝-1b6ca63f.png",u="/assets/异常-1ac0b33a.png",h="/assets/IO流-6bd0d9aa.png",g={},k=s('<h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><h3 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别" aria-hidden="true">#</a> &amp;和&amp;&amp;的区别</h3><p>共同点：</p><ul><li>都可以用作逻辑与的运算符，当运算符两边的表达式的结果都为 true 时，整个运算结果才为 true。</li></ul><p>不同点：</p><ul><li>&amp;&amp;还具有短路的功能，即如果第一个表达式为 false，则不再计算第二个表达式。</li><li>&amp;还可以用作位运算符，即两位同时为“1”，结果才为“1”</li></ul><h3 id="隐式转换问题" tabindex="-1"><a class="header-anchor" href="#隐式转换问题" aria-hidden="true">#</a> 隐式转换问题</h3><p><strong>隐式转换</strong>：<code>byte</code>,<code>short</code>,<code>char</code>--&gt;<code>int</code>--&gt;<code>long</code>--&gt;<code>float</code>--&gt;<code>double</code></p><p><strong>注意</strong>：从小到大可以隐式转换，数据类型将自动提升（整数和浮点数的存储规则不一样，记住一点long的范围是小于float的）</p><h4 id="switch-语句能否作用在-byte-上-能否作用在-long-和string上" tabindex="-1"><a class="header-anchor" href="#switch-语句能否作用在-byte-上-能否作用在-long-和string上" aria-hidden="true">#</a> switch 语句能否作用在 byte 上，能否作用在 long 和string上?</h4><ul><li><code>switch（expr1）</code>中，expr1只能是一个整数表达式或者枚举常量，整数表达式可以是 <code>int</code>基本类型或 <code>Integer</code>包装类型</li><li>switch语句能作用在 <code>byte short char</code>上，因为可以隐式转化为<code>int</code>类型</li><li>switch语句能作用在 <code>long</code> 和 <code>String</code>上，因为不能隐式转换成 <code>int</code>类型</li></ul><h4 id="short-s1-1-s1-s1-1-正确吗-short-s1-1-s1-1-正确吗" tabindex="-1"><a class="header-anchor" href="#short-s1-1-s1-s1-1-正确吗-short-s1-1-s1-1-正确吗" aria-hidden="true">#</a> <code>short s1 = 1; s1 = s1 + 1;</code>正确吗? <code>short s1 = 1; s1 += 1;</code>正确吗?</h4><ul><li><code>short s1 = 1; s1 = s1 + 1;</code> 由于 <code>s1+1</code>运算时会自动提升表达式的类型，所以结果是<code>int</code>型，再赋值给<code>short</code>类型 <code>s1</code>时，编译错误。</li><li><code>short s1 = 1; s1 += 1;</code> 由于<code>+=</code>是 java 语言规定的运算符，java 编译器会对它进行特殊处理，因此可以正确编译。</li></ul><h3 id="抽象类和接口有什么区别" tabindex="-1"><a class="header-anchor" href="#抽象类和接口有什么区别" aria-hidden="true">#</a> 抽象类和接口有什么区别</h3><p><strong>相同点</strong>：</p><ol><li>不能被实例化</li><li>可以作为引用类型</li><li>都需要对其中的抽象方法全部实现</li></ol><p><strong>不同点</strong>：</p><p>抽象类：（不能创建实例对象，允许有抽象方法）</p><ol><li>可有构造方法</li><li>可有抽象方法和具体实现方法（非抽象方法）</li><li>成员可以是<code>private</code>,<code>protected</code></li><li>可以有普通成员变量</li><li>可以包含静态方法</li><li>只能用<code>extend</code>单继承</li></ol><p>接口（接口中的方法都是抽象方法，abstract关键字可省略）</p><ol><li>不能有构造方法</li><li>只能有抽象方法（Java8后可以有默认实现方法<code>default</code>修饰：类优先原则）</li><li>成员变量类型默认是<code>public static final</code></li><li>成员变量都是静态常量**</li><li>抽象方法默认类型且只能是<code>public abstract</code></li><li>Java8之后可包含静态方法</li><li>用<code>implements</code>实现多继承</li></ol><p><strong>何时用？</strong></p><p>描述事物的本质/一种概念时用抽象类，描述一种操作时用接口（如：is/can）</p><h3 id="hashcode与-equals-重要" tabindex="-1"><a class="header-anchor" href="#hashcode与-equals-重要" aria-hidden="true">#</a> hashCode与 equals (重要)</h3><figure><img src="'+e+'" alt="HashMap原理" tabindex="0" loading="lazy"><figcaption>HashMap原理</figcaption></figure><ul><li>如果两个对象的<code>hashCode</code> 值相等，那这两个对象不一定相等（哈希碰撞）。</li><li>如果两个对象的<code>hashCode</code>值相等并且<code>equals()</code>方法返回 <code>true</code>，我们才认为这两个对象相等。</li><li>如果两个对象的<code>hashCode</code> 值不相等，我们就可以直接认为这两个对象不相等。</li><li><code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等。</li></ul><h3 id="和-equals-的区别" tabindex="-1"><a class="header-anchor" href="#和-equals-的区别" aria-hidden="true">#</a> == 和 equals() 的区别</h3><p><code>==</code><strong>对于基本类型和引用类型的作用效果是不同的(Java只有值传递)</strong>:</p><ul><li>对于基本数据类型来说，<code>==</code> 比较的是值。</li><li>对于引用数据类型来说，<code>==</code> 比较的是对象的内存地址。</li></ul><p><code>equals()</code><strong>方法存在两种使用情况</strong>:</p><ul><li>类没有覆盖<code>equals()</code>方法：通过<code>equals()</code>比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 <code>Object</code>类<code>equals()</code>方法。</li><li>类覆盖了<code>equals()</code>方法 ：一般我们都覆盖<code>equals()</code>方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</li></ul><h3 id="构造方法有哪些特点-是否可被重写" tabindex="-1"><a class="header-anchor" href="#构造方法有哪些特点-是否可被重写" aria-hidden="true">#</a> 构造方法有哪些特点？是否可被重写?</h3><p>构造方法特点如下：</p><ul><li>名字与类名相同。</li><li>没有返回值，但不能用 void 声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ul><p>构造方法不能被 override（重写）即不能被继承，但是可以 overload（重载）原因：</p>',35),b={href:"https://so.csdn.net/so/search?q=%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},f=s('<h3 id="重载和重写的区别" tabindex="-1"><a class="header-anchor" href="#重载和重写的区别" aria-hidden="true">#</a> 重载和重写的区别</h3><p><strong>重载</strong>：发⽣在同⼀个类中，⽅法名必须相同，参数类型不同、个数不同、顺序不同，⽅法返回值和访问修饰符可以不同。</p><p><strong>重写</strong>：重写发⽣在运⾏期，是⼦类对⽗类的允许访问的⽅法的实现过程进⾏重新编写。</p><ol><li>返回值类型、⽅法名、参数列表必须相同，抛出的异常范围⼩于等于⽗类，访问修饰符范围 ⼤于等于⽗类。</li><li>如果⽗类⽅法访问修饰符为 private/final/static 则⼦类就不能重写该⽅法，但是被 static 修饰 的⽅法能够被再次声明。</li><li>构造器 Constructor 不能被继承，因此构造⽅法⽆法被重写</li></ol><p>综上：重写就是⼦类对⽗类⽅法的重新改造，外部样⼦不能改变，内部逻辑可以改变</p><hr><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>区别点</strong></td><td><strong>重载⽅法</strong></td><td><strong>重写⽅法</strong></td></tr><tr><td><strong>发⽣范围</strong></td><td>同一个类</td><td>子类</td></tr><tr><td><strong>参数列表</strong></td><td>必须修改</td><td>一定不能修改（⽅法名相同、形参列表相同）</td></tr><tr><td><strong>返回类型</strong></td><td>可修改</td><td>⼦类⽅法返回值类型应⽐⽗类⽅法返回值类型更⼩或相等（如果⽅法的返回类型是void和基本数据类型，则返回值重写时不可修改。但是如果⽅法的返回值是引⽤类型，重写时是可以返回该引⽤类型的⼦类的。）</td></tr><tr><td><strong>异常</strong></td><td>可修改</td><td>⼦类⽅法声明抛出的异常类应⽐⽗类⽅法声明抛出的异常类更⼩或相等</td></tr><tr><td><strong>访问修饰符</strong></td><td>可修改</td><td>⼦类⽅法的访问权限应⽐⽗类⽅法的访问权限更⼤或相等。</td></tr><tr><td><strong>发⽣阶段</strong></td><td>编译时</td><td>运行期</td></tr></tbody></table><h3 id="final-finally-finalize区别" tabindex="-1"><a class="header-anchor" href="#final-finally-finalize区别" aria-hidden="true">#</a> final,finally,finalize区别</h3><ul><li><code>final</code> ：用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。内部类要访问局部变量，局部变量必须定义成 final 类型。</li><li><code>finally</code>： 异常处理语句结构的一部分，表示总是执行。</li><li><code>finalize</code> ：<code>Object</code>类的一个方法，在GC垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。JVM 不保证此方法总被调用。</li></ul><h3 id="string-stringbuffer和stringbuilder-的区别是什么-string-为什么是不可变的" tabindex="-1"><a class="header-anchor" href="#string-stringbuffer和stringbuilder-的区别是什么-string-为什么是不可变的" aria-hidden="true">#</a> String,StringBuffer和StringBuilder 的区别是什么? String 为什么是不可变的?</h3><figure><img src="'+r+`" alt="StringBuilder" tabindex="0" loading="lazy"><figcaption>StringBuilder</figcaption></figure><p><strong>可变性：</strong></p><ul><li><code>String</code> 类中使用 <code>final</code> <code>private</code> 关键字修饰字符数组来保存字符串，所以不可变。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>StringBuilder</code>与 <code>StringBuffer</code>都继承自 <code>AbstractStringBuilder</code>类，使用字符数组保存字符串，但是没有使用<code>final</code> 和 - <code>private</code> 关键字修饰，最关键的是这个 <code>AbstractStringBuilder</code>类还提供了很多修改字符串的方法比如 <code>append</code> 方法，所以这两种对象都是可变的。</li></ul><p><strong>线程安全性</strong>：</p><ul><li><code>String</code> 中的对象是不可变的，可以理解为常量，线程安全。</li><li><code>StringBuffer</code>对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。—&gt;效率低！</li><li><code>StringBuilder</code>并没有对方法进行加同步锁，所以是非线程安全的。—&gt;效率高！</li></ul><p><strong>对于三者使用的总结</strong>:</p><ol><li>操作少量的数据: 适用<code>String</code></li><li>单线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuilde</code></li><li>多线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuffe</code></li></ol><h3 id="java-中的几种基本数据类型" tabindex="-1"><a class="header-anchor" href="#java-中的几种基本数据类型" aria-hidden="true">#</a> Java 中的几种基本数据类型</h3><ul><li>6 种数字类型 ：<code>byte short int long float double</code></li><li>1 种字符类型：<code>char</code></li><li>1 种布尔型：<code>boolean</code></li><li>包装类分别为：<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code></li></ul><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr></tbody></table><table><thead><tr><th><code>char</code></th><th>16</th><th>2</th><th>&#39;u0000&#39;</th></tr></thead><tbody><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td></td><td>false</td></tr></tbody></table><h3 id="integer-与-int的区别" tabindex="-1"><a class="header-anchor" href="#integer-与-int的区别" aria-hidden="true">#</a> Integer 与 int的区别</h3><p>Integer默认值为null，int的默认值为0；包装类型不赋值就是 <code>Null</code> ，而基本类型有默认值且不是 <code>Null</code>。</p><h3 id="包装类型的常量池" tabindex="-1"><a class="header-anchor" href="#包装类型的常量池" aria-hidden="true">#</a> 包装类型的常量池</h3><p><code>Byte Short Integer Long</code> ：<strong>[-128，127]</strong></p><p><code>Character</code> ：<strong>[0,127]</strong></p><p><code>Boolean</code> ： <code>True</code> or <code>False</code></p><p><code>Float Double</code>：<strong>无</strong></p><h3 id="自动装箱、拆箱" tabindex="-1"><a class="header-anchor" href="#自动装箱、拆箱" aria-hidden="true">#</a> 自动装箱、拆箱</h3><ul><li><code>Integer i = 10</code> 等价于 <code>Integer i = Integer.valueOf(10)</code></li><li><code>int n = i</code> 等价于 <code>int n = i.intValue()</code>;</li></ul><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>Integer i = 10;  //装箱
int n = i;   //拆箱
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用域-public-private-protected-default的区别" tabindex="-1"><a class="header-anchor" href="#作用域-public-private-protected-default的区别" aria-hidden="true">#</a> 作用域 public，private，protected，default的区别</h3><table><thead><tr><th>作用域</th><th>当前类</th><th>同一包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="string-s-new-string-ab-创建了几个-string-对象" tabindex="-1"><a class="header-anchor" href="#string-s-new-string-ab-创建了几个-string-对象" aria-hidden="true">#</a> String s = new String(&quot;ab&quot;)创建了几个 String 对象?</h3><p>1个或2个</p><ul><li>new String() 创建一个新的对象</li><li>&quot;ab&quot;对应一个对象，这个对象放在字符串常量池中（初始时创建对象并放入）</li></ul><h3 id="深拷贝和浅拷贝区别-什么是引用拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝区别-什么是引用拷贝" aria-hidden="true">#</a> 深拷贝和浅拷贝区别？什么是引用拷贝？</h3><ul><li><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</li><li><strong>深拷贝</strong> ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。</li></ul><figure><img src="`+p+`" alt="拷贝" tabindex="0" loading="lazy"><figcaption>拷贝</figcaption></figure><h3 id="数组和list如何相互转化" tabindex="-1"><a class="header-anchor" href="#数组和list如何相互转化" aria-hidden="true">#</a> 数组和List如何相互转化</h3><ul><li>List转换成数组：<code>List.toArray()</code>/<code>List.toArray(T[] a)</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 注意基本类型是不能作为泛型参数的</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;list-a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;list-b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组转换成List：<code>Arrays.asList()</code>/<code>Collections.addAll(list,array[])</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Collections</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get和post的区别" tabindex="-1"><a class="header-anchor" href="#get和post的区别" aria-hidden="true">#</a> Get和Post的区别</h3><ul><li>GET在浏览器回退（后退刷新）时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可收藏为书签，而POST不可以。</li><li>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求在URL中传送的参数是有长度限制的，而POST没有限制。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET参数通过URL传递，POST放在请求体中。</li><li>GET产生一个TCP数据包，POST产生两个TCP数据包。</li></ul><h3 id="转发-forward-和重定向-redirect-的区别" tabindex="-1"><a class="header-anchor" href="#转发-forward-和重定向-redirect-的区别" aria-hidden="true">#</a> 转发(Forward)和重定向(Redirect)的区别</h3><p><strong>本质：转发是服务器行为，重定向是客户端行为。</strong></p><ul><li><p>从地址栏显示来说：</p><ol><li>forward是服务器内部的重定向，服务器直接访问目标地址的 url网址，把里面的东西读取出来，但是客户端并不知道，因此用forward的话，客户端浏览器的网址是不会发生变化的。</li><li>redirect是服务器根据逻辑，发送一个状态码，告诉浏览器重新去请求那个地址，所以地址栏显示的是新的地址。</li></ol></li><li><p>从数据共享来说：</p><ol><li>由于在整个定向的过程中用的同一个request，因此forward会将request的信息带到被重定向的jsp或者servlet中使用。即可以共享数据。</li><li>redirect不能共享数据。</li></ol></li><li><p>从运用的地方来说：</p><ol><li>forward一般用于用户登录的时候，根据角色转发到相应的模块。</li><li>redirect一般用于用户注销登录时返回主页面或者跳转到其他网站。</li></ol></li><li><p>从效率来说：</p><ol><li>forward效率高。</li><li>redirect效率低。</li></ol></li><li><p>从请求的次数来说：</p><ol><li>forward只有一次请求。</li><li>redirect有两次请求。</li></ol></li></ul><p>举例说明：</p><ul><li>假设你去办理某个执照，重定向：你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，白己乘车去了B局。转发：你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。</li></ul><h3 id="cookie和session的区别" tabindex="-1"><a class="header-anchor" href="#cookie和session的区别" aria-hidden="true">#</a> Cookie和Session的区别</h3><p><strong>Cookie 一般用来保存用户信息</strong> 比如①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③登录一次网站后访问网站其他页面不需要重新登录。</p><p><strong>Session 的主要作用就是通过服务端记录用户的状态</strong>。 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</p><ul><li>cookie是存放在浏览器上的，session是存放在服务器上的。</li><li>cookie数据不安全，如果考虑到安全应使用session。</li><li>session会增加服务端的内存压力,考虑到减轻服务器性能方面，应当使用cookie。</li><li>cookie只能存放一对字符串k-v</li></ul><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><h3 id="什么是泛型-伪泛型-类型擦除" tabindex="-1"><a class="header-anchor" href="#什么是泛型-伪泛型-类型擦除" aria-hidden="true">#</a> 什么是泛型？伪泛型？类型擦除？</h3><p><strong>泛型：</strong></p><ul><li>JDK1.5引入</li><li>本质是参数化类型，也就是说所操作的数据类型被指定为一个参数</li><li>作用：提高代码的复用性</li></ul><p><strong>伪泛型：</strong></p><ul><li>Java 的泛型其实是伪泛型，因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除</li></ul><p><strong>类型擦除：</strong></p><ul><li>将所有的泛型信息替换为具体的类型，就像完全没有泛型一样</li></ul><h3 id="基本类型能不能作为泛型" tabindex="-1"><a class="header-anchor" href="#基本类型能不能作为泛型" aria-hidden="true">#</a> 基本类型能不能作为泛型？</h3><ul><li>不能</li><li>因为类型擦除后，变为原始类型<code>Object</code>，但是<code>Object</code>类型不能存储<code>Int</code>型，只能引用<code>Integer</code>的值</li></ul><h3 id="如何理解泛型的编译器检查" tabindex="-1"><a class="header-anchor" href="#如何理解泛型的编译器检查" aria-hidden="true">#</a> 如何理解泛型的编译器检查</h3><ul><li>Java编译器是通过先检查代码中泛型类型，然后在进行类型擦除，再进行编译</li></ul><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h2><h3 id="什么是反射-反射的核心类有哪些-应用场景" tabindex="-1"><a class="header-anchor" href="#什么是反射-反射的核心类有哪些-应用场景" aria-hidden="true">#</a> 什么是反射？反射的核心类有哪些？应用场景？</h3><p><strong>反射：</strong></p><ul><li>在运行的时候，可以通过反射获取任意一个类的所有属性和方法，还可以调用这些方法和属性</li><li><strong>作用</strong>：使代码更加灵活，但性能会有影响</li></ul><p><strong>核心类：</strong></p><ul><li><code>Class</code>类：<strong><code>Class.forName()</code>、<code>object.getClass()</code>、<code>xxxClassLoader.loadClass()</code></strong></li><li><code>Field</code>类</li><li><code>Method</code>类</li><li><code>Constructor</code>类</li></ul><p><strong>应用场景</strong>：</p><ul><li>框架中的JDK动态代理</li><li>注解</li></ul><h3 id="jdk动态代理和cglib动态代理是什么" tabindex="-1"><a class="header-anchor" href="#jdk动态代理和cglib动态代理是什么" aria-hidden="true">#</a> JDK动态代理和CGLIB动态代理是什么？</h3><p>动态代理：</p><ul><li>JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的</li></ul><p>JDK动态代理：只能代理实现了接口的类（效率更高）</p><ul><li>核心类：<code>InvocationHandler</code> 接口和<code>Proxy</code>类</li><li>定义一个<strong>接口</strong>及其实现类；</li><li>实现**<code>InvocationHandler</code>**接口并重写<code>invoke(Object proxy, Method method, Object[] args)</code>方法</li><li>通过<code>Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code>方法创建代理对象；</li></ul><p>CGLIB动态代理：<strong>可以代理未实现任何接口的类</strong>且需要添加依赖</p><ul><li>核心类：<code>MethodInterceptor</code>接口和<code>Enhancer</code>类</li><li>定义一个类；</li><li>自定义 <code>MethodInterceptor</code>接口并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似；</li><li>通过 <code>Enhancer</code>类的 <code>create()</code>创建代理类；</li></ul><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><h3 id="异常有哪些" tabindex="-1"><a class="header-anchor" href="#异常有哪些" aria-hidden="true">#</a> 异常有哪些？</h3><figure><img src="`+u+`" alt="异常" tabindex="0" loading="lazy"><figcaption>异常</figcaption></figure><h3 id="try-catch-finally中finally注意事项" tabindex="-1"><a class="header-anchor" href="#try-catch-finally中finally注意事项" aria-hidden="true">#</a> try-catch-finally中finally注意事项</h3><ul><li><strong><code>try</code>块</strong>： 用于捕获异常。其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。</li><li><strong><code>catch</code>块</strong>: 用于处理 try 捕获到的异常。</li><li><strong><code>finally</code>块</strong>： 无论是否捕获或处理异常，<code>finally</code> 块里的语句都会被执行。当在 <code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code> 语句时，<code>finally</code> 语句块将在方法返回之前被执行。</li><li><strong>注意</strong>：不要在 finally 语句块中使用 return!！！当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句不会被执行。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value <span class="token operator">*</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//结果为：0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="io流" tabindex="-1"><a class="header-anchor" href="#io流" aria-hidden="true">#</a> IO流</h2><h3 id="java-中-io-流分为几种" tabindex="-1"><a class="header-anchor" href="#java-中-io-流分为几种" aria-hidden="true">#</a> Java 中 IO 流分为几种?</h3><ul><li>（流向）可以分为输入流（<code>InputXXX/Reader</code>）和输出流（<code>OutXXX/Writer</code>）；</li><li>（操作单元）可以划分为字节流（<code>InputStream/OutStream</code>）和字符流（<code>Reader/Writer</code>）；</li><li>（流的角色）划分为节点流和处理流（带缓冲的<code>Buffered/Data/Object/PrintXXX</code>）。</li></ul><h3 id="什么是序列化和反序列化-i-o" tabindex="-1"><a class="header-anchor" href="#什么是序列化和反序列化-i-o" aria-hidden="true">#</a> 什么是序列化和反序列化（I/O）？</h3><ul><li><strong>序列化</strong>： 将<strong>数据结构</strong>或<strong>对象</strong>转换成<strong>二进制</strong>字节流存储到<strong>文件系统、数据库、内存中</strong>。</li><li><strong>反序列化</strong>：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程</li></ul><p>扩展：</p><p><code>transient</code> 关键字：<strong>阻止<strong><strong>对象</strong></strong>序列化</strong>。</p><ul><li><code>transient</code> <strong>只能修饰变量</strong>，不能修饰类和方法。</li><li><code>transient</code> 修饰的变量，在反序列化后变量值将会被置成类型的<strong>默认值</strong>。例如，如果是修饰 <code>int</code>类型，那么反序列后结果就是 <code>0</code>。</li><li><code>static</code> 变量因为不属于任何对象(Object)，所以无论有没有 <code>transient</code> 关键字修饰，均不会被序列化</li></ul><h3 id="nio、bio、aio的区别" tabindex="-1"><a class="header-anchor" href="#nio、bio、aio的区别" aria-hidden="true">#</a> NIO、BIO、AIO的区别？</h3><ul><li><strong>BIO （Blocking I/O）</strong>：同步阻塞I/O 模式。</li><li><strong>NIO （No-Blocking I/O）</strong>：同步非阻塞 I/O 模式。</li><li><strong>AIO （Asynchronous I/O）</strong>：异步非阻塞 I/O 模型。</li></ul><p>形象比喻：</p><p><strong>BIO</strong>：先来到厨房，开始烧水，并坐在水壶面前一直等着水烧开。(<strong>阻塞</strong>)</p><p><strong>NIO</strong>：先来到厨房，开始烧水，但是我们不一直坐在水壶前面等，而是回到客厅 看电视，然后每隔几分钟到厨房看一下水有没有烧开。(<strong>选择器监听</strong>)</p><p><strong>AIO</strong>：先来到厨房，开始烧水，不一直坐在水壶前面等，也不隔一段时间去看一下，而是在客厅看电视，水壶上面有个开关，水烧开之后他会通知我。(<strong>回调</strong>)</p><figure><img src="`+h+'" alt="IO" tabindex="0" loading="lazy"><figcaption>IO</figcaption></figure>',105);function v(m,y){const t=i("ExternalLinkIcon");return l(),c("div",null,[k,n("ul",null,[n("li",null,[a("重写是子类方法重写父类的方法，重写的方法名不变，而类的"),n("a",b,[a("构造方法"),d(t)]),a("名必须与类名一致，假设父类的构造方法如果能够被子类重写则子类类名必须与父类类名一致才行，所以 **Java 的构造方法是不能被重写的。")])]),f])}const I=o(g,[["render",v],["__file","Java-basic.html.vue"]]);export{I as default};
