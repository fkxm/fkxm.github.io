import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as i,c as s,a as e,b as o,e as n,f as c}from"./app-c618f770.js";const r={},l=c('<p>HTTP 是无状态的协议，无法记录历史状态，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。<code>Cookie</code> 和 <code>Session</code> 是常用的会话跟踪技术。</p><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h2><p>客户端向服务端发送首次请求，服务端返回包含 <code>Set-Cookie</code> 头部的响应通知客户端保存 <code>Cookie</code>。在后续的请求中，客户端每次都在请求头携带上 <code>Cookie</code> 发送给服务端。</p><p>缺点：不安全，存储量小</p><h2 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> Session</h2><ol><li>客户端向服务端发送首次请求，服务端会创建一个<code>Session</code> 保存客户端信息，同时生成一个唯一的 <code>SessionID</code>，并保存在服务端，再返回包含 <code>SessionID</code> 的响应给客户端。</li><li>客户端收到后，将 <code>SessionID</code> 存入 <code>Cookie</code> 中。</li><li>在后续的请求中，客户端每次都在请求头携带记录有 <code>SessionID</code> 的 <code>Cookie</code> 发送给服务端，服务端根据 <code>SessionID</code> 匹配对应的 <code>Session</code> 获取客户端状态。</li></ol><p>如果浏览器禁用了 <code>Cookie</code>，可以通过将 <code>SessionID</code> 写入 URL 的方式发送给服务端。</p><img class="medium-img" src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20220516022111.png"><p>缺点：服务器内存消耗大</p><h2 id="cookie-与-session-区别" tabindex="-1"><a class="header-anchor" href="#cookie-与-session-区别" aria-hidden="true">#</a> Cookie 与 Session 区别</h2><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">存储容量</th><th style="text-align:center;">生命周期</th><th style="text-align:center;">存储位置</th><th style="text-align:center;">安全性</th></tr></thead><tbody><tr><td style="text-align:center;">Cookie</td><td style="text-align:center;">4KB</td><td style="text-align:center;">无过期时间：关闭浏览器后被清除<br>有过期时间：在过期时间后失效</td><td style="text-align:center;">客户端</td><td style="text-align:center;">低</td></tr><tr><td style="text-align:center;">Session</td><td style="text-align:center;">5MB</td><td style="text-align:center;">关闭页面或浏览器失效</td><td style="text-align:center;">服务端</td><td style="text-align:center;">高</td></tr></tbody></table><p>比喻：</p><ul><li>Session 像用户档案表，里面包含了用户的认证信息和登录状态等信息，保存在服务端。</li><li>Cookie 像用户通行证，保存在客户端。</li></ul><h2 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> LocalStorage</h2><p><code>LocalStorage</code> 是 HTML5 新增的存储对象，用于在浏览器本地长久保存数据。</p><h2 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> SessionStorage</h2><p><code>SessionStorage</code> 是 HTML5 新增的存储对象，用于在浏览器本地临时保存数据。</p><p>打开多个相同的 URL 的标签页，会创建各自的 <code>SessionStorage</code></p><h2 id="cookie、localstorage-与-sessionstorage-的区别" tabindex="-1"><a class="header-anchor" href="#cookie、localstorage-与-sessionstorage-的区别" aria-hidden="true">#</a> Cookie、LocalStorage 与 SessionStorage 的区别</h2><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">存储容量</th><th style="text-align:center;">生命周期</th><th style="text-align:center;">存储位置</th></tr></thead><tbody><tr><td style="text-align:center;">Cookie</td><td style="text-align:center;">4KB</td><td style="text-align:center;">无过期时间：关闭浏览器后被清除<br>有过期时间：在过期时间后失效</td><td style="text-align:center;">客户端，每次请求都会携带</td></tr><tr><td style="text-align:center;">LocalStorage</td><td style="text-align:center;">5MB（视浏览器而定）</td><td style="text-align:center;">不会自动过期，除非用户手动清除</td><td style="text-align:center;">客户端</td></tr><tr><td style="text-align:center;">SessionStorage</td><td style="text-align:center;">5MB</td><td style="text-align:center;">仅在当前网页会话下有效，关闭页面或浏览器后会被清除</td><td style="text-align:center;">客户端</td></tr></tbody></table><h2 id="token" tabindex="-1"><a class="header-anchor" href="#token" aria-hidden="true">#</a> Token</h2><p>JWT(JSON Web Token) 一种基于 <code>token</code> 的跨域认证方案</p><ol><li>客户端携带用户的登录凭证（一般为用户名和密码）向服务端发送首次请求</li><li>服务端查询数据库验证用户有效性，如果有效会根据储存在服务端秘钥对登录凭证进行签名生成 <code>token</code>，并返回给客户端</li><li>客户端收到 <code>token</code> 信息，可以保存在<code>cookie</code>或者 <code>localStorage</code></li><li>后续请求中，客户端都在请求头的 <code>Authorization</code> 字段写上<code>token</code>信息，服务端再对 <code>token</code> 解密取得用户登录凭证，根据登录凭证再去数据库中对相应的用户数据进行操作。</li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',24),h={href:"http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://segmentfault.com/a/1190000017831088",target:"_blank",rel:"noopener noreferrer"};function x(k,y){const t=d("ExternalLinkIcon");return i(),s("div",null,[l,e("ul",null,[e("li",null,[e("a",h,[o("JSON Web Token 入门教程"),n(t)])]),e("li",null,[e("a",g,[o("彻底弄懂session，cookie，token"),n(t)])])])])}const u=a(r,[["render",x],["__file","cookie-session.html.vue"]]);export{u as default};
