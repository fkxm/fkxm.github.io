import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as e,a as n,b as o,e as i,f as a}from"./app-62caafbf.js";const c={},u=a(`<h2 id="css文本的属性" tabindex="-1"><a class="header-anchor" href="#css文本的属性" aria-hidden="true">#</a> css文本的属性</h2><p><code>text-decoration</code></p><p>设置文字装饰线</p><ul><li>none：无任何装饰线（可以去除a元素下划线）</li><li>underline：下划线</li><li>overline：上划线</li><li>line-through：中划线（删除线）</li></ul><p><code>text-transform</code></p><p>设置文字大小写转换</p><ul><li>capitalize：每个单词首字符变为大写</li><li>uppercase：每个单词所有字符变为大写</li><li>lowecase：每个单词所有字符变为小写</li><li>none</li></ul><p><code>text-indent</code></p><p>设置第一行内容缩进</p><ul><li>2em：缩进2个文字</li></ul><p><code>text-align</code>（重要）</p><p>设置行内级元素（文本、图片等）对齐</p><ul><li>left</li><li>right</li><li>center</li><li>justify：两端对齐</li></ul><h2 id="css字体的属性" tabindex="-1"><a class="header-anchor" href="#css字体的属性" aria-hidden="true">#</a> css字体的属性</h2><p><code>font-size</code></p><p>设置字体大小</p><p><code>font-family</code></p><p>设置字体名称</p><ul><li>@font-face：加载自定义字体</li></ul><div class="language-html" data-ext="html"><pre class="language-html"><code>@font-face {
  font-family: &#39;myFont&#39;;
  src: url(&#39;./fonts/AaJianHaoTi-2.ttf&#39;); // 下载指定字体导入本地
}
</code></pre></div><p><code>font-weight</code></p><p>设置字体粗细</p><ul><li>normal：等于400</li><li>bold：等于700</li></ul><p><code>font-style</code></p><p>设置字体样式</p><ul><li>normal：正常</li><li>italic：斜体（字体本身支持斜体时，显示的斜体）</li><li>oblique：倾斜（文本进行倾斜）</li></ul><p><code>font-variant</code></p><p>可以设置字体的小型大写字母</p><ul><li>normal：正常</li><li>small-caps：小型大写字母</li></ul><p><code>line-hight</code>（重点）</p><p>设置文本行高（实质：两行文字基线之间的距离）</p><ul><li>让line-height的值等于div的高heght，即可实现文本在div内部垂直居中。</li></ul><p><code>font缩写属性</code></p><p>font: font-style font-variant font-weight font-size/line-height font-family</p><p>规则</p><ul><li><ol><li>font-size和font-family是必须的。</li></ol></li><li><ol start="2"><li>font-size和line-height之间用/分隔（/line-height可省略且必须跟在font-size后面）。</li></ol></li><li><ol start="3"><li>font-style、font-variant、font-weight的顺序可以任意，也可以省略。</li></ol></li></ul><h2 id="css常见选择器" tabindex="-1"><a class="header-anchor" href="#css常见选择器" aria-hidden="true">#</a> css常见选择器</h2><p><code>通配符选择器</code></p><p><code>简单选择器</code></p><ul><li>元素选择器：选择元素</li><li>类选择器：.class</li><li>id选择器：#id</li></ul><p><code>属性选择器</code></p><ul><li>[attr]：选择具有attr属性的元素</li><li>[attr=val]：选择具有attr属性且值为val的元素</li><li>[attr~=val]：选择具有attr属性且值为val的元素</li><li>[attr|=val]：选择具有attr属性且值为val或以val-开头的元素</li><li>[attr^=val]：选择具有attr属性且值以val开头的元素</li><li>[attr$=val]：选择具有attr属性且值以val结尾的元素</li><li>[attr*=val]：选择具有attr属性且值包含val的元素</li><li>[attr1][attr2]：选择具有attr1和attr2属性的元素</li></ul><p><code>后代选择器</code></p><ul><li>选择器1 选择器2：选择器1所有后代中的选择器2（以空格分隔）</li><li>选择器1&gt;选择器2：选择器1直接子代中的选择器2（以&gt;分隔）</li></ul><p><code>兄弟选择器</code></p><ul><li>选择器1+选择器2：选择器1后面紧跟的兄弟选择器2（以+分隔）</li><li>选择器1<sub>选择器2：选择器1后面所有的兄弟选择器2（以</sub>分隔）</li></ul><p><code>交集选择器&amp;并集选择器</code></p><ul><li>选择器1,选择器2：选择器1和选择器2的并集（以,分隔）</li><li>选择器1选择器2：选择器1和选择器2的交集（不分隔）</li></ul><p><code>伪类选择器</code></p><p>动态伪类（固定顺序）</p><ul><li>:link：未访问的链接（只能用在a元素）</li><li>:visited：已访问的链接（只能用在a元素）</li><li>:focus：元素获得焦点</li><li>:hover：鼠标悬停在元素上</li><li>:active：鼠标点击元素</li></ul><p>目标伪类</p><ul><li>:target：当前活动的目标元素</li></ul><p>语言伪类</p><ul><li>:lang()：选择lang属性值为指定值（如：en）的元素</li></ul><p>结构伪类</p><ul><li>:nth-child(n)：选择父元素的第n个子元素,当为n时，选择所有子元素</li><li>:nth-last-child(n)：选择父元素的倒数第n个子元素</li><li>:nth-of-type(n)：选择父元素的第n个同类型子元素</li><li>:nth-last-of-type(n)：选择父元素的倒数第n个同类型子元素</li><li>:first-child：选择父元素的第一个子元素</li><li>:last-child：选择父元素的最后一个子元素</li><li>:first-of-type：选择父元素的第一个同类型子元素</li><li>:last-of-type：选择父元素的最后一个同类型子元素</li><li>:only-child：选择父元素的唯一子元素</li><li>:only-of-type：选择父元素的唯一同类型子元素</li><li>:empty：选择没有子元素的元素（如用在小程序默认插槽）</li><li>:root：选择文档的根元素</li></ul><p>否定伪类</p><ul><li>:not(选择器)：选择不符合选择器的元素</li></ul><p><code>伪元素选择器</code>（行内非替换）</p><ul><li>::first-line：选择元素的第一行</li><li>::first-letter：选择元素的第一个字母</li><li>::before（重要）：在元素之前插入内容</li><li>::after（重要）：在元素之后插入内容（不要将content省略）</li></ul><h2 id="display特性" tabindex="-1"><a class="header-anchor" href="#display特性" aria-hidden="true">#</a> display特性</h2><ul><li>block：块级元素（独占一行，可设置宽度和高度）</li><li>inline：行内元素（和其它行内元素在同一行，不可以设置宽度和高度）</li><li>inline-block：行内块元素（和其它行内元素在同一行，可设置宽度和高度）</li><li>none：隐藏元素（不占据空间）</li></ul><p>元素隐藏技巧</p><ul><li>display:none：隐藏元素，不占据空间</li><li>visibility:hidden：隐藏元素，占据空间</li><li>opacity:0：设置透明度隐藏元素及其所有子元素，占据空间</li><li>rgba(0,0,0,0)：设置透明度隐藏元素不会影响子元素，占据空间</li></ul><h2 id="内容溢出处理" tabindex="-1"><a class="header-anchor" href="#内容溢出处理" aria-hidden="true">#</a> 内容溢出处理</h2><p><code>overflow</code></p><ul><li>visible（默认值）：内容不会被修剪，会呈现在元素框之外</li><li>hidden：内容会被修剪，并且其余内容是不可见的</li><li>scroll：内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容</li><li>auto：如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容</li></ul><h2 id="margin上下传递" tabindex="-1"><a class="header-anchor" href="#margin上下传递" aria-hidden="true">#</a> margin上下传递</h2><p>如果块级元素的顶部线和父元素的顶部线重叠，那么块级元素的margin-top值会传递给父元素。</p><p>防止传递问题</p><ul><li>父元素设置padding-top\\padding-bottom</li><li>父元素设置border</li><li>触发BFC：设置overflow:hidden</li></ul><h2 id="background属性" tabindex="-1"><a class="header-anchor" href="#background属性" aria-hidden="true">#</a> background属性</h2><p><code>background-color</code>：背景颜色</p><p><code>background-image</code>：背景图片</p><p><code>background-repeat</code>：背景图片平铺</p><ul><li>repeat：默认值，背景图片在水平和垂直方向平铺。</li><li>repeat-x：背景图片在水平方向平铺。</li><li>repeat-y：背景图片在垂直方向平铺。</li><li>no-repeat：背景图片不平铺。</li></ul><p><code>background-position</code>：背景图片位置</p><ul><li>水平方向：left、center、right、具体数值</li><li>垂直方向：top、center、bottom、具体数值</li><li>如果只设置一个值，那么另一个值默认为center（通常用来实现背景图片响应式）</li></ul><p><code>background-size</code>：背景图片大小</p><ul><li>auto：默认值，背景图片保持原始大小</li><li>cover：背景图片缩放到填充整个容器，可能会导致图片部分看不见</li><li>contain：缩放背景图片，宽度或高度铺满容器，保持图片的宽高比不变</li></ul><p><code>background-attachment</code>：背景图片是否固定</p><ul><li>scroll：默认值，相对于元素本身固定，而不是随着它的内容滚动</li><li>local：相对于元素的内容固定，如果一个元素拥有滚动机制，背景将会随着元素的内容滚动</li><li>fixed：相对于浏览器窗口固定，即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动（类似于视差滚动）</li></ul><p><code>background</code>：简写属性</p><ul><li>background：#fff url(../img/bg.jpg) no-repeat center center/cover fixed</li></ul><h2 id="表单元素" tabindex="-1"><a class="header-anchor" href="#表单元素" aria-hidden="true">#</a> 表单元素</h2><p><code>input</code></p><ul><li>type：<code>text、password、radio、checkbox、button、submit、reset、file、hidden、image、email、url、number、range、date、month、week、time、datetime、datetime-local、search、tel、color</code></li></ul><p>input和label的关联</p><ul><li>label可以跟某个input绑定，点击label时，input会自动获得焦点。</li><li>在类型为radio的input中，如果name相同，那么两个radio才能变为一组就会互斥即二选一。</li></ul><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>male<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>male<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sex<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>male<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>男
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>female<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>female<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sex<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>female<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>女
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h2><p><code>position</code></p><ul><li>static：默认值，元素在文档流中正常显示，top、right、bottom、left、z-index属性在static下无效。</li><li>relative（一般用于对当前元素微调）：相对于自己原来的位置进行定位，不脱离标准流。</li><li>absolute：相对于<strong>最邻近</strong>的一个<strong>非static定位</strong>的祖先元素进行定位；若没有这样的祖先，则相对于视口进行定位，脱离标准流（子绝父相）。</li><li>fixed：相对于浏览器窗口（视口：当画面滚动时，固定不动）进行定位，脱离标准流（常用）。</li><li>sticky（最新）：它的行为就像 <code>position:relative</code>; 而当页面滚动超出阈值（top、right、bottom、left）时，它的表现就像 <code>position:fixed</code>，它会固定在目标位置，是相对于最近的滚动祖先包含的滚动视口。</li></ul><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20230117230021.png" alt="定位总结" tabindex="0" loading="lazy"><figcaption>定位总结</figcaption></figure><p><code>将position设置为absolute和fixed元素的特点</code></p><ul><li>可以随意设置宽高，块级、行内级、行内块级元素的<strong>特性消失</strong>（如行内级元素可以设置宽高）。</li><li>宽高默认由内容决定。</li><li>不再给父元素汇报宽高数据（如父元素的高度由子元素撑开，子元素设置为绝对定位后，父元素高度不再由子元素撑开）。</li><li>脱标元素内部默认还是按照标准流布局。</li></ul><p>定位参照对象的宽度（父元素） = left + right + margin-left + margin-right +绝对定位元素的宽度（子元素）</p><p>定位参照对象的高度（父元素） = top + bottom + margin-top + margin-bottom +绝对定位元素的高度（子元素）</p><div class="language-css" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 子元素在父级元素里面水平垂直居中 */</span>
<span class="token selector">.child</span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>width:auto</code></p><ul><li>行内非替换元素：width包裹内容</li><li>块级元素：width包含块的宽度</li><li>绝对定位元素：width包含内容</li></ul><h2 id="浮动规则" tabindex="-1"><a class="header-anchor" href="#浮动规则" aria-hidden="true">#</a> 浮动规则</h2><ul><li>只能向左浮动或者向右浮动，不能超出本行高度。</li><li>不能超出包含块。</li><li>浮动元素不能层叠。</li><li>浮动元素会将行内级元素内容推出。</li></ul><p><code>clear属性</code></p><p>指定一个元素是否必须移动（清除浮动后）到在它之前的浮动元素下面，用于清除浮动，解决浮动产生的高度塌陷问题。</p><div class="language-css" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 给父元素增加::after伪元素 */</span>
<span class="token selector">.clear-fix::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token comment">/* 伪元素为行内非替换元素，没有高度 */</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token comment">/* 值:left、right、both、none */</span>

  <span class="token comment">/* 浏览器兼容性 */</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* IE6/7兼容性 */</span>
<span class="token selector">.clear-fix</span> <span class="token punctuation">{</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="形变动画" tabindex="-1"><a class="header-anchor" href="#形变动画" aria-hidden="true">#</a> 形变动画</h2><p><code>transform形变</code></p><ul><li>2D形变：translate（平移）、scale（缩放）、rotate（旋转）、skew（倾斜）、transform-origin（形变坐标原点）</li><li>3D形变：translate3d、scale3d、rotate3d、skew3d</li></ul><p><code>transition过渡</code></p><ul><li>transition-property：过渡属性</li><li>transition-duration：过渡时间</li><li>transition-timing-function：过渡函数 <ul><li>linear：匀速</li><li>ease：缓冲</li><li>ease-in：加速</li><li>ease-out：减速</li><li>ease-in-out：先加速后减速</li></ul></li><li>transition-delay：过渡延迟时间</li></ul><p><code>animation动画</code></p><ul><li>animation-name：动画名称（与@Keyframes的标识符要对应）</li><li>animation-duration：动画时间（常用）</li><li>animation-timing-function：动画函数（常用）</li><li>animation-delay：动画延迟</li><li>animation-iteration-count：动画次数</li><li>animation-direction：动画方向 <ul><li>normal：正常方向</li><li>reverse：反向</li><li>alternate：交替</li><li>alternate-reverse：交替反向</li></ul></li><li>animation-fill-mode：元素停留在动画的哪个位置 <ul><li>none：动画结束后，元素恢复到初始状态</li><li>forwards：动画结束后，元素保持动画最后一帧的状态（常用）</li><li>backwards：动画结束后，元素保持动画第一帧的状态</li></ul></li><li>animation-play-state：动画状态（JavaScript中使用） <ul><li>paused：暂停（音乐播放器常用）</li><li>running：运行</li></ul></li><li>animation：简写属性 <ul><li>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</li></ul></li><li>@keyframes：定义每一帧的属性</li></ul><div class="language-css" data-ext="css"><pre class="language-css"><code>  <span class="token atrule"><span class="token rule">@keyframes</span> name</span> <span class="token punctuation">{</span>
    <span class="token selector">from</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 起始状态 */</span>
    <span class="token punctuation">}</span>
    <span class="token selector">to</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 结束状态 */</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token atrule"><span class="token rule">@keyframes</span> name</span> <span class="token punctuation">{</span>
    <span class="token selector">0%</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 起始状态 */</span>
    <span class="token punctuation">}</span>
    <span class="token selector">50%</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 中间状态 */</span>
    <span class="token punctuation">}</span>
    <span class="token selector">100%</span> <span class="token punctuation">{</span>
      <span class="token comment">/* 结束状态 */</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre></div><h2 id="emmet语法" tabindex="-1"><a class="header-anchor" href="#emmet语法" aria-hidden="true">#</a> Emmet语法</h2><p>!：生成html文档</p><p>+：兄弟 &gt;：子代</p><ul><li><code>div&gt;ul&gt;li+li+li</code></li></ul><p>*：多个 ^：父级</p><ul><li><code>div&gt;ul&gt;li*3</code></li><li><code>div+div&gt;p&gt;span^h1</code></li></ul><p>()：分组 $：迭代个数</p><ul><li><code>(header&gt;div&gt;p+span)+footer&gt;p</code></li><li><code>ul&gt;li.item$*3</code></li></ul><p>属性(id属性、class属性等)</p><ul><li><code>div#id.class1.class2</code></li></ul><p>css Emmet</p><ul><li>w100：<code>width：100px</code></li><li>h100：<code>height：100px</code></li><li>m10：<code>margin：10px</code></li><li>p10：<code>padding：10px</code></li></ul><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h2><p><code>outline</code></p><p>外轮廓线，不占据空间，用于去除a元素和input元素的默认focus轮廓效果。</p><ul><li>outline：none：隐藏外轮廓线（常用）</li></ul><p><code>单行显示省略号</code></p><ul><li>white-space：nowrap（单行显示，合并空白）</li><li>overflow：hidden（超出部分隐藏）</li><li>text-overflow：ellipsis（超出部分用省略号显示）、clip（超出部分直接裁剪）</li></ul><p><code>referrerpolicy</code></p><p>在获取资源（如图片等）时使用来源地址，用于防止盗链。</p><ul><li>no-referrer：不发送来源地址，一般用于获取来源图片</li></ul><p><code>border-collapse</code></p><ul><li>collapse：合并单元格边框</li><li>separate：不合并单元格边框</li></ul><p><code>精灵图</code></p>`,139),r={href:"http://www.spritecow.com/",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>优点：减少http请求，减少图片大小，提高页面加载速度</p><p>缺点：不利于SEO，不利于维护，不利于修改</p><p><code>vertical-align</code></p><ul><li>默认值：baseline（在行盒中以基线对齐） <ul><li>文本的baseline是字母x的下方。</li><li>inline-block默认的baseline是margin-bottom的底部（没有就是盒子的底部）。</li><li>inline-block有文本时，baseline是最后一行文本的x的下方。</li></ul></li><li>top：把行内级盒子的顶端与行盒的顶端对齐</li><li>bottom：把行内级盒子的底端与行盒的底端对齐</li><li>middle：行内级盒子的中心点与父盒基线加上x字母高度一半的线对齐</li></ul><p><code>flex布局中justify-content最后一行布局问题</code></p><figure><img src="https://nevermore-picbed-1304219157.cos.ap-guangzhou.myqcloud.com/20230119222811.png" alt="flex布局常见问题" tabindex="0" loading="lazy"><figcaption>flex布局常见问题</figcaption></figure><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 解决方案：加跟item宽度相等的空标签填充 --&gt;</span>
.container &gt; i {
  <span class="token comment">&lt;!-- 与iten宽度相等 --&gt;</span>
  width: 110px 
}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item item1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item item2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item item3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item item4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 添加i的个数是列数-2 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>CSS常用函数</code></p><p>rgb()/rgba()/translate()/rotate()/scale()</p><ul><li>var()：变量</li></ul><div class="language-css" data-ext="css"><pre class="language-css"><code><span class="token selector">html</span> <span class="token punctuation">{</span>
  <span class="token property">--main-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">span</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>calc()：计算 <ul><li>如<code>calc(100% - 20px)</code>（运算符两边必须要有空白字符）</li></ul></li><li>blur()：毛玻璃 <ul><li><code>filter: blur(10px)</code></li><li><code>backdrop-filter: blur(10px)</code> + <code>background-color: rgba(255, 255, 255, 0.5)</code></li></ul></li><li>gradient()：颜色渐变 <ul><li><code>background-image: linear-gradient(45deg, blue, red)</code></li></ul></li></ul><p><code>媒体查询</code></p><ol><li><code>@import url(../css) (max-width: 800px)</code></li><li><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-width: 800px)&quot; href=&quot;../css&quot;&gt;</code></li><li><code>@media screen and (max-width: 800px) and (min-width: 500px) { ... }</code></li><li>使用<code>Window.matchMedia()</code>和<code>MediaQueryList.addListener()</code>来测试和监控媒体状态</li></ol><div class="language-css" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 利用了CSS的层叠性 */</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* 320~375 */</span>
  <span class="token selector">.box</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* 375~414 */</span>
  <span class="token selector">.box</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 414px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* 414~480 */</span>
  <span class="token selector">.box</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 21px<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 480px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* &gt;480 */</span>
  <span class="token selector">.box</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,15);function d(g,m){const s=p("ExternalLinkIcon");return l(),e("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[o("精灵图快速定位工具网站"),i(s)])])]),k])}const v=t(c,[["render",d],["__file","basic.html.vue"]]);export{v as default};
