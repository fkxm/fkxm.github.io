const nt="ENTRIES",T="KEYS",V="VALUES",F="";class D{constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case V:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const a=o[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let l=0;l<c.length;++l,++a){const p=c[l],f=i*a,g=f-i;let d=o[f];const m=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<d&&(d=L)}if(d>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=I(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=O(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=O(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,V)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},O=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return O(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=I(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=I(e);n.set(o+t,s),n.delete(o)},I=e=>e[e.length-1],it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},q=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,lt=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),q(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);q(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},dt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},ft={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},H={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:ft},mt={combineWith:P,prefix:(e,t,s)=>t===s.length-1},pt={batchSize:1e3,batchWait:10},J={minDirtFactor:.1,minDirtCount:20},Ft={...pt,...J};class _t{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...H,...t.searchOptions||{}},autoSuggestOptions:{...mt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=J,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const yt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},U=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},At=(e,t,s,n)=>{if(!e._index.has(n)){U(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?U(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(ht[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const a=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const d of p.keys()){if(!e._documentIds.has(d)){At(e,l,d,s),f-=1;continue}const m=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!m)continue;const y=p.get(d),_=e._fieldLength.get(d)[l],b=at(y,f,e._documentCount,_,g,r),z=n*a*m*b,A=h.get(d);if(A){A.score+=z,ct(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(d,{score:z,terms:[t],match:{[s]:[c]}})}}return h},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((d,m)=>({...d,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...H.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,m=d<1?Math.min(r,Math.round(t.term.length*d)):d;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[d,m]of f){const y=d.length-t.term.length;if(!y)continue;g==null||g.delete(d);const _=a*d.length/(d.length+.3*y);B(e,t.term,d,_,m,o,u,h,p)}if(g)for(const d of g.keys()){const[m,y]=g.get(d);if(!y)continue;const _=c*d.length/(d.length+y);B(e,t.term,d,_,m,o,u,h,p)}return p},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(p=>K(e,p,a));return Y(l,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(dt(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},X=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of X(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o},zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new _t(a);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const d of Object.keys(f)){let m=f[d];c===1&&(m=m.ds),g.set(parseInt(d,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:a?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return X(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[a,l]=u.split(/[#@]/),{contents:p}=n[a]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:a,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:a,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const d=i.map(m=>j(g,m)).filter(m=>m!==null);d.length&&p.push([{type:"text",key:a,...c&&{anchor:l},display:d},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=yt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":726,\"nextId\":726,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-2e3eac9e\",\"2\":\"v-041e4ab5\",\"3\":\"v-041e4ab5#基础语法\",\"4\":\"v-041e4ab5#和-的区别\",\"5\":\"v-041e4ab5#隐式转换问题\",\"6\":\"v-041e4ab5#switch-语句能否作用在-byte-上-能否作用在-long-和string上\",\"7\":\"v-041e4ab5#short-s1-1-s1-s1-1-正确吗-short-s1-1-s1-1-正确吗\",\"8\":\"v-041e4ab5#抽象类和接口有什么区别\",\"9\":\"v-041e4ab5#hashcode与-equals-重要\",\"10\":\"v-041e4ab5#和-equals-的区别\",\"11\":\"v-041e4ab5#构造方法有哪些特点-是否可被重写\",\"12\":\"v-041e4ab5#重载和重写的区别\",\"13\":\"v-041e4ab5#final-finally-finalize区别\",\"14\":\"v-041e4ab5#string-stringbuffer和stringbuilder-的区别是什么-string-为什么是不可变的\",\"15\":\"v-041e4ab5#java-中的几种基本数据类型\",\"16\":\"v-041e4ab5#integer-与-int的区别\",\"17\":\"v-041e4ab5#包装类型的常量池\",\"18\":\"v-041e4ab5#自动装箱、拆箱\",\"19\":\"v-041e4ab5#作用域-public-private-protected-default的区别\",\"20\":\"v-041e4ab5#string-s-new-string-ab-创建了几个-string-对象\",\"21\":\"v-041e4ab5#深拷贝和浅拷贝区别-什么是引用拷贝\",\"22\":\"v-041e4ab5#数组和list如何相互转化\",\"23\":\"v-041e4ab5#get和post的区别\",\"24\":\"v-041e4ab5#转发-forward-和重定向-redirect-的区别\",\"25\":\"v-041e4ab5#cookie和session的区别\",\"26\":\"v-041e4ab5#泛型\",\"27\":\"v-041e4ab5#什么是泛型-伪泛型-类型擦除\",\"28\":\"v-041e4ab5#基本类型能不能作为泛型\",\"29\":\"v-041e4ab5#如何理解泛型的编译器检查\",\"30\":\"v-041e4ab5#反射\",\"31\":\"v-041e4ab5#什么是反射-反射的核心类有哪些-应用场景\",\"32\":\"v-041e4ab5#jdk动态代理和cglib动态代理是什么\",\"33\":\"v-041e4ab5#异常\",\"34\":\"v-041e4ab5#异常有哪些\",\"35\":\"v-041e4ab5#try-catch-finally中finally注意事项\",\"36\":\"v-041e4ab5#io流\",\"37\":\"v-041e4ab5#java-中-io-流分为几种\",\"38\":\"v-041e4ab5#什么是序列化和反序列化-i-o\",\"39\":\"v-041e4ab5#nio、bio、aio的区别\",\"40\":\"v-041e4ab5@0\",\"41\":\"v-041e4ab5@1\",\"42\":\"v-490ed1f1\",\"43\":\"v-490ed1f1#list-有序\",\"44\":\"v-490ed1f1#set-都是唯一、线程不安全\",\"45\":\"v-490ed1f1#queue-单端队列\",\"46\":\"v-490ed1f1#map-键值对获取\",\"47\":\"v-490ed1f1#list-set-queue-map-四者的区别\",\"48\":\"v-490ed1f1#hashmap的原理\",\"49\":\"v-490ed1f1#jdk1-8之前-性能会稍差\",\"50\":\"v-490ed1f1#jdk1-8之后\",\"51\":\"v-490ed1f1#currenthashmap的底层原理\",\"52\":\"v-490ed1f1#jdk1-7\",\"53\":\"v-490ed1f1#jdk1-8-cas无锁算法\",\"54\":\"v-490ed1f1#collection实现比较的接口comparable-和-comparator的区别\",\"55\":\"v-490ed1f1#concurrenthashmap和hashtable的区别\",\"56\":\"v-490ed1f1#hashtable线程安全-使用-synchronized-来保证线程安全\",\"57\":\"v-490ed1f1#concurrenthashmap线程安全\",\"58\":\"v-490ed1f1#collection-和-collections-的区别\",\"59\":\"v-490ed1f1#arraylist扩容机制-简\",\"60\":\"v-490ed1f1@0\",\"61\":\"v-490ed1f1@1\",\"62\":\"v-611b2105\",\"63\":\"v-611b2105#基础语法\",\"64\":\"v-611b2105@0\",\"65\":\"v-611b2105@1\",\"66\":\"v-b8ac9152\",\"67\":\"v-b8ac9152#hashmap\",\"68\":\"v-b8ac9152#jdk1-8之前-性能会稍差\",\"69\":\"v-b8ac9152#jdk1-8之后\",\"70\":\"v-b8ac9152#currenthashmap\",\"71\":\"v-b8ac9152#jdk1-7\",\"72\":\"v-b8ac9152#jdk1-8-cas无锁算法\",\"73\":\"v-b8ac9152#内存区域\",\"74\":\"v-b8ac9152#_1-java8之前-hotpot\",\"75\":\"v-b8ac9152#_2-java8之后\",\"76\":\"v-b8ac9152#lambda表达式\",\"77\":\"v-b8ac9152#基础语法\",\"78\":\"v-b8ac9152#左侧为参数列表-右侧为需要执行的功能-即lambda体\",\"79\":\"v-b8ac9152#替代匿名内部类\",\"80\":\"v-b8ac9152#只要方法的参数是函数式接口都可以用-lambda-表达式\",\"81\":\"v-b8ac9152#_1-runnable-接口\",\"82\":\"v-b8ac9152#_2-comperator-接口\",\"83\":\"v-b8ac9152#_3-listener-接口\",\"84\":\"v-b8ac9152#_4-自定义函数式接口\",\"85\":\"v-b8ac9152#_5-集合迭代\",\"86\":\"v-b8ac9152#其他函数式接口\",\"87\":\"v-b8ac9152#四大内置核心函数式接口\",\"88\":\"v-b8ac9152#方法引用与构造引用\",\"89\":\"v-b8ac9152#stream\",\"90\":\"v-b8ac9152#stream三个操作步骤\",\"91\":\"v-b8ac9152#常见streamapi\",\"92\":\"v-b8ac9152#特点\",\"93\":\"v-b8ac9152#optional\",\"94\":\"v-b8ac9152#时间日期api\",\"95\":\"v-b8ac9152#格式化\",\"96\":\"v-b8ac9152#字符串转日期格式\",\"97\":\"v-b8ac9152#时间格式线程安全问题\",\"98\":\"v-b8ac9152#接口的默认实现方法和静态方法\",\"99\":\"v-b8ac9152@0\",\"100\":\"v-b8ac9152@1\",\"101\":\"v-4b41fd01\",\"102\":\"v-4b41fd01#目录\",\"103\":\"v-4b41fd01@0\",\"104\":\"v-145ac574\",\"105\":\"v-145ac574#目录\",\"106\":\"v-145ac574@0\",\"107\":\"v-073ee665\",\"108\":\"v-073ee665@0\",\"109\":\"v-073ee665@1\",\"110\":\"v-646e05f0\",\"111\":\"v-646e05f0@0\",\"112\":\"v-646e05f0@1\",\"113\":\"v-7e01b856\",\"114\":\"v-7e01b856#markdown-介绍\",\"115\":\"v-7e01b856#markdown-配置\",\"116\":\"v-7e01b856#markdown-扩展\",\"117\":\"v-7e01b856#vuepress-扩展\",\"118\":\"v-7e01b856#主题扩展\",\"119\":\"v-7e01b856#自定义容器\",\"120\":\"v-7e01b856#代码块\",\"121\":\"v-7e01b856#上下角标\",\"122\":\"v-7e01b856#自定义对齐\",\"123\":\"v-7e01b856#attrs\",\"124\":\"v-7e01b856#脚注\",\"125\":\"v-7e01b856#标记\",\"126\":\"v-7e01b856#任务列表\",\"127\":\"v-7e01b856#图片增强\",\"128\":\"v-7e01b856#卡片\",\"129\":\"v-7e01b856#图表\",\"130\":\"v-7e01b856#echarts\",\"131\":\"v-7e01b856#流程图\",\"132\":\"v-7e01b856#mermaid\",\"133\":\"v-7e01b856#tex-语法\",\"134\":\"v-7e01b856#导入文件\",\"135\":\"v-7e01b856#代码演示\",\"136\":\"v-7e01b856#样式化\",\"137\":\"v-7e01b856#交互演示\",\"138\":\"v-7e01b856#vue-交互演示\",\"139\":\"v-7e01b856#幻灯片\",\"140\":\"v-7e01b856@0\",\"141\":\"v-7e01b856@1\",\"142\":\"v-cf9d8694\",\"143\":\"v-cf9d8694#copyright-无版权\",\"144\":\"v-cf9d8694#页面信息\",\"145\":\"v-cf9d8694#页面内容\",\"146\":\"v-cf9d8694#页面结构\",\"147\":\"v-8c02d0de\",\"148\":\"v-8c02d0de#目录\",\"149\":\"v-8c02d0de@0\",\"150\":\"v-f0ec4556\",\"151\":\"v-f0ec4556#标题-2\",\"152\":\"v-f0ec4556#标题-3\",\"153\":\"v-f0ec4556@0\",\"154\":\"v-f0ec4556@1\",\"155\":\"v-df8b6e0c\",\"156\":\"v-df8b6e0c#标题-2\",\"157\":\"v-df8b6e0c#标题-3\",\"158\":\"v-df8b6e0c@0\",\"159\":\"v-df8b6e0c@1\",\"160\":\"v-480fe3ea\",\"161\":\"v-480fe3ea#having和where区别\",\"162\":\"v-480fe3ea#myisam和innodb区别\",\"163\":\"v-480fe3ea#何为-acid-特性-事务的特性-呢\",\"164\":\"v-480fe3ea#数据库事务的实现原理呢\",\"165\":\"v-480fe3ea#并发事务带来哪些问题\",\"166\":\"v-480fe3ea#事务有哪些隔离级别\",\"167\":\"v-480fe3ea#数据库范式有哪些\",\"168\":\"v-480fe3ea#drop、delete与-truncate-区别\",\"169\":\"v-480fe3ea#mysql中的读有几种\",\"170\":\"v-480fe3ea#mvcc-多版本并发控制-的实现原理-重点难点\",\"171\":\"v-480fe3ea#读已提交和可重复读隔离级别下-mvcc-的差异\",\"172\":\"v-480fe3ea#数据库索引类型有哪些\",\"173\":\"v-480fe3ea#mysql-聚集索引和非聚集索引区别\",\"174\":\"v-480fe3ea#非聚集索引一定回表查询吗-覆盖索引\",\"175\":\"v-480fe3ea#索引的优缺点\",\"176\":\"v-480fe3ea#b树和b-树的区别\",\"177\":\"v-480fe3ea@0\",\"178\":\"v-480fe3ea@1\",\"179\":\"v-5afa5b9a\",\"180\":\"v-5afa5b9a#创建单个对象的两种方式\",\"181\":\"v-5afa5b9a#对象的属性-键-与属性值-值\",\"182\":\"v-5afa5b9a#定义单个属性\",\"183\":\"v-5afa5b9a#数据描述符\",\"184\":\"v-5afa5b9a#存取描述符\",\"185\":\"v-5afa5b9a#定义多个属性\",\"186\":\"v-5afa5b9a#获取属性描述符\",\"187\":\"v-5afa5b9a#限制对象\",\"188\":\"v-5afa5b9a#创建多个对象的方式\",\"189\":\"v-5afa5b9a#工厂模式\",\"190\":\"v-5afa5b9a#构造函数模式\",\"191\":\"v-5afa5b9a#原型模式-原型-构造函数\",\"192\":\"v-5afa5b9a#new-操作符执行的操作\",\"193\":\"v-483f156c\",\"194\":\"v-483f156c#_1-没有原型\",\"195\":\"v-483f156c#_2-this-指向定义时的上层作用域\",\"196\":\"v-483f156c#_3-没有参数列表\",\"197\":\"v-483f156c#_4-不能指定-this-指向\",\"198\":\"v-483f156c#_5-不能-new-调用\",\"199\":\"v-483f156c#_6-不能重命名函数参数\",\"200\":\"v-483f156c#参考资料\",\"201\":\"v-39fa1136\",\"202\":\"v-39fa1136#与-promise-的关系\",\"203\":\"v-39fa1136#异步函数的返回值\",\"204\":\"v-39fa1136#异步函数中的异常\",\"205\":\"v-39fa1136#执行顺序\",\"206\":\"v-39fa1136#async、await-加载图片\",\"207\":\"v-27b22a2f\",\"208\":\"v-27b22a2f#前言\",\"209\":\"v-27b22a2f#各权威资料对闭包的定义\",\"210\":\"v-27b22a2f#变量的分类\",\"211\":\"v-27b22a2f#词法作用域\",\"212\":\"v-27b22a2f#高阶函数与嵌套调用\",\"213\":\"v-27b22a2f#定义\",\"214\":\"v-27b22a2f#广义\",\"215\":\"v-27b22a2f#狭义\",\"216\":\"v-27b22a2f#为什么需要闭包\",\"217\":\"v-27b22a2f#闭包创建过程\",\"218\":\"v-27b22a2f#闭包创建场景\",\"219\":\"v-27b22a2f#闭包的特性\",\"220\":\"v-27b22a2f#闭包的应用\",\"221\":\"v-27b22a2f#模块\",\"222\":\"v-27b22a2f#模拟私有属性\",\"223\":\"v-27b22a2f#函数式编程\",\"224\":\"v-27b22a2f#闭包的缺点\",\"225\":\"v-27b22a2f#总结\",\"226\":\"v-27b22a2f#参考资料\",\"227\":\"v-63e73619\",\"228\":\"v-63e73619#引用赋值\",\"229\":\"v-63e73619#浅拷贝\",\"230\":\"v-63e73619#对象的浅拷贝\",\"231\":\"v-63e73619#数组的浅拷贝\",\"232\":\"v-63e73619#深拷贝\",\"233\":\"v-63e73619#json-序列化再反序列化\",\"234\":\"v-63e73619#递归循环\",\"235\":\"v-63e73619#structuredclone\",\"236\":\"v-63e73619#参考资料\",\"237\":\"v-e752e87c\",\"238\":\"v-e752e87c#let-const\",\"239\":\"v-e752e87c#解构表达式\",\"240\":\"v-e752e87c#函数优化\",\"241\":\"v-e752e87c#对象优化\",\"242\":\"v-e752e87c#map和reduce\",\"243\":\"v-e752e87c#promise\",\"244\":\"v-e752e87c#模块化\",\"245\":\"v-e752e87c@0\",\"246\":\"v-e752e87c@1\",\"247\":\"v-73db59ac\",\"248\":\"v-73db59ac#浏览器事件循环\",\"249\":\"v-73db59ac#微任务与宏任务分类\",\"250\":\"v-73db59ac#执行顺序\",\"251\":\"v-73db59ac#例题一\",\"252\":\"v-73db59ac#例题二\",\"253\":\"v-73db59ac#例题三\",\"254\":\"v-73db59ac#node-事件循环\",\"255\":\"v-73db59ac#执行顺序-1\",\"256\":\"v-73db59ac#例题\",\"257\":\"v-02034249\",\"258\":\"v-02034249#浏览器内核\",\"259\":\"v-02034249#渲染引擎\",\"260\":\"v-02034249#javascript-引擎\",\"261\":\"v-02034249#浏览器内核、渲染引擎和-js-引擎的关系\",\"262\":\"v-02034249#v8-引擎的原理\",\"263\":\"v-02034249#v8-引擎主要流程\",\"264\":\"v-02034249#parser-解析器\",\"265\":\"v-02034249#ignition-解释器\",\"266\":\"v-02034249#turbofan-优化编译器\",\"267\":\"v-02034249#参考资料\",\"268\":\"v-3cfc2036\",\"269\":\"v-3cfc2036#全局代码执行过程\",\"270\":\"v-3cfc2036#初始化全局对象\",\"271\":\"v-3cfc2036#执行上下文栈\",\"272\":\"v-3cfc2036#函数代码执行过程\",\"273\":\"v-3cfc2036#嵌套函数代码执行过程\",\"274\":\"v-3cfc2036#函数调用函数执行过程\",\"275\":\"v-3cfc2036#作用域提升面试题\",\"276\":\"v-3cfc2036#js内存管理及垃圾回收\",\"277\":\"v-3cfc2036#总结\",\"278\":\"v-6974812e\",\"279\":\"v-6974812e#原型链继承\",\"280\":\"v-6974812e#借用构造函数继承\",\"281\":\"v-6974812e#组合继承\",\"282\":\"v-6974812e#原型式继承\",\"283\":\"v-6974812e#寄生式继承\",\"284\":\"v-6974812e#寄生组合式继承\",\"285\":\"v-6974812e#es6-继承\",\"286\":\"v-6974812e#参考资料\",\"287\":\"v-1396394e\",\"288\":\"v-1396394e#纯函数判断\",\"289\":\"v-1396394e#柯里化\",\"290\":\"v-1396394e#柯里化例子\",\"291\":\"v-1396394e#柯里化的作用\",\"292\":\"v-1396394e#柯里化函数的实现\",\"293\":\"v-1396394e#组合函数\",\"294\":\"v-1396394e#参考资料\",\"295\":\"v-0b0f8644\",\"296\":\"v-0b0f8644#数据类型-8-种\",\"297\":\"v-022fbdd4\",\"298\":\"v-022fbdd4#迭代器\",\"299\":\"v-022fbdd4#可迭代对象\",\"300\":\"v-022fbdd4#for-in-与-for-of\",\"301\":\"v-022fbdd4#自定义类的迭代\",\"302\":\"v-022fbdd4#生成器\",\"303\":\"v-022fbdd4#next-方法传递参数\",\"304\":\"v-022fbdd4#return-方法提前终止函数\",\"305\":\"v-022fbdd4#throw-方法抛出异常\",\"306\":\"v-022fbdd4#生成器替代迭代器\",\"307\":\"v-022fbdd4#async、await-的由来\",\"308\":\"v-0fc649f9\",\"309\":\"v-0fc649f9#a-promise-最终实现\",\"310\":\"v-0fc649f9#a-promise-实现过程\",\"311\":\"v-0fc649f9#resolve-与-reject\",\"312\":\"v-0fc649f9#_1-初步实现\",\"313\":\"v-0fc649f9#_2-状态不可变\",\"314\":\"v-0fc649f9#_3-抛出异常\",\"315\":\"v-0fc649f9#then-方法\",\"316\":\"v-0fc649f9#_1-初步实现-1\",\"317\":\"v-0fc649f9#_2-then-是异步-微任务\",\"318\":\"v-0fc649f9#_3-定时器\",\"319\":\"v-0fc649f9#_4-链式调用\",\"320\":\"v-0fc649f9#promise-a-测试\",\"321\":\"v-0fc649f9#promise-prototype-catch\",\"322\":\"v-0fc649f9#promise-prototype-finally\",\"323\":\"v-0fc649f9#promise-resolve\",\"324\":\"v-0fc649f9#promise-reject\",\"325\":\"v-0fc649f9#promise-all\",\"326\":\"v-0fc649f9#promise-allsettled\",\"327\":\"v-0fc649f9#promise-race\",\"328\":\"v-0fc649f9#promise-any\",\"329\":\"v-0fc649f9#参考资料\",\"330\":\"v-345d7162\",\"331\":\"v-345d7162#异步编程\",\"332\":\"v-345d7162#什么是回调\",\"333\":\"v-345d7162#什么是回调地狱\",\"334\":\"v-345d7162#概述\",\"335\":\"v-345d7162#promise-对象方法\",\"336\":\"v-345d7162#then\",\"337\":\"v-345d7162#catch\",\"338\":\"v-345d7162#finally\",\"339\":\"v-345d7162#promise-类方法\",\"340\":\"v-345d7162#resolve\",\"341\":\"v-345d7162#resolve-的三种参数\",\"342\":\"v-345d7162#reject\",\"343\":\"v-345d7162#reject-参数不受影响\",\"344\":\"v-345d7162#all\",\"345\":\"v-345d7162#allsettled\",\"346\":\"v-345d7162#race\",\"347\":\"v-345d7162#any\",\"348\":\"v-345d7162#promise-加载图片\",\"349\":\"v-345d7162#练习\",\"350\":\"v-625b4130\",\"351\":\"v-625b4130#原型的六个规则\",\"352\":\"v-625b4130#class-继承图解\",\"353\":\"v-625b4130#属性和方法的执行规则\",\"354\":\"v-625b4130#设置原型\",\"355\":\"v-625b4130#原型常用-api\",\"356\":\"v-625b4130#typeof-与-instanceof\",\"357\":\"v-625b4130#typeof\",\"358\":\"v-625b4130#instanceof\",\"359\":\"v-343603ea\",\"360\":\"v-343603ea#默认绑定\",\"361\":\"v-343603ea#隐式绑定\",\"362\":\"v-343603ea#显式绑定\",\"363\":\"v-343603ea#new-绑定\",\"364\":\"v-343603ea#箭头函数\",\"365\":\"v-343603ea#规则优先级\",\"366\":\"v-343603ea#_1-显式绑定高于隐式绑定\",\"367\":\"v-343603ea#_2-new-绑定高于隐式绑定\",\"368\":\"v-343603ea#_3-new-绑定高于-bind-绑定\",\"369\":\"v-343603ea#_4-bind-高于-call\",\"370\":\"v-343603ea#特殊规则\",\"371\":\"v-343603ea#_1-内置函数的this\",\"372\":\"v-343603ea#_2-显式绑定-null-undefined\",\"373\":\"v-343603ea#_3-间接函数引用\",\"374\":\"v-343603ea#面试题\",\"375\":\"v-343603ea#面试题一\",\"376\":\"v-343603ea#面试题二\",\"377\":\"v-343603ea#面试题三\",\"378\":\"v-343603ea#面试题四\",\"379\":\"v-343603ea#手写-bind\",\"380\":\"v-f17f4ad6\",\"381\":\"v-f17f4ad6#with-语句-了解-不要用\",\"382\":\"v-f17f4ad6#eval-函数-了解-不要用\",\"383\":\"v-f17f4ad6#严格模式\",\"384\":\"v-f17f4ad6#严格模式常见语法限制\",\"385\":\"v-f17f4ad6#严格模式-this\",\"386\":\"v-1a5eb819\",\"387\":\"v-1a5eb819@0\",\"388\":\"v-1a5eb819@1\",\"389\":\"v-13a8ef3a\",\"390\":\"v-13a8ef3a#定义\",\"391\":\"v-13a8ef3a#继承\",\"392\":\"v-13a8ef3a#多态\",\"393\":\"v-13a8ef3a#private修饰符\",\"394\":\"v-13a8ef3a#protected修饰符\",\"395\":\"v-13a8ef3a#readonly修饰符\",\"396\":\"v-13a8ef3a#getter-setter方法\",\"397\":\"v-13a8ef3a#静态成员变量\",\"398\":\"v-13a8ef3a#抽象类\",\"399\":\"v-13a8ef3a#类的类型\",\"400\":\"v-13a8ef3a@0\",\"401\":\"v-56974ddc\",\"402\":\"v-56974ddc#any类型\",\"403\":\"v-56974ddc#unknown类型\",\"404\":\"v-56974ddc#void类型\",\"405\":\"v-56974ddc#never类型\",\"406\":\"v-56974ddc#tuple类型\",\"407\":\"v-56974ddc#tuple类型的应用场景\",\"408\":\"v-56974ddc#函数的参数和返回值类型\",\"409\":\"v-56974ddc#匿名函数的参数类型\",\"410\":\"v-56974ddc#对象类型\",\"411\":\"v-56974ddc#可选类型\",\"412\":\"v-56974ddc#联合类型\",\"413\":\"v-56974ddc#可选类型和联合类型的关系\",\"414\":\"v-56974ddc#类型别名\",\"415\":\"v-56974ddc#类型断言\",\"416\":\"v-56974ddc#非空类型断言\",\"417\":\"v-56974ddc#可选链的使用\",\"418\":\"v-56974ddc#运算符\",\"419\":\"v-56974ddc#运算符-1\",\"420\":\"v-56974ddc#运算符-2\",\"421\":\"v-56974ddc#字面量\",\"422\":\"v-56974ddc#字面量类型\",\"423\":\"v-56974ddc#字面量推理\",\"424\":\"v-56974ddc#类型缩小\",\"425\":\"v-56974ddc@0\",\"426\":\"v-fece6646\",\"427\":\"v-fece6646#hello-world\",\"428\":\"v-fece6646#简单案例\",\"429\":\"v-fece6646@0\",\"430\":\"v-1da56c88\",\"431\":\"v-1da56c88#函数的类型及使用\",\"432\":\"v-1da56c88#可选类型\",\"433\":\"v-1da56c88#参数的默认值\",\"434\":\"v-1da56c88#函数的剩余参数\",\"435\":\"v-1da56c88#this的默认推导\",\"436\":\"v-1da56c88#this的不明确类型\",\"437\":\"v-1da56c88#函数重载\",\"438\":\"v-1da56c88@0\",\"439\":\"v-4254d538\",\"440\":\"v-4254d538#认识泛型\",\"441\":\"v-4254d538#泛型接受类型参数\",\"442\":\"v-4254d538#泛型接口\",\"443\":\"v-4254d538#泛型类\",\"444\":\"v-4254d538#类型约束\",\"445\":\"v-4254d538#非空判断运算符\",\"446\":\"v-4254d538@0\",\"447\":\"v-5fe370ce\",\"448\":\"v-5fe370ce#声明对象类型\",\"449\":\"v-5fe370ce#索引类型\",\"450\":\"v-5fe370ce#函数类型\",\"451\":\"v-5fe370ce#接口的继承\",\"452\":\"v-5fe370ce#交叉类型\",\"453\":\"v-5fe370ce#接口的实现\",\"454\":\"v-5fe370ce#interface和type的区别\",\"455\":\"v-5fe370ce#字面量赋值\",\"456\":\"v-5fe370ce#枚举类型的使用\",\"457\":\"v-5fe370ce#枚举类型的值\",\"458\":\"v-5fe370ce@0\",\"459\":\"v-1a14d738\",\"460\":\"v-1a14d738#变量的定义格式\",\"461\":\"v-1a14d738#number类型\",\"462\":\"v-1a14d738#boolean类型\",\"463\":\"v-1a14d738#string类型\",\"464\":\"v-1a14d738#array类型\",\"465\":\"v-1a14d738#object类型\",\"466\":\"v-1a14d738#null和undefined类型\",\"467\":\"v-1a14d738#symbol类型\",\"468\":\"v-1a14d738@0\",\"469\":\"v-b5bdb6be\",\"470\":\"v-b5bdb6be#第1步-简单实现\",\"471\":\"v-b5bdb6be#第2步-封装tabbar组件-包含tarbaritem组件\",\"472\":\"v-b5bdb6be#第3步-使用插槽封装tabbaritem组件和tabbar组件\",\"473\":\"v-b5bdb6be#第4步-实现路由功能\",\"474\":\"v-b5bdb6be#第5步-实现激活颜色变化功能\",\"475\":\"v-b5bdb6be#第6步-动态传入激活颜色\",\"476\":\"v-b5bdb6be#第7步-最终版本\",\"477\":\"v-b5bdb6be#app-vue\",\"478\":\"v-b5bdb6be#maintabbar-vue\",\"479\":\"v-b5bdb6be#tabbar-vue\",\"480\":\"v-b5bdb6be#tabbaritem-vue\",\"481\":\"v-b5bdb6be#router-index-js\",\"482\":\"v-b5bdb6be@0\",\"483\":\"v-e2fb8634\",\"484\":\"v-e2fb8634#注册组件基本步骤\",\"485\":\"v-e2fb8634#组件模板分离写法\",\"486\":\"v-e2fb8634#组件数据存放\",\"487\":\"v-e2fb8634#父子组件通信\",\"488\":\"v-e2fb8634#父子组件访问\",\"489\":\"v-e2fb8634#动态组件\",\"490\":\"v-e2fb8634@0\",\"491\":\"v-34547f3e\",\"492\":\"v-34547f3e#基本用法\",\"493\":\"v-34547f3e#具名插槽\",\"494\":\"v-34547f3e#编译作用域\",\"495\":\"v-34547f3e#作用域插槽\",\"496\":\"v-34547f3e@0\",\"497\":\"v-0dbe6b9a\",\"498\":\"v-0dbe6b9a#vue-cli2\",\"499\":\"v-0dbe6b9a#vue-cli3\",\"500\":\"v-0dbe6b9a#vue程序运行过程\",\"501\":\"v-0dbe6b9a@0\",\"502\":\"v-a43c80a2\",\"503\":\"v-a43c80a2#路由2种模式\",\"504\":\"v-a43c80a2#安装\",\"505\":\"v-a43c80a2#vue-router框架\",\"506\":\"v-a43c80a2#配置vue-router映射关系步骤\",\"507\":\"v-a43c80a2#细节处理\",\"508\":\"v-a43c80a2#动态路由\",\"509\":\"v-a43c80a2#参数传递\",\"510\":\"v-a43c80a2#route和router区别\",\"511\":\"v-a43c80a2#路由懒加载\",\"512\":\"v-a43c80a2#嵌套路由\",\"513\":\"v-a43c80a2#全局导航守卫\",\"514\":\"v-a43c80a2#路由独享守卫\",\"515\":\"v-a43c80a2#组件内守卫\",\"516\":\"v-a43c80a2#keep-alive\",\"517\":\"v-a43c80a2#生命周期钩子\",\"518\":\"v-a43c80a2@0\",\"519\":\"v-07c170b2\",\"520\":\"v-07c170b2#概念\",\"521\":\"v-07c170b2#基本语法及语法糖写法\",\"522\":\"v-07c170b2#computed和methods区别\",\"523\":\"v-07c170b2#v-if和v-show区别\",\"524\":\"v-07c170b2#v-for使用过程添加key可以提高性能-类似diff算法\",\"525\":\"v-07c170b2#数组的几个响应式方法\",\"526\":\"v-07c170b2#watch\",\"527\":\"v-07c170b2#案例补充\",\"528\":\"v-07c170b2#vue声明式渲染\",\"529\":\"v-07c170b2#v-text、v-html-html\",\"530\":\"v-07c170b2#单向绑定v-bind\",\"531\":\"v-07c170b2#双向绑定v-model\",\"532\":\"v-07c170b2#事件绑定v-on\",\"533\":\"v-07c170b2#循环遍历v-for\",\"534\":\"v-07c170b2#v-if和v-show\",\"535\":\"v-07c170b2#v-else和v-else-if\",\"536\":\"v-07c170b2#计算属性computed和监听器watch\",\"537\":\"v-07c170b2#过滤器\",\"538\":\"v-07c170b2#组件化-相当于封装函数\",\"539\":\"v-07c170b2#生命周期钩子函数\",\"540\":\"v-07c170b2@0\",\"541\":\"v-3f62b32d\",\"542\":\"v-3f62b32d#概念\",\"543\":\"v-3f62b32d#简易实现\",\"544\":\"v-3f62b32d#需要管理的状态\",\"545\":\"v-3f62b32d#基本步骤\",\"546\":\"v-3f62b32d#简单使用\",\"547\":\"v-3f62b32d#核心概念\",\"548\":\"v-3f62b32d#state单一状态树\",\"549\":\"v-3f62b32d#getters\",\"550\":\"v-3f62b32d#mutation\",\"551\":\"v-3f62b32d#mutation状态更新\",\"552\":\"v-3f62b32d#mutation传递参数\",\"553\":\"v-3f62b32d#mutation提交风格\",\"554\":\"v-3f62b32d#action\",\"555\":\"v-3f62b32d#基本使用\",\"556\":\"v-3f62b32d#module\",\"557\":\"v-3f62b32d#项目组织结构\",\"558\":\"v-3f62b32d@0\",\"559\":\"v-67b8c712\",\"560\":\"v-67b8c712#标题-2\",\"561\":\"v-67b8c712#标题-3\",\"562\":\"v-67b8c712@0\",\"563\":\"v-67b8c712@1\",\"564\":\"v-696d9fb1\",\"565\":\"v-696d9fb1#标题-2\",\"566\":\"v-696d9fb1#标题-3\",\"567\":\"v-696d9fb1@0\",\"568\":\"v-696d9fb1@1\",\"569\":\"v-7a07405d\",\"570\":\"v-7a07405d#标题-2\",\"571\":\"v-7a07405d#标题-3\",\"572\":\"v-7a07405d@0\",\"573\":\"v-7a07405d@1\",\"574\":\"v-7bbc18fc\",\"575\":\"v-7bbc18fc#标题-2\",\"576\":\"v-7bbc18fc#标题-3\",\"577\":\"v-7bbc18fc@0\",\"578\":\"v-7bbc18fc@1\",\"579\":\"v-c672f9cc\",\"580\":\"v-c672f9cc#从输入-url-到页面渲染的过程\",\"581\":\"v-c672f9cc#script-标签中的-defer-和-async\",\"582\":\"v-c672f9cc#spa、csr-与-ssr\",\"583\":\"v-c672f9cc#ssr-与-csr-对比\",\"584\":\"v-c672f9cc#window-onload-与-domcontentloaded\",\"585\":\"v-c672f9cc#回流与重绘\",\"586\":\"v-c672f9cc#回流\",\"587\":\"v-c672f9cc#重绘\",\"588\":\"v-dd9473fa\",\"589\":\"v-dd9473fa#创建-bfc\",\"590\":\"v-dd9473fa#应用场景\",\"591\":\"v-dd9473fa#_1-解决外边距重叠\",\"592\":\"v-dd9473fa#_2-解决父容器高度塌陷\",\"593\":\"v-dd9473fa#_3-实现自适应两列布局\",\"594\":\"v-dd9473fa#清除浮动\",\"595\":\"v-dd9473fa#参考资料\",\"596\":\"v-3155c29a\",\"597\":\"v-3155c29a#基本代码\",\"598\":\"v-3155c29a#块级元素\",\"599\":\"v-3155c29a#行内元素\",\"600\":\"v-3155c29a#css-代码\",\"601\":\"v-3155c29a#水平居中\",\"602\":\"v-3155c29a#行内元素-1\",\"603\":\"v-3155c29a#单行-多行文字\",\"604\":\"v-3155c29a#块级元素-1\",\"605\":\"v-3155c29a#_1-flex\",\"606\":\"v-3155c29a#_2-margin-auto\",\"607\":\"v-3155c29a#_3-绝对定位\",\"608\":\"v-3155c29a#垂直居中\",\"609\":\"v-3155c29a#行内元素-2\",\"610\":\"v-3155c29a#单行文字\",\"611\":\"v-3155c29a#多行文字\",\"612\":\"v-3155c29a#块级元素-2\",\"613\":\"v-3155c29a#_1-flex-1\",\"614\":\"v-3155c29a#_2-table-cell\",\"615\":\"v-3155c29a#_3-绝对定位-1\",\"616\":\"v-3155c29a#_4-伪元素\",\"617\":\"v-3155c29a#_5-table-标签\",\"618\":\"v-3155c29a#总结\",\"619\":\"v-3155c29a#参考资料\",\"620\":\"v-33b50d18\",\"621\":\"v-33b50d18#css文本的属性\",\"622\":\"v-33b50d18#css字体的属性\",\"623\":\"v-33b50d18#css常见选择器\",\"624\":\"v-33b50d18#display特性\",\"625\":\"v-33b50d18#内容溢出处理\",\"626\":\"v-33b50d18#margin上下传递\",\"627\":\"v-33b50d18#background属性\",\"628\":\"v-33b50d18#表单元素\",\"629\":\"v-33b50d18#定位\",\"630\":\"v-33b50d18#浮动规则\",\"631\":\"v-33b50d18#形变动画\",\"632\":\"v-33b50d18#emmet语法\",\"633\":\"v-33b50d18#其它\",\"634\":\"v-60abb837\",\"635\":\"v-60abb837#内容盒与边框盒\",\"636\":\"v-60abb837#offsetwidth\",\"637\":\"v-01eed342\",\"638\":\"v-01eed342#样式类型优先级\",\"639\":\"v-01eed342#选择器类型优先级\",\"640\":\"v-01eed342#权重计算规则\",\"641\":\"v-75cfe15e\",\"642\":\"v-75cfe15e#border-color\",\"643\":\"v-75cfe15e#clip-path\",\"644\":\"v-5c330f57\",\"645\":\"v-5c330f57#flex-container容器\",\"646\":\"v-5c330f57#flex-item项目\",\"647\":\"v-5c330f57#参考资料\",\"648\":\"v-74149df6\",\"649\":\"v-4a971c92\",\"650\":\"v-4a971c92#less代码的编译\",\"651\":\"v-4a971c92#less语法\",\"652\":\"v-4a971c92#变量\",\"653\":\"v-4a971c92#嵌套\",\"654\":\"v-4a971c92#混入\",\"655\":\"v-e6dced88\",\"656\":\"v-45fc7594\",\"657\":\"v-45fc7594#语义化标签\",\"658\":\"v-45fc7594#语义化好处\",\"659\":\"v-45fc7594#多媒体标签\",\"660\":\"v-45fc7594#canvas-标签\",\"661\":\"v-45fc7594#字符实体\",\"662\":\"v-61916418\",\"663\":\"v-61916418#html-结构\",\"664\":\"v-3851d746\",\"665\":\"v-3851d746#a标签\",\"666\":\"v-3851d746#href-属性\",\"667\":\"v-3851d746#target-属性\",\"668\":\"v-3851d746#download-属性\",\"669\":\"v-3851d746#iframe-标签-不推荐使用\",\"670\":\"v-3851d746#table-标签\",\"671\":\"v-3851d746#img-标签\",\"672\":\"v-3851d746#form-标签\",\"673\":\"v-3851d746#input-标签\",\"674\":\"v-3851d746#其他输入标签\",\"675\":\"v-1c6dae0e\",\"676\":\"v-1c6dae0e#cookie\",\"677\":\"v-1c6dae0e#session\",\"678\":\"v-1c6dae0e#cookie-与-session-区别\",\"679\":\"v-1c6dae0e#localstorage\",\"680\":\"v-1c6dae0e#sessionstorage\",\"681\":\"v-1c6dae0e#cookie、localstorage-与-sessionstorage-的区别\",\"682\":\"v-1c6dae0e#token\",\"683\":\"v-1c6dae0e#参考资料\",\"684\":\"v-69687184\",\"685\":\"v-69687184#强制缓存\",\"686\":\"v-69687184#定义与过程\",\"687\":\"v-69687184#expires-与-cache-control\",\"688\":\"v-69687184#协商缓存-对比缓存\",\"689\":\"v-69687184#定义与过程-1\",\"690\":\"v-69687184#etag-与-last-modified\",\"691\":\"v-69687184#三种刷新操作对缓存的影响\",\"692\":\"v-69687184#参考资料\",\"693\":\"v-7cdd85da\",\"694\":\"v-7cdd85da#响应状态码\",\"695\":\"v-7cdd85da#http-header\",\"696\":\"v-7cdd85da#http1-与-http2\",\"697\":\"v-7cdd85da#https\",\"698\":\"v-7cdd85da#tls1-2-握手过程\",\"699\":\"v-7cdd85da#http-与-https-的区别\",\"700\":\"v-7cdd85da#get-与-post-的区别\",\"701\":\"v-7cdd85da#参考资料\",\"702\":\"v-a471606e\",\"703\":\"v-a471606e#同源策略\",\"704\":\"v-a471606e#源\",\"705\":\"v-a471606e#跨域\",\"706\":\"v-a471606e#jsonp\",\"707\":\"v-a471606e#cors\",\"708\":\"v-a471606e#服务器代理\",\"709\":\"v-a471606e#参考资料\",\"710\":\"v-bd0b54d4\",\"711\":\"v-bd0b54d4#tcp-报文\",\"712\":\"v-bd0b54d4#三次握手\",\"713\":\"v-bd0b54d4#为什么需要至少三次握手\",\"714\":\"v-bd0b54d4#四次挥手\",\"715\":\"v-bd0b54d4#为什么需要四次挥手\",\"716\":\"v-bd0b54d4#为什么需要超时等待-2msl\",\"717\":\"v-bd0b54d4#参考资料\",\"718\":\"v-e1e3da16\",\"719\":\"v-416d3233\",\"720\":\"v-08f42f4a\",\"721\":\"v-30be3cd5\",\"722\":\"v-fcf78778\",\"723\":\"v-15f96749\",\"724\":\"v-ad0b4672\",\"725\":\"v-8e302404\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,3],\"1\":[1],\"2\":[1],\"3\":[1],\"4\":[3,16],\"5\":[1,14],\"6\":[8,17],\"7\":[8,18],\"8\":[1,39],\"9\":[4,17],\"10\":[4,26],\"11\":[3,24],\"12\":[1,57],\"13\":[3,20],\"14\":[5,49],\"15\":[2,38],\"16\":[3,6],\"17\":[1,15],\"18\":[2,12],\"19\":[5,11],\"20\":[8,9],\"21\":[3,11],\"22\":[1,24],\"23\":[1,25],\"24\":[5,49],\"25\":[1,35],\"26\":[1],\"27\":[4,17],\"28\":[2,5],\"29\":[1,3],\"30\":[1],\"31\":[4,21],\"32\":[2,48],\"33\":[1],\"34\":[2,1],\"35\":[3,47],\"36\":[1],\"37\":[5,19],\"38\":[4,25],\"39\":[4,30],\"40\":[null,null,1],\"41\":[null,null,2],\"42\":[1,1],\"43\":[3,17],\"44\":[4,21],\"45\":[3,12],\"46\":[3,46],\"47\":[6,21],\"48\":[2],\"49\":[4,16],\"50\":[3,23],\"51\":[2],\"52\":[2,33],\"53\":[4,27],\"54\":[4,10],\"55\":[1],\"56\":[4,1],\"57\":[2,15],\"58\":[5,10],\"59\":[3,6],\"60\":[null,null,1],\"61\":[null,null,2],\"62\":[1],\"63\":[1,1],\"64\":[null,null,1],\"65\":[null,null,2],\"66\":[1,2],\"67\":[1],\"68\":[4,16],\"69\":[3,23],\"70\":[1],\"71\":[2,33],\"72\":[4,29],\"73\":[1,2],\"74\":[4,6],\"75\":[2,7],\"76\":[1],\"77\":[1],\"78\":[3,29],\"79\":[1],\"80\":[4,4],\"81\":[3,24],\"82\":[3,36],\"83\":[3,16],\"84\":[2,38],\"85\":[2,31],\"86\":[1,2],\"87\":[1,103],\"88\":[1,26],\"89\":[1],\"90\":[1,102],\"91\":[1,108],\"92\":[1,13],\"93\":[1,58],\"94\":[1,17],\"95\":[1,42],\"96\":[1,30],\"97\":[1,2],\"98\":[1,7],\"99\":[null,null,1],\"100\":[null,null,1],\"101\":[1],\"102\":[1,6],\"103\":[null,null,1],\"104\":[1],\"105\":[1,5],\"106\":[null,null,1],\"107\":[1,18],\"108\":[null,null,1],\"109\":[null,null,1],\"110\":[1,7],\"111\":[null,null,1],\"112\":[null,null,1],\"113\":[2,11],\"114\":[2,8],\"115\":[2,13],\"116\":[2,11],\"117\":[2,10],\"118\":[1,10],\"119\":[1,19],\"120\":[1,1],\"121\":[1,3],\"122\":[1,3],\"123\":[1,5],\"124\":[1,3],\"125\":[1,3],\"126\":[1,5],\"127\":[1,2],\"128\":[1,23],\"129\":[1,1],\"130\":[1,1],\"131\":[1,1],\"132\":[1,1],\"133\":[2,10],\"134\":[1,6],\"135\":[1,26],\"136\":[1,5],\"137\":[1,1],\"138\":[2,1],\"139\":[1,3],\"140\":[null,null,1],\"141\":[null,null,1],\"142\":[1,25],\"143\":[2,3],\"144\":[1,20],\"145\":[1,17],\"146\":[1,16],\"147\":[1],\"148\":[1,5],\"149\":[null,null,1],\"150\":[1,1],\"151\":[2,2],\"152\":[2,2],\"153\":[null,null,2],\"154\":[null,null,2],\"155\":[1],\"156\":[2,2],\"157\":[2,2],\"158\":[null,null,1],\"159\":[null,null,2],\"160\":[1],\"161\":[2,5],\"162\":[2,12],\"163\":[6,20],\"164\":[2,22],\"165\":[2,9],\"166\":[2,15],\"167\":[2,9],\"168\":[5,30],\"169\":[2,40],\"170\":[5,22],\"171\":[4,13],\"172\":[2,31],\"173\":[3,29],\"174\":[3,22],\"175\":[1,16],\"176\":[2,21],\"177\":[null,null,1],\"178\":[null,null,1],\"179\":[1,23],\"180\":[1,16],\"181\":[5,33],\"182\":[1,59],\"183\":[1,29],\"184\":[1,49],\"185\":[1,25],\"186\":[1,30],\"187\":[1,37],\"188\":[1,5],\"189\":[1,27],\"190\":[1,39],\"191\":[5,31],\"192\":[2,30],\"193\":[1],\"194\":[2,15],\"195\":[3,74],\"196\":[2,27],\"197\":[4,7],\"198\":[4,12],\"199\":[2,18],\"200\":[1,4],\"201\":[2,6],\"202\":[3,55],\"203\":[1,25],\"204\":[1,24],\"205\":[1,66],\"206\":[3,57],\"207\":[1],\"208\":[1],\"209\":[1,39],\"210\":[1,13],\"211\":[1,43],\"212\":[1,56],\"213\":[1,20],\"214\":[1,21],\"215\":[1,32],\"216\":[1,22],\"217\":[1,77],\"218\":[1,135],\"219\":[1,6],\"220\":[1,3],\"221\":[1,18],\"222\":[1,33],\"223\":[1,43],\"224\":[1,44],\"225\":[1,42],\"226\":[1,17],\"227\":[2,22],\"228\":[1,62],\"229\":[1,5],\"230\":[1,34],\"231\":[1,17],\"232\":[1,2],\"233\":[2,39],\"234\":[1,116],\"235\":[2,22],\"236\":[1,8],\"237\":[1],\"238\":[2,87],\"239\":[1,99],\"240\":[1,99],\"241\":[1,104],\"242\":[1,83],\"243\":[1,112],\"244\":[1,41],\"245\":[null,null,1],\"246\":[null,null,1],\"247\":[1],\"248\":[1,40],\"249\":[1,33],\"250\":[1,20],\"251\":[1,23],\"252\":[1,49],\"253\":[1,46],\"254\":[2,45],\"255\":[1,25],\"256\":[1,33],\"257\":[2],\"258\":[1,20],\"259\":[1,18],\"260\":[2,23],\"261\":[4,15],\"262\":[2,75],\"263\":[2,52],\"264\":[2,66],\"265\":[2,9],\"266\":[2,48],\"267\":[1,20],\"268\":[2],\"269\":[1],\"270\":[1,14],\"271\":[1,28],\"272\":[1,32],\"273\":[1,17],\"274\":[1,13],\"275\":[1,5],\"276\":[1,18],\"277\":[1,17],\"278\":[1],\"279\":[1,42],\"280\":[1,42],\"281\":[1,40],\"282\":[1,47],\"283\":[1,34],\"284\":[1,46],\"285\":[2,35],\"286\":[1,5],\"287\":[1,23],\"288\":[1,29],\"289\":[1,10],\"290\":[1,22],\"291\":[1,34],\"292\":[1,35],\"293\":[1,39],\"294\":[1,8],\"295\":[1],\"296\":[4,31],\"297\":[1],\"298\":[1,46],\"299\":[1,76],\"300\":[4,31],\"301\":[1,48],\"302\":[1,41],\"303\":[2,33],\"304\":[2,33],\"305\":[2,21],\"306\":[1,77],\"307\":[3,59],\"308\":[2],\"309\":[3,124],\"310\":[3],\"311\":[3],\"312\":[2,41],\"313\":[2,46],\"314\":[2,48],\"315\":[2],\"316\":[2,69],\"317\":[5,53],\"318\":[2,102],\"319\":[2,129],\"320\":[3,43],\"321\":[3,34],\"322\":[3,48],\"323\":[2,30],\"324\":[2,19],\"325\":[2,75],\"326\":[2,64],\"327\":[2,49],\"328\":[2,68],\"329\":[1,26],\"330\":[1],\"331\":[1,43],\"332\":[1,71],\"333\":[1,27],\"334\":[1,59],\"335\":[2,19],\"336\":[1,53],\"337\":[1,49],\"338\":[1,26],\"339\":[2],\"340\":[1,11],\"341\":[2,46],\"342\":[1,11],\"343\":[2,25],\"344\":[1,37],\"345\":[1,48],\"346\":[1,27],\"347\":[1,38],\"348\":[2,54],\"349\":[1,26],\"350\":[1,24],\"351\":[1,73],\"352\":[2,33],\"353\":[1,19],\"354\":[1,24],\"355\":[2,44],\"356\":[3],\"357\":[1,44],\"358\":[1,22],\"359\":[2,6],\"360\":[1,49],\"361\":[1,39],\"362\":[1,42],\"363\":[2,72],\"364\":[1,52],\"365\":[1],\"366\":[2,13],\"367\":[3,11],\"368\":[5,20],\"369\":[4,18],\"370\":[1],\"371\":[2,41],\"372\":[4,20],\"373\":[2,26],\"374\":[1],\"375\":[1,20],\"376\":[1,49],\"377\":[1,55],\"378\":[1,38],\"379\":[2,57],\"380\":[3],\"381\":[5,19],\"382\":[5,20],\"383\":[1],\"384\":[1,67],\"385\":[2,34],\"386\":[1],\"387\":[null,null,1],\"388\":[null,null,2],\"389\":[1],\"390\":[1,20],\"391\":[1,34],\"392\":[1,25],\"393\":[1,21],\"394\":[1,20],\"395\":[1,31],\"396\":[2,23],\"397\":[1,22],\"398\":[1,33],\"399\":[1,19],\"400\":[null,null,1],\"401\":[1],\"402\":[1,18],\"403\":[1,27],\"404\":[1,17],\"405\":[1,35],\"406\":[1,26],\"407\":[1,25],\"408\":[1,15],\"409\":[1,23],\"410\":[1,15],\"411\":[1,17],\"412\":[1,23],\"413\":[1,12],\"414\":[1,19],\"415\":[1,38],\"416\":[1,16],\"417\":[1,19],\"418\":[1],\"419\":[2,10],\"420\":[2,14],\"421\":[1],\"422\":[1,23],\"423\":[1,31],\"424\":[1,63],\"425\":[null,null,1],\"426\":[1],\"427\":[2,15],\"428\":[1,28],\"429\":[null,null,1],\"430\":[1],\"431\":[1,35],\"432\":[1,12],\"433\":[1,14],\"434\":[1,24],\"435\":[1,15],\"436\":[1,26],\"437\":[1,37],\"438\":[null,null,1],\"439\":[1],\"440\":[1,28],\"441\":[1,17],\"442\":[1,15],\"443\":[1,34],\"444\":[1,18],\"445\":[1,7],\"446\":[null,null,1],\"447\":[1],\"448\":[1,27],\"449\":[1,28],\"450\":[1,21],\"451\":[1,13],\"452\":[1,29],\"453\":[1,34],\"454\":[1,28],\"455\":[1,27],\"456\":[1,31],\"457\":[1,36],\"458\":[null,null,1],\"459\":[1],\"460\":[1,35],\"461\":[1,21],\"462\":[1,9],\"463\":[1,29],\"464\":[1,27],\"465\":[1,10],\"466\":[1,7],\"467\":[1,11],\"468\":[null,null,1],\"469\":[1],\"470\":[3,70],\"471\":[4,75],\"472\":[3,92],\"473\":[3,91],\"474\":[3,103],\"475\":[3,112],\"476\":[3,3],\"477\":[2,29],\"478\":[2,51],\"479\":[2,41],\"480\":[2,75],\"481\":[3,31],\"482\":[null,null,1],\"483\":[1],\"484\":[1,62],\"485\":[1,30],\"486\":[1,25],\"487\":[1,105],\"488\":[1,68],\"489\":[1,32],\"490\":[null,null,1],\"491\":[1],\"492\":[1,31],\"493\":[1,46],\"494\":[1,46],\"495\":[1,48],\"496\":[null,null,1],\"497\":[1],\"498\":[2,9],\"499\":[2,31],\"500\":[1,9],\"501\":[null,null,1],\"502\":[2],\"503\":[1,17],\"504\":[1,6],\"505\":[2,40],\"506\":[2,42],\"507\":[1,34],\"508\":[1,10],\"509\":[1,24],\"510\":[1,22],\"511\":[1,12],\"512\":[1,32],\"513\":[1,44],\"514\":[1,3],\"515\":[1,4],\"516\":[2,25],\"517\":[1,1],\"518\":[null,null,1],\"519\":[1],\"520\":[1,16],\"521\":[1,262],\"522\":[1,10],\"523\":[3,10],\"524\":[4,10],\"525\":[1,38],\"526\":[1,3],\"527\":[1],\"528\":[1,110],\"529\":[3,79],\"530\":[2,85],\"531\":[2,71],\"532\":[2,109],\"533\":[2,104],\"534\":[3,78],\"535\":[4,75],\"536\":[1,91],\"537\":[1,92],\"538\":[3,78],\"539\":[1,102],\"540\":[null,null,1],\"541\":[1],\"542\":[1,4],\"543\":[1,9],\"544\":[1,8],\"545\":[1,30],\"546\":[1,55],\"547\":[1],\"548\":[1,7],\"549\":[1,53],\"550\":[1],\"551\":[1,15],\"552\":[1,32],\"553\":[1,20],\"554\":[1,3],\"555\":[1,37],\"556\":[1,32],\"557\":[1,1],\"558\":[null,null,1],\"559\":[2],\"560\":[2,2],\"561\":[2,2],\"562\":[null,null,1],\"563\":[null,null,3],\"564\":[2,2],\"565\":[2,2],\"566\":[2,2],\"567\":[null,null,1],\"568\":[null,null,3],\"569\":[2],\"570\":[2,2],\"571\":[2,2],\"572\":[null,null,2],\"573\":[null,null,3],\"574\":[2,4],\"575\":[2,2],\"576\":[2,2],\"577\":[null,null,2],\"578\":[null,null,3],\"579\":[1],\"580\":[3,47],\"581\":[5,16],\"582\":[4,64],\"583\":[4,33],\"584\":[4,13],\"585\":[1,4],\"586\":[1,37],\"587\":[1,12],\"588\":[1,17],\"589\":[2,47],\"590\":[1,7],\"591\":[2,27],\"592\":[2,35],\"593\":[2,27],\"594\":[1,59],\"595\":[1,3],\"596\":[1,2],\"597\":[1],\"598\":[1,28],\"599\":[1,22],\"600\":[2,4],\"601\":[1],\"602\":[1],\"603\":[2,6],\"604\":[1],\"605\":[2,8],\"606\":[3,10],\"607\":[2,23],\"608\":[1],\"609\":[1],\"610\":[1,9],\"611\":[1,31],\"612\":[1],\"613\":[2,10],\"614\":[3,8],\"615\":[2,23],\"616\":[2,18],\"617\":[3,28],\"618\":[1,2],\"619\":[1,5],\"620\":[1],\"621\":[1,37],\"622\":[1,58],\"623\":[1,114],\"624\":[1,22],\"625\":[1,13],\"626\":[1,12],\"627\":[1,59],\"628\":[1,51],\"629\":[1,68],\"630\":[1,36],\"631\":[1,91],\"632\":[1,39],\"633\":[1,165],\"634\":[1],\"635\":[1,19],\"636\":[1,17],\"637\":[2],\"638\":[1,16],\"639\":[1,29],\"640\":[1,25],\"641\":[2,3],\"642\":[2,15],\"643\":[2,23],\"644\":[2,2],\"645\":[2,46],\"646\":[2,46],\"647\":[1,6],\"648\":[1,29],\"649\":[1],\"650\":[1,35],\"651\":[1],\"652\":[1,11],\"653\":[1,19],\"654\":[1,45],\"655\":[1,69],\"656\":[1,22],\"657\":[1,57],\"658\":[1,17],\"659\":[1,28],\"660\":[2,14],\"661\":[1,1],\"662\":[1,10],\"663\":[2,137],\"664\":[1],\"665\":[1,8],\"666\":[2,20],\"667\":[2,15],\"668\":[2,2],\"669\":[4,7],\"670\":[2,39],\"671\":[2,18],\"672\":[2,29],\"673\":[2,33],\"674\":[1,82],\"675\":[4,10],\"676\":[1,11],\"677\":[1,28],\"678\":[4,23],\"679\":[1,6],\"680\":[1,9],\"681\":[5,18],\"682\":[1,25],\"683\":[1,7],\"684\":[2,8],\"685\":[1],\"686\":[1,33],\"687\":[4,38],\"688\":[3],\"689\":[1,39],\"690\":[4,18],\"691\":[1,20],\"692\":[1,10],\"693\":[1,12],\"694\":[1,73],\"695\":[2,38],\"696\":[3,21],\"697\":[1,35],\"698\":[3,30],\"699\":[4,18],\"700\":[4,59],\"701\":[1,5],\"702\":[1],\"703\":[1,19],\"704\":[1,54],\"705\":[1,8],\"706\":[1,91],\"707\":[1,66],\"708\":[1,5],\"709\":[1,3],\"710\":[2,44],\"711\":[2,21],\"712\":[1,29],\"713\":[1,24],\"714\":[1,26],\"715\":[1,8],\"716\":[2,15],\"717\":[1,2],\"718\":[1],\"719\":[1],\"720\":[1],\"721\":[1],\"722\":[1],\"723\":[1],\"724\":[1],\"725\":[1]},\"averageFieldLength\":[1.6829242788126573,29.38906086623695,0.3424123124716995],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"方块熊猫\\n菜鸟。\"]},\"1\":{\"h\":\"幻灯片页\"},\"2\":{\"h\":\"Java基础面试总结\"},\"3\":{\"h\":\"基础语法\"},\"4\":{\"h\":\"&和&&的区别\",\"t\":[\"共同点：\",\"都可以用作逻辑与的运算符，当运算符两边的表达式的结果都为 true 时，整个运算结果才为 true。\",\"不同点：\",\"&&还具有短路的功能，即如果第一个表达式为 false，则不再计算第二个表达式。\",\"&还可以用作位运算符，即两位同时为“1”，结果才为“1”\"]},\"5\":{\"h\":\"隐式转换问题\",\"t\":[\"隐式转换：byte,short,char-->int-->long-->float-->double\",\"注意：从小到大可以隐式转换，数据类型将自动提升（整数和浮点数的存储规则不一样，记住一点long的范围是小于float的）\"]},\"6\":{\"h\":\"switch 语句能否作用在 byte 上，能否作用在 long 和string上?\",\"t\":[\"switch（expr1）中，expr1只能是一个整数表达式或者枚举常量，整数表达式可以是 int基本类型或 Integer包装类型\",\"switch语句能作用在 byte short char上，因为可以隐式转化为int类型\",\"switch语句能作用在 long 和 String上，因为不能隐式转换成 int类型\"]},\"7\":{\"h\":\"short s1 = 1; s1 = s1 + 1; 正确吗? short s1 = 1; s1 += 1; 正确吗?\",\"t\":[\"short s1 = 1; s1 = s1 + 1; 由于 s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型 s1时，编译错误。\",\"short s1 = 1; s1 += 1; 由于+=是 java 语言规定的运算符，java 编译器会对它进行特殊处理，因此可以正确编译。\"]},\"8\":{\"h\":\"抽象类和接口有什么区别\",\"t\":[\"相同点：\",\"不能被实例化\",\"可以作为引用类型\",\"都需要对其中的抽象方法全部实现\",\"不同点：\",\"抽象类：（不能创建实例对象，允许有抽象方法）\",\"可有构造方法\",\"可有抽象方法和具体实现方法（非抽象方法）\",\"成员可以是private,protected\",\"可以有普通成员变量\",\"可以包含静态方法\",\"只能用extend单继承\",\"接口（接口中的方法都是抽象方法，abstract关键字可省略）\",\"不能有构造方法\",\"只能有抽象方法（Java8后可以有默认实现方法default修饰：类优先原则）\",\"成员变量类型默认是public static final\",\"成员变量都是静态常量**\",\"抽象方法默认类型且只能是public abstract\",\"Java8之后可包含静态方法\",\"用implements实现多继承\",\"何时用？\",\"描述事物的本质/一种概念时用抽象类，描述一种操作时用接口（如：is/can）\"]},\"9\":{\"h\":\"hashCode与 equals (重要)\",\"t\":[\"HashMap原理\",\"如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。\",\"如果两个对象的hashCode值相等并且equals()方法返回 true，我们才认为这两个对象相等。\",\"如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。\",\"equals 方法判断两个对象是相等的，那这两个对象的 hashCode 值也要相等。\"]},\"10\":{\"h\":\"== 和 equals() 的区别\",\"t\":[\"==对于基本类型和引用类型的作用效果是不同的(Java只有值传递):\",\"对于基本数据类型来说，== 比较的是值。\",\"对于引用数据类型来说，== 比较的是对象的内存地址。\",\"equals()方法存在两种使用情况:\",\"类没有覆盖equals()方法：通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 Object类equals()方法。\",\"类覆盖了equals()方法 ：一般我们都覆盖equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。\"]},\"11\":{\"h\":\"构造方法有哪些特点？是否可被重写?\",\"t\":[\"构造方法特点如下：\",\"名字与类名相同。\",\"没有返回值，但不能用 void 声明构造函数。\",\"生成类的对象时自动执行，无需调用。\",\"构造方法不能被 override（重写）即不能被继承，但是可以 overload（重载）原因：\",\"重写是子类方法重写父类的方法，重写的方法名不变，而类的构造方法名必须与类名一致，假设父类的构造方法如果能够被子类重写则子类类名必须与父类类名一致才行，所以 **Java 的构造方法是不能被重写的。\"]},\"12\":{\"h\":\"重载和重写的区别\",\"t\":[\"重载：发⽣在同⼀个类中，⽅法名必须相同，参数类型不同、个数不同、顺序不同，⽅法返回值和访问修饰符可以不同。\",\"重写：重写发⽣在运⾏期，是⼦类对⽗类的允许访问的⽅法的实现过程进⾏重新编写。\",\"返回值类型、⽅法名、参数列表必须相同，抛出的异常范围⼩于等于⽗类，访问修饰符范围 ⼤于等于⽗类。\",\"如果⽗类⽅法访问修饰符为 private/final/static 则⼦类就不能重写该⽅法，但是被 static 修饰 的⽅法能够被再次声明。\",\"构造器 Constructor 不能被继承，因此构造⽅法⽆法被重写\",\"综上：重写就是⼦类对⽗类⽅法的重新改造，外部样⼦不能改变，内部逻辑可以改变\",\"区别点\",\"重载⽅法\",\"重写⽅法\",\"发⽣范围\",\"同一个类\",\"子类\",\"参数列表\",\"必须修改\",\"一定不能修改（⽅法名相同、形参列表相同）\",\"返回类型\",\"可修改\",\"⼦类⽅法返回值类型应⽐⽗类⽅法返回值类型更⼩或相等（如果⽅法的返回类型是void和基本数据类型，则返回值重写时不可修改。但是如果⽅法的返回值是引⽤类型，重写时是可以返回该引⽤类型的⼦类的。）\",\"异常\",\"可修改\",\"⼦类⽅法声明抛出的异常类应⽐⽗类⽅法声明抛出的异常类更⼩或相等\",\"访问修饰符\",\"可修改\",\"⼦类⽅法的访问权限应⽐⽗类⽅法的访问权限更⼤或相等。\",\"发⽣阶段\",\"编译时\",\"运行期\"]},\"13\":{\"h\":\"final,finally,finalize区别\",\"t\":[\"final ：用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。内部类要访问局部变量，局部变量必须定义成 final 类型。\",\"finally： 异常处理语句结构的一部分，表示总是执行。\",\"finalize ：Object类的一个方法，在GC垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。JVM 不保证此方法总被调用。\"]},\"14\":{\"h\":\"String,StringBuffer和StringBuilder 的区别是什么? String 为什么是不可变的?\",\"t\":[\"StringBuilder\",\"可变性：\",\"String 类中使用 finalprivate 关键字修饰字符数组来保存字符串，所以不可变。\",\"public final class String implements java.io.Serializable, Comparable<String>, CharSequence { private final char value[]; } \",\"StringBuilder与 StringBuffer都继承自 AbstractStringBuilder类，使用字符数组保存字符串，但是没有使用final 和 - private 关键字修饰，最关键的是这个 AbstractStringBuilder类还提供了很多修改字符串的方法比如 append 方法，所以这两种对象都是可变的。\",\"线程安全性：\",\"String 中的对象是不可变的，可以理解为常量，线程安全。\",\"StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。—>效率低！\",\"StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。—>效率高！\",\"对于三者使用的总结:\",\"操作少量的数据: 适用String\",\"单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilde\",\"多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffe\"]},\"15\":{\"h\":\"Java 中的几种基本数据类型\",\"t\":[\"6 种数字类型 ：byte short int long float double\",\"1 种字符类型：char\",\"1 种布尔型：boolean\",\"包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean\",\"基本类型\",\"位数\",\"字节\",\"默认值\",\"int\",\"32\",\"4\",\"0\",\"short\",\"16\",\"2\",\"0\",\"long\",\"64\",\"8\",\"0L\",\"byte\",\"8\",\"1\",\"0\",\"char\",\"16\",\"2\",\"'u0000'\",\"float\",\"32\",\"4\",\"0f\",\"double\",\"64\",\"8\",\"0d\",\"boolean\",\"1\",\"false\"]},\"16\":{\"h\":\"Integer 与 int的区别\",\"t\":[\"Integer默认值为null，int的默认值为0；包装类型不赋值就是 Null ，而基本类型有默认值且不是 Null。\"]},\"17\":{\"h\":\"包装类型的常量池\",\"t\":[\"Byte Short Integer Long ：[-128，127]\",\"Character ：[0,127]\",\"Boolean ： True or False\",\"Float Double：无\"]},\"18\":{\"h\":\"自动装箱、拆箱\",\"t\":[\"Integer i = 10 等价于 Integer i = Integer.valueOf(10)\",\"int n = i 等价于 int n = i.intValue();\",\"Integer i = 10; //装箱 int n = i; //拆箱 \"]},\"19\":{\"h\":\"作用域 public，private，protected，default的区别\",\"t\":[\"作用域\",\"当前类\",\"同一包\",\"子类\",\"其他包\",\"public\",\"√\",\"√\",\"√\",\"√\",\"protected\",\"√\",\"√\",\"√\",\"×\",\"default\",\"√\",\"√\",\"×\",\"×\",\"private\",\"√\",\"×\",\"×\",\"×\"]},\"20\":{\"h\":\"String s = new String(\\\"ab\\\")创建了几个 String 对象?\",\"t\":[\"1个或2个\",\"new String() 创建一个新的对象\",\"\\\"ab\\\"对应一个对象，这个对象放在字符串常量池中（初始时创建对象并放入）\"]},\"21\":{\"h\":\"深拷贝和浅拷贝区别？什么是引用拷贝？\",\"t\":[\"浅拷贝：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。\",\"深拷贝 ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。\",\"拷贝\"]},\"22\":{\"h\":\"数组和List如何相互转化\",\"t\":[\"List转换成数组：List.toArray()/List.toArray(T[] a)\",\"List<String> list = new ArrayList<>(); Object[] array = list.toArray(); // 注意基本类型是不能作为泛型参数的 List<String> list = new ArrayList<>(); list.add(\\\"list-a\\\"); list.add(\\\"list-b\\\"); String[] array = list.toArray(new String[list.size()]); \",\"数组转换成List：Arrays.asList()/Collections.addAll(list,array[])\",\"String[] array = {\\\"a\\\", \\\"b\\\"}; List<String> list = Arrays.asList(array); // Collections String[] array = {\\\"a\\\", \\\"b\\\"}; List<String> list = new ArrayList<>(array.length); Collections.addAll(list, array); \"]},\"23\":{\"h\":\"Get和Post的区别\",\"t\":[\"GET在浏览器回退（后退刷新）时是无害的，而POST会再次提交请求。\",\"GET产生的URL地址可收藏为书签，而POST不可以。\",\"GET请求会被浏览器主动缓存，而POST不会，除非手动设置。\",\"GET请求只能进行url编码，而POST支持多种编码方式。\",\"GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\",\"GET请求在URL中传送的参数是有长度限制的，而POST没有限制。\",\"对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\",\"GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\",\"GET参数通过URL传递，POST放在请求体中。\",\"GET产生一个TCP数据包，POST产生两个TCP数据包。\"]},\"24\":{\"h\":\"转发(Forward)和重定向(Redirect)的区别\",\"t\":[\"本质：转发是服务器行为，重定向是客户端行为。\",\"从地址栏显示来说：\",\"forward是服务器内部的重定向，服务器直接访问目标地址的 url网址，把里面的东西读取出来，但是客户端并不知道，因此用forward的话，客户端浏览器的网址是不会发生变化的。\",\"redirect是服务器根据逻辑，发送一个状态码，告诉浏览器重新去请求那个地址，所以地址栏显示的是新的地址。\",\"从数据共享来说：\",\"由于在整个定向的过程中用的同一个request，因此forward会将request的信息带到被重定向的jsp或者servlet中使用。即可以共享数据。\",\"redirect不能共享数据。\",\"从运用的地方来说：\",\"forward一般用于用户登录的时候，根据角色转发到相应的模块。\",\"redirect一般用于用户注销登录时返回主页面或者跳转到其他网站。\",\"从效率来说：\",\"forward效率高。\",\"redirect效率低。\",\"从请求的次数来说：\",\"forward只有一次请求。\",\"redirect有两次请求。\",\"举例说明：\",\"假设你去办理某个执照，重定向：你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，白己乘车去了B局。转发：你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。\"]},\"25\":{\"h\":\"Cookie和Session的区别\",\"t\":[\"Cookie 一般用来保存用户信息 比如①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③登录一次网站后访问网站其他页面不需要重新登录。\",\"Session 的主要作用就是通过服务端记录用户的状态。 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。\",\"cookie是存放在浏览器上的，session是存放在服务器上的。\",\"cookie数据不安全，如果考虑到安全应使用session。\",\"session会增加服务端的内存压力,考虑到减轻服务器性能方面，应当使用cookie。\",\"cookie只能存放一对字符串k-v\"]},\"26\":{\"h\":\"泛型\"},\"27\":{\"h\":\"什么是泛型？伪泛型？类型擦除？\",\"t\":[\"泛型：\",\"JDK1.5引入\",\"本质是参数化类型，也就是说所操作的数据类型被指定为一个参数\",\"作用：提高代码的复用性\",\"伪泛型：\",\"Java 的泛型其实是伪泛型，因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除\",\"类型擦除：\",\"将所有的泛型信息替换为具体的类型，就像完全没有泛型一样\"]},\"28\":{\"h\":\"基本类型能不能作为泛型？\",\"t\":[\"不能\",\"因为类型擦除后，变为原始类型Object，但是Object类型不能存储Int型，只能引用Integer的值\"]},\"29\":{\"h\":\"如何理解泛型的编译器检查\",\"t\":[\"Java编译器是通过先检查代码中泛型类型，然后在进行类型擦除，再进行编译\"]},\"30\":{\"h\":\"反射\"},\"31\":{\"h\":\"什么是反射？反射的核心类有哪些？应用场景？\",\"t\":[\"反射：\",\"在运行的时候，可以通过反射获取任意一个类的所有属性和方法，还可以调用这些方法和属性\",\"作用：使代码更加灵活，但性能会有影响\",\"核心类：\",\"Class类：Class.forName()、object.getClass()、xxxClassLoader.loadClass()\",\"Field类\",\"Method类\",\"Constructor类\",\"应用场景：\",\"框架中的JDK动态代理\",\"注解\"]},\"32\":{\"h\":\"JDK动态代理和CGLIB动态代理是什么？\",\"t\":[\"动态代理：\",\"JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的\",\"JDK动态代理：只能代理实现了接口的类（效率更高）\",\"核心类：InvocationHandler 接口和Proxy类\",\"定义一个接口及其实现类；\",\"实现**InvocationHandler**接口并重写invoke(Object proxy, Method method, Object[] args)方法\",\"通过Proxy.newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)方法创建代理对象；\",\"CGLIB动态代理：可以代理未实现任何接口的类且需要添加依赖\",\"核心类：MethodInterceptor接口和Enhancer类\",\"定义一个类；\",\"自定义 MethodInterceptor接口并重写 intercept 方法，intercept 用于拦截增强被代理类的方法，和 JDK 动态代理中的 invoke 方法类似；\",\"通过 Enhancer类的 create()创建代理类；\"]},\"33\":{\"h\":\"异常\"},\"34\":{\"h\":\"异常有哪些？\",\"t\":[\"异常\"]},\"35\":{\"h\":\"try-catch-finally中finally注意事项\",\"t\":[\"try块： 用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。\",\"catch块: 用于处理 try 捕获到的异常。\",\"finally块： 无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。\",\"注意：不要在 finally 语句块中使用 return!！！当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句不会被执行。\",\"public static void main(String[] args) { System.out.println(f(2));; } public static int f(int value) { try { return value * value; } finally { if (value == 2) { return 0; } } } //结果为：0 \"]},\"36\":{\"h\":\"IO流\"},\"37\":{\"h\":\"Java 中 IO 流分为几种?\",\"t\":[\"（流向）可以分为输入流（InputXXX/Reader）和输出流（OutXXX/Writer）；\",\"（操作单元）可以划分为字节流（InputStream/OutStream）和字符流（Reader/Writer）；\",\"（流的角色）划分为节点流和处理流（带缓冲的Buffered/Data/Object/PrintXXX）。\"]},\"38\":{\"h\":\"什么是序列化和反序列化（I/O）？\",\"t\":[\"序列化： 将数据结构或对象转换成二进制字节流存储到文件系统、数据库、内存中。\",\"反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程\",\"扩展：\",\"transient 关键字：阻止对象序列化。\",\"transient只能修饰变量，不能修饰类和方法。\",\"transient 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 int类型，那么反序列后结果就是 0。\",\"static 变量因为不属于任何对象(Object)，所以无论有没有 transient 关键字修饰，均不会被序列化\"]},\"39\":{\"h\":\"NIO、BIO、AIO的区别？\",\"t\":[\"BIO （Blocking I/O）：同步阻塞I/O 模式。\",\"NIO （No-Blocking I/O）：同步非阻塞 I/O 模式。\",\"AIO （Asynchronous I/O）：异步非阻塞 I/O 模型。\",\"形象比喻：\",\"BIO：先来到厨房，开始烧水，并坐在水壶面前一直等着水烧开。(阻塞)\",\"NIO：先来到厨房，开始烧水，但是我们不一直坐在水壶前面等，而是回到客厅 看电视，然后每隔几分钟到厨房看一下水有没有烧开。(选择器监听)\",\"AIO：先来到厨房，开始烧水，不一直坐在水壶前面等，也不隔一段时间去看一下，而是在客厅看电视，水壶上面有个开关，水烧开之后他会通知我。(回调)\",\"IO\"]},\"40\":{\"c\":[\"Java\"]},\"41\":{\"c\":[\"Java基础\",\"Java面试\"]},\"42\":{\"h\":\"Java集合面试总结\",\"t\":[\"集合\"]},\"43\":{\"h\":\"List（有序）\",\"t\":[\"Arraylist： Object[] 数组，线程不安全，效率高；数组不够用时在原来的基础上扩展0.5倍；\",\"Vector(旧)： Object[] 数组，线程安全，效率低。数组不够用时在原来的基础上扩展1倍；\",\"LinkedList： 双向链表，线程不安全，支持存储 NULL 数据\"]},\"44\":{\"h\":\"Set（都是唯一、线程不安全）\",\"t\":[\"HashSet(无序）: 基于 HashMap实现的哈希表，底层采用 HashMap来保存元素\",\"LinkedHashSet(先进先出): LinkedHashSet是 HashSet的子类，并且其内部是通过 LinkedHashMap来实现的链表+ 哈希表。类似于 LinkedHashMap其内部是基于 HashMap实现一样\",\"TreeSet(有序): 红黑树(自平衡的排序二叉树)\"]},\"45\":{\"h\":\"Queue（单端队列）\",\"t\":[\"PriorityQueue: Object[] 数组来实现二叉堆\",\"ArrayQueue： Object[]可变长数组 + 双指针，不支持Null存储，可扩容\",\"DeQueue(接口)：双端队列\"]},\"46\":{\"h\":\"Map（键值对获取）\",\"t\":[\"HashMap： JDK1.8 之前由数组+链表组成的，数组是 HashMap的主体，链表则是主要为了解决哈希冲突而存在的（拉链法解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值时，将链表转化为红黑树，以减少搜索时间（不安全、无序、允许空Key和空Value！）\",\"LinkedHashMap：继承自 HashMap，由数组和链表或红黑树组成。另外，在此结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。\",\"Hashtable(旧)： 数组+链表组成的，线程安全(synchronized同一把锁），效率低（不允许Key为空！）\",\"TreeMap(有序)： 红黑树（自平衡的排序二叉树），实现了NavigableMap(搜索功能)和SortedMap(键排序功能)\",\"ConcurrentHashMap：线程安全（1.7分段锁、1.8 synchronized + CAS乐观锁）\"]},\"47\":{\"h\":\"List, Set, Queue, Map 四者的区别？\",\"t\":[\"List(顺序): 存储的元素是有序的、可重复的。\",\"Set(去重): 存储的元素是无序的、不可重复的。\",\"Queue(队列先进先出): 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。\",\"Map(键值对): 使用键值对（key-value）存储，key是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。\"]},\"48\":{\"h\":\"HashMap的原理？\"},\"49\":{\"h\":\"JDK1.8之前:(性能会稍差)\",\"t\":[\"数组 + 链表 (链表散列），通过 key 的hashCode经过扰动函数(减少碰撞)处理过后得到 hash值再经过哈希算法获得数组索引位置；若存在元素，通过equal判定hash值和key值是否相同，相同则覆盖，不同则拉链法解决冲突（碰撞）。\"]},\"50\":{\"h\":\"JDK1.8之后：\",\"t\":[\"Entry数组 + 链表 +红黑树(更好解决冲突)，hash值和key值（通过equal比较后不同时）不同则：当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的总长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树，即链表长度>8，总容量>64）时，将链表转化为红黑树（动态平衡二叉树），以减少搜索时间。\",\"HashMap\"]},\"51\":{\"h\":\"CurrentHashMap的底层原理？\"},\"52\":{\"h\":\"JDK1.7\",\"t\":[\"首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。（ConcurrentLevel=16）\",\"ConcurrentHashMap是由 Segment 数组结构和 HashEntry数组结构组成。\",\"Segment 实现了 ReentrantLock,所以 Segment 是一种可重入锁，扮演锁的角色。HashEntry 用于存储键值对数据。\",\"一个 ConcurrentHashMap里包含一个 Segment 数组。Segment 的结构和 HashMap类似，是一种数组和链表结构，一个 Segment 包含一个 HashEntry数组，每个 HashEntry是一个链表结构的元素，每个 Segment 守护着一个 HashEntry数组里的元素，当对 HashEntry数组的数据进行修改时，必须首先获得对应的 Segment 的锁。\"]},\"53\":{\"h\":\"JDK1.8 (CAS无锁算法)\",\"t\":[\"ConcurrentHashMap取消了 Segment 分段锁，采用 CAS 和 synchronized 来保证并发安全。数据结构跟 HashMap1.8 的结构类似，数组+链表/红黑二叉树。Java 8 在链表长度超过一定阈值（8）时将链表转换为红黑树。\",\"synchronized 只锁定当前链表或红黑二叉树的首节点，这样只要 hash 不冲突，就不会产生并发，效率又提升 N 倍。\",\"ConcurrentHashMap1\",\"ConcurrentHashMap2\"]},\"54\":{\"h\":\"Collection实现比较的接口Comparable 和 Comparator的区别？\",\"t\":[\"comparable 接口实际上是出自java.lang包它有一个compareTo(Object obj)方法用来排序\",\"comparator接口实际上是出自java.util包它有一个compare(Object obj1, Object obj2)方法用来排序\"]},\"55\":{\"h\":\"ConcurrentHashMap和Hashtable的区别\"},\"56\":{\"h\":\"Hashtable线程安全:使用 synchronized 来保证线程安全\",\"t\":[\"Hashtable\"]},\"57\":{\"h\":\"ConcurrentHashMap线程安全？\",\"t\":[\"JDK1.7： （分段锁）Segment数组(实现可重入锁ReentrantLocks) + HashEntry数组 + 链表\",\"ConcurrentHashMap1.7\",\"JDK1.8：（synchronized 和 CAS）Node 数组+链表+红黑树\",\"ConcurrentHashMap1.8\"]},\"58\":{\"h\":\"Collection 和 Collections 的区别?\",\"t\":[\"Collection：集合类上级接口，继承它的接口主要有List、Set、Queue\",\"Collections：工具类，提供对集合的查找，替换，排序以及线程安全化\"]},\"59\":{\"h\":\"ArrayList扩容机制（简）\",\"t\":[\"add()\",\"ensureCapacityInternal()\",\"ensureExplicitCapacity()\",\"grow()\",\"hugeCapacity()\"]},\"60\":{\"c\":[\"Java\"]},\"61\":{\"c\":[\"Java集合\",\"Java面试\"]},\"62\":{\"h\":\"Java线程面试总结\"},\"63\":{\"h\":\"基础语法\",\"t\":[\"笔记正在火速编辑中\"]},\"64\":{\"c\":[\"Java\"]},\"65\":{\"c\":[\"Java线程\",\"Java面试\"]},\"66\":{\"h\":\"Java8新特性\",\"t\":[\"新特性.PNG\"]},\"67\":{\"h\":\"HashMap\"},\"68\":{\"h\":\"JDK1.8之前：（性能会稍差）\",\"t\":[\"数组 + 链表 (链表散列），通过 key 的hashCode经过扰动函数(减少碰撞)处理过后得到 hash值再经过哈希算法获得数组索引位置；若存在元素，通过equal判定hash值和key值是否相同，相同则覆盖，不同则拉链法解决冲突（碰撞）。\"]},\"69\":{\"h\":\"JDK1.8之后：\",\"t\":[\"Entry数组 + 链表 +红黑树(更好解决冲突)，hash值和key值（通过equal比较后不同时）不同则：当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的总长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树，即链表长度>8，总容量>64）时，将链表转化为红黑树（动态平衡二叉树），以减少搜索时间。\"]},\"70\":{\"h\":\"CurrentHashMap\"},\"71\":{\"h\":\"JDK1.7\",\"t\":[\"首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。（ConcurrentLevel=16）\",\"ConcurrentHashMap是由 Segment 数组结构和 HashEntry数组结构组成 Segment 实现了 ReentrantLock,所以 Segment 是一种可重入锁，扮演锁的角色。HashEntry 用于存储键值对数据。\",\"一个 ConcurrentHashMap里包含一个 Segment 数组。Segment 的结构和 HashMap类似，是一种数组和链表结构，一个 Segment 包含一个 HashEntry数组，每个 HashEntry是一个链表结构的元素，每个 Segment 守护着一个 HashEntry数组里的元素，当对 HashEntry数组的数据进行修改时，必须首先获得对应的 Segment 的锁。\"]},\"72\":{\"h\":\"JDK1.8 (CAS无锁算法)\",\"t\":[\"ConcurrentHashMap取消了 Segment 分段锁，采用 CAS 和 synchronized 来保证并发安全。数据结构跟 HashMap1.8 的结构类似，数组+链表/红黑二叉树。Java 8 在链表长度超过一定阈值（8）时将链表转换为红黑树。\",\"synchronized 只锁定当前链表或红黑二叉树的首节点，这样只要 hash 不冲突，就不会产生并发，效率又提升 N 倍。\",\"1.png\",\"2.PNG\"]},\"73\":{\"h\":\"内存区域\",\"t\":[\"4.PNG\"]},\"74\":{\"h\":\"1.Java8之前（HotPot）\",\"t\":[\"方法区属于堆中永久区（PremGen）的一部分（存类加载的一些信息及核心类库，几乎不会被垃圾回收机制回收）\"]},\"75\":{\"h\":\"2.Java8之后\",\"t\":[\"永久区被取代为元空间（MetaSpace)，特点：物理内存，从而垃圾回收几率低（内存满时回收），OOM内存溢出发生概率小\"]},\"76\":{\"h\":\"Lambda表达式\"},\"77\":{\"h\":\"基础语法\"},\"78\":{\"h\":\"左侧为参数列表，右侧为需要执行的功能，即Lambda体\",\"t\":[\"无参数，无返回值\",\" () -> System.out.println(\\\"Lambda!!\\\"); \",\"有一个参数，无返回值（只有一个参数时，括号可省略）\",\" (x) -> System.out.println(x); x -> System.out.println(x) \",\"2个及以上参数，有返回值，且Lambda体中有多条语句\",\" Comparator<Integer> com =(x, y) -> { system.out.println(\\\"函数式接口\\\"); return Integer.compare(x, y); } \",\"Lambda体中只有1条语句，return和大括号都可省略\",\" Comparator<Integer> com =(x, y) -> Integer.compare(x, y); \",\"Lambda表达式的参数列表的数据类型可以省略，JVM编译器通过上下文推断出数据类型，即类型推断\",\" (Integer x,Integer y) -> Integer.compare(x, y); \"]},\"79\":{\"h\":\"替代匿名内部类\"},\"80\":{\"h\":\"(只要方法的参数是函数式接口都可以用 Lambda 表达式)\",\"t\":[\"函数式接口： 即接口中只有一个抽象方法的接口，可以使用@FunctionalInterface修饰\"]},\"81\":{\"h\":\"1.Runnable 接口\",\"t\":[\" new Thread(new Runnable() { @Override public void run() { System.out.println(\\\"The runable now is using!\\\"); } }).start(); //用lambda new Thread(() -> System.out.println(\\\"It's a lambda function!\\\")).start(); \"]},\"82\":{\"h\":\"2.Comperator 接口\",\"t\":[\" // 示例1 Comparator<Integer> com = new Comparator<Integer>() { @@Override public int compare(Integer o1, Integer o2) { return Integer.compare(o1, o2); } } //Lambda(1条语句) Comparator<Integer> com =(x, y) -> Integer.compare(o1, o2); ​ //Lambda(多条语句) Comparator<Integer> com =(x, y) -> { system.out.println(\\\"Lambda\\\"); return Integer.compare(o1, o2); } ​ //示例2 List<Integer> strings = Arrays.asList(1, 2, 3); ​ Collections.sort(strings, new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { return o1 - o2;} }); ​ //Lambda Collections.sort(strings, (Integer o1, Integer o2) -> o1 - o2); //分解开 Comparator<Integer> comperator = (Integer o1, Integer o2) -> o1 - o2; Collections.sort(strings, comperator); \"]},\"83\":{\"h\":\"3.Listener 接口\",\"t\":[\" JButton button = new JButton(); button.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { e.getItem(); } }); //lambda button.addItemListener(e -> e.getItem()); \"]},\"84\":{\"h\":\"4.自定义函数式接口\",\"t\":[\"// 示例1 @FunctionalInterface public interface LambdaInterface { void f(); } //使用 public class LambdaClass { public static void forEg() { lambdaInterfaceDemo(()-> System.out.println(\\\"自定义函数式接口\\\")); } //函数式接口参数 static void lambdaInterfaceDemo(LambdaInterface i){ System.out.println(i); } } //示例2：对一个数进行运算 @FunctionalInterface //接口中只有一个抽象方法，public abstract可省略 public interface MyFun{ public Integer getValue(Integer num); } @Test public void test() { Integer num = operation(100, (x) -> x + 100 ) } public Integer operation(Integer num, MyFun mf){ return mf.getValue(num) } \"]},\"85\":{\"h\":\"5.集合迭代\",\"t\":[\"void lamndaFor() { List<String> strings = Arrays.asList(\\\"1\\\", \\\"2\\\", \\\"3\\\"); //传统foreach for (String s : strings) { System.out.println(s); } //Lambda foreach strings.forEach((s) -> System.out.println(s)); //or strings.forEach(System.out::println); //map Map<Integer, String> map = new HashMap<>(); map.forEach((k,v)->System.out.println(v)); } \"]},\"86\":{\"h\":\"其他函数式接口\",\"t\":[\"5.PNG\"]},\"87\":{\"h\":\"四大内置核心函数式接口\",\"t\":[\"Consumer<T>：消费型接口 void accept(T t);\",\"Supplier<T>：供给型接口 T get();\",\"Function<T, R>：函数型接口 R apply(T t);\",\"Predicate<T>：断言型接口 boolean test(T t);\",\" // 消费型接口 Consumer<T> void accept(T t) @Test public void test1() { //未使用Lambda表达式 Learn(\\\"java\\\", new Consumer<String>() { @Override public void accept(String s) { System.out.println(\\\"学习什么？ \\\" + s); } }); System.out.println(\\\"====================\\\"); //使用Lambda表达 Learn(\\\"html\\\", s -> System.out.println(\\\"学习什么？ \\\" + s)); } private void Learn(String s, Consumer<String> stringConsumer) { stringConsumer.accept(s); } // 供给型接口 Supplier<T> T get() @Test public void test2() { // Supplier提供0-100随机数放到集合中 List<Integer> list = getNumList(10, () -> (int)(Math.random() * 100)); for(Integer num : list) { System.out.println(num); } } // 产生指定个数的整数放入集合中 public List<Integer> getNumList(int num, Supplier<Integer> sup) { List<Integer> list = new ArrayList<>(); for(int i = 0; i < num; i++) { Integer n = sup.get(); list.add(n); } return list; } //函数型接口 Function<T,R> R apply(T t) @Test public void test3() { //使用Lambda表达式 Employee employee = new Employee(1001, \\\"Tom\\\", 45, 10000); Function<Employee, String> func1 =e->e.getName(); System.out.println(func1.apply(employee)); //Tom System.out.println(\\\"====================\\\"); //使用方法引用 Function<Employee,String>func2 = Employee::getName; System.out.println(func2.apply(employee)); //Tom } //断定型接口 Predicate<T> boolean test(T t) @Test public void test4() { List<String> list = Arrays.asList(\\\"123\\\", \\\"1234\\\", \\\"12345\\\"); // 将字符串长度大于3的放入集合 List<String> strList = ListfilterStr(list, (s) -> s.length() > 3); for(String str : strList ) { System.out.println(str); } } //将满足条件的字符串放入集合中 public List<String> filterStr(List<String> list, Predicate<String> pre) { List<String> strList = new ArrayList<>(); for(String str : list) { if(pre.test(str)) { strList.add(str); } } } \"]},\"88\":{\"h\":\"方法引用与构造引用\",\"t\":[\"方法引用语法格式\",\"对象：：实例方法名\",\"类：：静态方法名\",\"类：：实例方法名\",\"注意：\",\"Lambda体中调用方法的参数列表与返回值类型，要与函数式接口中抽象方法的函数列表与返回值类型保持一致\",\"若Lambda参数列表中的第一个参数是实例方法的调用者，而第二个参数是实例方法的参数时，可使用 类：：实例方法名，如x.equal(y)\",\"构造器引用语法格式\",\"类名：：new\",\"注意：\",\"需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表保持一致（如：若调用无参构造器，则用Supplier<T>，因为它的抽象方法T get()没有参数）\",\"数组引用\",\"Type[]：：new\"]},\"89\":{\"h\":\"Stream\"},\"90\":{\"h\":\"Stream三个操作步骤\",\"t\":[\"创建Stream\",\"集合获取流：new ArrayList<>().stream()\",\"获取数组流：Arrays.stream(new int[10])\",\"Stream静态方法of：Stream.of(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\")\",\"无限流：Stream.iterate()\",\"并行流：Stream.parallel()\",\"中间操作（不会有任何结果）\",\"筛选和切片\",\".filter(判断)：过滤\",\".limit(n)：使元素不超过给定数量\",\".skip(n)：跳过前n个\",\".distinct()：去重（需要重写hashCode()和equals()）\",\"映射（提取信息到新的集合中）\",\".map(带1个参数)：类似于二维数组流或add()如：[11, 22, [aa, bb, cc]]\",\".flatMap(带1个参数)：类似于一维数组流或addAll()如：[11, 22, aa, bb, cc]\",\"排序\",\".sorted()：字典排序（Comparable接口中CompareTo方法）\",\".sorted(Comparator com)：自定义排序\",\"终止操作（延迟加载/惰性求值）\",\"查找与匹配\",\".allMatch() / .anyMatch() / .noneMatch()\",\".findFirst() / .findAny()\",\".count()\",\".max([Comparator]Integer::compare) / .min(Comparator com)\",\".forEach()\",\"归约\",\".reduce([起始值]，递归操作[2个参数])常和map连接\",\"// 累加数组 List<Integer> list = Arrays.asList(1, 2, 3) Integer sum = list.stream().reduce(0, (x, y) -> x + y); // 计算工资总和 Optional<Double> sum = employees.stream().map(Employee::getSalary).reduce(Double::sum); \",\"收集\",\".collect(Collectors.xxx()) 可将流转化为其他形式\",\"其中xxx可为：groupingBy(),counting(),averagingDouble()等\"]},\"91\":{\"h\":\"常见StreamAPI\",\"t\":[\"@Test public void test() { // 创建Stream Stream<String> stream = Stream.of(\\\"aa\\\", \\\"bb\\\", \\\"cc\\\"); List<String> strings = Arrays.asList(\\\"abc\\\", \\\"def\\\", \\\"gkh\\\", \\\"abc\\\"); //返回符合条件的stream Stream<String> stringStream = strings.stream().filter(s -> \\\"abc\\\".equals(s)); //计算流符合条件的流的数量 long count = stringStream.count(); //forEach遍历->打印元素 strings.stream().forEach(System.out::println); //limit 获取到1个元素的stream Stream<String> limit = strings.stream().limit(1); //toArray 比如我们想看这个limitStream里面是什么，比如转换成String[],比如循环 String[] array = limit.toArray(String[]::new); //map 对每个元素进行操作返回新流 Stream<String> map = strings.stream().map(s -> s + \\\"22\\\"); //sorted 排序并打印 strings.stream().sorted().forEach(System.out::println); //Collectors collect 把abc放入容器中 List<String> collect = strings.stream().filter(string -> \\\"abc\\\".equals(string)).collect(Collectors.toList()); //把list转为string，各元素用，号隔开 String mergedString = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.joining(\\\",\\\")); //对数组的统计，比如用 List<Integer> number = Arrays.asList(1, 2, 5, 4); IntSummaryStatistics statistics = number.stream().mapToInt((x) -> x).summaryStatistics(); System.out.println(\\\"列表中最大的数 : \\\"+statistics.getMax()); System.out.println(\\\"列表中最小的数 : \\\"+statistics.getMin()); System.out.println(\\\"平均数 : \\\"+statistics.getAverage()); System.out.println(\\\"所有数之和 : \\\"+statistics.getSum()); //concat 合并流 List<String> strings2 = Arrays.asList(\\\"xyz\\\", \\\"jqx\\\"); Stream.concat(strings2.stream(),strings.stream()).count(); //注意 一个Stream只能操作一次，不能断开，否则会报错。 Stream stream = strings.stream(); //第一次使用 stream.limit(2); //第二次使用 stream.forEach(System.out::println); //报错 java.lang.IllegalStateException: stream has already been operated upon or closed //但是可以这样, 连续使用 stream.limit(2).forEach(System.out::println); } \"]},\"92\":{\"h\":\"特点\",\"t\":[\"通过简单的链式编程，使得它可以方便地对遍历处理后的数据进行再处理\",\"方法参数都是函数式接口类型\",\"一个 Stream 只能操作一次，操作完就关闭了，继续使用这个 stream 会报错\",\"Stream 不保存数据，不改变数据源\",\"Stream操作是延迟执行的\"]},\"93\":{\"h\":\"Optional\",\"t\":[\"用途：防止空指针异常\",\"Optional容器类的常用方法：\",\"Optional.of(T t)：创建一个Optional实例\",\"Optional.empty()：创建一个空的Optional实例\",\"Optional.ofNullable(T t)：若t不为null，创建Optional实例，否则创建空实例\",\"isPresent()：判断是否含值\",\"orElse(T t)：如果调用对象含值，返回该对象值，否则返回自定义对象t的值\",\"orElseGet(Supplier s)：如果调用对象含值，返回该对象值，否则返回函数式接口s的值\",\"map(Function f)：若有值对其处理，并返回处理后的Optional否则返回Optional.empty()\",\"flatMap(Function mapper)：与map类似，要求返回值必须是Optional\",\"主要的API： Optional.ofNullable()\",\"// 传统防止空指针异常方法 class Zoo { private Dog dog; } class Dog { private int age; } Zoo zoo = getZoo(); if(zoo != null){ Dog dog = zoo.getDog(); if(dog != null){ int age = dog.getAge(); System.out.println(age); } } // Optional map Optional.ofNullable(zoo).map(o -> o.getDog()).map(d -> d.getAge()).ifPresent(age -> System.out.println(age) ); // Optional flatmap Optional.ofNullable(zoo).flatmap(o -> Optional.of(o.getDog())).flatmap(d -> Optional.of(d.getAge())).ifPresent(age -> System.out.println(age) ); \"]},\"94\":{\"h\":\"时间日期API\",\"t\":[\"总结：\",\"Java 8 之前 转换都需要借助 SimpleDateFormat类（线程不安全，需通过ThreadLocal解决），而Java 8 之后只需要LocalDate 、 LocalTime 、 LocalDateTime的 of 或 parse 方法。\"]},\"95\":{\"h\":\"格式化\",\"t\":[\"Java 8 之前：\",\"public void oldFormat(){ Date now = new Date(); //format yyyy-MM-dd HH:mm:ss SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); String date = sdf.format(now); System.out.println(String.format(\\\"date format : %s\\\", date)); //format HH:mm:ss SimpleDateFormat sdft = new SimpleDateFormat(\\\"HH:mm:ss\\\"); String time = sdft.format(now); System.out.println(String.format(\\\"time format : %s\\\", time)); //format yyyy-MM-dd HH:mm:ss SimpleDateFormat sdfdt = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); String datetime = sdfdt.format(now); System.out.println(String.format(\\\"dateTime format : %s\\\", datetime)); } \",\"Java 8 之后：\",\"public void newFormat(){ //format yyyy-MM-dd LocalDate date = LocalDate.now(); System.out.println(String.format(\\\"date format : %s\\\", date)); //format HH:mm:ss LocalTime time = LocalTime.now().withNano(0); System.out.println(String.format(\\\"time format : %s\\\", time)); //format yyyy-MM-dd HH:mm:ss LocalDateTime dateTime = LocalDateTime.now(); DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\"); String dateTimeStr = dateTime.format(dateTimeFormatter); System.out.println(String.format(\\\"dateTime format : %s\\\", dateTimeStr)); } \"]},\"96\":{\"h\":\"字符串转日期格式\",\"t\":[\"Java 8 之前：\",\"//已弃用 Date date = new Date(\\\"2021-01-26\\\"); //替换为 SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); Date date1 = sdf.parse(\\\"2021-01-26\\\"); \",\"Java 8 之后：\",\"LocalDate date = LocalDate.of(2021, 1, 26); LocalDate.parse(\\\"2021-01-26\\\"); LocalDateTime dateTime = LocalDateTime.of(2021, 1, 26, 12, 12, 22); LocalDateTime.parse(\\\"2021-01-26 12:12:22\\\"); LocalTime time = LocalTime.of(12, 12, 22); LocalTime.parse(\\\"12:12:22\\\"); \"]},\"97\":{\"h\":\"时间格式线程安全问题\",\"t\":[\"6.PNG\"]},\"98\":{\"h\":\"接口的默认实现方法和静态方法\",\"t\":[\"类优先原则：如果一个父类提供了具体实现方法，那么接口中具有相同名称和参数的默认实现方法会被忽略。\",\"接口冲突：如果实现的2个接口同时提供了一个具有相同名称和参数列表的方法，那么必须选择一个覆盖该方法来解决接口的冲突。\"]},\"99\":{\"c\":[\"Java\"]},\"100\":{\"c\":[\"Java特性\"]},\"101\":{\"h\":\"后端\"},\"102\":{\"h\":\"目录\",\"t\":[\"Java-basic 展示\",\"页面展示\",\"禁用展示\",\"加密展示\"]},\"103\":{\"c\":[\"使用指南\"]},\"104\":{\"h\":\"主要功能与配置演示\"},\"105\":{\"h\":\"目录\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\"]},\"106\":{\"c\":[\"使用指南\"]},\"107\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"108\":{\"c\":[\"使用指南\"]},\"109\":{\"c\":[\"禁用\"]},\"110\":{\"h\":\"密码加密的文章\",\"t\":[\"实际的文章内容。\",\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\",\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"]},\"111\":{\"c\":[\"使用指南\"]},\"112\":{\"c\":[\"文章加密\"]},\"113\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"114\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"115\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"116\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"117\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"118\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"119\":{\"h\":\"自定义容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"120\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"121\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"122\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"123\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"124\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注[1].\",\"查看详情\"]},\"125\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"126\":{\"h\":\"任务列表\",\"t\":[\" 计划 1\",\" 计划 2\",\"查看详情\"]},\"127\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"128\":{\"h\":\"卡片\",\"t\":[\"title: Mr.Hope desc: Where there is light, there is hope logo: https://mrhope.site/logo.svg link: https://mrhope.site color: rgba(253, 230, 138, 0.15) \",\"查看详情\"]},\"129\":{\"h\":\"图表\",\"t\":[\"查看详情\"]},\"130\":{\"h\":\"Echarts\",\"t\":[\"查看详情\"]},\"131\":{\"h\":\"流程图\",\"t\":[\"查看详情\"]},\"132\":{\"h\":\"Mermaid\",\"t\":[\"查看详情\"]},\"133\":{\"h\":\"Tex 语法\",\"t\":[\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\",\"查看详情\"]},\"134\":{\"h\":\"导入文件\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\",\"查看详情\"]},\"135\":{\"h\":\"代码演示\",\"t\":[\"::: normal-blog 一个普通 blog\",\"<h1>VuePress Theme Hope</h1> <p><span id=\\\"very\\\">非常</span>强大!</p> \",\"document.querySelector(\\\"#very\\\").addEventListener(\\\"click\\\", () => { alert(\\\"非常强大\\\"); }); \",\"span { color: red; } \",\":::\",\"查看详情\"]},\"136\":{\"h\":\"样式化\",\"t\":[\"向 Mr.Hope 捐赠一杯咖啡。 \",\"查看详情\"]},\"137\":{\"h\":\"交互演示\",\"t\":[\"查看详情\"]},\"138\":{\"h\":\"Vue 交互演示\",\"t\":[\"查看详情\"]},\"139\":{\"h\":\"幻灯片\",\"t\":[\"查看详情\",\"这是脚注内容 ↩︎\"]},\"140\":{\"c\":[\"使用指南\"]},\"141\":{\"c\":[\"Markdown\"]},\"142\":{\"h\":\"这是文章的标题\",\"t\":[\"title: 页面配置\",\"cover: /assets/images/cover1.jpg\",\"icon: file\",\"order: 1\",\"author: Ms.Hope\",\"date: 2020-01-01\",\"category:\",\"使用指南\",\"tag:\",\"页面配置\",\"使用指南\",\"sticky: true\",\"star: true\",\"footer: 这是测试显示的页脚\"]},\"143\":{\"h\":\"copyright: 无版权\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"144\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"145\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"提示\",\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\",\"主题包含了一个自定义徽章可以使用:\",\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"]},\"146\":{\"h\":\"页面结构\",\"t\":[\"此页面应当包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"导航栏\",\"侧边栏\",\"页脚\",\"返回顶部按钮\",\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"]},\"147\":{\"h\":\"前端\"},\"148\":{\"h\":\"目录\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\"]},\"149\":{\"c\":[\"使用指南\"]},\"150\":{\"h\":\"草莓\",\"t\":[\"这是一条摘要\"]},\"151\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"152\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"153\":{\"c\":[\"水果\",\"草莓\"]},\"154\":{\"c\":[\"红\",\"小\"]},\"155\":{\"h\":\"番茄\"},\"156\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"157\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"158\":{\"c\":[\"蔬菜\"]},\"159\":{\"c\":[\"红\",\"圆\"]},\"160\":{\"h\":\"MySQL\"},\"161\":{\"h\":\"having和where区别？\",\"t\":[\"where子句作用于表和视图，having作用于组。\",\"where在数据分组前进行过滤，having在数据分组后进行过滤。\"]},\"162\":{\"h\":\"MyISAM和InnoDB区别？\",\"t\":[\"MyISAM： \",\"只支持表级锁（锁住整张表）；\",\"不提供事务支持；\",\"不支持外键；\",\"不支持数据库异常崩溃后的安全恢复；\",\"InnoDB： \",\"支持行级锁和表级锁；\",\"提供事务支持；\",\"支持外键；\",\"支持数据库异常崩溃后的安全恢复；\"]},\"163\":{\"h\":\"何为 ACID 特性（事务的特性）呢？\",\"t\":[\"原子性 ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\",\"一致性： 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；\",\"隔离性： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；\",\"持久性： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响；\"]},\"164\":{\"h\":\"数据库事务的实现原理呢？\",\"t\":[\"MySQL InnoDB引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。\",\"MySQL InnoDB引擎通过 锁机制、MVCC 等手段来保证事务的隔离性（ 默认支持的隔离级别是 REPEATABLE-READ ）。\",\"保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。\"]},\"165\":{\"h\":\"并发事务带来哪些问题?\",\"t\":[\"脏读\",\"幻读（与不可重复读类似，但是对表中查询的行数上的不一致）\",\"不可重复读（某个值不一致）\",\"丢失更新\",\"第一类丢失更新\",\"第二类丢失更新\",\"脏读\",\"不可重复读\",\"幻读\"]},\"166\":{\"h\":\"事务有哪些隔离级别？\",\"t\":[\"Read Uncommitted： 读未提交（级别最低）\",\"Read Committed： 读已提交\",\"Repeatable Read： 可重复读（默认）\",\"Serializable： 串行化（级别最高，性能最低，因为要加锁）\",\"事务隔离级别\"]},\"167\":{\"h\":\"数据库范式有哪些？\",\"t\":[\"1NF：属性不可再分。\",\"2NF：1NF 的基础之上，消除了非主属性对于码的部分函数依赖。\",\"3NF：3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。\"]},\"168\":{\"h\":\"drop、delete与 truncate 区别？\",\"t\":[\"drop(丢弃数据): drop table 表名 ，直接将表都删除掉。—— DDL(数据定义语言，不可回滚)\",\"truncate (清空数据) : truncate table 表名 ，只删除表中的数据，再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用。 ——DDL(数据定义语言，不可回滚)\",\"delete（删除数据） : delete from 表名 where 列名=值，删除某一列的数据，如果不加 where 子句和truncate table 表名作用类似。 ——DML (数据库操作语言增删改查，可回滚)\"]},\"169\":{\"h\":\"MySQL中的读有几种？\",\"t\":[\"一致性非锁定读（快照读，由MVCC实现）：在可重复读和读已提交隔离级别下触发，当读取一行值时，这一行刚好正在执行删除或更新操作时，不会因此去等待行上锁的释放，而是去读取该行版本的最新一个快照（即最新的历史版本）\",\"一致性锁定读（当前读）：给行记录加 X （排它锁）或 S （共享锁）\",\"select...for update：对记录加 X 锁，且其它事务不能加任何锁\",\"select...lock in share mode：对记录加 S 锁，其它事务也可以加S锁，如果加 x 锁则会被阻塞\",\"参考：https://www.cnblogs.com/cswiki/p/15307265.html\"]},\"170\":{\"h\":\"MVCC(多版本并发控制)的实现原理？（重点难点）\",\"t\":[\"隐藏字段 \",\"DB_TRX_ID``（6字节）：记录事务id\",\"DB_ROLL_PTR``（7字节）：记录上一个版本数据记录的回滚指针\",\"DB_ROW_ID``（6字节）：隐含的自增ID，在没有设置主键的情况下使用该ID产生一个簇拥索引\",\"Read View（读视图）：快照读操作时生产的读视图\",\"undo log（回滚日志） \",\"insert undo log\",\"update undo log\"]},\"171\":{\"h\":\"读已提交和可重复读隔离级别下 MVCC 的差异？\",\"t\":[\"读已提交(RC)：总是读取行的最新版本Read View；如果行被锁定了，非一致性读不会因此去等待行上锁的释放，而是去读取该行版本的最新一个快照（事务在每次查询开始时都会生成并设置新的 Read View，所以导致不可重复读）\",\"可重复读(RR)：总是读取事务开始时的行数据版本Read View\"]},\"172\":{\"h\":\"数据库索引类型有哪些？\",\"t\":[\"参考：https://segmentfault.com/a/1190000040177994\",\"主键索引：\",\"一张数据表有只能有一个主键（可以不设主键），并且主键不能为 null，不能重复\",\"若不设主键，如果有唯一索引，则选择该字段为默认的主键，否则会自动创建一个6Byte的自增主键\",\"唯一索引：\",\"索引列的值必须唯一，但允许有null，保证该属性数据唯一性\",\"一张表允许创建多个唯一索引\",\"普通索引：\",\"一张表允许创建多个普通索引，允许数据重复和 NULL\",\"唯一作用就是为了快速查询数据\",\"前缀索引：\",\"只适用于字符串类型的数据\",\"只取文本前几个字符创建索引\",\"全文索引：\",\"检索大文本数据中的关键字\"]},\"173\":{\"h\":\"MySQL 聚集索引和非聚集索引区别？\",\"t\":[\"聚集索引：索引结构和数据一起存放的索引，是一种数据存储方式。主键索引属于聚集索引。\",\"非聚集索引：二级索引（唯一索引，普通索引，前缀索引等）属于非聚集索引。\",\"相同点:\",\"内部都是 B+ 树\",\"不同点：\",\"聚集索引的叶子节点存放是一整行数据（数据、索引放一块）；非聚集索引的叶子节点存储主键的值\",\"聚集索引一个表只能有一个；非聚集索引一个表可以存在多个\",\"聚集索引存储记录是物理上连续存在；非聚集索引是逻辑上的连续\",\"聚集索引查询数据速度快，插入数据速度慢；非聚集索引反之，可能会二次查询（回表）\"]},\"174\":{\"h\":\"非聚集索引一定回表查询吗(覆盖索引)?\",\"t\":[\"不一定，这涉及到查询语句所要求的字段是否全部命中了索引，如果全部命中了索引，那么就不必再进行回表查询。\",\"覆盖索引：需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了， 而无需回表查询（概括：查询的正好是索引—主键索引、唯一索引、普通索引等）\",\"如：select id from table where id = 1\"]},\"175\":{\"h\":\"索引的优缺点\",\"t\":[\"优点 ：\",\"使用索引可以加快数据的检索速度（大大减少检索的数据量）\",\"通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。\",\"缺点 ：\",\"创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。\",\"索引需要使用物理文件存储，也会耗费一定空间。\"]},\"176\":{\"h\":\"B树和B+树的区别？\",\"t\":[\"注意：MySQL默认使用B+树\",\"B 树的所有节点既存放键(key) 也存放 数据(data)；而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\",\"B 树的叶子节点都是独立的；B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\",\"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\",\"B+树\"]},\"177\":{\"c\":[\"数据库\"]},\"178\":{\"c\":[\"MySQL\"]},\"179\":{\"h\":\"面向对象编程\",\"t\":[\"JavaScript 支持多种编程范式，包括函数式编程和面向对象编程\",\"除了 string、number、boolean、null、undefined、symbol 之外的其他数据是对象：数组、日期，甚至函数等等。故可以对它们使用 . 访问其属性，获取属性值。\",\"在 JavaScript 中，对象是拥有属性和方法的数据，是无序的数据集合，是键值对的集合。\"]},\"180\":{\"h\":\"创建单个对象的两种方式\",\"t\":[\"// 1. new Object() const obj1 = new Object() obj1.name = 'obj1' obj1.foo = function () { console.log(this.name) } // 2. 字面量形式 const obj2 = { name: 'obj2', foo: function () { console.log(this.name) }, } \"]},\"181\":{\"h\":\"对象的属性（键）与属性值（值）\",\"t\":[\"属性名（键名）是字符串，不是标识符（变量）\",\"获取对象的属性（键）的 2 种方式：\",\"// 通过字面量定义对象 let obj = { name: 'never', age: 23, } // 1.for in for (let key in obj) { console.log(key) // 'name' 'age' } // 2.Object.keys() 得到属性组成的数组 console.log(Object.keys(obj)) // ['name', 'age'] \",\"获取对象的属性值（值）的2种方式：\",\"// 通过字面量定义对象 let obj = { name: 'never', age: 23, } // 1.obj.key console.log(obj.name) // 'never' // 2.obj['key'] console.log(obj['name']) // 'never' \",\"变量作为属性名：\",\"let obj = { name: 'never', age: 23, } let keyName = 'name' console.log(obj[keyName]) // 'never' \"]},\"182\":{\"h\":\"定义单个属性\",\"t\":[\"在某个对象上定义一个新属性，或修改该对象的现有属性，并返回该对象。\",\"Object.defineProperty(obj, prop, descriptor)\",\"let obj = { name: 'never', } // descriptor（属性描述符）是一个对象 Object.defineProperty(obj, 'age', { value: 23, }) // 自动返回 { name: 'never', age: 23 } \",\"属性描述符分为两种，下表展示了它们可拥有的键值：\",\"configurable\",\"enumerable\",\"value\",\"writable\",\"get\",\"set\",\"数据描述符\",\"✅\",\"✅\",\"✅\",\"✅\",\"❌\",\"❌\",\"存取描述符\",\"✅\",\"✅\",\"❌\",\"❌\",\"✅\",\"✅\",\"configurable ：可配置（删除、重新定义属性描述符），默认值 false\",\"enumerable ：可枚举（可以获取到对象的属性），默认值 false\",\"value ：属性值，默认值 undefined\",\"writable ：可写（修改属性），默认值 false\",\"get ：getter 方法\",\"set ：setter 方法\",\"注意：\",\"enumerable 为 false 表示该属性不可遍历输出，但仍可以使用 . 访问到属性。在控制台，可以看到不可枚举到的属性会变浅色。\",\"如果一个描述符同时拥有 value 或 writable 和 get 或 set 键，则会产生一个异常。即 value 与 get 互斥，writable 与 set 互斥。\"]},\"183\":{\"h\":\"数据描述符\",\"t\":[\"// 通过字面量定义的对象，configurable、enumerable、writable 均为 true let obj = { name: 'never', } Object.defineProperty(obj, 'age', { configurable: true, enumerable: true, value: 23, writable: true, }) // 测试 delete obj.age // age 可删除 console.log(obj) // {name: 'never'} Object.defineProperty(obj, 'age', { value: 2333, writable: false, // age 可重新定义属性描述符，改为不可写 }) console.log(obj) // {name: 'never', age: 2333} obj.age = 1 // 修改 age 失败 console.log(obj) // {name: 'never', age: 2333} \"]},\"184\":{\"h\":\"存取描述符\",\"t\":[\"// 作用： // 1.隐藏私有属性 // 2.截获属性的访问和赋值过程 let obj = { name: 'never', // 开发约定使用 _ 开头表示私有属性 _age: 23, } // 外部通过 age 修改私有属性 _age Object.defineProperty(obj, 'age', { configurable: true, enumerable: true, get: function () { interceptGet() return this._age }, set: function (value) { interceptSet() this._age = value }, }) // 拦截 get function interceptGet() { console.log('检测到 age 的值被获取') } // 拦截 set function interceptSet() { console.log('检测到 age 的值被设置') } // 测试 console.log(obj.age) // 检测到 age 的值被获取 23 obj.age = 2333 // 检测到 age 的值被设置 console.log(obj) // 浏览器环境下：{name: 'never', _age: 2333} // node 环境下： // { name: 'never', _age: 2333, age: [Getter/Setter] } \",\"getter、setter 简洁写法\",\"// 简洁写法 let obj1 = { set age(value) { this._age = value }, get age() { return this._age }, } // 等价于 let obj2 = {} Object.defineProperty(obj2, 'age', { configurable: true, enumerable: true, get: function () { return this._age }, set: function (value) { this._age = value }, }) // 测试 obj1.age = 23 console.log(obj1) // { _age: 23 } obj2.age = 23 console.log(obj2) // { _age: 23 } \"]},\"185\":{\"h\":\"定义多个属性\",\"t\":[\"Object.defineProperties(obj, {prop1: {descriptor}, prop2: {descriptor}})\",\"let obj = {} Object.defineProperties(obj, { name: { configurable: true, enumerable: true, writable: true, value: 'never', }, age: { configurable: true, enumerable: true, get: function () { return this._age }, set: function (value) { this._age = value }, }, }) obj.age = 23 console.log(obj) // {name: 'never', _age: 23} \"]},\"186\":{\"h\":\"获取属性描述符\",\"t\":[\"let obj = { _age: 23, } Object.defineProperties(obj, { name: { configurable: true, enumerable: true, writable: true, value: 'never', }, age: { configurable: true, enumerable: true, get: function () { return this._age }, set: function (value) { this._age = value }, }, }) obj.age = 2333 // 1.获取单个属性的属性描述符：Object.getOwnPropertyDescriptor console.log(Object.getOwnPropertyDescriptor(obj, 'name')) // {value: 'never', writable: true, enumerable: true, configurable: true} console.log(Object.getOwnPropertyDescriptor(obj, 'age')) // {enumerable: true, configurable: true, get: ƒ, set: ƒ} // 2.获取对象的所有属性描述符：Object.getOwnPropertyDescriptors console.log(Object.getOwnPropertyDescriptors(obj)) // age: {enumerable: true, configurable: true, get: ƒ, set: ƒ} // name: {value: 'never', writable: true, enumerable: true, configurable: true} // _age: {value: 2333, writable: true, enumerable: true, configurable: true} \"]},\"187\":{\"h\":\"限制对象\",\"t\":[\"// 1.阻止扩展：禁止对象添加属性 let obj1 = { name: 'never', } Object.preventExtensions(obj1) obj1.age = 23 // 无法添加属性 console.log(obj1) // {name: 'never'} // 2.密封：禁止添加属性，并将现有属性改为不可配置，相当于 preventExtensions + configurable:false let obj2 = { name: 'never', } Object.seal(obj2) delete obj2.name // 无法删除属性 obj2.age = 23 // 无法添加属性 obj2.name = 'nevermore' // `可以`修改现有属性 console.log(obj2) // {name: 'nevermore'} // 3.冻结：禁止添加属性，并将现有属性改为不可配置、不可修改，相当于 preventExtensions + configurable:false + writable:false let obj3 = { name: 'never', } Object.freeze(obj3) delete obj2.name // 无法删除属性 obj3.age = 23 // 无法添加属性 obj3.name = 'nevermore' // 无法修改属性 console.log(obj3) // {name: 'never'} \"]},\"188\":{\"h\":\"创建多个对象的方式\",\"t\":[\"详见《JavaScript高级程序设计第四版》8.2 创建对象章节\"]},\"189\":{\"h\":\"工厂模式\",\"t\":[\"// 工厂函数 function createPerson(name, age) { let p = {} p.name = name p.age = age p.sayName = function () { console.log(this.name) } return p } let p1 = createPerson('Tom', 10) let p2 = createPerson('Mary', 20) // 优点：快速创建大量相似对象 // 缺点：创建的实例对象属于 Object，无法区分实例对象类型 console.log(p1, p2) // {name: 'Tom', age: 10, sayName: ƒ} // {name: 'Mary', age: 20, sayName: ƒ} \"]},\"190\":{\"h\":\"构造函数模式\",\"t\":[\"function Person(name, age, height, address) { this.name = name this.age = age this.sayName = function () { console.log(this.name) } // 等价于 // this.sayName = new Function('console.log(this.name)') } let p1 = new Person('Tom', 18) let p2 = new Person('Mary', 20) // Person {name: 'Tom', age: 18, sayName: ƒ} // Person {name: 'Mary', age: 20, sayName: ƒ} \",\"[[Prototype]] 是 ECMA 标准，__proto__ 是浏览器对标准的实现\",\"构造函数模式的缺点：如果构造函数里有方法，每次创建一个实例对象，都会创建一个函数，浪费内存。可以通过把方法定义在构造函数外部解决这个缺点，但又引入了另一个缺点：共有的方法都在全局作用可以域，难以管理。这个缺点可以通过原型模式解决。\"]},\"191\":{\"h\":\"原型模式（原型 + 构造函数）\",\"t\":[\"将共有的属性、方法添加到原型上。因为是添加，所以原型的构造函数仍保留：\",\"function Person(name, age) { this.name = name this.age = age } Person.prototype.sayName = function () { console.log(this.name) } let p1 = new Person('Tom', 18) let p2 = new Person('Mary', 20) p1.sayName() // Tom p2.sayName() // Mary console.log(Person.prototype) // {sayName: ƒ, constructor: ƒ} \",\"直接赋值整个 prototype 对象。因为是赋值，所以原型的构造函数需要自己手动加上：\",\"function Person(name, age) { this.name = name this.age = age } Person.prototype = { constructor: Person, kind: 'human', sayName: function () { console.log(this.name) }, } let p1 = new Person('Tom', 18) let p2 = new Person('Mary', 20) console.log(Person.prototype) // {kind: 'human', constructor: ƒ, sayName: ƒ} console.log(p1) // Person {name: 'Tom', age: 18} console.log(p2) // Person {name: 'Mary', age: 20} \"]},\"192\":{\"h\":\"new 操作符执行的操作\",\"t\":[\"在内存中创建一个空的临时对象\",\"将这个临时对象的隐式原型 [[Prototype]] 指向构造函数显式原型 prototype\",\"绑定 this 到这个临时对象上\",\"执行构造函数内部的代码（给新对象添加属性）\",\"返回这个临时对象\",\"new Person()\\n\\n// new 相当于执行以下操作：\\nfunction Person(name) {\\n  // 1.在内存中创建一个空的临时对象\\n  let obj = {}\\n  // 2.将这个临时对象的隐式原型指向构造函数的显式原型\\n  obj.__proto__ = Person.prototype\\n  // 3.绑定 this 到这个临时对象上\\n  Person.call(obj)\\n  // 4.执行构造函数内部的代码（给新对象添加属性）\\n  this.name = 'never'\\n  // 5.返回这个临时对象\\n  return this\\n}\\n\"]},\"193\":{\"h\":\"箭头函数\"},\"194\":{\"h\":\"1.没有原型\",\"t\":[\"1.没有prototype(原型)，所以箭头函数本身没有 this、super\",\"let arrow = () =>{} console.log(arrow.prototype) // undefined \"]},\"195\":{\"h\":\"2.this 指向定义时的上层作用域\",\"t\":[\"this 指向 定义时所在 的上层作用域：\",\"如果箭头函数被非箭头函数包含：this 指向 定义时所在的 最近一层非箭头函数的 this 值\",\"如果箭头函数外层没有普通函数：this 指向全局作用域\",\"箭头函数的函数体是一层作用域，它的上层作用域即箭头函数定义所在的作用域\",\"let a // 声明全局变量 a 用于存放箭头函数的地址 let obj1 = { name: 'obj1' } // obj1 调用 foo1，foo1 中将箭头函数赋值给 a foo1.call(obj1) let obj2 = { name: 'obj2' } // obj2 调用 foo2，foo2 中调用全局变量 a 所指向的箭头函数 foo2.call(obj2) function foo1() { // 箭头函数 this 指向函数定义时所在的最近一层非箭头函数的 this 值 // 又通过 call 显式指定 foo1 调用者，所以 foo1 this 值指向 obj1 a = () => { console.log(this.name) } } function foo2() { // 箭头函数 this 指向与调用位置无关 a() } // 打印 obj1 \",\"普通函数的 this 值只有在函数执行时才能确定调用者，而不是在函数定义时确定，箭头函数就是要打破这一规则，方便开发，比如在 setTimeout 中使用箭头函数：\",\"var name = 'window' // 挂载到 window 上 // 默认绑定 const obj1 = { name: 'obj1', delay() { setTimeout(function() { console.log(this.name) }, 0) // setTimeout 传入普通函数，则是独立函数调用，指向 window } } obj1.delay() // 'window' // 箭头函数外层有普通函数 const obj2 = { name: 'obj2', delay() { setTimeout(() => { console.log(this.name) }, 0) } } obj2.delay() // 'obj2' // 箭头函数外层没有普通函数 const fn = () => console.log(this.name) fn() // 'window' \",\"注意\",\"块语句，如 if(){}、字面量对象 let obj = {} 等不会产生作用域\",\"作用域有：全局、函数、块、eval 作用域\"]},\"196\":{\"h\":\"3.没有参数列表\",\"t\":[\"没有 arguments，可以使用 rest参数… 获取参数列表\",\"// 普通函数 function fn1(args){ console.log(arguments) } fn1(1,2,3)// [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ] // rest参数... let fn2 = (num1, num2, ...args) => { console.log(args) } fn2(1,2,3,4,5) // [3,4,5] \"]},\"197\":{\"h\":\"4.不能指定 this 指向\",\"t\":[\"不能通过 call、apply、bind 改变 this 指向\"]},\"198\":{\"h\":\"5.不能 new 调用\",\"t\":[\"不能通过 new 调用，箭头函数不能作为构造函数使用，所以也没有 new.target\",\"new.target是ES6新引入的属性，普通函数如果通过new调用，new.target会返回该函数的引用。此属性主要：用于确定构造函数是否为new调用的。\"]},\"199\":{\"h\":\"6.不能重命名函数参数\",\"t\":[\"普通函数的函数参数支持重命名，后面出现的会覆盖前面的，箭头函数会抛出错误：\",\"function fn1(a, a) { console.log(a, arguments) // 2 [1,2] } let fn2 = (a, a) => { console.log(a) // 报错：在此上下文中不允许重复参数名称 } fn1(1, 2) fn2(1, 2) \"]},\"200\":{\"h\":\"参考资料\",\"t\":[\"详解箭头函数和普通函数的区别以及箭头函数的注意事项、不适用场景\",\"ES6 系列之箭头函数\"]},\"201\":{\"h\":\"async、await\",\"t\":[\"Promise 通过链式调用解决回调地狱的问题，但本质还是基于回调函数\",\"async、await 通过同步语法的方式解决回调函数不直观的问题\"]},\"202\":{\"h\":\"与 Promise 的关系\",\"t\":[\"执行 async 函数返回的是 Promise 对象\",\"如果直接返回一个值，则封装成 Promise 对象；如果返回一个 Promise，则直接返回\",\"// 直接返回一个值 async function fn1() { return 1 } // 等价于 function fn1() { return new Promise((resolve) => { resolve(1) }) } console.log(fn1()) // 返回一个 Promise async function fn2() { return Promise.resolve(2) } console.log(fn2()) // 两者等价，均为成功状态 \",\"await 相当于 Promise 的 .then，捕获成功状态 Promise 对象的结果\",\"// await 后接 普通值，得到该值 ;(async function () { console.log(await 1) // 1 })() // await 后接 Promise，捕获成功状态对象的结果 ;(async function () { console.log(await Promise.resolve('成功')) // 成功 })() // await 后接 async 函数的执行结果，捕获成功状态对象的结果 async function fn1() { return '成功' } ;(async function () { console.log(await fn1()) // 成功 })() \",\"try...catch 相当于 Promise 的 .catch\",\";(async function () { const p = Promise.reject('报错') try { const res = await p console.log(res) } catch (err) { console.error(err) } })() // 报错 \",\"总结：\",\"async 等价于 return new Promise 封装 Promise\",\"await 等价于 .then 处理 Promise 成功\",\"try...catch 等价于 .catch 处理 Promise 失败\",\"练习：\",\"async function fn() { return 1 } ;(async function () { console.log(fn()) // Promise {<fulfilled>: 1} console.log(await fn()) // 1 })() \"]},\"203\":{\"h\":\"异步函数的返回值\",\"t\":[\"异步函数返回值是一个 Promise 对象：\",\"async function foo() { // 1.返回普通值 return 'foo 完成' // 2.返回 thenable 对象 // return { // then: function(resolve, reject) { // resolve(\\\"thenable 完成\\\") // } // } // 3.返回 Promise // return new Promise((resolve, reject) => { // setTimeout(() => { // resolve('Promise 完成') // }, 1000) // }) } foo().then((res) => { console.log('res:', res) }) \"]},\"204\":{\"h\":\"异步函数中的异常\",\"t\":[\"异步函数中的异常，会作为 Promise 的 reject 值被捕获到：\",\"async function foo() { throw new Error('报错') } foo().catch((err) => { console.log(err) }) console.log('异步函数中报错，后续代码仍会执行') function bar() { throw new Error('报错') } bar() console.log('同步函数中报错，后续代码不执行') \"]},\"205\":{\"h\":\"执行顺序\",\"t\":[\"只要遇到了 await ：\",\"紧跟着 await 同一行的代码相当于放在了 new Promise 的 executor 中，同步执行\",\"下一行及之后的代码相当于放在于 .then() 中，异步执行。\",\"async function async1() { console.log(\\\"1\\\") await async2() console.log(\\\"3\\\") } async function async2() { console.log(\\\"2\\\") } async1() // 1 2 3 // 等价于 function async1() { console.log('1') Promise.resolve(async2()).then(() => { // 执行完 async2 的返回值放入 resolve() 转化为成功状态 Promise，再 then console.log('3') }) } async1() \",\"例一：await 同一行同步执行，下面所有行放到微任务里\",\"// 注释序号为执行顺序 async function async1 () { console.log('async1 start') // 2 await async2() // 同步执行函数 async2 // 只要遇到了 await ，后面的代码都相当于放在 then（微任务）里 console.log('async1 end') // 5 微任务执行完毕 } async function async2 () { console.log('async2') // 3 } console.log('script start') // 1 async1() console.log('script end') // 4 同步代码结束，开始执行微任务 \",\"例二：await 后接 reject，会报错\",\";(async function () { console.log('start') const a = await 1 console.log('a:', a) const b = await Promise.resolve(2) console.log('b:', b) const c = await Promise.reject(3) // await 后接 reject()，会报错，后边不再执行 console.log('c:', c) console.log('end') })() // start // a: 1 // b: 2 // Uncaught(in promise) 3 // 用 try catch 改写 ;(async function () { try { console.log('start') const a = await 1 console.log('a:', a) const b = await Promise.resolve(2) console.log('b:', b) const c = await Promise.reject(3) // 后边不再执行 console.log('c:', c) console.log('end') } catch (err) { // 报错被 catch 捕获 console.log('err:', err) } })() // start // a: 1 // b: 2 // err: 3 \"]},\"206\":{\"h\":\"async、await 加载图片\",\"t\":[\"在线预览\",\"function loadImg(src) {\\n  return new Promise((resolve, reject) => {\\n    const img = document.createElement('img')\\n    img.onload = () => {\\n      resolve(img)\\n    }\\n    img.onerror = () => {\\n      const err = new Error(`加载地址为 ${src} 的图片失败`)\\n      reject(err)\\n    }\\n    img.src = src\\n  })\\n}\\n\\nconst url1 =\\n  'https://p6-passport.byteacctimg.com/img/user-avatar/c2ff47a1390407c1a16b5e5fc3aa5e1f~300x300.image'\\nconst url2 =\\n  'https://avatars.githubusercontent.com/u/39004291?s=400&u=eb0d02f850acaf334bdb14611a7d6d2e50591c57&v=4'\\n\\n// 立即执行匿名函数\\nasync function load () {\\n  // 注意：await 必须放在 async 函数中，否则会报错\\n  try {\\n    const img1 = await loadImg(url1)\\n    document.body.appendChild(img1)\\n\\n    const img2 = await loadImg(url2)\\n    document.body.appendChild(img2)\\n  } catch (err) {\\n    console.error(err)\\n  }\\n}\\nload()\\n\"]},\"207\":{\"h\":\"闭包\"},\"208\":{\"h\":\"前言\"},\"209\":{\"h\":\"各权威资料对闭包的定义\",\"t\":[\"现在的 MDN：一个函数和对其周围状态（词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包。 \",\"闭包让你可以在一个内层函数中访问到其外层函数的作用域。\",\"在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\",\"以前的 MDN：闭包是指那些能够访问自由变量的函数。\",\"JavaScript 高级程序设计（第 4 版）：闭包指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。\",\"JavaScript权威指南（第 7 版）：JavaScript 函数对象的内部状态不仅要包括函数代 码，还要包括对函数定义所在作用域的引用。这种函数对象与作用域（即一组变量绑定）组合起来解析函数变量的机制，在计算机科学文献中被称作闭包。严格来讲，所有 JavaScript 函数都是闭包。但由于多数函数调用与函数定义都在同一作用域内，所以闭包的存在无关紧要。闭包真正值得关注的时候，是定义函数与调用函数的作用域不同的时候。最常见的情形就是一个函数返回了在它内部定义的嵌套函数。\"]},\"210\":{\"h\":\"变量的分类\",\"t\":[\"全局变量：在全局作用域定义的变量，所有作用域都可以访问\",\"局部（本地）变量：在块级或函数作用域定义的变量，只能在当前作用域及其子作用域访问\",\"自由变量：在某个作用域外定义但在该作用域内使用的变量（全局变量、局部变量被别的作用域引用，就同时成为了自由变量）\"]},\"211\":{\"h\":\"词法作用域\",\"t\":[\"因为 JS 采用的是词法作用域（又称静态作用域），函数的作用域在函数定义的时候就决定了。\",\"而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。\",\"在JS里，自由变量的查找会从本级作用域依次向外部作用域，直到查到最近的一个。又因为词法作用域，自由变量的绑定在函数定义时就已经确定。如下所示：\",\"// 作用域链：foo、bar -> Script({n: 'global n'}) -> Global(window) let n = 'global n' // 在预编译阶段，即在函数执行之前，foo 函数的作用链就指定好了 // 所以自由变量 n 的查找在 Script 作用域中找到 function foo() { console.log(n) } function bar(fn) { let n = 'bar n' fn() } bar(foo) // global n \",\"注意：在全局下使用 let 会在Global 作用域下生成一级 Script 作用域，使用 var n = 'global n' ，就只有一级 Global 作用域。\"]},\"212\":{\"h\":\"高阶函数与嵌套调用\",\"t\":[\"定义外层函数为父函数，内层函数为子函数。\",\"高阶函数：\",\"1.函数作为参数\",\"function calc(num1, num2, calcFn) { console.log(calcFn(num1, num2)) } function add(num1, num2) { return num1 + num2 } function sub(num1, num2) { return num1 - num2 } let x = 10 let y = 20 calc(x, y, add) // 30 calc(x, y, sub) // -10 \",\"函数作为返回值\",\"父函数嵌套（包裹）子函数：在父函数定义并返回子函数\",\"function makeAdder(count) { function add(num) { return count + num } return add } let add5 = makeAdder(5) let add10 = makeAdder(10) console.log(add5(1)) // 6 等价于 makeAdder(5)(1) console.log(add10(1)) // 11 等价于 makeAdder(10)(1) \",\"嵌套调用：\",\"父函数嵌套（包裹）子函数：在父函数中定义并调用子函数。\",\"每当外部函数被调用时，内部函数都会在内存中开辟新的空间。\",\"引用到的变量沿着作用域链逐级向上查找，同名变量使用最近的值。如果找到全局作用域还没找到，则报变量未定义的错误。\",\"// 作用域链：foo3 -> foo2 -> foo1 -> 全局 let n = 'global n' function foo1() { let n = 'foo1 n' function foo2() { // let n = 'foo2 n' function foo3() { console.log(n) debugger // 闭包 (foo1) } foo3() } foo2() } foo1() // foo1 n \"]},\"213\":{\"h\":\"定义\",\"t\":[\"不严谨：闭包是能够访问外层函数作用域中的自由变量的函数。\",\"广义（理论）：闭包是能够访问外层作用域中的自由变量的函数与这个自由变量组成的词法环境。\",\"狭义（实践）：闭包是有访问外层函数作用域中的自由变量的函数与这个自由变量组成的词法环境。\",\"闭包最大的作用是可以在内层函数中访问到其外层函数的作用域。\",\"每个函数在预编译阶段都会生成一个空的闭包对象，无论这个闭包是否被使用。当函数执行完毕，函数实例被销毁，如果函数内部引用了外部自由变量，将自由变量加入到闭包对象中，闭包会被内层函数的作用域链引用，不会被回收；否则空的闭包没有被引用，会被释放回收。\"]},\"214\":{\"h\":\"广义\",\"t\":[\"从理论（广义）角度，所有函数在创建时都会创建闭包，无论这个闭包是否被使用。函数执行完毕，没有被使用到的闭包会被回收。\",\"var a = 1 function foo() { console.log(a) } foo() \",\"foo 引用了外层全局作用域的变量 a，创建了闭包，但因为全局作用域是长久存在的，所以该闭包多此一举，函数执行完毕也就被回收了。\"]},\"215\":{\"h\":\"狭义\",\"t\":[\"从实践（狭义）角度，我们只关注：因为内层函数引用外层函数作用域的自由变量，依然存在、不被回收的闭包，即使创建这个闭包的外层函数（作用域）都已销毁。\",\"function foo() { let n = 'foo n' function bar() { console.log(n) debugger // 闭包 (foo){ n: \\\"foo n\\\" } } return bar } let tmp = foo() tmp() // foo n \",\"内层函数 bar 引用了外层函数作用域的变量 a，外层函数 foo 创建了闭包，但因为函数作用域是随着函数执行完毕就被销毁的，为了内层函数能够引用外层函数的变量，该闭包是必须存在、不能被回收的。\"]},\"216\":{\"h\":\"为什么需要闭包\",\"t\":[\"函数在函数调用栈上的执行流程：\",\"函数在栈上运行，且会使用栈内存。\",\"函数在栈内存上，保存局部变量等数据。\",\"函数执行完后，出栈，函数作用域销毁。\",\"函数出栈后，栈上保存的数据也就不存在了，为了保存该函数中被引用的自由变量，将变量名、变量值组成一个闭包对象保存在堆内存中，再将其他函数的作用域链引用这个闭包，也就能访问到该函数的自由变量了。\",\"从语言的角度：闭包是一种可以让函数内部访问到外部自由变量的技术或语法特性，在支持头等函数的编程语言中都存在。\",\"头等函数即函数是第一公民：函数可以赋值给变量、可以作为其他函数的参数或返回值，便于写出高阶函数和闭包\"]},\"217\":{\"h\":\"闭包创建过程\",\"t\":[\"推荐阅读：一文颠覆大众对闭包的认知\",\"创建过程：\",\"V8 引擎在每个函数执行前都会进行预编译，都会创建一个闭包对象 Closure，无论这个闭包是否被使用。\",\"发现子函数引用到父函数的变量，则给闭包对象 Closure 添加键值对（变量名：变量值），同时子函数的作用域链 [[Scopres]] 引用这个闭包对象（ Scopes 数组）\",\"执行子函数时，自由变量会在其作用域链上查找，可以查找到 Closure 对象里的值。\",\"函数执行完毕，函数实例被销毁，空的闭包被释放回收，被引用到的闭包不会被回收。\",\"如下代码：\",\"// 1: Script.LE = {n, father} let n = 'n' // 2: father.[[Scopes]] = [Script.LE, Global.LE] function father() { // 3: father.LE = {x, y, z, son1, son2}，并创建空的闭包对象 father.Closure = {} let x = 'x' let y = 'y' let z = 'z' // 没有子函数引用 z，所以 father.Closure 中无 z // 4: 发现 son1 引用了父函数的变量 x，令闭包对象 father.Closure = {x: \\\"x\\\"} // 5: son1.[[Scopes]] = [father.Closure, Script.LE, global.LE] function son1() { console.log(x) debugger // 闭包 (father){x: \\\"x\\\", y: \\\"y\\\"} } // 6: 发现 son2 引用了父函数的变量 y，令闭包对象 father.Closure = {x: \\\"x\\\", y: \\\"y\\\"} // 7: son2.[[Scopes]] = [father.Closure, Script.LE, global.LE] function son2() { console.log(y) } return son1 } let foo = father() foo() // 执行完毕，函数实例销毁，但因为函数内部引用外部变量，闭包不会销毁 \",\"foo 作用域链：foo.LE(local) → foo.Closure{x: 'x', y: 'y'} → Script{n: 'n', foo: ƒ} → Global\",\"每当 V8 引擎预编译函数时，遇到其内部子函数声明，会快速地扫描内部函数使用了当前父函数中的哪些自由变量，将这些变量加入到父函数的闭包对象中，最终这个闭包对象将作为这些内部子函数作用域链中的一员。\",\"多个子函数使用同一个闭包对象，只有当所有子函数的作用域链都被释放才会释放父函数的闭包对象\"]},\"218\":{\"h\":\"闭包创建场景\",\"t\":[\"1.父函数返回子函数，且子函数引用父函数的变量。\",\"执行父函数得到的返回值（即子函数）赋值给中间变量 tmp，在执行 tmp。\",\"function father() { let n = 'father n' function son() { console.log(n) debugger // 闭包 (father) n: \\\"father n\\\" } return son } let tmp = father() tmp() // father n \",\"son 作用域链：son.LE(local) → son.Closure{n: \\\"father n\\\"} → Script → Global\",\"或删去中间变量 foo\",\"function father() { let n = 'father n' function son() { console.log(n) debugger // 闭包 (father) n: \\\"father n\\\" } return son } father()() \",\"2.父函数返回子函数，且子函数引用父函数的变量，执行父函数得到的返回值作为同级函数的参数\",\"function father() { let n = 'father n' function son() { console.log(n) debugger // 闭包 (father) n: \\\"father n\\\" } return son } function foo(fn) { let n = 'foo n' fn() } foo(father()) // father n \",\"3.父函数嵌套包裹子函数，父函数调用子函数，且子函数引用父函数的变量\",\"function father() { let n = 'father n' function son() { console.log(n) debugger // 闭包 (father) n: \\\"father n\\\" } son() } father() // father n \",\"4.父函数嵌套包裹多个子函数\",\"Closure 会被所有子函数的作用域链 [[Scopes]] 引用，所以想要 Closure 不被引用就需要使所有子函数都被销毁，避免内存泄漏。\",\"function father() { let n = 'father n' function son1() { console.log(n) // son1 引用父函数的变量 n } function son2() { // son2 不引用父函数的变量 debugger // 闭包 (father) n: \\\"father n\\\" } son2() // 只调用 son2 } father() \",\"5.函数赋值\",\"foo 创建的闭包对象被 Script 作用域的 bar 引用\",\"let bar = null function foo() { let n = 'foo n' bar = function () { console.log(n) debugger // 闭包 (foo) n: \\\"foo n\\\" } } foo() bar() // foo n \",\"6.循环赋值\",\"// 不使用闭包 for (var i = 0; i < 6; i++) { setTimeout(() => { console.log(i) }, 0) } // 6 6 6 6 6 6 // 使用闭包 // 作用域链：setTimeout 的回调函数 -> 匿名立即执行函数 -> 全局 for (var i = 0; i < 6; i++) { ;(function (j) { setTimeout(() => { console.log(j) debugger // 闭包 j: 0、1、2、3、4、5 }, 0) })(i) } // 0 1 2 3 4 5 // ES6：let for (let i = 0; i < 6; i++) { setTimeout(() => { console.log(i) }, 0) } // 0 1 2 3 4 5 \",\"不使用闭包：异步任务 setTimeout 放到任务队列，等到同步任务执行完毕再执行任务队列。同步任务 for 每次循环过程中i 自增并将 console.log(i) 放到任务队列，同步任务结束时 i 为 6，任务队列中有 6 个 console.log(i)，依次执行任务队列，最后输出 6 个 6\",\"使用闭包：作用域链：setTimeout 的回调函数 -> 匿名立即执行函数 -> 全局。回调函数引用了自由变量 j，向上查找，找到立即执行函数的形参 j，形参 j 接收实参 i 传入的值。回调函数内部使用了外部立即执行函数作用域的形参 j，形成了 6 个互不干扰的闭包。\",\"使用 let：形成 6 个互不干扰的块级作用域\",\"立即执行函数 IIFE(Immediately Invoked Function Expression)\",\"定义：声明一个匿名函数，并立即调用这个函数。\",\"作用：创建一个独立作用域，使得外部访问不了内部变量，同时避免全局污染。\",\"块级作用域的引入使得 ES5 常用的立即执行函数不再需要了。\",\"7.回调函数\",\"使用回调函数就是在使用闭包\",\"function father() { let n = 'father n' setTimeout(() => { console.log(n) debugger // 闭包 (father) n: \\\"father n\\\" }, 0) } father() // father n \",\"setTimeout 的回调函数引用了上级 father 作用域的变量 n\",\"8.getter、setter\",\"function createCache() { const data = {} // 闭包中被隐藏的数据，外界无法访问 // 返回一个有 getter 和 setter 的对象 return { set: (key, val) { data[key] = val }, get: function (key) { return data[key] } } } const cache = createCache() cache.set('age', 22) console.log(cache.get('age')) // 22 \"]},\"219\":{\"h\":\"闭包的特性\",\"t\":[\"被内层函数使用到的闭包对象不是空的，其中的变量是私有的，不会污染全局。\",\"被内层函数使用到的闭包对象不会被垃圾回收机制回收，其中的变量不会被销毁。\"]},\"220\":{\"h\":\"闭包的应用\",\"t\":[\"闭包最大的作用是可以在其他的执行上下文中，访问到函数内部的变量。\"]},\"221\":{\"h\":\"模块\",\"t\":[\"闭包与立即执行函数实现模块，解决了命名空间污染的问题。\",\"var moduleA = (function () { var dataA = 'dataA' function getA() { return dataA } return { getA: getA, dataA: dataA } })() moduleA.getA() // dataA \",\"JS 模块化发展历程：闭包 → AMD、CMD → CommonJS → ES Module\"]},\"222\":{\"h\":\"模拟私有属性\",\"t\":[\"隐藏数据，实现私有属性成员（变量或方法），只提供对外的接口。ES6 可以通过 # 定义类的私有成员。\",\"function createCache() { let _data = {} // 闭包中被隐藏的数据，外界无法访问 // 返回一个有 getter 和 setter 的对象 return { set: (key, val) => { _data[key] = val }, get: (key) => { return _data[key] } } } let cache = createCache() cache.set('name', 'nevermore') console.log(cache.get('name')) // nevermore // 无法访问私有属性 console.log(cache._data) // undefined \"]},\"223\":{\"h\":\"函数式编程\",\"t\":[\"实现高阶函数，如柯里化、节流防抖：\",\"// 普通函数形式的柯里化 function sum1(x) { return function (y) { return function (z) { return x + y + z } } } console.log(sum1(10)(20)(30)) // 60 // 箭头函数形式的柯里化 const sum2 = (x) => (y) => (z) => { return x + y + z } console.log(sum2(10)(20)(30)) // 60 // 再省略 return const sum3 = (x) => (y) => (z) => x + y + z console.log(sum3(10)(20)(30)) // 60 \",\"节流：\",\"function throttle(fn, delay) { let timer = null return function() { if (!timer) { fn.apply(this, arguments) // 注意在定时器外 timer = setTimeout(() => { timer = null }, delay) } } } window.onscroll = throttle(() => console.log('hi'), 1000) // 业务代码 \"]},\"224\":{\"h\":\"闭包的缺点\",\"t\":[\"使用不当、滥用闭包才会造成内存泄漏，因为闭包包含外层函数的作用域，内存占用大，引用的内容多了，就会造成内存泄漏。应当在函数执行结束后主动清除被引用的自由变量。\",\"正确使用闭包不会造成内存泄漏，由于老浏览器（主要是 IE6）的垃圾回收机制的 bug，导致容易出现内存泄漏。\",\"内存泄漏：系统进程不再用到的内存，没有及时释放或被回收。\",\"以下代码会发生内存泄漏：\",\"function fun() { let arr = Array(10000000) function fun1() { // arr 加入 Closure console.log(arr) } return function fun2() {} } window.f = fun() // 长久持有 fun2 的引用 \",\"原因：父函数的闭包对象 Closure 被所有子函数的作用域链引用，只要有一个子函数没有被销毁，Closure 就无法销毁，闭包中的变量也无法销毁，就发生了内存泄漏。\"]},\"225\":{\"h\":\"总结\",\"t\":[\"定义：\",\"不严谨：闭包是能够访问外层函数作用域中的自由变量的函数。\",\"广义（理论）：闭包是能够访问外层作用域中的自由变量的函数与这个自由变量组成的词法环境。\",\"狭义（实践）：闭包是能够访问外层函数作用域中的自由变量的函数与这个自由变量组成的词法环境。\",\"创建过程：\",\"每个函数在预编译阶段都会生成一个空的闭包对象，无论这个闭包是否被使用。当函数执行完毕，函数实例被销毁，如果函数内部引用了外部自由变量，将自由变量加入到闭包对象中，闭包会被内层函数的作用域链引用，不会被回收；否则空的闭包没有被引用，会被释放回收。\",\"作用：\",\"闭包最大的作用是可以在内层函数中访问到其外层函数的作用域。\",\"特性：\",\"变量私有：不会污染全局\",\"变量生命周期长：不会随着函数执行结束而被回收\",\"应用：\",\"模块\",\"私有属性\",\"函数式编程：实现高阶函数，如柯里化、防抖节流\",\"缺点：\",\"使用不当、滥用闭包才会造成内存泄漏。因为闭包包含外层函数的作用域，内存占用大，引用的内容多了，就会造成内存泄漏。\"]},\"226\":{\"h\":\"参考资料\",\"t\":[\"闭包——MDN\",\"JavaScript深入之词法作用域和动态作用域\",\"JavaScript深入之闭包\",\"头等函数——维基百科\",\"闭包是什么？从为什么会有闭包讲起！\",\"一文颠覆大众对闭包的认知\",\"前端基础进阶（四）：详细图解作用域链与闭包\",\"一篇文章看懂JS闭包，都要2020年了，你怎么能还不懂闭包？\",\"JS 闭包经典使用场景和含闭包必刷题\"]},\"227\":{\"h\":\"引用赋值、深浅拷贝\",\"t\":[\"引用赋值（又称引用传址）：某个变量或常量存放了指向引用类型（对象、数组、函数）字面量的地址。\",\"传值赋值：某个变量或常量存放了基本类型的字面量\",\"浅拷贝：在堆中创建新的内存保存拷贝后的对象，拷贝前后对象的基本类型数据互不影响；但拷贝前后对象的引用类型数据因为指向同一个内存地址，相互影响。\",\"深拷贝：在堆中创建新的内存保存拷贝后的对象，拷贝前后对象的基本类型、引用类型数据互不影响。\",\"和原对象字面量是否指向同一地址\",\"原对象字面量第一层为基本类型是否相互影响\",\"原对象字面量包含子对象是否相互影响\",\"引用赋值\",\"✅\",\"✅\",\"✅\",\"浅拷贝\",\"❌\",\"❌\",\"✅\",\"深拷贝\",\"❌\",\"❌\",\"❌\"]},\"228\":{\"h\":\"引用赋值\",\"t\":[\"引用赋值（又称引用传址）：某个变量或常量存放了指向引用类型（对象、数组、函数）字面量的地址，修改该变量或常量的属性、方法即修改字面量的内容。\",\"详情\",\"在计算机科学中，对象是指内存中的可以被标识符引用的一块区域。 ——引用自 MDN JavaScript 数据类型和数据结构\",\"在软件系统中，对象具有唯一的标识符，对象包括属性（Properties）和方法（Methods），属性就是需要记忆的信息，方法就是对象能够提供的服务 ——引用自 维基百科\",\"标识符（identifier）可以标识变量名、常量名、类名、方法名、接口名等，标识符有其命名规则。\",\"字面量：没有用标识符封装起来的数据原始值\",\"引用类型字面量引用赋值给某个变量后，再将该变量引用赋值给另一个变量，两个变量指向同一个字面量。修改该变量的属性、方法即修改字面量的内容。\",\"let obj1 = { name: 'obj1' } let obj2 = obj1 obj1.name = 'obj1 changed' console.log(obj2) // { name: 'obj1 changed' } let arr1 = ['arr1'] let arr2 = arr1 arr1[0] = ['arr1 changed'] console.log(arr2) // ['arr1 changed'] let fun1 = () => { console.log('fun1') } let fun2 = fun1 fun1.n = 'fun1 changed' // 注意：函数的 name 属性不可改 console.log(fun2.n) // fun1 changed \",\"引用类型字面量引用赋值给某个变量后，再将该变量引用赋值给另一个变量，再将新的字面量引用赋值给该变量，两个变量指向不同的字面量，两者不影响。\",\"let obj1 = { name: 'obj1' } let obj2 = obj1 obj1 = { name: 'obj1 changed' } console.log(obj2) // { name: 'obj1' } let arr1 = ['arr1'] let arr2 = arr1 arr1 = ['arr1 changed'] console.log(arr2) // ['arr1'] let fun1 = () => { console.log('fun1') } let fun2 = fun1 fun1 = () => { console.log('fun1 change') } console.log(fun2()) // fun1 \"]},\"229\":{\"h\":\"浅拷贝\",\"t\":[\"原对象字面量第一层为基本类型，拷贝对象与原对象不相互影响。 原对象字面量包含嵌套对象，拷贝对象与原对象相互影响。\"]},\"230\":{\"h\":\"对象的浅拷贝\",\"t\":[\"Object.assign() 方法：\",\"let obj1 = { name: 'obj1', child: { name: 'child' } } let obj2 = Object.assign({}, obj1) obj2.name = 'name changed' // 原对象字面量第一层为基本类型不会被改变 obj2.child.name = 'child changed' // 原对象字面量包含嵌套对象会被改变 console.log(obj1) // { name: 'obj1', child: { name: 'child changed' } } \",\"提示\",\"Object.assign() 方法把源对象自身的、可枚举属性拷贝给目标对象，然后返回目标对象。\",\"如果目标对象与源对象具有相同的键，则目标对象的属性会覆盖源对象。\",\"const target = { a: 1, b: 2 } const source = { b: 3, c: 4 } const returnedTarget = Object.assign(target, source) console.log(target) // { a: 1, b: 3, c: 4 } console.log(returnedTarget) // { a: 1, b: 3, c: 4 } \",\"展开运算符 ... 同上：\",\"let obj1 = { name: 'obj1', child: { name: 'child' } } let obj2 = {...obj1} \"]},\"231\":{\"h\":\"数组的浅拷贝\",\"t\":[\"concat()：原数组不会改变\",\"let arr1 = ['arr1', { child: 'child' }] let arr2 = arr1.concat() arr1[0] = ['arr1 changed'] // 原数组字面量第一层为基本类型不会被改变 arr1[1].child = 'child changed' // 原数组字面量包含嵌套对象会被改变 console.log(arr2) // ['arr1', { child: 'child changed' }] \",\"slice() 同上：原数组不会改变\",\"let arr1 = ['arr1', { child: 'child' }] let arr2 = arr1.slice() \"]},\"232\":{\"h\":\"深拷贝\",\"t\":[\"拷贝对象与原对象不相互影响。\"]},\"233\":{\"h\":\"JSON 序列化再反序列化\",\"t\":[\"JSON 序列化（字符串化）再反序列化（解析）\",\"const b = JSON.parse(JSON.stringify(a)) \",\"弊端：\",\"undefined、symbol、函数会丢失\",\"NaN、Infinity、-Infinity 会被序列化为 null\",\"无法解决循环引用的问题\",\"const obj = { a: undefined, b: Symbol('b'), c: function () {}, d: NaN, e: Infinity, f: -Infinity, } const copyObj1 = JSON.parse(JSON.stringify(obj)) console.log(copyObj1) // {d: null, e: null, f: null} obj.self = obj const copyObj2 = JSON.parse(JSON.stringify(obj)) // Uncaught TypeError: Converting circular structure to JSON \"]},\"234\":{\"h\":\"递归循环\",\"t\":[\"功能：\",\"支持对象、数组、日期、正则的深拷贝\",\"基本类型、函数无需深拷贝（深拷贝函数意义不大）\",\"使用 WeakMap 解决循环引用\",\"此版本不支持 Symbol 作为键名的情况\",\"没有拷贝 DOM 元素，具体实现见 轻松拿下 JS 浅拷贝、深拷贝\",\"提示\",\"解决循环引用：存储当前对象和拷贝对象的对应关系。每次拷贝当前对象前，都先看一下这个对象是不是已经拷贝过了，如果有的话直接返回。避免自身引用导致栈溢出。\",\"WeakMap 弱引用映射与 Map 强引用映射不同点：\",\"强引用需要自己手动置为 null 才能被回收，弱引用则由垃圾回收机制判断是否回收。\",\"Map 可以接受所有类型作为键名，WeakMap 只能接受对象（null 除外）作为键名。\",\"function deepClone(obj, hash = new WeakMap()) { if (obj === null) return obj // null 无需深拷贝，直接返回 if (obj instanceof Date) return new Date(obj) // 日期对象 if (obj instanceof RegExp) return new RegExp(obj) // 正则对象 if (typeof obj !== 'object') return obj // 基本类型、函数无需深拷贝，直接返回 // 对象、数组需要深拷贝 if (hash.get(obj)) return hash.get(obj) // 拷贝前，先去存储空间中找，如果有的话直接返回 let cloneObj = new obj.constructor() // 创建新的克隆对象或数组 hash.set(obj, cloneObj) // 如果存储空间中没有就存进 hash 里 for (let key in obj) { if (obj.hasOwnProperty(key)) { cloneObj[key] = deepClone(obj[key], hash) // 递归深拷贝每层 } } return cloneObj } \",\"测试：\",\"const a = { number: 1, bool: true, string: 'a', empty1: undefined, empty2: null, array1: [1, 2, 3], array2: [ { name: 'never', age: 23 }, { name: 'nevermore', age: 23 } ], date: new Date(2000, 0, 1, 1, 00, 00), regexp: /\\\\.(j|t)sx/i, obj: { name: 'never', age: 23 }, f1: (a, b) => a + b, f2: function (a, b) { return a + b } } a.self = a // 对象某个属性引用自身（循环引用） const b = deepClone(a) // 基本类型无需深拷贝 console.log(a.number === b.number) // true console.log(a.bool === b.bool) // true console.log(a.string === b.string) // true console.log(a.empty1 === b.empty1) // true console.log(a.empty2 === b.empty2) // true // 函数无需深拷贝 console.log(a.f1 === b.f1) // true console.log(a.f2 === b.f2) // true // 对象、数组需要深拷贝 console.log(a.self === b.self) // false console.log(a.array1 === b.array1) // false console.log(a.array2 === b.array2) // false console.log(a.date === b.date) // false console.log(a.regexp === b.regexp) // false console.log(a.obj === b.obj) // false \"]},\"235\":{\"h\":\"structuredClone()\",\"t\":[\"使用 Web API 的structuredClone() 结构化拷贝可以实现深拷贝，详见MDN\",\"const obj = { child: { name: 'child' } } const copyObj = structuredClone(obj) // 结构化拷贝（深拷贝） obj.child.name = 'child changed' // 修改原对象 console.log(obj) // { child: { name: 'child changed' } } console.log(copyObj) // { child: { name: 'child' } } console.log(obj.child === copyObj.child) // false \"]},\"236\":{\"h\":\"参考资料\",\"t\":[\"浅拷贝与深拷贝\",\"JS 的引用赋值与传值赋值\",\"轻松拿下 JS 浅拷贝、深拷贝\",\"structuredClone()——MDN\"]},\"237\":{\"h\":\"ES6语法\"},\"238\":{\"h\":\"let&&const\",\"t\":[\"var在{}之外也起作用\",\"let在{}之外不起作用\",\"var多次声明同一变量不会报错，let多次声明会报错，只能声明一次。\",\"var会变量提升（打印和定义可以顺序反）。let 不存在变量提升（顺序不能反）\",\"const声明之后不允许改变\",\"<!-- 快捷键shift+! --> <!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> </head> <body> <script> // var 声明的变量往往会越域 // let 声明的变量有严格局部作用域 { var a = 1; let b = 2; } console.log(a); // 1 console.log(b); // ReferenceError: b is not defined // var 可以声明多次 // let 只能声明一次 var m = 1 var m = 2 let n = 3 let n = 4 console.log(m) // 2 console.log(n) // Identifier 'n' has already been declared // var 会变量提升 // let 不存在变量提升 console.log(x); // undefined var x = 10; console.log(y); //ReferenceError: y is not defined let y = 20; // const // 1. const声明之后不允许改变 // 2. 一但声明必须初始化，否则会报错 const a = 1; a = 3; //Uncaught TypeError: Assignment to constant variable. </script> </body> </html> \"]},\"239\":{\"h\":\"解构表达式\",\"t\":[\"支持let arr = [1,2,3];let [a,b,c] = arr;这种语法\",\"支持对象解析：const { name: abc, age, language } = person; 冒号代表改名\",\"字符串函数\",\"支持一个字符串为多行\",\"占位符功能 ${}\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> </head> <body> <script> //数组解构 // let arr = [1,2,3]; // // let a = arr[0]; // // let b = arr[1]; // // let c = arr[2]; // let [a,b,c] = arr; // console.log(a,b,c) const person = { name: \\\"jack\\\", age: 21, language: ['java', 'js', 'css'] } // const name = person.name; // const age = person.age; // const language = person.language; //对象解构 const { name: abc, age, language } = person; console.log(abc, age, language) // 字符串扩展 let str = \\\"hello.vue\\\"; console.log(str.startsWith(\\\"hello\\\"));//true console.log(str.endsWith(\\\".vue\\\"));//true console.log(str.includes(\\\"e\\\"));//true console.log(str.includes(\\\"hello\\\"));//true //字符串模板 let ss = `<div> <span>hello world<span> </div>`; console.log(ss); // 字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。 function fun() { return \\\"这是一个函数\\\" } let info = `我是${abc}，今年${age + 10}了, 我想说： ${fun()}`; console.log(info); </script> </body> </html> \"]},\"240\":{\"h\":\"函数优化\",\"t\":[\"原来想要函数默认值得这么写b = b || 1; 现在可以直接写了function add2(a, b = 1) {}\",\"函数不定参数function fun(...values) {}\",\"支持箭头函数（lambda表达式），还支持使用{}结构传入对象的成员\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> </head> <body> <script> //在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法： function add(a, b) { // 判断b是否为空，为空就给默认值1 b = b || 1; return a + b; } // 传一个参数 console.log(add(10)); //现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值 function add2(a, b = 1) { return a + b; } console.log(add2(20)); //不定参数 function fun(...values) { console.log(values.length) } fun(1, 2) //2 fun(1, 2, 3, 4) //4 //箭头函数 //以前声明一个方法 // var print = function (obj) { // console.log(obj); // } var print = obj => console.log(obj); print(\\\"hello\\\"); // var sum = function (a, b) { // c = a + b; // return a + c; // } var sum2 = (a, b) => a + b; console.log(sum2(11, 12)); var sum3 = (a, b) => { c = a + b; return a + c; } console.log(sum3(10, 20)) const person = { name: \\\"jack\\\", age: 21, language: ['java', 'js', 'css'] } // function hello(person) { // console.log(\\\"hello,\\\" + person.name) // } //箭头函数+解构 // var hello1 = (param) => console.log(\\\"hello,\\\" + param.name) // hello1(person); var hello2 = ({name}) => console.log(\\\"hello,\\\" +name); hello2(person); </script> </body> </html> \"]},\"241\":{\"h\":\"对象优化\",\"t\":[\"可以获取map的键值对等Object.keys()、values、entries\",\"Object.assgn(target,source1,source2) 合并函数\",\"const person2 = { age, name } //声明对象简写\",\"…代表取出该对象所有属性拷贝到当前对象。let someone = { …p1 }\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> </head> <body> <script> const person = { name: \\\"jack\\\", age: 21, language: ['java', 'js', 'css'] } console.log(Object.keys(person));//[\\\"name\\\", \\\"age\\\", \\\"language\\\"] console.log(Object.values(person));//[\\\"jack\\\", 21, Array(3)] console.log(Object.entries(person));//[Array(2), Array(2), Array(2)] const target = { a: 1 }; const source1 = { b: 2 }; const source2 = { c: 3 }; //{a:1,b:2,c:3} Object.assign(target, source1, source2); console.log(target);//[\\\"name\\\", \\\"age\\\", \\\"language\\\"] // 声明对象简写 const age = 23 const name = \\\"张三\\\" // 以前 const person1 = { age: age, name: name } const person2 = { age, name }//声明对象简写 console.log(person2); // 对象的函数属性简写 let person3 = { name: \\\"jack\\\", // 以前： eat1: function (food) { console.log(this.name + \\\"在吃\\\" + food); }, //箭头函数this不能使用，对象.属性 // eat2: food => console.log(this.name + \\\"在吃\\\" + food), eat2: food => console.log(person3.name + \\\"在吃\\\" + food), eat3(food) { console.log(this.name + \\\"在吃\\\" + food); } } person3.eat1(\\\"香蕉\\\"); person3.eat2(\\\"苹果\\\"); person3.eat3(\\\"橘子\\\"); // 对象拓展运算符 // 浅拷贝复制引用地址，深拷贝开辟新的地址 // 拷贝对象（深拷贝） let p1 = { name: \\\"Amy\\\", age: 15 } let someone = { ...p1 } console.log(someone) //{name: \\\"Amy\\\", age: 15} // 合并对象 let age1 = { age: 15 } let name1 = { name: \\\"Amy\\\" } let p2 = {name:\\\"zhangsan\\\"} p2 = { ...age1, ...name1 } console.log(p2) </script> </body> </html> \"]},\"242\":{\"h\":\"map和reduce\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> </head> <body> <script> //数组中新增了map和reduce方法。 //map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。 let arr = ['1', '20', '-5', '3']; // arr = arr.map((item)=>{ // return item*2 // }); arr = arr.map(item=> item*2); console.log(arr); //reduce() 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素， //[2, 40, -10, 6] //arr.reduce(callback,[initialValue]) /** 1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue）） 2、currentValue （数组中当前被处理的元素） 3、index （当前元素在数组中的索引） 4、array （调用 reduce 的数组） 以下为求和 */ let result = arr.reduce((a,b)=>{ console.log(\\\"上一次处理后：\\\"+a); console.log(\\\"当前正在处理：\\\"+b); return a + b; },100);//不设置100，默认为2 console.log(result) </script> </body> </html> \"]},\"243\":{\"h\":\"promise\",\"t\":[\"ajax回调地狱（多层嵌套ajax）的优化\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> <script src=\\\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\\\"></script> </head> <body> <script> //1、查出当前用户信息 //2、按照当前用户的id查出他的课程 //3、按照当前课程id查出分数 // 回调地狱 (嵌套ajax) $.ajax({ url: \\\"mock/user.json\\\", success(data) { console.log(\\\"查询用户：\\\", data); $.ajax({ url: `mock/user_corse_${data.id}.json`, success(data) { console.log(\\\"查询到课程!!!!：\\\", data); $.ajax({ url: `mock/corse_score_${data.id}.json`, success(data) { console.log(\\\"查询到分数!!!!：\\\", data); }, error(error) { console.log(\\\"出现异常了!!!!：\\\" + error); } }); }, error(error) { console.log(\\\"出现异常了!!!!：\\\" + error); } }); }, error(error) { console.log(\\\"出现异常了!!!!：\\\" + error); } }); //1、Promise可以封装异步操作 本质：将嵌套调用Ajax优化为函数递归Promise(把Ajax封装到Promise) let p = new Promise((resolve, reject) => { //传入成功解析，失败拒绝 //1、异步操作 $.ajax({ url: \\\"mock/user.json\\\", success: function (data) { console.log(\\\"查询用户成功----:\\\", data) resolve(data); }, error: function (err) { reject(err); } }); }); p.then((obj) => { //成功以后做什么 return new Promise((resolve, reject) => { $.ajax({ url: `mock/user_corse_${obj.id}.json`, success: function (data) { console.log(\\\"查询用户课程成功----:\\\", data) resolve(data); }, error: function (err) { reject(err) } }); }) }).then((data) => { //成功以后干什么 console.log(\\\"上一步的结果\\\", data) $.ajax({ url: `mock/corse_score_${data.id}.json`, success: function (data) { console.log(\\\"查询课程得分成功----:\\\", data) }, error: function (err) { } }); }) // 将以上封装为一个函数 function get(url, data) { //自己定义一个方法整合一下 return new Promise((resolve, reject) => { $.ajax({ url: url, data: data, success: function (data) { resolve(data); }, error: function (err) { reject(err); } }) }); } get(\\\"mock/user.json\\\") .then((data) => { console.log(\\\"用户查询成功~~~:\\\", data) return get(`mock/user_corse_${data.id}.json`); }) .then((data) => { console.log(\\\"课程查询成功~~~:\\\", data) return get(`mock/corse_score_${data.id}.json`); }) .then((data)=>{ console.log(\\\"课程成绩查询成功~~~:\\\", data) }) .catch((err)=>{ //失败的话catch console.log(\\\"出现异常~~~\\\",err) }); </script> </body> </html> \"]},\"244\":{\"h\":\"模块化\",\"t\":[\"类似于java中的导包\",\"export用于规定模块的对外接口\",\"import用于导入其他模块提供的功能\",\"/**----user.js----**/ var name = \\\"jack\\\" var age = 21 function add(a,b){ return a + b; } export {name,age,add} /**----hello.js----**/ // export const util = { // sum(a, b) { // return a + b; // } // } export default { sum(a, b) { return a + b; } } // export {util} //注意：`export`不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。 /**----main.js----**/ import abc from \\\"./hello.js\\\" import {name,add} from \\\"./user.js\\\" abc.sum(1,2); console.log(name); add(1,3); \"]},\"245\":{\"c\":[\"前端\"]},\"246\":{\"c\":[\"ES6\"]},\"247\":{\"h\":\"事件循环\"},\"248\":{\"h\":\"浏览器事件循环\",\"t\":[\"JS 是单线程的、非阻塞的。通过事件循环解决了单线程会阻塞的问题。JS 实现异步的核心就是事件循环。（进程是线程的容器。比喻：操作系统是工厂，进程是车间，线程是工人）\",\"早期的 JS 作为浏览器脚本语言，为了防止 DOM 渲染冲突的问题、简化编程，被设计为单线程语言。\",\"如今，为了充分发挥 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JS 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM，所以 Web Worker 本质上仍是通过单线程模拟多线程。\",\"总结：优点是简化编程，缺点是无法发挥 CPU 的全部性能（可以使用 HTML5 新标准 Web Worker实现多线程）\"]},\"249\":{\"h\":\"微任务与宏任务分类\",\"t\":[\"浏览器、Node 环境下的微任务与宏任务分类：\",\"微任务（microTask）：promise then、async/await、MutationObserver（H5 新特性）、queueMicrotask、process.nextTick\",\"宏任务（macroTask）：main script(主线程代码)、setTimeout、setInterval、setImmediate、requestAnimationFrame、I/O 事件、DOM 监听事件、AJAX 请求、UI 页面渲染\"]},\"250\":{\"h\":\"执行顺序\",\"t\":[\"main script主线程代码首先执行\",\"执行微任务\",\"DOM 渲染（若有则渲染，无则跳过）（微任务会阻塞页面的渲染，宏任务不会）\",\"执行宏任务：在此之前，先查看微任务队列是否为空，不为空则继续执行微任务（先微后宏）即：若微任务在执行过程中产生了新的微任务，则继续执行微任务，微任务执行完毕后，再回到宏任务中进行下一轮微任务队列。\"]},\"251\":{\"h\":\"例题一\",\"t\":[\"setTimeout(() => { // 宏1 console.log('3') Promise.resolve().then(() => { console.log('4') // 产生了新的微任务，放入第二轮微任务 }) }) console.log('1') Promise.resolve().then(() => { // 第一轮 微任务 console.log('2') // 先微后宏 setTimeout(() => { console.log('5') // 宏2，在执行宏任务前，先查看微任务队列是否为空，不为空则继续执行微任务 }) }) \"]},\"252\":{\"h\":\"例题二\",\"t\":[\"async function async1() { console.log('async1 start') // 2 await async2() // 同步执行 async2 console.log('async1 end') // await 的下边代码进入微任务队列 （微1） 6 } async function async2() { console.log('async2') // 3 } console.log('script start') // 1 setTimeout(function () { //（宏1） 8 console.log('setTimeout') }, 0) async1() new Promise(function (resolve) { // 初始化 Promise，传入的函数同步执行 console.log('promise1') // 4 resolve() }).then(function () { // （微2） 7 （微任务执行完毕，接着执行宏任务） console.log('promise2') }) console.log('script end') // 5 （同步代码执行完毕，接着执行微任务） \",\"await 与 Promise 的等价替换：\",\"async function async1() { console.log('1') await async2() console.log('3') } async function async2() { console.log('2') } // 等价于 function async1() { console.log('1') Promise.resolve(async2()).then(() => { // 执行 async2 的返回值放入 resolve 里 console.log('3') }) } // 紧跟着 await 后面的语句相当于放在了 new Promise 中 // 下一行及之后的语句相当于放在于 Promise.then 中 \"]},\"253\":{\"h\":\"例题三\",\"t\":[\"// 整个 setTimeout 的回调函数放入宏任务队列（宏1），微任务结束再执行 setTimeout(() => { console.log('setTimeout1') // 7 new Promise((resolve) => { resolve() }).then(() => { // 宏1 引入了新的微任务，放入第二轮的微任务队列中，先把微任务队列执行完后，再执行宏2 new Promise(function (resolve) { resolve() }).then(() => { // 放入第三轮微任务队列中 console.log('then4') // 9 }) console.log('then3') // 8 同步执行 }) }) new Promise((resolve) => { console.log('promise1') // 1 resolve() }).then(() => { console.log('then1') // （微1）4 }) setTimeout(() => { console.log('setTimeout2') // 10 }) // （宏2） console.log(2) // 2 queueMicrotask(() => { console.log('queueMicrotask') // （微2）5 }) new Promise((resolve) => { console.log('promise2') // 3 resolve() }).then(() => { console.log('then2') // （微3）6 （第一轮微任务执行完毕，执行宏1） }) // promise1 // 2 // promise2 // then1 // queueMicrotask // then2 // setTimeout1 // then3 // then4 // setTimeout2 \",\"图解：\"]},\"254\":{\"h\":\"Node 事件循环\",\"t\":[\"Nodejs 事件循环机制分为 6 个阶段：\",\"timers（定时器阶段）：执行 setTimeout、setInterval 的回调\",\"pending callbacks（待定回调阶段）：执行延迟到下一个循环迭代的 I/O 回调（执行系统操作的回调）\",\"idle, prepare（闲置阶段）：仅 Node 内部使用\",\"poll（轮询阶段）：检索新的 I/O 事件\",\"check（检查阶段）：执行 setImmediate 的回调\",\"close callbacks（关闭事件回调阶段）：执行关闭事件的回调，如 socket.on('close', ...)\",\"重点阶段为：\",\"timers：执行 setTimeout、setInterval 的回调\",\"poll：处理轮询队列的事件，当有已超时的 timer，执行它的回调函数（若没有异步任务，则停留在此阶段）\",\"check：立即执行 setImmediate 的回调\"]},\"255\":{\"h\":\"执行顺序\",\"t\":[\"微任务队列：\",\"next tick microtask queue：process.nextTick\",\"other microtask queue：Promise then 回调、queueMicrotask\",\"宏任务队列：\",\"timer queue：setTimeout、setInterval\",\"poll queue：I/O 事件\",\"check queue：setImmediate\",\"close queue：close 事件\",\"在每一次事件循环的tick中，代码执行顺序：\",\"next tick microtask queue\",\"other microtask queue\",\"timer queue\",\"poll queue\",\"check queue\",\"close queue\"]},\"256\":{\"h\":\"例题\",\"t\":[\"async function async1() { console.log('2') await async2() console.log('9') } async function async2() { console.log('3') } console.log('1') setTimeout(() => { console.log('11') }, 0) setTimeout(() => { console.log('13') }, 500) setImmediate(() => console.log('12')) process.nextTick(() => console.log('7')) async1() process.nextTick(() => console.log('8')) new Promise((resolve) => { console.log('4') resolve() console.log('5') }).then(() => { console.log('10') }) console.log('6') \",\"图解：\"]},\"257\":{\"h\":\"JS 运行原理\"},\"258\":{\"h\":\"浏览器内核\",\"t\":[\"Trident：微软开发，IE 浏览器使用，Edge 浏览器已经转向 Blink；\",\"Webkit：苹果基于 KHTML 开发，用于 Safari，Chrome 之前也在使用；\",\"Blink：谷歌基于 Webkit 开发，目前应用于 Chrome、Edge、Opera 等；\"]},\"259\":{\"h\":\"渲染引擎\",\"t\":[\"渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息。\",\"解析 HTML，遇到 script、style 会停止解析 HTML，优先加载 JS 代码和 CSS 代码。\",\"所以建议：\",\"style 放最前，避免页面重绘。\",\"script 放最后，避免白屏等待过久。\"]},\"260\":{\"h\":\"JavaScript 引擎\",\"t\":[\"专门处理 JavaScript 代码的虚拟机、解释器，用来解释执行 JS 代码。\",\"SpiderMonkey：第一款 JavaScript 引擎，由 JS 之父开发\",\"Chakra：微软开发，用于 IE 浏览器\",\"JavaScriptCore：苹果开发，WebKit 中的 JS 引擎\",\"V8：谷歌开发的性能强大的 JS 引擎\"]},\"261\":{\"h\":\"浏览器内核、渲染引擎和 JS 引擎的关系\",\"t\":[\"以前内核的概念包括渲染引擎与 JS 引擎，现在习惯直接称渲染引擎为内核，JS 引擎独立。\",\"以前称 Chrome 浏览器使用 Chromium 内核，blink 渲染引擎，V8 JS 引擎。\",\"现在称 Chrome 浏览器使用 blink 内核，V8 JS 引擎。\"]},\"262\":{\"h\":\"V8 引擎的原理\",\"t\":[\"V8 的名字来源于汽车的“V 型 8 缸发动机”（V8 发动机）。V8 发动机主要是美国发展起来，因为马力十足而广为人知。V8 引擎的命名是 Google 向用户展示它是一款强力并且高速的 JavaScript 引擎。\",\"V8 是用 C ++ 编写的 Google 开源高性能 JavaScript 和 WebAssembly 引擎，它用于 Chrome 和 Node.js 等。\",\"在运行 C、C++ 以及 Java 等程序之前，需要进行编译，不能直接执行源码。但对于 JavaScript，可以直接执行源码（比如：node server.js），它是在运行的时候先编译再执行，这种方式被称为即时编译（Just-in-time compilation，JIT)。混合使用编译器和解释器的技术。而编译器启动速度慢，执行速度快。而解释器的启动速度快，执行速度慢。而 JIT 技术就是博两者之长。V8 引擎属于 JIT 编译器。\",\"V8 引擎主要模块有：\",\"Parser: 解析器，负责将源代码解析成 AST (Abstract Syntax Tree) 抽象语法树\",\"Ignition: 解释器，负责将 AST 抽象语法树转换成字节码并执行，并且会监听、标记热点代码\",\"TurboFan: 优化编译器，负责将热点代码编译成比字节码更高效的机器码并执行\",\"Orinoco: 垃圾回收器，负责回收程序不需要的内存空间\"]},\"263\":{\"h\":\"V8 引擎主要流程\",\"t\":[\"图源：极客时间《图解 Google V8》\",\"主要流程\",\"Parser 解析器：JS 源代码经过解析器的词法分析（将 JS 代码拆分成一个个词法单元 token）和语法分析（将词法单元 token 根据语法规则组合成 AST 抽象语法树 ），分析过程中如果语法有错，会抛出语法错误。\",\"Ignition 解释器：AST 通过 Ignition 解释器转化为 btye code 字节码并执行。在执行过程中，如果发现重复执行多次的代码，则标记为热点代码，将热点代码交给 TurboFan 编译器处理。 （题外话：Java 字节码 是 Java 虚拟机执行的一种指令格式，V8 引擎本质是 JavaScript 的虚拟机）\",\"TurboFan 优化编译器：编译器拿到解释器标记的热点代码后，把它编译为更高效的机器码储存起来，等到下次再执行到这段代码时，就会用现在的机器码替换原来的字节码进行执行，这样大大提升了代码的执行效率。当一段代码不再是热点代码后，进行 deoptimization 去优化处理还原成字节码。\"]},\"264\":{\"h\":\"Parser 解析器\",\"t\":[\"Parser 解析器负责将源代码转换成 AST 抽象语法树。在转换过程中有两个重要的阶段：词法分析（Lexical Analysis）和语法分析（Syntax Analysis）。\",\"在 Parser 解析器将源码转化为 AST 之前，有一个 Scanner 扫描器的词法分析。过程图及描述如下：\",\"Blink 渲染引擎将源码交给 V8 引擎，Stream 获取到源码并且进行编码转换\",\"Scanner 扫描器会进行词法分析，词法分析会将代码转换成 tokens\",\"接下来 tokens 会被转换成 AST 树，经过 Parser 解析器和 PreParser 预解析器：需要马上执行的 JS 代码进行解析，不需要马上执行的则进行预解析（又称 延迟、惰性解析）。\",\"生成 AST 树后，会被 Ignition 解释器转成字节码并执行。\",\"并不是所有的 JavaScript 代码，在一开始时就会被执行。那么对所有的 JavaScript 代码进行解析，必然会影响网页的运行效率； 所以 V8 引擎就实现了 Lazy Parsing（惰性解析）的方案，它的作用是将不必要的函数进行预解析，也就是只解析暂时需要的内容，而对函数的全量解析是在函数被调用时才会进行； 在一个函数 outer 内部定义了另外一个函数 inner，那么 inner 函数就会进行预解析；\"]},\"265\":{\"h\":\"Ignition 解释器\",\"t\":[\"将抽象语法树转换为字节码并执行；同时收集 TurboFan 优化编译器所需的信息，比如函数参数的类型（使用 TS 约束变量类型可以提高编译效率的原因）。\"]},\"266\":{\"h\":\"TurboFan 优化编译器\",\"t\":[\"TurboFan 拿到 Ignition 标记的热点代码后，会先进行优化处理，然后将优化后字节码编译成更高效的机器码存储起来。下次再次执行相同代码时，会直接执行相应的机器码，这样就在很大程度上提升了代码的执行效率。\",\"当一段代码不再是热点代码后，TurboFan 会进行去优化的过程，将优化编译后的机器码还原成字节码，将代码的执行权利交还给 Ignition。\",\"拓展阅读：JavaScript 深入浅出第 5 课：Chrome 是如何成功的？ 了解下 V8 引擎的历史\",\"机器码、字节码、汇编语言区别 \",\"机器码(machine code)：机器语言指令，是电脑的 CPU 可直接解读的 0 1 二进制序列。\",\"字节码(byte code)：是一种包含执行程序、由一序列 op 代码/数据对 组成的二进制文件。是一种中间码，它比机器码更抽象，需要直译器转译后才能成为机器码的中间代码。\",\"汇编语言：汇编经过转译最终也会成为机器码，汇编语言可以简单理解为机器语言的助记\"]},\"267\":{\"h\":\"参考资料\",\"t\":[\"AST 在线\",\"v8 执行 js 的过程\",\"走进 chrome 内心，了解 V8 引擎是如何工作的\",\"AST 抽象语法树\",\"JavaScript 引擎 V8 执行流程概述\",\"图解 Google V8\",\"深入 JavaScript 高级语法\"]},\"268\":{\"h\":\"JS 代码执行过程\"},\"269\":{\"h\":\"全局代码执行过程\"},\"270\":{\"h\":\"初始化全局对象\",\"t\":[\"js引擎会在执行代码之前，会在堆内存创建一个全局对象：Global Object(GO)\",\"该对象所有的作用域都可以访问;\",\"里面包含Date、Array、String、Number、setTimeout、setInterval等;\",\"其中还有一个window属性指向自己;\"]},\"271\":{\"h\":\"执行上下文栈\",\"t\":[\"v8引擎为了执行代码, v8引擎内部会有一个执行上下文栈(Execution Context Stack, ECStack)(函数调用栈)\",\"因为我们执行的是全局代码, 为了全局代码能够正常的执行, 需要创建 全局执行上下文(Global Execution Context)(全局代码需要被执行时才会创建)\",\"GEC被放入到ECS中里面包含两部分内容：\",\"第一部分：在代码执行前，在parser转成AST的过程中，会将全局定义的变量、函数等加入到GlobalObject中，但是并不会赋值;这个过程也称之为变量的作用域提升\",\"第二部分：在代码执行中，对变量赋值，或者执行其他的函数\",\"GEC被放入到ECS中:\",\" GEC开始执行代码:\",\"全局代码执行过程2\"]},\"272\":{\"h\":\"函数代码执行过程\",\"t\":[\"在执行的过程中执行到一个函数时，就会根据函数体创建一个函数执行上下文（Functional Execution Context，简称FEC），并且压入到ECStack中。\",\"FEC中包含三部分内容:\",\"第一部分：在解析函数成为AST树结构时，会创建一个Activation Object（AO）(AO中包含形参、arguments、函数定义和指向函数对象、定义的变量)\",\"第二部分：作用域链：由VO（在函数中就是AO对象）和父级VO组成，查找时会一层层查找\",\"第三部分：this绑定的值\",\"FEC被放入到ECS中:\",\" FEC开始执行代码:\",\"注意：\",\"当我们查找一个变量时,真实的查找路径是沿着作用域链来查找\",\"函数的父级作用于跟它定义的位置有关,与调用位置没有关系\"]},\"273\":{\"h\":\"嵌套函数代码执行过程\",\"t\":[\"// 示例代码 foo(123) function foo(num) { console.log(m) var m = 10 var n = 20 function bar() { console.log(name) } bar() } \",\"嵌套函数代码执行过程\"]},\"274\":{\"h\":\"函数调用函数执行过程\",\"t\":[\"// 示例代码 var message = \\\"hello,global\\\" function foo() { console.log(message); } function bar() { var message = \\\"hello,bar\\\" foo() } bar() \",\"函数调用函数执行过程\"]},\"275\":{\"h\":\"作用域提升面试题\",\"t\":[\"面试题1\",\"面试题2\",\"面试题3\",\"面试题4\",\"面试题5\"]},\"276\":{\"h\":\"JS内存管理及垃圾回收\",\"t\":[\"JS对于基本数据类型内存的分配会在执行时，直接在栈空间进行分配\",\"JS对于复杂数据类型内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针返回值变量引用\",\"常见的GC算法\",\"引用计数法：当一个对象有一个引用指向它时，那么这个对象的引用就+1，当一个对象的引用为0时，这个对象就可以被销毁掉\",\"引用计数法\",\"标记清除法：这个算法是设置一个根对象（root object），垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对于哪些没有引用到的对象，就认为是不可用的对象\",\"标记清除法\"]},\"277\":{\"h\":\"总结\",\"t\":[\"GEC(global excution context)全局执行上下文：执行全局代码\",\"FEC(function excution context)函数执行上下文：执行函数代码\",\"全局：VO:GO(es5之前)\",\"函数：VO:AO(es5之前)\"]},\"278\":{\"h\":\"继承\"},\"279\":{\"h\":\"原型链继承\",\"t\":[\"function Parent() { this.parentValue = 'parentValue' this.info = { name: 'parent', age: 23, } this.parentMethod = function () { console.log(this.parentValue) } } Parent.prototype.protoValue = 'protoValue' Parent.prototype.protoMethod = function () { console.log(this.protoValue) } function Child() { this.childValue = 'childValue' } // Child.prototype.__proto__ === Parent.prototype Child.prototype = new Parent() // 缺点1：不能给父类构造函数传参 let child1 = new Child() let child2 = new Child() // 缺点2：子类实例继承到父类构造函数、原型链的属性和方法，但不可枚举 console.log(child1) // Child {childValue: 'childValue'} console.log(child2) // Child {childValue: 'childValue'} // 缺点3：父类的引用属性会被所有子类实例共享 child1.info.address = 'Earth' // 可以访问父类构造函数、原型链的属性和方法 child1.protoMethod() // protoValue child1.parentMethod() // parentValue child1.protoValue // 'protoValue' \",\"优点：父类方法可以复用\",\"缺点：\",\"不能给父类构造函数传参\",\"子类实例可以继承父类构造函数、原型链上的属性和方法，但不可枚举\",\"父类的引用属性会被所有子类实例共享，修改某个子类实例继承的的引用类型属性，会影响到所有的子类实例\"]},\"280\":{\"h\":\"借用构造函数继承\",\"t\":[\"function Parent(name, age) { this.parentValue = 'parentValue' this.info = { name, age } this.parentMethod = function () { console.log(this.parentValue) } } Parent.prototype.protoValue = 'protoValue' Parent.prototype.protoMethod = function () { console.log(this.protoValue) } function Child(name, age) { Parent.call(this, name, age) this.childValue = 'childValue' } let child1 = new Child('child1', 23) let child2 = new Child('child2', 233) // 可以继承父类构造函数的属性和方法，且可枚举 console.log(child1) // Child {parentValue: 'parentValue', info: {…}, childValue: 'childValue', parentMethod: ƒ} console.log(child2) // Child {parentValue: 'parentValue', info: {…}, childValue: 'childValue', parentMethod: ƒ} // 修改某个子类实例继承的的引用类型属性，不会影响到所有的子类实例 child1.info.address = 'Earth' console.log(child1.info) // {name: 'child1', age: 23, address: 'Earth'} console.log(child2.info) // {name: 'child2', age: 233} // 缺点：无法继承到父类原型上的属性和方法 // child1.protoMethod() // 报错 // console.log(child1.protoValue) // undefined \",\"优点：\",\"避免父类引用类型属性被所有实例共享\",\"子类可以向父类构造函数传参\",\"缺点：\",\"只能继承父类构造函数的属性和方法，不能继承原型链上的属性和方法\",\"方法定义在构造函数中，每个子类实例都含有父类函数副本，无法实现父类函数复用\"]},\"281\":{\"h\":\"组合继承\",\"t\":[\"将原型链继承与构造函数继承组合使用\",\"function Parent(name, age) { this.parentValue = 'parentValue' this.info = { name, age } this.parentMethod = function () { console.log(this.parentValue) } } Parent.prototype.protoValue = 'protoValue' Parent.prototype.protoMethod = function () { console.log(this.protoValue) } function Child(name, age) { // 继承父类构造函数的属性和方法 Parent.call(this, name, age) this.childValue = 'childValue' } // 继承原型链上的属性和方法 Child.prototype = new Parent() let child1 = new Child('child1', 23) let child2 = new Child('child2', 233) // 可以继承父类构造函数的属性和方法，且可枚举 console.log(child1) // Child {parentValue: 'parentValue', info: {…}, childValue: 'childValue', parentMethod: ƒ} console.log(child2) // Child {parentValue: 'parentValue', info: {…}, childValue: 'childValue', parentMethod: ƒ} // 避免父类的引用类型属性被所有子类实例共享 child1.info.address = 'Earth' console.log(child1.info) // {name: 'child1', age: 23, address: 'Earth'} console.log(child2.info) // {name: 'child2', age: 233} // 可以继承到父类原型链上的属性和方法，但不可枚举 child1.protoMethod() // protoValue console.log(child1.protoValue) // 'protoValue' \",\"优点：可以继承父类构造函数和原型链上的属性、方法\",\"缺点：组合继承会调用两次父类构造函数，实例中会存在两份属性、方法\"]},\"282\":{\"h\":\"原型式继承\",\"t\":[\"对对象的浅拷贝，有三种等价方法，原型式继承的缺点与原型链继承是相同的\",\"let parent = { parentValue: 'parentValue', info: { name: 'parent', age: 23, }, parentMethod: function () { console.log(this.parentValue) }, } // 1.临时构造函数 function copyObject1(obj) { function Fn() {} Fn.prototype = obj return new Fn() } // 缺点1：不能向父类传参 let child1 = copyObject1(parent) // 2.Object.setPrototypeOf function copyObject2(obj) { let newObj = {} Object.setPrototypeOf(newObj, obj) return newObj } let child2 = copyObject2(parent) // 3.Object.create() let child3 = Object.create(parent) // 可以继承到父类的属性和方法，但不可枚举 console.log(child1) // Fn {} console.log(child2) // {} console.log(child3) // {} console.log(child1.info) // { name: 'parent', age: 23 } child1.parentMethod() // parentValue // 缺点2：父类引用类型属性被所有子类共享 child1.info.address = 'Earth' console.log(child2.info) // {name: 'parent', age: 23, address: 'Earth'} \",\"优点：父类方法可复用\",\"缺点：\",\"不能给父类构造函数传参\",\"父类的引用属性会被所有子类实例共享\"]},\"283\":{\"h\":\"寄生式继承\",\"t\":[\"结合原型类继承和工厂模式：创建一个封装继承过程的函数, 该函数在内部以某种方式来增强对象\",\"function copyObject(obj) { function Fn() {} Fn.prototype = obj return new Fn() } function createChild(original) {// 工厂函数 let clone = copyObject(original) clone.parentMethod = function () { console.log(this.parentValue) } return clone } let parent = { parentValue: 'parentValue', info: { name: 'parent', age: 23, }, } let child1 = createChild(parent) let child2 = createChild(parent) console.log(child1) // Fn {parentMethod: ƒ} child1.parentMethod() // parentValue console.log(child1.info) // {name: 'parent', age: 23} // 父类的引用属性会被所有子类实例共享 child1.info.address = 'Earth' console.log(child1.info) // {name: 'child1', age: 23, address: 'Earth'} console.log(child2.info) // {name: 'child1', age: 23, address: 'Earth'} \",\"缺点：\",\"无法实现父类函数复用\",\"父类的引用属性会被所有子类实例共享\"]},\"284\":{\"h\":\"寄生组合式继承\",\"t\":[\"组合继承最大的缺点在于执行两次父类构造函数，寄生组合式继承解决了这个缺点\",\"function inheritPrototype(child, parent) { let prototype = Object.create(parent.prototype) // 创建对象 prototype.constructor = child // 增强对象 child.prototype = prototype // 赋值对象 } function Parent(name, age) { this.parentValue = 'parentValue' this.info = { name, age } this.parentMethod = function () { console.log(this.parentValue) } } Parent.prototype.protoValue = 'protoValue' Parent.prototype.protoMethod = function () { console.log(this.protoValue) } function Child(name, age) { // 继承父类构造函数的属性和方法 Parent.call(this, name, age) this.childValue = 'childValue' } inheritPrototype(Child, Parent) Child.prototype.childProtoMethod = function () { console.log(this.info) } let child1 = new Child('child1', 23) let child2 = new Child('child2', 233) console.log(child1) // Child {parentValue: 'parentValue', info: {…}, childValue: 'childValue', parentMethod: ƒ} child1.parentMethod() // parentValue child1.protoMethod() // protoValue child1.childProtoMethod() // {name: 'child1', age: 23} // 避免父类的引用类型属性被所有子类实例共享 child1.info.address = 'Earth' console.log(child1.info) // {name: 'child1', age: 23, address: 'Earth'} console.log(child2.info) // {name: 'child2', age: 233} // 子类实例的构造函数是它本身 console.log(child1.constructor.name) // Child \",\"优点：\",\"只调用一次父类构造函数\",\"可以向父类型的构造函数中传递参数\",\"父类方法可以复用\",\"避免父类引用类型属性被所有子类实例共享\"]},\"285\":{\"h\":\"ES6 继承\",\"t\":[\"class + extends 是实现继承的语法糖，基于寄生组合式继承实现\",\"class Parent { constructor(name, age) { this.parentValue = 'parentValue' this.info = { name, age } } parentMethod() { console.log(this.parentValue) } } class Child extends Parent { constructor(name, age, id) { super(name, age) // 通过 super() 调用父类构造函数 this.id = id } } let child1 = new Child('child1', 23, '001') let child2 = new Child('child2', 233, '002') // 只有父类方法不可枚举 console.log(child1) // Child {parentValue: 'parentValue', info: {…}, id: '001'} child1.parentMethod() // parentValue console.log(child1.info) // {name: 'child1', age: 23} // 避免父类的引用属性被所有子类实例共享 child1.info.address = 'Earth' console.log(child1.info) // {name: 'child1', age: 23, address: 'Earth'} console.log(child2.info) // {name: 'child2', age: 233} // 子类实例的构造函数是它本身 console.log(child1.constructor.name) // Child \"]},\"286\":{\"h\":\"参考资料\",\"t\":[\"JavaScript进阶之继承\",\"JS继承\",\"JavaScript高级程序设计（第4版）\"]},\"287\":{\"h\":\"函数式编程\",\"t\":[\"表达式：运算过程，总是有返回值\",\"语句：执行操作，没有返回值\",\"函数式编程多用表达式，少用语句。\",\"纯函数：\",\"相同输入产生相同输出（没有依赖除了输入的外部环境）\",\"无副作用（没有改变包括输入在内的外部环境）\",\"数组的方法：\",\"slice 截取纯函数：返回新数组，不会修改原数组，纯函数\",\"splice 拼接非纯函数：返回被删的数组，会修改原数组，非纯函数\"]},\"288\":{\"h\":\"纯函数判断\",\"t\":[\"// 纯函数 function sum(num1, num2) { return num1 + num2 } // 非纯函数（依赖 dep） let dep = 5 function add(num){ return dep + num } console.log(add(5)) // 10 dep = 10 console.log(add(5)) // 15 // 非纯函数（修改了输入） let person = { name: 'nevermore', age: 23 } function modify(obj) { obj.age = 100 } modify(person) console.log(person) \"]},\"289\":{\"h\":\"柯里化\",\"t\":[\"柯里化（Currying）：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。每次调用函数时，它只接受一部分参数，并返回一个函数，直到传递所有参数为止。\",\"函数的单一职责原则：每个函数的处理逻辑单一\"]},\"290\":{\"h\":\"柯里化例子\",\"t\":[\"function sum1(x, y, z) { return x + y + z } console.log(sum1(10, 20, 30)) // 60 function sum2(x) { return function (y) { return function (z) { return x + y + z } } } console.log(sum2(10)(20)(30)) // 60 // 简化柯里化的代码 const sum3 = (x) => (y) => (z) => { return x + y + z } console.log(sum3(10)(20)(30)) // 60 // 再省略 return const sum4 = (x) => (y) => (z) => x + y + z console.log(sum4(10)(20)(30)) // 60 \"]},\"291\":{\"h\":\"柯里化的作用\",\"t\":[\"参数复用：公共参数\",\"提前返回：只接收一部分参数，返回一个函数\",\"延迟执行：柯里化返回一个预置参数的新函数，并没有立即执行\",\"参数复用例子：\",\"function log(date, type, message) { console.log( `[${date.getHours()}:${date.getMinutes()}][${type}]: [${message}]` ) } // 柯里化实现了参数的复用 // log(new Date(), 'FIX', '修复某 bug') // log(new Date(), 'FIX', '修复某某 bug') // log(new Date(), 'FEATURE', '添加某功能') let nowLog = log(new Date()) nowLog('FIX')('修复某 bug') nowLog('FEATURE')('添加某功能') let nowFixLog = log(new Date())('FIX') nowFixLog('修复某 bug') let nowFeatureLog = log(new Date())('FEATURE') nowFeatureLog('添加某功能') \"]},\"292\":{\"h\":\"柯里化函数的实现\",\"t\":[\"柯里化函数：将普通函数柯里化的一个工具函数\",\"四行代码实现：\",\"判断当前传入函数的实参个数 args.length 是否大于等于需要柯里化的函数形参个数 fn.length\",\"是则结束执行 fn(...args)\",\"否则递归执行一个返回 curry(fn, ...args, ..._args) 函数的函数\",\"// 柯里化函数 const curry = (fn, ...args) => args.length >= fn.length ? fn(...args) : (..._args) => curry(fn, ...args, ..._args) // 箭头函数转换成普通函数 const curry = function (fn, ...args) { if (args.length >= fn.length) { return fn(...args) } else { return function (..._args) { return curry(fn, ...args, ..._args) } } } // 验证 function sum(x, y, z) { return x + y + z } const curriedSum = curry(sum) console.log(curriedSum(1, 2, 3)) // 6 console.log(curriedSum(1)(2)(3)) // 6 console.log(curriedSum(1, 2)(3)) // 6 console.log(curriedSum(1)(2, 3)) // 6 \"]},\"293\":{\"h\":\"组合函数\",\"t\":[\"组合函数：将一系列单一责任函数组合成一个复杂函数，自动化执行一系列函数。\",\"const add1 = (x) => x + 1 const mul2 = (x) => x * 2 const pow3 = (x) => x ** 3 const div4 = (x) => x / 4 // 数据流从右至左 div4(pow3(mul2(add1(0)))) // 2 \",\"compose可以把类似于f(g(h(x)))的写法简化成compose(f, g, h)(x)，提高代码可读性，数据流从左至右称为管道。\",\"// 组合函数（从左至右） const compose = (...fns) => { return (x) => { return fns.reduce((arg, fn) => fn(arg), x) } } // 箭头函数转化为普通函数 function compose(...fns) { return function (x) { // 若要数据流从右至左，则可以用 reduceRight return fns.reduce(function (arg, fn) { return fn(arg) }, x) } } // 验证 const add1 = (x) => x + 1 const mul2 = (x) => x * 2 const pow3 = (x) => x ** 3 const div4 = (x) => x / 4 compose(add1, mul2, pow3, div4)(0) // 2 \"]},\"294\":{\"h\":\"参考资料\",\"t\":[\"函数柯里化：三行代码实现 add(1)(2)(3)\",\"「前端进阶」彻底弄懂函数组合\"]},\"295\":{\"h\":\"概述\"},\"296\":{\"h\":\"数据类型（8 种）\",\"t\":[\"7 种值类型（原始类型）：字符串（string）、数字(number)、布尔(boolean)、空（null）、未定义（undefined）、符号（symbol）、大数（bigInt）\",\"1 种引用类型：对象(object)\",\"注意：[数组(array)、函数(function)属于对象]。\",\"值类型存放在栈中，引用类型的地址值存在栈中，本身的值存在堆中。\"]},\"297\":{\"h\":\"迭代器与生成器\"},\"298\":{\"h\":\"迭代器\",\"t\":[\"迭代器是一个符合迭代器协议的对象。迭代器协议规定了产生一系列值的标准方式。当值为有限个时，所有的值都被迭代完毕后，则会返回一个默认返回值。\",\"迭代器协议要求实现 next 方法，next 是一个无参数或接受一个参数的函数，返回一个有 done 和 value 属性的对象：\",\"done：如果迭代器可以产生序列中的下一个值，则为 false。如果迭代器已将序列迭代完毕，则为 true。\",\"value：迭代器返回的属性值，done 为 true 时可省略。\",\"const array = [1, 2, 3] // 创建数组迭代器的函数 function createArrayIterator(arr) { let index = 0 return { next: function () { if (index < arr.length) { return { value: arr[index++], done: false } } else { return { value: undefined, done: true } } }, } } const arrayIterator = createArrayIterator(array) console.log(arrayIterator.next()) // { value: 1, done: false } console.log(arrayIterator.next()) // { value: 2, done: false } console.log(arrayIterator.next()) // { value: 3, done: false } console.log(arrayIterator.next()) // { value: undefined, done: true } console.log(arrayIterator.next()) // { value: undefined, done: true } \"]},\"299\":{\"h\":\"可迭代对象\",\"t\":[\"可迭代对象时一个符合可迭代协议的对象，可迭代协议允许对象自定义它们的迭代行为。\",\"要成为可迭代对象， 一个对象必须实现 @@iterator 方法。这意味着对象（或者它原型链上的某个对象）必须有一个键为 @@iterator 的属性，可通过常量 Symbol.iterator 访问该属性。\",\"可迭代协议要求 [Symbol.iterator] 是一个无参数函数，返回一个符合迭代器协议的对象。\",\"// 自定义数组迭代器 const iterableObj = { array: [1, 2, 3], // 可计算属性 [Symbol.iterator]: function () { let index = 0 return { // 使用箭头函数，this 指向 iterableObj，否则 this 指向 return 的这个对象 next: () => { if (index < this.array.length) { return { value: this.array[index++], done: false } } else { return { value: undefined, done: true } } }, } }, } const arrayIterator = iterableObj[Symbol.iterator]() console.log(arrayIterator.next()) // { value: 1, done: false } console.log(arrayIterator.next()) // { value: 2, done: false } console.log(arrayIterator.next()) // { value: 3, done: false } console.log(arrayIterator.next()) // { value: undefined, done: true } // 数组原生迭代器 const array = [1, 2, 3] const NativeArrayIterator = array[Symbol.iterator]() console.log(NativeArrayIterator.next()) // { value: 1, done: false } console.log(NativeArrayIterator.next()) // { value: 2, done: false } console.log(NativeArrayIterator.next()) // { value: 3, done: false } console.log(NativeArrayIterator.next()) // { value: undefined, done: true } for (const item of iterableObj) { console.log(item) // 1, 2, 3 } \",\"Array、String、Set、Map、argumetns、NodeList 均是可迭代对象\",\"应用：\",\"for ...of、展开运算符、yield*、解构赋值\",\"new Map([Iterable])、new WeakMap([iterable])、new Set([iterable])、new WeakSet([iterable])\",\"Promise.all(iterable)、Promise.race(iterable)、Array.from(iterable)\"]},\"300\":{\"h\":\"for in 与 for of\",\"t\":[\"for in 遍历的是普通对象的可枚举属性（键名），for of 遍历的是可迭代对象的可迭代元素（值）：\",\"Object.prototype.objCustom = function () {} Array.prototype.arrCustom = function () {} let arr = ['a', 'b'] arr.foo = 'hello' // for in 遍历键名 for (let i in arr) { console.log(i) // 打印：0 1 foo arrCustom objCustom } // for of 遍历键值，不遍历 objCustom、arrCustom 和实例属性 foo for (let i of arr) { console.log(i) // 打印：a b } \"]},\"301\":{\"h\":\"自定义类的迭代\",\"t\":[\"// 定义一个班级类, 创建出来的对象是可迭代对象 class Class { constructor(classNum, students) { this.classNum = classNum this.students = students } addStudent(newStudent) { this.students.push(newStudent) } [Symbol.iterator]() { let index = 0 return { next: () => { if (index < this.students.length) { return { value: this.students[index++], done: false } } else { return { value: undefined, done: true } } }, // 迭代器的中断 return: () => { console.log('迭代器提前终止') return { value: undefined, done: true } }, } } } const class1 = new Class('1班', ['小明', '小红', '小王']) class1.addStudent('小刚') for (const stu of class1) { console.log(stu) if (stu === '小王') break } \"]},\"302\":{\"h\":\"生成器\",\"t\":[\"生成器是特殊的迭代器，可以控制函数的执行与暂停。\",\"一般地，函数终止条件是返回值或发生异常。使用生成器控制函数的执行与暂停。\",\"通过 function* 定义生成器函数，执行生成器函数会返回一个生成器对象，执行生成器对象的 next 方法，会依次执行生成器函数里被 yield 分割的段代码，并返回 {value: undefined, done: false}，结束则 done: true ：\",\"function* foo() { // 第一段代码 console.log('函数开始执行') const value1 = 1 console.log('第一段代码：', value1) yield // 第二段代码 const value2 = 2 console.log('第二段代码：', value2) yield // 第三段代码 console.log('函数执行结束') } // 执行生成器函数会返回一个生成器对象 const generator = foo() // 执行第一段代码 generator.next() // 函数开始执行 第一段代码： 1 // 执行第二段代码 generator.next() // 第二段代码： 2 // 执行第三段代码 generator.next() // 函数执行结束 \"]},\"303\":{\"h\":\"next 方法传递参数\",\"t\":[\"function* foo(initial) { console.log('函数开始执行') const value1 = yield initial + 1 const value2 = yield value1 + 2 const value3 = yield value2 + 3 console.log('函数执行结束') } // 生成器上的next方法可以传递参数 const generator = foo(0) const result1 = generator.next() console.log('result1: ', result1) // result1: {value: 1, done: false} // 上一段代码的返回值的 value 作为这一段代码的 next 函数的参数 const result2 = generator.next(result1.value) console.log('result2: ', result2) // result2: {value: 3, done: false} const result3 = generator.next(result2.value) console.log('result3: ', result3) // result3: {value: 6, done: true} generator.next() \"]},\"304\":{\"h\":\"return 方法提前终止函数\",\"t\":[\"yield：暂停函数的执行\",\"return：终止函数的执行\",\"function* foo(initial) { console.log('函数开始执行') const value1 = yield initial + 1 const value2 = yield value1 + 2 const value3 = yield value2 + 3 console.log('函数执行结束') } const generator = foo(0) console.log(generator.next()) // {value: 1, done: false} // 使用 return 方法，则终止生成器函数的执行 console.log(generator.return('终止')) // {value: '终止', done: true} console.log(generator.next()) // {value: undefined, done: true} console.log(generator.next()) // {value: undefined, done: true} \"]},\"305\":{\"h\":\"throw 方法抛出异常\",\"t\":[\"throw方法被捕获以后，会附带执行一次next方法。\",\"function* foo() { try { yield console.log('第一段') } catch (e) { console.log('捕获错误：', e) } yield console.log('第二段') yield console.log('第三段') } const generator = foo() generator.next() // 第一段 generator.throw('错误') // 捕获错误：错误 第二段 generator.next() // 第三段 \"]},\"306\":{\"h\":\"生成器替代迭代器\",\"t\":[\"在迭代器那节，通过 return 一个带有 next 方法的对象创建迭代器\",\"const array = [1, 2, 3] // 创建数组迭代器的函数 function* createArrayIterator(array) { // 1.第一种写法，function 不加 * // let index = 0 // return { // next: function () { // if (index < arr.length) { // return { value: arr[index++], done: false } // } else { // return { value: undefined, done: true } // } // }, // } // 2.第二种写法 // for (const item of arr) { // yield item // } // 3.最简洁写法，function 需要加 * yield* array } const arrayIterator = createArrayIterator(array) console.log(arrayIterator.next()) // { value: 1, done: false } console.log(arrayIterator.next()) // { value: 2, done: false } console.log(arrayIterator.next()) // { value: 3, done: false } console.log(arrayIterator.next()) // { value: undefined, done: true } console.log(arrayIterator.next()) // { value: undefined, done: true } \",\"迭代指定范围的函数：\",\"// 创建一个迭代指定范围的函数 function* createRangeIterator(start, end) { let index = start while (index < end) { yield index++ } } const rangeIterator = createRangeIterator(1, 10) console.log(rangeIterator.next()) // { value: 1, done: false } console.log(rangeIterator.next()) // { value: 2, done: false } console.log(rangeIterator.next()) // { value: 3, done: false } console.log(rangeIterator.next()) // { value: 4, done: false } console.log(rangeIterator.next()) // { value: 5, done: false } \",\"自定义类的迭代——生成器实现：\",\"// 定义一个班级类, 创建出来的对象是可迭代对象 class Class { constructor(classNum, students) { this.classNum = classNum this.students = students } addStudent(newStudent) { this.students.push(newStudent) } // [Symbol.iterator]() { // let index = 0 // return { // next: () => { // if (index < this.students.length) { // return { value: this.students[index++], done: false } // } else { // return { value: undefined, done: true } // } // }, // return: () => { // console.log('迭代器提前终止') // return { value: undefined, done: true } // }, // } // } *[Symbol.iterator]() { yield* this.students } } const class1 = new Class('1班', ['小明', '小红', '小王']) class1.addStudent('小刚') for (const stu of class1) { console.log(stu) } \"]},\"307\":{\"h\":\"async、await 的由来\",\"t\":[\"async、await 是 Promise 和生成器的语法糖\",\"function requestData(num) {\\n  return new Promise((resolve) => {\\n    setTimeout(() => {\\n      resolve(num * 2)\\n    }, 1000)\\n  })\\n}\\n// 上一个请求接口返回的数据作为下一个请求的参数\\n// 1. 多次回调，依然会出现回调地狱的问题\\nrequestData(1).then((res1) => {\\n  console.log('res1:', res1) // 1秒后输出 res1: 2\\n\\n  requestData(res1).then((res2) => {\\n    console.log('res2:', res2) // 2秒后输出 res2: 4\\n\\n    requestData(res2).then((res3) => {\\n      console.log('res3:', res3) // 3秒后输出 res3: 8\\n    })\\n  })\\n})\\n\\n// 2. Promise 中 then 返回以上一次请求结果为参数的新请求\\nrequestData(1)\\n  .then((res1) => {\\n    console.log('res1:', res1) // 1秒后输出 res1: 2\\n    return requestData(res1)\\n  })\\n  .then((res2) => {\\n    console.log('res2:', res2) // 2秒后输出 res2: 4\\n    return requestData(res2)\\n  })\\n  .then((res3) => {\\n    console.log('res3:', res3) // 3秒后输出 res3: 8\\n  })\\n\\n// 3. Promise + 生成器\\nfunction* getDataByGenerator() {\\n  const res1 = yield requestData(1)\\n  console.log('res1:', res1) // 1秒后输出 res1: 2\\n  const res2 = yield requestData(res1)\\n  console.log('res2:', res2) // 2秒后输出 res2: 4\\n  const res3 = yield requestData(res2)\\n  console.log('res3:', res3) // 3秒后输出 res3: 8\\n}\\n// 3.1 手动执行生成器\\nconst generator = getDataByGenerator()\\ngenerator.next().value.then((res1) => {\\n  generator.next(res1).value.then((res2) => {\\n    generator.next(res2).value.then((res3) => {\\n      generator.next(res3)\\n    })\\n  })\\n})\\n// 3.2 封装一个自动执行的生成器\\nfunction execGenerator(genFn) {\\n  const generator = genFn()\\n  function exec(res) {\\n    const result = generator.next(res)\\n    if (result.done) {\\n      return result.value\\n    }\\n    result.value.then((res) => {\\n      exec(res)\\n    })\\n  }\\n  exec()\\n}\\nexecGenerator(getDataByGenerator)\\n// 3.3 引入第三方包：co（TJ 写的）\\nconst co = require('co')\\nco(getDataByGenerator)\\n\\n// 4. 最优方式：async、await\\nasync function getDataByAsync() {\\n  const res1 = await requestData(1)\\n  console.log('res1:', res1) // 1秒后输出 res1: 2\\n  const res2 = await requestData(res1)\\n  console.log('res2:', res2) // 2秒后输出 res2: 4\\n  const res3 = await requestData(res2)\\n  console.log('res3:', res3) // 3秒后输出 res3: 8\\n}\\n\\ngetDataByAsync()\\n\"]},\"308\":{\"h\":\"实现 Promise\"},\"309\":{\"h\":\"A+ Promise 最终实现\",\"t\":[\"class MyPromise { static PENDING = 'pending' static FULFILLED = 'fulfilled' static REJECTED = 'rejected' constructor(executor) { this.PromiseState = MyPromise.PENDING this.PromiseResult = undefined // 等待状态时保存成功回调和失败回调数组 this.onFulfilledCallbacks = [] this.onRejectedCallbacks = [] // 在 constructor 中使用箭头函数，不会出现 this 指向错误问题 const resolve = (result) => { // 判断是否处于等待状态，是则改变状态（注意 queueMicrotask 包裹 if，否则状态不能锁定） queueMicrotask(() => { if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.FULFILLED this.PromiseResult = result // 遍历成功回调数组，执行回调 this.onFulfilledCallbacks.forEach((callback) => { callback(result) }) } }) } const reject = (reason) => { // 判断是否处于等待状态，是则改变状态（注意 queueMicrotask 包裹 if，否则状态不能锁定） queueMicrotask(() => { if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.REJECTED this.PromiseResult = reason // 遍历失败回调数组，执行回调 this.onRejectedCallbacks.forEach((callback) => { callback(reason) }) } }) } // 抛出异常相当于执行 reject try { // 传入 executor 函数后立即执行（注意这里不用加 this.） executor(resolve, reject) } catch (err) { reject(err) } } // 实现 then 方法 then(onFulfilled, onRejected) { // 参数校验：对于成功回调是函数则执行，不是则接收传入值作为输出值，对于失败回调是函数则执行，不是则抛出传入值作为错误 onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : (val) => val onRejected = typeof onRejected === 'function' ? onRejected : (reason) => { throw reason } // 创建一个新的 Promise 对象，最后返回 let promise2 = new MyPromise((resolve, reject) => { // 成功状态、失败状态分别执行 then 的第一个、第二个回调 if (this.PromiseState === MyPromise.FULFILLED) { queueMicrotask(() => { try { let x = onFulfilled(this.PromiseResult) resolvePromise(promise2, x, resolve, reject) } catch (err) { reject(err) } }) } if (this.PromiseState === MyPromise.REJECTED) { queueMicrotask(() => { try { let x = onRejected(this.PromiseResult) resolvePromise(promise2, x, resolve, reject) } catch (err) { reject(err) } }) } if (this.PromiseState === MyPromise.PENDING) { this.onFulfilledCallbacks.push(() => { try { let x = onFulfilled(this.PromiseResult) resolvePromise(promise2, x, resolve, reject) } catch (err) { reject(err) } }) this.onRejectedCallbacks.push(() => { try { let x = onRejected(this.PromiseResult) resolvePromise(promise2, x, resolve, reject) } catch (err) { reject(err) } }) } }) return promise2 } } /** * 对resolve()、reject() 进行增强 * @param {promise} promise2 promise1.then 方法返回的新的 Promise 对象 * @param {[type]} x promise1 的结果值 * @param {[type]} resolve promise2 的 resolve 方法 * @param {[type]} reject promise2 的 reject 方法 */ function resolvePromise(promise2, x, resolve, reject) { // 情况1：自身引用 if (x === promise2) { reject(new TypeError('循环引用')) } // 情况2：MyPromise 对象 if (x instanceof MyPromise) { x.then( (y) => { resolvePromise(promise2, y, resolve, reject) }, (r) => reject(r) ) } // 情况3：对象或函数（需排除 typeof null === 'object' 干扰） else if (x !== null && (typeof x === 'object' || typeof x === 'function')) { let called = false try { // 如果 then 是函数，则 x 是 thenable 对象 // 如果 then 不是函数，则 x 是非 thenable 对象 或 函数 let then = x.then if (typeof then === 'function') { then.call( x, (y) => { // 方法不能重复调用 if (called) return called = true resolvePromise(promise2, y, resolve, reject) }, (r) => { if (called) return called = true reject(r) } ) } else { resolve(x) // 非 thenable 对象 或 函数，则直接 resolve } } catch (e) { if (called) return called = true reject(e) } } else { resolve(x) // 不是对象或函数，即值类型，则直接 resolve } } \"]},\"310\":{\"h\":\"A+ Promise 实现过程\"},\"311\":{\"h\":\"resolve 与 reject\"},\"312\":{\"h\":\"1. 初步实现\",\"t\":[\"三种状态、this 指向、传入立即执行\",\"class MyPromise { static PENDING = 'pending' static FULFILLED = 'fulfilled' static REJECTED = 'rejected' constructor(executor) { this.PromiseState = MyPromise.PENDING this.PromiseResult = undefined // 在 constructor 中使用箭头函数，不会出现 this 指向错误问题 const resolve = (result) => { this.PromiseState = MyPromise.FULFILLED this.PromiseResult = result } const reject = (reason) => { this.PromiseState = MyPromise.REJECTED this.PromiseResult = reason } // 传入 executor 函数后立即执行（注意这里不用加 this.） executor(resolve, reject) } } // 测试代码 const p1 = new MyPromise((resolve, reject) => { resolve('成功') }) console.log(p1) // MyPromise {PromiseState: 'fulfilled', PromiseResult: '成功'} const p2 = new MyPromise((resolve, reject) => { reject('失败') }) console.log(p2) // MyPromise {PromiseState: 'rejected', PromiseResult: '失败'} \"]},\"313\":{\"h\":\"2. 状态不可变\",\"t\":[\"Promise 状态只以首先 resolve 或 reject 的为准，后续状态不可变\",\"class MyPromise { static PENDING = 'pending' static FULFILLED = 'fulfilled' static REJECTED = 'rejected' constructor(executor) { this.PromiseState = MyPromise.PENDING this.PromiseResult = undefined // 在 constructor 中使用箭头函数，不会出现 this 指向错误问题 const resolve = (result) => { // 判断是否处于等待状态，是则改变状态 if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.FULFILLED this.PromiseResult = result } } const reject = (reason) => { // 判断是否处于等待状态，是则改变状态 if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.REJECTED this.PromiseResult = reason } } // 传入 executor 函数后立即执行（注意这里不用加 this.） executor(resolve, reject) } } // 测试代码 const p = new MyPromise((resolve, reject) => { resolve('成功') // 后续状态不可变 reject('失败') }) console.log(p) // MyPromise {PromiseState: 'fulfilled', PromiseResult: '成功'} \"]},\"314\":{\"h\":\"3. 抛出异常\",\"t\":[\"Promise 中抛出异常相当于执行 reject\",\"class MyPromise { static PENDING = 'pending' static FULFILLED = 'fulfilled' static REJECTED = 'rejected' constructor(executor) { this.PromiseState = MyPromise.PENDING this.PromiseResult = undefined // 在 constructor 中使用箭头函数，不会出现 this 指向错误问题 const resolve = (result) => { // 判断是否处于等待状态，是则改变状态 if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.FULFILLED this.PromiseResult = result } } const reject = (reason) => { // 判断是否处于等待状态，是则改变状态 if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.REJECTED this.PromiseResult = reason } } // 抛出异常相当于执行 reject try { // 传入 executor 函数后立即执行（注意这里不用加 this.） executor(resolve, reject) } catch (err) { reject(err) } } } // 测试代码 const p = new MyPromise((resolve, reject) => { throw new Error('失败') }) console.log(p) // MyPromise {PromiseState: 'rejected', PromiseResult: Error: 失败} \"]},\"315\":{\"h\":\"then 方法\"},\"316\":{\"h\":\"1. 初步实现\",\"t\":[\"then 接收两个回调函数作为参数，一个是成功回调，另一个是失败回调。当Promise状态为fulfilled 执行成功回调，为rejected 执行失败回调\",\"class MyPromise { static PENDING = 'pending' static FULFILLED = 'fulfilled' static REJECTED = 'rejected' constructor(executor) { this.PromiseState = MyPromise.PENDING this.PromiseResult = undefined // 在 constructor 中使用箭头函数，不会出现 this 指向错误问题 const resolve = (result) => { // 判断是否处于等待状态，是则改变状态 if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.FULFILLED this.PromiseResult = result } } const reject = (reason) => { // 判断是否处于等待状态，是则改变状态 if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.REJECTED this.PromiseResult = reason } } // 抛出异常相当于执行 reject try { // 传入 executor 函数后立即执行（注意这里不用加 this.） executor(resolve, reject) } catch (err) { reject(err) } } // 实现 then 方法 then(onFulfilled, onRejected) { // 参数校验：对于成功回调是函数则执行，不是则接收传入值作为输出值，对于失败回调是函数则执行，不是则抛出传入值作为错误 onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : (val) => val onRejected = typeof onRejected === 'function' ? onRejected : (reason) => { throw reason } // 成功状态、失败状态分别执行 then 的第一个、第二个回调 if (this.PromiseState === MyPromise.FULFILLED) { onFulfilled(this.PromiseResult) } if (this.PromiseState === MyPromise.REJECTED) { onRejected(this.PromiseResult) } } } // 测试代码 new MyPromise((resolve, reject) => { resolve('成功') }).then( (res) => console.log(res), (err) => console.log(err) ) // 成功 \"]},\"317\":{\"h\":\"2. then 是异步（微任务）\",\"t\":[\"异步任务分为微任务与宏任务\",\"// 原生 Promise 的 then 方法是异步执行的 console.log(1) new Promise((resolve, reject) => { console.log(2) resolve('成功') }).then( (res) => { console.log(res) }, (err) => { console.log(err) } ) console.log(3) // 1 2 3 成功 // 但是目前的 MyPromise 的 then 方法是同步执行的 console.log(1) new MyPromise((resolve, reject) => { console.log(2) resolve('成功') reject('失败') }).then( (res) => { console.log(res) }, (err) => { console.log(err) } ) console.log(3) // 1 2 成功 3 \",\"使用 queueMicrotask 包裹成功回调和失败回调\",\"class MyPromise { // ... // 实现 then 方法 then(onFulfilled, onRejected) { // 参数校验：对于成功回调是函数则执行，不是则接收传入值作为输出值，对于失败回调是函数则执行，不是则抛出传入值作为错误 onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : (val) => val onRejected = typeof onRejected === 'function' ? onRejected : (reason) => { throw reason } // 成功状态、失败状态分别执行 then 的第一个、第二个回调 if (this.PromiseState === MyPromise.FULFILLED) { queueMicrotask(() => { onFulfilled(this.PromiseResult) }) } if (this.PromiseState === MyPromise.REJECTED) { queueMicrotask(() => { onRejected(this.PromiseResult) }) } } } \"]},\"318\":{\"h\":\"3. 定时器\",\"t\":[\"因为 JS 执行机制是先微后宏，then 先于 setTimeout，在定时器到时之前状态仍为等待状态，所以遇到等待状态时，将成功和失败回调保存到数组里，等定时器到时之后再遍历执行数组里的函数。\",\"另外 resolve、reject 也是微任务，如果定时器内有 resolve、reject 和 同步代码，同步代码先执行：\",\"// 原生 Promise：定时器内有 resolve、reject 和 同步代码 console.log(1) new Promise((resolve, reject) => { console.log(2) setTimeout(() => { resolve('成功') console.log('4') }, 1000) }).then( (res) => { console.log(res) }, (err) => { console.log(err) } ) console.log(3) // 1 2 3 // 1秒后打印： 4 成功 \",\"使用 queueMicrotask 包裹 resolve、reject，并在等待状态时保存回调\",\"class MyPromise { static PENDING = 'pending' static FULFILLED = 'fulfilled' static REJECTED = 'rejected' constructor(executor) { this.PromiseState = MyPromise.PENDING this.PromiseResult = undefined // 等待状态时保存成功回调和失败回调数组 this.onFulfilledCallbacks = [] this.onRejectedCallbacks = [] // 在 constructor 中使用箭头函数，不会出现 this 指向错误问题 const resolve = (result) => { // 判断是否处于等待状态，是则改变状态（注意 queueMicrotask 包裹 if，否则状态不能锁定） queueMicrotask(() => { if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.FULFILLED this.PromiseResult = result // 遍历成功回调数组，执行回调 this.onFulfilledCallbacks.forEach((callback) => { callback(result) }) } }) } const reject = (reason) => { // 判断是否处于等待状态，是则改变状态（注意 queueMicrotask 包裹 if，否则状态不能锁定） queueMicrotask(() => { if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.REJECTED this.PromiseResult = reason // 遍历失败回调数组，执行回调 this.onRejectedCallbacks.forEach((callback) => { callback(reason) }) } }) } // 抛出异常相当于执行 reject try { // 传入 executor 函数后立即执行（注意这里不用加 this.） executor(resolve, reject) } catch (err) { reject(err) } } // 实现 then 方法 then(onFulfilled, onRejected) { // 参数校验：对于成功回调是函数则执行，不是则接收传入值作为输出值，对于失败回调是函数则执行，不是则抛出传入值作为错误 onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : (val) => val onRejected = typeof onRejected === 'function' ? onRejected : (reason) => { throw reason } // 成功状态、失败状态分别执行 then 的第一个、第二个回调 if (this.PromiseState === MyPromise.FULFILLED) { queueMicrotask(() => { onFulfilled(this.PromiseResult) }) } if (this.PromiseState === MyPromise.REJECTED) { queueMicrotask(() => { onRejected(this.PromiseResult) }) } if (this.PromiseState === MyPromise.PENDING) { this.onFulfilledCallbacks.push(onFulfilled) this.onRejectedCallbacks.push(onRejected) } } } // 测试代码 console.log(1) new MyPromise((resolve, reject) => { console.log(2) setTimeout(() => { resolve('成功') reject('失败') console.log('4') }, 1000) }).then( (res) => { console.log(res) }, (err) => { console.log(err) } ) console.log(3) // 1 2 3 // 1秒后打印： 4 成功 \"]},\"319\":{\"h\":\"4. 链式调用\",\"t\":[\"then 返回新的 Promise 对象。通过函数 resolvePromise 增强 resolve、reject\",\"A+ Promise 完整代码如下：\",\"class MyPromise { static PENDING = 'pending' static FULFILLED = 'fulfilled' static REJECTED = 'rejected' constructor(executor) { this.PromiseState = MyPromise.PENDING this.PromiseResult = undefined // 等待状态时保存成功回调和失败回调数组 this.onFulfilledCallbacks = [] this.onRejectedCallbacks = [] // 在 constructor 中使用箭头函数，不会出现 this 指向错误问题 const resolve = (result) => { // 判断是否处于等待状态，是则改变状态（注意 queueMicrotask 包裹 if，否则状态不能锁定） queueMicrotask(() => { if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.FULFILLED this.PromiseResult = result // 遍历成功回调数组，执行回调 this.onFulfilledCallbacks.forEach((callback) => { callback(result) }) } }) } const reject = (reason) => { // 判断是否处于等待状态，是则改变状态（注意 queueMicrotask 包裹 if，否则状态不能锁定） queueMicrotask(() => { if (this.PromiseState === MyPromise.PENDING) { this.PromiseState = MyPromise.REJECTED this.PromiseResult = reason // 遍历失败回调数组，执行回调 this.onRejectedCallbacks.forEach((callback) => { callback(reason) }) } }) } // 抛出异常相当于执行 reject try { // 传入 executor 函数后立即执行（注意这里不用加 this.） executor(resolve, reject) } catch (err) { reject(err) } } // 实现 then 方法 then(onFulfilled, onRejected) { // 参数校验：对于成功回调是函数则执行，不是则接收传入值作为输出值，对于失败回调是函数则执行，不是则抛出传入值作为错误 onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : (val) => val onRejected = typeof onRejected === 'function' ? onRejected : (reason) => { throw reason } // 创建一个新的 Promise 对象，最后返回 let promise2 = new MyPromise((resolve, reject) => { // 成功状态、失败状态分别执行 then 的第一个、第二个回调 if (this.PromiseState === MyPromise.FULFILLED) { queueMicrotask(() => { try { let x = onFulfilled(this.PromiseResult) resolvePromise(promise2, x, resolve, reject) } catch (err) { reject(err) } }) } if (this.PromiseState === MyPromise.REJECTED) { queueMicrotask(() => { try { let x = onRejected(this.PromiseResult) resolvePromise(promise2, x, resolve, reject) } catch (err) { reject(err) } }) } if (this.PromiseState === MyPromise.PENDING) { this.onFulfilledCallbacks.push(() => { try { let x = onFulfilled(this.PromiseResult) resolvePromise(promise2, x, resolve, reject) } catch (err) { reject(err) } }) this.onRejectedCallbacks.push(() => { try { let x = onRejected(this.PromiseResult) resolvePromise(promise2, x, resolve, reject) } catch (err) { reject(err) } }) } }) return promise2 } } /** * 对resolve()、reject() 进行增强 * @param {promise} promise2 promise1.then 方法返回的新的 Promise 对象 * @param {[type]} x promise1 的结果值 * @param {[type]} resolve promise2 的 resolve 方法 * @param {[type]} reject promise2 的 reject 方法 */ function resolvePromise(promise2, x, resolve, reject) { // 情况1：自身引用 if (x === promise2) { reject(new TypeError('循环引用')) } // 情况2：MyPromise 对象 if (x instanceof MyPromise) { x.then( (y) => { resolvePromise(promise2, y, resolve, reject) }, (r) => reject(r) ) } // 情况3：对象或函数（需排除 typeof null === 'object' 干扰） else if (x !== null && (typeof x === 'object' || typeof x === 'function')) { let called = false try { // 如果 then 是函数，则 x 是 thenable 对象 // 如果 then 不是函数，则 x 是非 thenable 对象 或 函数 let then = x.then if (typeof then === 'function') { then.call( x, (y) => { // 方法不能重复调用 if (called) return called = true resolvePromise(promise2, y, resolve, reject) }, (r) => { if (called) return called = true reject(r) } ) } else { resolve(x) // 非 thenable 对象 或 函数，则直接 resolve } } catch (e) { if (called) return called = true reject(e) } } else { resolve(x) // 不是对象或函数，即值类型，则直接 resolve } } \"]},\"320\":{\"h\":\"Promise A+ 测试\",\"t\":[\"安装 Promises A+ 官方测试工具 promises-aplus-tests：\",\"npm install promises-aplus-tests -D \",\"在 MyPromise.js 下实现 deferred 方法，并导出\",\"MyPromise.deferred = function () { let result = {} result.promise = new MyPromise((resolve, reject) => { result.resolve = resolve result.reject = reject }) return result } module.exports = MyPromise \",\"在 package.json 文件中 devDependencies 下添加 scripts ：\",\"{ \\\"devDependencies\\\": { \\\"promises-aplus-tests\\\": \\\"^2.1.2\\\" }, \\\"scripts\\\": { \\\"test\\\": \\\"promises-aplus-tests MyPromise\\\" } } \",\"最后运行 npm run test 所有872 测试用例均通过\"]},\"321\":{\"h\":\"Promise.prototype.catch\",\"t\":[\"Promise.prototype.catch()是 .then(undefined, rejection)的别名用于指定发生错误时的回调函数。catch 返回新的 Promise 对象\",\"class MyPromise { // ... // 实现 then 方法 then(onFulfilled, onRejected) { // ... } // 实现 catch 方法 catch(onRejected) { return this.then(undefined, onRejected) } } \",\"测试效果：\",\"new MyPromise(function (resolve, reject) { resolve('成功') }) .then((res) => { console.log(res) throw 'then 抛出异常' }) .catch((err) => { console.log(err) }) .then( () => { console.log('执行成功回调') }, () => { console.log('不会执行失败回调') } ) // 成功 // then 抛出异常 // 执行成功回调 \"]},\"322\":{\"h\":\"Promise.prototype.finally\",\"t\":[\"finally 方法不是表示最终都会执行，而是任何时候任何状态都会执行。\",\"网上常见的 finally 是下面这样的，但是错误的\",\"finally(callback) { return this.then(callback, callback) } \",\"如果 finally 接收的是 Promise 对象，会等待这个 Promise 执行完毕。如果返回的是成功的 Promise，会采用上一次的结果；如果返回的是失败的 Promise，会被 catch 捕获。\",\"// 原生 Promise new Promise(function (resolve, reject) { resolve('成功') }) .finally(() => { return new Promise((resolve, reject) => { setTimeout(() => { resolve('新的 Promise 成功') // 成功，则使用上一次的结果 // reject('新的 Promise 失败') // 失败，则会被 catch 捕获 }, 1000) }) }) .then((res) => { console.log(res) }) .catch((err) => { console.log(err) }) .finally(() => console.log('结束')) // 成功 // 结束 \",\"实现：\",\"class MyPromise { // ... // 实现 finally 方法 finally(callback) { return this.then( (value) => { return Promise.resolve(callback()).then(() => value) }, (reason) => { return Promise.resolve(callback()).then(() => { throw reason }) } ) } } \"]},\"323\":{\"h\":\"Promise.resolve\",\"t\":[\"class MyPromise { // ... // 实现 resolve 类方法 static resolve(value) { // MyPromise 对象 if (value instanceof MyPromise) { return value } // thenable 对象 if (value instanceof Object && 'then' in value) { return new MyPromise((resolve, reject) => { value.then(resolve, reject) }) } // 普通值或普通对象 return new MyPromise((resolve) => { resolve(value) }) } } \",\"测试效果：\",\"let thenable = { then: function (resolve) { console.log('then 中同步代码') resolve('then 成功') }, } MyPromise.resolve(thenable).then( (res) => console.log(res), (err) => console.log(err) ) // then 中同步代码 // then 成功 \"]},\"324\":{\"h\":\"Promise.reject\",\"t\":[\"class MyPromise { // ... // 实现 reject 类方法 static reject(reason) { return new MyPromise((resolve, reject) => { reject(reason) }) } } \",\"测试效果：\",\"MyPromise.reject(new Error('报错')).catch((err) => { console.log(err) }) // Error: 报错 \"]},\"325\":{\"h\":\"Promise.all\",\"t\":[\"将多个 Promise 对象包裹在一起形成一个新的 Promise 对象，其状态由包裹的所有 Promise 对象共同决定，等待所有 Promise 对象都完成则为成功状态、或等待任意一个失败则为失败状态\",\"class MyPromise { // ... // 实现 all 类方法 static all(promises) { return new MyPromise((resolve, reject) => { if (Array.isArray(promises)) { let results = [] let count = 0 // 如果传入的是空数组，则返回成功状态的 Promise if (promises.length === 0) { return resolve(promises) } promises.forEach((item, index) => { MyPromise.resolve(item).then((result) => { // 如果不使用 count，会出现数组提前输出，异步元素为空白的情况 count++ results[index] = result if (count === promises.length) { resolve(results) } }, reject) }) } else { return reject(new TypeError('Argument is not iterable')) } }) } } \",\"测试效果：\",\"const p1 = MyPromise.resolve(1) const p2 = new MyPromise((resolve, reject) => { setTimeout(() => { // reject('任意一个失败，都会被catch捕获，拿不到所有结果') resolve(2) }, 1000) }) const p3 = 3 MyPromise.all([p1, p2, p3]) .then((res) => { console.log(res) }) .catch((err) => { console.log(err) }) // [1, 2, 3] MyPromise.all(1) // TypeError: argument is not iterable const p4 = MyPromise.all([]) console.log(p4) \",\"如果不使用计数器，会出现异步元素为空白的情况：\",\"static all(promises) { return new HYPromise((resolve, reject) => { const values = [] promises.forEach(promise => { promise.then(result => { values.push(result) if (values.length === promises.length) { resolve(values) } }, err => { reject(err) }) }) }) } \"]},\"326\":{\"h\":\"Promise.allSettled\",\"t\":[\"allSettled 包裹多个 Promise 对象，等待所有 Promise 完成（无论是成功状态，还是失败状态），新的 Promise 对象才会有最终的状态，且这个最终状态始终为成功状态。\",\"class MyPromise { // ... // 实现 allSettled 类方法 static allSettled(promises) { return new MyPromise((resolve, reject) => { // 参数校验 if (Array.isArray(promises)) { let results = [] let count = 0 // 如果传入的是空数组，则返回成功状态的 Promise if (promises.length === 0) return resolve(promises) promises.forEach((item, index) => { MyPromise.resolve(item).then( (value) => { count++ results[index] = { status: 'fulfilled', value, } count === promises.length && resolve(results) }, (reason) => { count++ results[index] = { status: 'rejected', reason, } count === promises.length && resolve(results) } ) }) } else { return reject(new TypeError('Argument is not iterable')) } }) } } \",\"测试效果：\",\"const p1 = new MyPromise((resolve, reject) => { setTimeout(() => { resolve('p1 resolve') }, 100) }) const p2 = new MyPromise((resolve, reject) => { setTimeout(() => { reject('p2 reject') }, 200) }) const p3 = new MyPromise((resolve, reject) => { setTimeout(() => { resolve('p3 resolve') }, 300) }) MyPromise.allSettled([p1, p2, p3]) .then((res) => { console.log('res:', res) }) /** res: [ { status: 'fulfilled', value: 'p1 resolve' }, { status: 'rejected', reason: 'p2 reject' }, { status: 'fulfilled', value: 'p3 resolve' }, ] */ \"]},\"327\":{\"h\":\"Promise.race\",\"t\":[\"class MyPromise { // ... // 实现 race 类方法 static race(promises) { return new MyPromise((resolve, reject) => { // 参数校验 if (Array.isArray(promises)) { // 如果传入的是空数组，则返回的 Promise 将永远处于等待状态 // 如果传入的不为空数组，则返回首先有结果的 Promise if (promises.length > 0) { promises.forEach((item) => { MyPromise.resolve(item).then(resolve, reject) }) } } else { return reject(new TypeError('Argument is not iterable')) } }) } } \",\"测试效果：\",\"const p1 = new MyPromise((resolve, reject) => { setTimeout(() => { resolve('p1 resolve') }, 300) }) // p2 先有结果 const p2 = new MyPromise((resolve, reject) => { setTimeout(() => { reject('p2 reject') }, 100) }) MyPromise.race([p1, p2]) .then((res) => { console.log('res:', res) }) .catch((err) => { console.log('err:', err) // err: p2 reject }) MyPromise.race([]) \"]},\"328\":{\"h\":\"Promise.any\",\"t\":[\"等待第一个成功状态的 Promise，保存失败状态 Promise 到 errors 数组\",\"class MyPromise { // ... // 实现 any 类方法 static any(promises) { return new MyPromise((resolve, reject) => { // 参数校验 if (Array.isArray(promises)) { let errors = [] let count = 0 // 如果传入的是空数组，则返回一个失败状态的 Promise if (promises.length === 0) return reject(new AggregateError([], 'All promises were rejected')) promises.forEach((item) => { MyPromise.resolve(item).then( (value) => { // 只要任意一个 Promise 成功，就返回 resolve(value) }, (reason) => { count++ errors.push(reason) count === promises.length && reject(new AggregateError(errors, 'All promises were rejected')) } ) }) } else { return reject(new TypeError('Argument is not iterable')) } }) } } \",\"测试效果：\",\"const p1 = new MyPromise((resolve, reject) => { setTimeout(() => { resolve('p1 resolve') }, 2000) }) // p2 先有结果，但是失败结果 const p2 = new MyPromise((resolve, reject) => { setTimeout(() => { reject('p2 reject') }, 1000) }) const p3 = new MyPromise((resolve, reject) => { setTimeout(() => { reject('p3 reject') }, 3000) }) MyPromise.any([p1, p2]).then((res) => { console.log('res:', res) // res: p1 resolve }) MyPromise.any([p2, p3]).catch((err) => { console.log('err:', err) // err: AggregateError: All promises were rejected console.log('err:', err.errors) // err: ['p2 reject', 'p3 reject'] }) \",\"完整代码存放于 Github仓库\"]},\"329\":{\"h\":\"参考资料\",\"t\":[\"看了就会，手写Promise原理，最通俗易懂的版本！！！\",\"手把手一行一行代码教你“手写Promise“，完美通过 Promises/A+ 官方872个测试用例\",\"面试官：“你能手写一个 Promise 吗”\",\"手写Promise核心代码 - JavaScript前端Web工程师\",\"手写一个Promise/A+,完美通过官方872个测试用例\",\"看了就会，手写 Promise 全部 API 教程，包括处于 TC39 第四阶段草案的 Promise.any()\"]},\"330\":{\"h\":\"Promise\"},\"331\":{\"h\":\"异步编程\",\"t\":[\"因为 JS 是单线程语言，同步会阻塞代码执行，网页加载需要等待，异步不会阻塞代码执行\",\"JS 采用单线程的事件循环方式管理异步任务，优点是简化编程模型，缺点是无法发挥 CPU 的全部性能（但前端目前不需要太高性能）\",\"同步：一定要等任务执行完了，得到结果，才执行下一个任务。会有阻塞\",\"异步：不等任务执行完，直接执行下一个任务。任务完成后，再通知程序员任务的结果。\",\"如果几个任务互相独立，其中一个执行时间较长，那么一般就用异步地方式做这件事。\",\"JS 异步编程进化史：callback → promise → generator → async + await。async/await可以说是异步终极解决方案了。\",\"JS 异步编程的六种方式：\",\"回调函数\",\"事件监听\",\"发布订阅者模式\",\"Promise\",\"Generator 生成器（ES6 语法）\",\"async/await\"]},\"332\":{\"h\":\"什么是回调\",\"t\":[\"函数作为参数传给另一个函数，在未来特定的时间调用。这个作为参数的函数就是回调函数。\",\"「回调」经常用于获取「异步任务」的结果。\",\"function getA(fn) { setTimeout(() => { fn('A') }, 500) } getA((data) => { console.log(data) }) \",\"Promise 的由来：\",\"// 1.同步代码无法取得异步结果 function requestData1(url) { // 模拟网络请求 setTimeout(() => { // 传入的是正确的 URL，则请求成功 if (url === 'rightURL') { // 成功 let result = '成功结果' // 这样拿不到异步结果 // 为了拿到异步结果，早期是使用回调函数的方式 // 后来为了规范，使用Promise return result } else { let errMessage = 'url 错误' return errMessage } }, 1000) } requestData1('rightURL') // 没有结果 // 2.同步代码只能取得同步结果 function requestData2(url) { if (url === 'rightURL') { let result = '同步成功结果' return result } else { let errMessage = 'url 错误' return errMessage } } requestData2('rightURL') //'同步成功结果' // 3.回调函数能传回异步结果，但不够统一规范 function requestData3(url, successCallback, failureCallback) { // 模拟网络请求 setTimeout(() => { if (url === 'rightURL') { let result = '回调函数成功结果' successCallback(result) } else { let errMessage = 'url 错误' failureCallback(errMessage) } }, 1000) } requestData3( 'rightURL', (res) => { console.log(res) }, (err) => { console.log(err) } ) // '回调函数成功结果' // 4.使用 Promise 规范异步请求，传回异步结果 function requestData4(url) { return new Promise((resolve, reject) => { // 模拟网络请求 console.log('开始网络请求') setTimeout(() => { if (url === 'rightURL') { let result = 'Promise 成功结果' resolve(result) } else { let errMessage = 'url 错误' reject(errMessage) } }, 1000) }) } requestData4('rightURL').then( // 打印：开始网络请求 (res) => { console.log(res) // 'Promise 成功结果' }, (err) => { console.log(err) } ) \"]},\"333\":{\"h\":\"什么是回调地狱\",\"t\":[\"Promise 解决了回调地狱的问题\",\"上一个函数的输出是下一个函数的输入，像是接力一样，就会嵌套，形成回调地狱。\",\"function getA(fn) { setTimeout(() => { fn('A') }, 500) } function getB(fn) { setTimeout(() => { fn('B') }, 1000) } function getC(fn) { setTimeout(() => { fn('C') }, 1500) } getB((data) => { console.log(data) getA((data) => { console.log(data) getC((data) => { console.log(data) }) }) }) // B A C \",\"表现：一个函数作为参数需要依赖另一个函数执行调用，这另一个函数又依赖另一个函数，层层嵌套。\"]},\"334\":{\"h\":\"概述\",\"t\":[\"Promise 通过 .then、catch 链式调用解决回调地狱（即回调函数嵌套过多）的问题，但本质还是基于回调函数\",\"async、await 通过同步语法的方式解决回调函数不直观的问题\",\"Promise 有三种状态：等待态（pending）、成功态（fulfilled）、失败态（rejected）\",\"只有两种转变：等待 → 成功、等待 → 失败。转变不可逆\",\"语法：\",\"通过 new 创建 Promise 对象时，需要传入一个回调函数称为 executor\",\"executor 会被立即执行，并且可以传入另外两个回调函数 resolve、reject\",\"当调用 resolve 回调函数时，状态由 pending → fulfilled，会执行 Promise 对象的 then 方法传入的回调函数\",\"当调用 reject 回调函数时，状态由 pending → rejected，会执行 Promise 对象的 catch 方法传入的回调函数\",\"状态：\",\"等待状态：不会触发 then、catch\",\"成功状态：会触发后续 then 的回调函数\",\"失败状态：会触发后续 catch 的回调函数\",\"then 正常返回 fulfilled，里面有报错则返回 rejected\",\"catch 正常返回 fulfilled，里面有报错则返回 rejected\",\"总之：无论 then 还是 catch，触发后只要无报错就 fulfilled，只要有报错 throw new Error 就 rejected（没报错就算成功！）\"]},\"335\":{\"h\":\"Promise 对象方法\",\"t\":[\"查看 Promise 对象方法\",\"console.log(Object.getOwnPropertyDescriptors(Promise.prototype)) \",\"ES5：实例对象共有的方法放到原型上\",\"ES6：\",\"类中定义的方法，都会被实例继承\",\"类特有的方法，使用 static 定义为静态方法，不被实例继承，只能通过类来调用\"]},\"336\":{\"h\":\"then\",\"t\":[\"then 接收两个回调函数作为参数，一个是成功回调，另一个是失败回调。当Promise状态为fulfilled 执行成功回调，为rejected 执行失败回调\",\"多次调用：\",\"同一个 Promise 对象可以多次调用 then 方法\",\"const p = new Promise((resolve, reject) => { resolve('p resolve') }) p.then((res) => { console.log('res1:', res) // res1: p resolve }) p.then((res) => { console.log('res2:', res) // res2: p resolve }) p.then((res) => { console.log('res3:', res) // res3: p resolve }) console.log(p) // Promise {<fulfilled>: 'p resolve'} \",\"返回值：\",\"then 方法传入的回调函数本身有返回值，返回一个为成功状态的 Promise 对象\",\"1.如果返回的是一个值或普通对象，那么这个值会被新的 Promise 对象的 resolve() 包裹。\",\"const p = new Promise((resolve, reject) => { resolve('p resolve') }) p .then((res) => { console.log('res1:', res) // res1: p resolve return 'then1 resolve' // 等价于 return new Promise(resolve => { resolve(\\\"then1 resolve\\\") }) }) .then((res) => { console.log('res2:', res) // res2: then1 resolve // 没有返回值等价于 return new Promise(resolve => { resolve(undefined) }) }) .then((res) => { console.log('res3:', res) // res3: undefined }) \",\"2.如果返回新的 Promise 对象\",\"const p = new Promise((resolve, reject) => { resolve('p resolve') }) p.then((res) => { return new Promise((resolve, reject) => { setTimeout(() => { resolve('newPromise resolve') }, 1000) }) }).then((res) => { console.log('res:', res) // 1秒后打印 res: newPromise resolve }) \",\"3.如果返回含有 then 方法的对象\",\"const p = new Promise((resolve, reject) => { resolve('p resolve') }) p.then((res) => { return { then: function (resolve, reject) { resolve('thenable resolve') }, } }).then((res) => { console.log('res:', res) // res: thenable resolve }) \"]},\"337\":{\"h\":\"catch\",\"t\":[\"then 方法的第二个参数即第二个回调函数可以捕获异常和拒绝状态，但语法不太明晰。可以使用 ES6 提供的 catch 替代，捕获异常和拒绝状态。\",\"catch 优先捕获顶层 Promise 对象的拒绝或异常，顶层 Promise 对象为成功状态才捕获 then 中的拒绝或异常\",\"const p1 = new Promise((resolve, reject) => { // catch 优先捕获顶层 Promise 对象拒绝或抛出异常 reject('p reject') }) p1.then((res) => { throw new Error('p1 then error') }).catch((err) => { console.log('err:', err) // err: p1 reject }) const p2 = new Promise((resolve, reject) => { // 顶层 Promise 对象为成功状态才捕获 then 中的拒绝或异常 resolve('p2 resolve') }) p2.then((res) => { throw new Error('p2 then error') }).catch((err) => { console.log('err:', err) // err: p2 then error }) \",\"多次调用：\",\"const p = new Promise((resolve, reject) => { reject('rejected status') // reject 后边代码会执行 console.log('reject 后边代码会执行') throw new Error('throw error') // throw 相当于 return，后边代码不执行 console.log('throw 后边代码不执行') }) p.catch((err) => { console.log('err1:', err) // err1: rejected status }) p.catch((err) => { console.log('err2:', err) // err2: rejected status }) \",\"返回值：\",\"与 then 方法一样，返回一个为成功状态的 Promise 对象\",\"const p = new Promise((resolve, reject) => { reject('p reject') }) p.then((res) => { console.log('res:', res) }) // 进入 catch .catch((err) => { console.log('err:', err) // err: p reject return 'catch return value' }) // 进入 then .then((res) => { console.log('res:', res) // res: catch return value }) .catch((err) => { console.log('err:', err) }) \"]},\"338\":{\"h\":\"finally\",\"t\":[\"finally 方法是 ES9 新增的特性：表示无论 Promise 对象的状态，都会被执行的代码。\",\"finally 方法不接受参数，返回新的 Promise 对象\",\"const p = new Promise((resolve, reject) => { // resolve('p resolve') reject('p reject') }) p.then((res) => { console.log('res:', res) }) .catch((err) => { console.log('err:', err) }) .finally(() => { console.log('finally 代码执行') }) // err: p reject // finally 代码执行 \"]},\"339\":{\"h\":\"Promise 类方法\"},\"340\":{\"h\":\"resolve\",\"t\":[\"const p1 = Promise.resolve('p1 resolve') // 相当于 const p2 = new Promise((resolve, reject) => { resolve('p2 resolve') }) \"]},\"341\":{\"h\":\"resolve 的三种参数\",\"t\":[\"1.传入值或普通对象\",\"由 pending 变为 fulfilled\",\"new Promise((resolve, reject) => { resolve('值或普通对象') }) .then((res) => { console.log('res:', res) // res: 值或普通对象 }) \",\"2.传入 Promise 对象\",\"当前 Promise 对象的状态由传入 resolve 的 Promise 对象的状态决定，相当于状态的交接。\",\"const p1 = new Promise((resolve, reject) => { reject('p1 reject') }) new Promise((resolve, reject) => { resolve(p1) }) .then((res) => { console.log('res:', res) }) .catch((err) => { console.log('err:', err) // err: p1 reject }) \",\"3.传入含有 then 方法的（thenable）对象\",\"会执行该对象的 then 方法，并由该 then 方法决定状态。（含有某个 x 方法的对象，称为 xable）\",\"new Promise((resolve, reject) => { const obj = { then: function (resolve, reject) { console.log('obj then called') reject('obj reject') }, } resolve(obj) }) .then((res) => { console.log('res:', res) }) .catch((err) => { console.log('err:', err) // err: obj reject }) \"]},\"342\":{\"h\":\"reject\",\"t\":[\"const p1 = Promise.reject('p1 reject') // 相当于 const p2 = new Promise((resolve, reject) => { reject('p2 reject') }) \"]},\"343\":{\"h\":\"reject 参数不受影响\",\"t\":[\"// 无论传入 reject 的值，都会被 catch 捕获。不会出现状态的交接，不受 thenable 对象的影响 const p = Promise.reject( new Promise((resolve, reject) => { resolve('newPromise resolve') }) ) p.then((res) => { console.log('res:', res) }).catch((err) => { console.log('err:', err) // err: Promise {<fulfilled>: 'newPromise resolve'} }) \"]},\"344\":{\"h\":\"all\",\"t\":[\"将多个 Promise 对象包裹在一起形成一个新的 Promise 对象，其状态由包裹的所有 Promise 对象共同决定，等待所有 Promise 对象都完成则为成功状态、或等待任意一个失败则为失败状态\",\"// 创建多个Promise const p1 = new Promise((resolve, reject) => { setTimeout(() => { resolve('p1 resolve') }, 100) }) const p2 = new Promise((resolve, reject) => { setTimeout(() => { resolve('p2 resolve') // reject('p2 reject') }, 200) }) const p3 = new Promise((resolve, reject) => { setTimeout(() => { resolve('p3 resolve') }, 300) }) // 注意顺序 Promise.all([p2, p1, p3]) .then((res) => { console.log(res) // ['p2 resolve', 'p1 resolve', 'p3 resolve'] }) .catch((err) => { // 如果任意一个 reject，则会被 catch 捕获 // 如上 p2 reject，则会打印 err: p2 reject console.log('err:', err) }) \"]},\"345\":{\"h\":\"allSettled\",\"t\":[\"all 的缺点：当其中一个 Promise 对象为失败状态时，则新 Promise 对象为失败状态。这样无法获得成功状态、等待状态的 Promise 对象的结果。\",\"ES11 新增 allSettled，会在所有的 Promise 对象都有结果（settled）时，无论是成功状态，还是失败状态，新的 Promise 对象才会有最终的状态，且这个最终状态始终为成功状态。\",\"// 创建多个Promise const p1 = new Promise((resolve, reject) => { setTimeout(() => { resolve('p1 resolve') }, 100) }) const p2 = new Promise((resolve, reject) => { setTimeout(() => { reject('p2 reject') }, 200) }) const p3 = new Promise((resolve, reject) => { setTimeout(() => { resolve('p3 resolve') }, 300) }) Promise.allSettled([p2, p1, p3]) .then((res) => { console.log('res:', res) }) .catch((err) => { console.log('err:', err) }) /** res: [ { status: 'rejected', reason: 'p2 reject' }, { status: 'fulfilled', value: 'p1 resolve' }, { status: 'fulfilled', value: 'p3 resolve' }, ] */ \"]},\"346\":{\"h\":\"race\",\"t\":[\"多个 Promise 对象进行比赛，谁先有结果，即为最终结果\",\"测试效果：\",\"const p1 = new MyPromise((resolve, reject) => { setTimeout(() => { resolve('p1 resolve') }, 300) }) // p2 先有结果 const p2 = new MyPromise((resolve, reject) => { setTimeout(() => { reject('p2 reject') }, 100) }) MyPromise.race([p1, p2]) .then((res) => { console.log('res:', res) }) .catch((err) => { console.log('err:', err) // err: p2 reject }) MyPromise.race([]) \"]},\"347\":{\"h\":\"any\",\"t\":[\"ES12 新增 any，等待第一个成功状态\",\"// 创建多个Promise const p1 = new Promise((resolve, reject) => { setTimeout(() => { resolve('p1 resolve') }, 200) }) const p2 = new Promise((resolve, reject) => { setTimeout(() => { reject('p2 reject') }, 100) }) const p3 = new Promise((resolve, reject) => { setTimeout(() => { resolve('p3 resolve') }, 300) }) Promise.any([p1, p2, p3]) .then((res) => { console.log('res:', res) // res: p1 resolve }) .catch((err) => { console.log('err:', err.errors) }) \",\"如果所有 Promise 对象均为失败状态，则报 AggregateError 的错误。可通过 .errors 取得所有失败结果。\",\"// 创建多个Promise const p1 = new Promise((resolve, reject) => { setTimeout(() => { reject('p1 reject') }, 100) }) const p2 = new Promise((resolve, reject) => { setTimeout(() => { reject('p2 reject') }, 200) }) const p3 = new Promise((resolve, reject) => { setTimeout(() => { reject('p3 reject') }, 300) }) Promise.any([p1, p2, p3]) .then((res) => { console.log('res:', res) }) .catch((err) => { console.log('err:', err) // err: AggregateError: All promises were rejected console.log('err:', err.errors) // err: ['p1 reject', 'p2 reject', 'p3 reject'] }) \"]},\"348\":{\"h\":\"Promise 加载图片\",\"t\":[\"在线预览\",\"function loadImg(src) { return new Promise((resolve, reject) => { const img = document.createElement('img') img.src = src img.onload = () => { resolve(img) } img.onerror = () => { const err = new Error(`加载地址为 ${src} 的图片失败`) reject(err) } }) } const url1 = 'https://p6-passport.byteacctimg.com/img/user-avatar/c2ff47a1390407c1a16b5e5fc3aa5e1f~300x300.image' const url2 = 'https://avatars.githubusercontent.com/u/39004291?s=400&u=eb0d02f850acaf334bdb14611a7d6d2e50591c57&v=4' loadImg(url1) .then((img1) => { document.body.appendChild(img1) return loadImg(url2) // promise 实例 }) .then((img2) => { document.body.appendChild(img2) return img2 // 普通对象 }) .then((img2) => { console.log(img2.width) }) .catch((err) => console.error(err)) \"]},\"349\":{\"h\":\"练习\",\"t\":[\"then、catch 改变 Promise 的状态\",\"题目一：\",\"Promise.resolve().then(() => { console.log(1) }).catch(() => { console.log(2) }).then(() => { console.log(3) }) // 1 3 \",\"题目二：\",\"// 易错 Promise.resolve().then(() => { // 成功进入 then console.log(1) throw new Error('err') // 报错则失败 }).catch(() => { // 失败则进入 catch console.log(2) // 无报错则成功 }).then(() => { // 成功则进入 then console.log(3) }) // 1 2 3 \",\"题目三：\",\"Promise.resolve().then(() => { // 成功进入 then\\n  console.log(1)\\n  throw new Error('err') // 报错则失败\\n}).catch(() => {   // 失败则进入 catch\\n  console.log(2)  // 无报错则成功\\n}).catch(() => {\\n  console.log(3)\\n})\\n// 1 2\\n\"]},\"350\":{\"h\":\"原型与原型链\",\"t\":[\"原型（prototype）是存放共有属性、方法的对象 （prototype 是对象）\",\"[] instanceof Array // true [] instanceof Object // true {} instanceof Object // true // class 类声明 class People{} class Student extends People{} const stu1 = new Student() stu1 instanceof Student // true stu1 instanceof People // true stu1 instanceof Object // true // class 类 实际上是函数，可见是语法糖 typeof People // 'function' typeof Student // 'function' \"]},\"351\":{\"h\":\"原型的六个规则\",\"t\":[\"隐式原型 [[Prototype]] 是 ECMA 标准，__proto__ 是浏览器对标准的实现。\",\"可以简单地认为显式原型是用来存放共有属性、方法，constructor、proto 的地方。\",\"定义 __proto__ 为隐式原型，prototype 为显式原型，有以下规则：\",\"对象（包括数组、函数）的隐式原型 === 其构造函数的显式原型\",\"函数（普通、箭头、构造函数）的隐式原型 === Function 的显式原型\",\"普通函数、构造函数都有显式原型，箭头函数没有显式原型\",\"构造函数 === 构造函数的显式原型的 constructor，两者循环引用\",\"对象的显式原型是原型链的根，在所有对象（包括数组、函数）的原型链上。除了使用 Object.create(null) 以 null 为原型创建的新对象\",\"对象的显式原型是原型链的最顶层，不指向更上一层，所以为 null\",\"代码示例：\",\"const arr = [] // 等价于 new Array([]) const obj = {} // 等价于 new Object({}) const fn = function(){} // 等价于 new Function('') const arrow = () => {} class Person{} // Person 构造函数 // 1.对象（包括数组、函数）的隐式原型 === 其构造函数的显式原型 arr.__proto__ === Array.prototype obj.__proto__ === Object.prototype fn.__proto__ === Function.prototype arrow.__proto__ === Function.prototype Person.__proto__ === Function.prototype // 2.函数（普通、箭头、构造函数）的隐式原型 === Function 的显式原型 fn.__proto__ === Function.prototype arrow.__proto__ === Function.prototype Person.__proto__ === Function.prototype Array.__proto__ === Function.prototype Object.__proto__ === Function.prototype Function.__proto__ === Function.prototype // 3.普通函数、构造函数都有显式原型，箭头函数没有显式原型 fn.prototype.__proto__ === Object.prototype Person.prototype.__proto__ === Object.prototype Function.prototype.__proto__ === Object.prototype arrow.prototype === undefined // 4.构造函数 === 构造函数的显式原型的 constructor，两者循环引用 Person === Person.prototype.constructor Array === Array.prototype.constructor Function === Function.prototype.constructor Object === Object.prototype.constructor // 5.对象的显式原型是原型链的根，在所有对象（包括数组、函数）的原型链上 // 除了使用 Object.create(null) 以 null 为原型创建的新对象！ arr instanceof Object // true obj instanceof Object // true fn instanceof Object // true let parent = {} let child = Object.create(parent) child instanceof Object // true Object.create(null) instanceof Object // false // 6.对象的显式原型是原型链的最顶层，不指向更上一层，所以为空。 Object.prototype.__proto__ === null \"]},\"352\":{\"h\":\"class 继承图解\",\"t\":[\"// 父类 class Person { constructor(name) { this.name = name } eat() { console.log(`${this.name} is eating`) } } // 子类 class Student extends Person { constructor(name, id) { super(name) this.id = id } sayHi() { console.log(`I'm ${this.name}, ID is ${this.id}`) } } let stu1 = new Student('Tom', '001') stu1.sayHi() console.log(stu1) // Student {name: \\\"Tom\\\", id: \\\"001\\\"} console.log(Student.prototype) // Person {constructor: ƒ, sayHi: ƒ} console.log(Person.prototype) // {constructor: ƒ, eat: ƒ} \",\"原型链图解\"]},\"353\":{\"h\":\"属性和方法的执行规则\",\"t\":[\"获取实例的属性或方法时，先在实例自身找，找不到再去隐式原型所指向的地址找，找不到再往上找，直到找到 或 直至 Object.prototype 也找不到就报错。\",\"ES5 通过原型链实现继承，不支持私有属性\",\"ES6 通过 class 实现继承，使用 # 指定私有属性\"]},\"354\":{\"h\":\"设置原型\",\"t\":[\"// ES5：new 构造函数() function Parent() {} let child1 = new Parent() console.log(child1.__proto__ === Parent.prototype) // true // ES6：Object.create(原型对象) let parent = {} // Object.create() 以传入的对象为原型，创建新对象 let child2 = Object.create(parent) console.log(child2.__proto__ === parent) // true，注意不是 parent.prototype \"]},\"355\":{\"h\":\"原型常用 API\",\"t\":[\"let parent = { name: 'parent', } // Object.create() 以传入的对象为原型，创建新对象 let child = Object.create(parent, { address: { value: 'Earth', // child 原型链上的 address 属性不可枚举 enumerable: false, }, }) console.log(child.__proto__ === parent) // true console.log(child.__proto__) // { name: 'parent'} // 1.Object.getPrototypeOf：获取对象的原型 console.log(Object.getPrototypeOf(child)) // { name: 'parent' } // 2.hasOwnProperty：判断属性是否是对象自身的属性，而不是原型链上的属性 console.log(parent.hasOwnProperty('address')) // false console.log(parent.hasOwnProperty('name')) // true // 3.in: 判断属性是否在对象及其原型链上 console.log('address' in child) // true console.log('name' in child) // true // 4.for in：循环遍历对象自身的和原型链上的可枚举属性 for (let key in child) { console.log(key) // name } // 5.isPrototypeOf：判断对象是否是另一个对象的原型 // console.log(child instanceof parent) 报错：parent 没有 prototype 属性 console.log(parent.isPrototypeOf(child)) // true \"]},\"356\":{\"h\":\"typeof 与 instanceof\"},\"357\":{\"h\":\"typeof\",\"t\":[\"判断数据类型，返回值为数据类型的字符串（如 'number'）\",\"几种特殊情况：\",\"typeof NAN === 'number' typeof function(){} === 'function' typeof null === 'object' typeof {} === 'object' typeof [] === 'object' \",\"typeof null === 'object' 原因：\",\"这个 bug 是第一版 Javascript 留下来的。在这个版本，数值是以 32 位存储的，由标志位（1~3 位）和数值组成。null 的二进制表示全都是 0，自然前三位也是 0，所以执行 typeof 时会返回 'object'。\",\"有五种标志位：\",\"000：对象\",\"1：整型，数据是 31 位带符号整数\",\"010：双精度浮点型\",\"100：字符串\",\"110：布尔型\"]},\"358\":{\"h\":\"instanceof\",\"t\":[\"判断构造函数的显式原型 prototype 是否出现在某个实例对象的原型链上，返回值为 true 或 false。\",\"obj1 instanceof constructor 实例对象 instanceof 构造函数 \",\"class People{}\\nclass Student extends People{}\\nconst stu1 = new Student()\\nstu1 instanceof Student // true\\nstu1 instanceof People  // true\\nstu1 instanceof Object  // true\\n\"]},\"359\":{\"h\":\"this 指向\",\"t\":[\"this 指向函数的调用者，其中有 5 种绑定规则：\",\"this 指向\"]},\"360\":{\"h\":\"默认绑定\",\"t\":[\"作为独立函数，被全局对象（window 或 global）调用\",\"非严格模式下：\",\"浏览器环境：this 指向 window 对象\",\"Node 环境：this 指向 global 对象\",\"严格模式下：this 为 undefined\",\"全局函数、函数赋值给变量再调用，调用者都是全局对象\",\"案例一：\",\"function foo() { console.log(this) } foo() // window \",\"案例二：\",\"多个函数连环调用，依然是由全局对象调用\",\"// foo2 -> foo1 function foo1() { console.log(this) // window } function foo2() { console.log(this) // window foo1() } foo2() \",\"案例三：\",\"将字面量对象的方法的地址赋值给变量，再通过变量调用，依然是由全局对象调用\",\"let obj = { name: 'obj', foo: function() { console.log(this) }, } let bar = obj.foo bar() // window \",\"案例四：\",\"全局函数赋值给对象的方法\",\"function foo() { console.log(this) } let obj = { name: 'obj', objFoo: foo, } obj.objFoo() let bar = obj.objFoo // {name: 'obj', objFoo: ƒ} bar() // window \",\"案例五：\",\"高阶函数\",\"function foo() { function bar() { console.log(this) } return bar } let fn = foo() fn() // window \",\"案例六：\",\"function foo(func) { func() } let obj = { name: 'obj', bar: function () { console.log(this) }, } foo(obj.bar) // window \"]},\"361\":{\"h\":\"隐式绑定\",\"t\":[\"作为字面量对象的方法，隐式地被对象调用\",\"案例一：\",\"let obj = { name: 'obj', foo: function() { console.log(this) } } obj.foo() // {name: 'obj', foo: ƒ} \",\"案例二：\",\"let obj1 = { name: 'obj1', foo: function () { console.log(this) }, } let obj2 = { name: 'obj2', bar: obj1.foo, } obj1.foo() // {name: 'obj1', foo: ƒ} obj2.bar() // {name: 'obj2', bar: ƒ} // bar 只是保存了 obj1.foo 函数的地址 // obj2 调用了这个地址上的函数 // 另见 特殊规则：间接函数引用 \",\"案例三：\",\"let obj = { foo: function(){ console.log(this) } } let bar = obj.foo // bar 保存 obj.foo 函数的地址 obj.foo() // obj 隐式调用 bar() // window 独立函数调用 \",\"案例四：（刁钻）\",\"JS 中数组也是对象，this 指向字面量数组\",\"let arr = [0, function(){console.log(this)}, 2] arr[1]() // [0, ƒ, 2] 即 arr \"]},\"362\":{\"h\":\"显式绑定\",\"t\":[\"使用 bind、call、apply 显式地指定被哪个调用者调用：\",\"bind 绑定 this，返回一个函数，但不执行函数\",\"call 绑定 this 并立即执行函数，参数为一个个值\",\"apply 绑定 this 并立即执行函数，参数为参数列表伪数组\",\"function foo() { console.log(this) } foo.bind(window)() // window foo.bind({ name: 'obj' })() //{name: 'obj'} foo.bind(123)() // Number {123} foo.bind('123')() // String {'123'} // 等价于 foo.call(window) foo.call({ name: 'obj' }) foo.call(123) foo.call('123') // 等价于 foo.apply(window) foo.apply({ name: 'obj' }) foo.apply(123) foo.apply('123') \",\"// 解决了上面案例三的问题 const obj = { name: 'obj', add: function(x, y) { console.log(x + y, this) } } const myAdd = obj.add.bind(obj) // 中间变量指向这个函数，再显式绑定 obj myAdd(1, 1) // 2 {name: 'obj', add: ƒ} // 上面两句等价于下面一句 obj.add.bind(obj)(1, 1) // 立即执行函数 obj.add.call(obj, 2, 2) // 4 {name: 'obj', add: ƒ} obj.add.apply(obj, [3, 3]) // 6 {name: 'obj', add: ƒ} \"]},\"363\":{\"h\":\"new 绑定\",\"t\":[\"作为类创建的实例对象方法被调用\",\"注意\",\"类创建的实例对象方法与类方法不同\",\"实例对象方法通过 this.foo 定义\",\"类方法通过 static 关键字定义\",\"实例对象与字面量对象不同：\",\"字面量对象是可以直接定义，对象的内容就是字面上的代码\",\"实例对象是通过类创建而来的，对象的内容由构造函数构造\",\"注意：类创建的实例对象方法与类方法不同，类方法使用 static 关键字创建\",\"// ES5 function Person1(name) { // 实例特有属性、方法通过 this. 放在实例上 this.name = name this.foo = function () { console.log(this) } } // 公有属性、方法放在原型上 Person1.prototype.bar = function () { console.log(this) } let p1 = new Person1('p1') p1.foo() // Person1 {name: 'p1', foo: ƒ} p1.bar() // Person1 {name: 'p1', foo: ƒ} Person1.prototype.bar() // {bar: ƒ, constructor: ƒ} // ES6 class Person2 { // 实例特有属性、方法放在 constructor 中 constructor(name) { this.name = name } // 公有属性、方法放在 constructor 外 foo() { console.log(this) } // 类方法可以不用实例化就可以调用 static bar() { console.log(this) } } let p2 = new Person2('p2') p2.foo() // Person2 {name: 'p2'} 注意：没有 foo // p2.bar() 实例不能调用类方法 Person2.bar() \",\"使用new关键字来调用函数是，会执行如下的操作：\",\"在内存中创建一个空的临时对象\",\"将这个临时对象的隐式原型 [[Prototype]] 指向构造函数显式原型 prototype\",\"绑定 this 到这个临时对象上\",\"执行构造函数内部的代码（给新对象添加属性）\",\"返回这个临时对象\",\"new 操作符执行的操作：\",\"new Person() // new 相当于执行以下操作： function Person(name) { // 1.在内存中创建一个空的临时对象 let obj = {} // 2.将这个临时对象的隐式原型指向构造函数的显式原型 obj.__proto__ = Person.prototype // 3.绑定 this 到这个临时对象上 Person.call(obj) // 4.执行构造函数内部的代码（给新对象添加属性） this.name = 'never' // 5.返回这个临时对象 return this } \"]},\"364\":{\"h\":\"箭头函数\",\"t\":[\"箭头函数 this 指向 定义时所在 的上层作用域：\",\"如果箭头函数被非箭头函数包含：this 指向 定义时所在的 最近一层非箭头函数的 this 值\",\"如果箭头函数外层没有普通函数：this 指向全局作用域\",\"箭头函数不绑定this\",\"箭头函数的函数体是一层作用域，它的上层作用域即箭头函数定义所在的作用域\",\"let a // 声明全局变量 a 用于存放箭头函数的地址 let obj1 = { name: 'obj1' } // obj1 调用 foo1，foo1 中将箭头函数赋值给 a foo1.call(obj1) let obj2 = { name: 'obj2' } // obj2 调用 foo2，foo2 中调用全局变量 a 所指向的箭头函数 foo2.call(obj2) function foo1() { // 箭头函数 this 指向函数定义时所在的最近一层非箭头函数的 this 值 // 又通过 call 显式指定 foo1 调用者，所以 foo1 this 值指向 obj1 a = () => { console.log(this.name) } } function foo2() { // 箭头函数 this 指向与调用位置无关 a() } // 打印 obj1 \",\"// 箭头函数场景应用 var obj = { data: [], getData: function() { setTimeout(() => { var result = [\\\"abc\\\"] this.data = result }, 2000); // 以前的写法 // var _this = this // setTimeout(function() { // var result = [\\\"abc\\\"] // _this.data = result // }) } } \"]},\"365\":{\"h\":\"规则优先级\"},\"366\":{\"h\":\"1.显式绑定高于隐式绑定\",\"t\":[\"function foo() { console.log(this) } let obj = { name: 'obj', foo: foo.bind('aa') } obj.foo() // String {'aa'} \"]},\"367\":{\"h\":\"2.new 绑定高于隐式绑定\",\"t\":[\"let obj = { foo: function () { console.log(this) } } let foo1 = new obj.foo() // foo {} \"]},\"368\":{\"h\":\"3.new 绑定高于 bind 绑定\",\"t\":[\"new 不能与 apply/call 一起使用，只能与 bind 同时使用\",\"// new 的优先级高于 bind function foo() { console.log(this) } let bar = foo.bind('aa') let obj = new bar() // foo {} \"]},\"369\":{\"h\":\"4.bind 高于 call\",\"t\":[\"有点反常理，理应后面覆盖前面。\",\"bind 后就不能再更改绑定了。\",\"function foo() { console.log(this) } foo.bind('aa').call('bb') // String {'aa'} // foo.call('aa').bind('bb') 报错：call 绑定后执行返回 undefined，无法 bind \"]},\"370\":{\"h\":\"特殊规则\"},\"371\":{\"h\":\"1.内置函数的this\",\"t\":[\"setTimeout，相当于独立函数调用，this 指向全局对象：\",\"setTimeout(function () { console.log(this) // window }, 0) \",\"监听点击，this 指向目标 DOM 元素\",\"const boxDiv = document.querySelector('.box') boxDiv.onclick = function () { console.log(this) // <div class=\\\"box\\\"></div> } boxDiv.addEventListener('click', function () { console.log(this) // <div class=\\\"box\\\"></div> }) \",\"数组的方法forEach、map、filter，可以自己指定 this 指向：\",\"let nums = [1, 2, 3] let obj = { name: 'obj' } nums.forEach(function (item) { console.log(item, this) }, obj) // 1 {name: 'obj'} // 2 {name: 'obj'} // 3 {name: 'obj'} nums.map(function (item) { console.log(item, this) }, obj) // 1 {name: 'obj'} // 2 {name: 'obj'} // 3 {name: 'obj'} \"]},\"372\":{\"h\":\"2.显式绑定 null/undefined\",\"t\":[\"给 bind、call、apply 传入 null/undefined 时，自动将 this 绑定成全局对象 window\",\"function foo() { console.log(this) } foo.apply('a') // String {'a'} // 以下均输出 window foo.bind(null)() foo.bind(undefined)() foo.call(null) foo.call(undefined) foo.apply(null) foo.apply(undefined) \"]},\"373\":{\"h\":\"3.间接函数引用\",\"t\":[\"var name = 'window' // 挂载到 window 上 let obj1 = { name: 'obj1', foo: function () { console.log(this.name) }, } let obj2 = { name: 'obj2', } obj1.foo() // obj1 obj2.bar = obj1.foo // 将函数地址赋值给 obj2.bar，再调用这个地址上的函数，字面量对象的方法指向该对象 obj2.bar() // obj2 ;(obj2.bar = obj1.foo)() // window // 赋值表达式 (obj2.foo = obj1.foo) 的结果是 obj1 的 foo 函数 // foo 函数被 window 直接调用，默认绑定 \"]},\"374\":{\"h\":\"面试题\"},\"375\":{\"h\":\"面试题一\",\"t\":[\"var name = 'window' // 挂载到 window 上 let person = { name: 'person', sayName: function () { console.log(this.name) }, } function sayName() { let foo = person.sayName foo() // window: 独立函数调用 person.sayName() // person: 隐式调用 ;(person.sayName)() // 等价于上行：person: 隐式调用 ;(b = person.sayName)() // window: 赋值表达式(独立函数调用) } sayName() \"]},\"376\":{\"h\":\"面试题二\",\"t\":[\"此题通过字面量定义字面量对象，有四个函数：\",\"foo1：普通函数\",\"foo2：箭头函数\",\"foo3：返回普通函数的普通函数\",\"foo4：返回箭头函数的普通函数\",\"此题作用域链：全局 → foo1~4 函数 → foo3、foo4 返回的函数\",\"var name = 'window' // 挂载到 window 上 let person1 = { // this {name: 'person1', foo1: ƒ, foo2: ƒ, foo3: ƒ, foo4: ƒ} name: 'person1', foo1: function () { console.log(this.name) }, foo2: () => console.log(this.name), foo3: function () { return function () { console.log(this.name) } }, foo4: function () { console.log(this) // {name: 'person1', foo1: ƒ, foo2: ƒ, foo3: ƒ, foo4: ƒ} return () => { console.log(this.name) } }, } let person2 = { name: 'person2' } person1.foo1() // person1：隐式绑定 person1.foo1.call(person2) // person2：显示绑定优先级大于隐式绑定 person1.foo2() // window：上层作用域是全局，对象无作用域 person1.foo2.call(person2) // window：箭头函数无法通过 call 更改 this person1.foo3()() // window：foo3()得到普通函数，再独立函数调用 person1.foo3.call(person2)() // window：foo3 绑定 person2 并执行得到普通函数，再独立函数调用 person1.foo3().call(person2) // person2：foo3()得到普通函数，再显式绑定 person1.foo4()() // person1：普通函数返回的箭头函数被字面量对象 person1 隐式绑定调用 person1.foo4.call(person2)() // person2：foo4 绑定 person2 并执行得到箭头函数 person1.foo4().call(person2) // person1：foo4()得到箭头函数无法通过 call 更改 this \"]},\"377\":{\"h\":\"面试题三\",\"t\":[\"此题通过构造函数创建实例对象，有四个子函数，同面试题二\",\"此题作用域链：全局 → Person 构造函数 → foo1~4 函数 → foo3、foo4 返回的函数\",\"构造函数的 this 指向创建的实例对象 foo1~4 类的方法\",\"相比于面试题二，只有 person1.foo2() 、person1.foo2.call(person2) 输出不同\",\"var name = 'window' // 挂载到 window 上 function Person (name) { console.log(this) // Person {} this.name = name this.foo1 = function () { console.log(this.name) }, this.foo2 = () => console.log(this.name), this.foo3 = function () { return function () { console.log(this.name) } }, this.foo4 = function () { console.log(this) // Person {} return () => { console.log(this.name) } } } let person1 = new Person('person1') let person2 = new Person('person2') person1.foo1() // person1：隐式绑定 person1.foo1.call(person2) // person2：显示绑定优先级大于隐式绑定 person1.foo2() // person1：上层作用域中是 person1，函数有作用域，对象无作用域 person1.foo2.call(person2) // person1：箭头函数无法通过 call 更改 this person1.foo3()() // window：foo3()得到普通函数，再独立函数调用 person1.foo3.call(person2)() // window：foo3 绑定 person2 并执行得到普通函数，再独立函数调用 person1.foo3().call(person2) // person2：foo3()得到普通函数，再显式绑定 person1.foo4()() // person1：普通函数返回的箭头函数被 person1 调用 person1.foo4.call(person2)() // person2：foo4 绑定 person2 并执行得到箭头函数 person1.foo4().call(person2) // person1：foo4()得到箭头函数无法通过 call 更改 this \"]},\"378\":{\"h\":\"面试题四\",\"t\":[\"此题作用域链：全局 → Person → obj（foo1、foo2所在）→ foo1、foo2返回函数\",\"var name = 'window' // 挂载到 window 上 function Person(name) { console.log(this) // Person{} this.name = name this.obj = { name: 'obj', foo1: function () { return function () { console.log(this.name) } }, foo2: function () { console.log(this) // {name: 'obj', foo1: ƒ, foo2: ƒ} return () => { console.log(this.name) } }, } } let person1 = new Person('person1') let person2 = new Person('person2') person1.obj.foo1()() // window：foo1()得到普通函数，再独立函数调用 person1.obj.foo1.call(person2)() // window：foo1 绑定 person2 并执行得到普通函数，再独立函数调用 person1.obj.foo1().call(person2) // person2：foo1()得到普通函数，再显式绑定 person1.obj.foo2()() // obj：箭头函数 this 指向上层作用域 obj person1.obj.foo2.call(person2)() // person2：该箭头函数的上层作用域被显式绑定了 person2 person1.obj.foo2().call(person2) // obj：foo2()得到箭头函数无法通过 call 更改 this \"]},\"379\":{\"h\":\"手写 bind\",\"t\":[\"手写 bind\",\"3 个要求：绑定 this、绑定参数、return 无误\",\"Function.prototype.myBind = function(caller, ...args) {\\n  // ES6 扩展运算符把伪数组变为一个个数值\\n  // 将显式调用者赋值给 fn\\n  const fn = this\\n  // 无参数则置空数组\\n  args = args ? args : []\\n  // newFnArgs 为 new 绑定的参数\\n  return function newFn(...newFnArgs) {\\n    // 因为 new 绑定优先级高于显式绑定，所以需要判断调用者是不是 new 出来的\\n    if (this instanceof newFn) {\\n      return new fn(...args, ...newFnArgs)\\n    }\\n    return fn.apply(caller, [...args, ...newFnArgs])\\n  }\\n}\\n\\nfunction fn1(a, b, c) {\\n  console.log(this)\\n  console.log(a, b, c)\\n  return 'fn1 返回值'\\n}\\n\\n// bind 绑定后立即执行\\nconst result = fn1.myBind({ x: 100 }, 10, 20, 30)()\\nconsole.log(result)\\n// { x: 100 }\\n// 10 20 30\\n// 'fn1 返回值'\\n\\n\\n// new 绑定\\nclass People {\\n  constructor(name) {\\n    this.name = name\\n    this.age = age\\n  }\\n  fn() {\\n    console.log(this)\\n  }\\n}\\nconst person = new People('nevermore', 23)\\nperson.fn.myBind(person)()\\n// {name: 'nevermore', age: 23}\\n\"]},\"380\":{\"h\":\"with、eval、严格模式\"},\"381\":{\"h\":\"with 语句（了解，不要用）\",\"t\":[\"作用：扩展作用域链，改变上下文\",\"严格模式下无法使用 with\",\"const name = 'window name' const obj = { name: 'obj name' } const foo = () => { // 作用域链：AO(foo) -> GO console.log(name) // 'window name' with (obj) { // 作用域链：obj -> AO(foo) -> GO console.log(name) // 'obj name' } } foo() \"]},\"382\":{\"h\":\"eval 函数（了解，不要用）\",\"t\":[\"作用：将传入的字符串当做 JS 代码执行\",\"严格模式下无法使用 eval\",\"const str = 'const msg = \\\"Hello World\\\"; console.log(msg);' eval(str) \",\"不使用的原因：\",\"可读性差\",\"传入的字符串可能在执行过程中被恶意篡改，存在安全风险\",\"无法被 JS 引擎优化\"]},\"383\":{\"h\":\"严格模式\"},\"384\":{\"h\":\"严格模式常见语法限制\",\"t\":[\"'use strict' // 1.禁止意外创建全局变量（不使用变量声明关键字，默认创建全局变量） message = 'Hello window' console.log(message) // 'Hello window' function foo() { message = 'Hello foo' } foo() console.log(message) // 'Hello foo' // 2.不允许函数有相同的参数名称 function bar(x, y, x) { console.log(x, y, x) } bar(1, 2, 3) // 3.消除静默错误 true.name = 'abc' NaN = 123 let obj = {} Object.defineProperty(obj, 'name', { configurable: false, // 不可配置 writable: false, // 不可写 value: 'nevermore', }) console.log(obj.name) obj.name = 'never' delete obj.name // 4.不允许使用原先的八进制格式 0123，应使用 0o123 let num1 = 0o123 // 八进制 let num2 = 0x123 // 十六进制 let num3 = 0b100 // 二进制 console.log(num1, num2, num3) // 5.不允许使用with语句 // 6.eval 不再为上层范围引入新变量（即使是 var 也不会） var str = \\\"'use strict'; var info = 'Hello Eval'; console.log(info);\\\" // 'Hello Eval' eval(str) console.log(info) // info is not defined \"]},\"385\":{\"h\":\"严格模式 this\",\"t\":[\"'use strict'\\n\\n// 1.严格模式下，自执行函数（默认绑定）会指向 undefined\\nfunction foo() {\\n  console.log(this)\\n}\\nfoo() // undefined\\n\\n// 2.无论是否开启严格模式：\\n// 传入 setTimeout 的普通函数的 this 永远指向 window\\n// 传入 setTimeout 的箭头函数外层没有普通函数（即上层作用域为全局），this 永远指向 window\\nsetTimeout(function () {\\n  console.log(this) // window\\n}, 1000)\\n\\nsetTimeout(() => console.log(this), 1000) // window\\n\\nconst obj1 = {\\n  message: 'Hello obj1',\\n  delay() {\\n    setTimeout(function () {\\n      console.log(this.message) // undefined\\n    }, 1000)\\n  },\\n}\\nobj1.delay() // undefined\\n\\n\\n// 3.传入 setTimeout 的箭头函数外层有普通函数\\nconst obj2 = {\\n  message: 'Hello obj2',\\n  delay() {\\n    setTimeout(() => {\\n      console.log(this.message)\\n    }, 1000)\\n  },\\n}\\nobj2.delay() // 'Hello obj2'\\n\"]},\"386\":{\"h\":\"TypeScript基础入门\"},\"387\":{\"c\":[\"前端\"]},\"388\":{\"c\":[\"TypeScript入门\",\"coderwhy总结\"]},\"389\":{\"h\":\"类的使用\"},\"390\":{\"h\":\"定义\",\"t\":[\"class Person { name: string age: number constructor(name: string, age: number) { this.name = name this.age = age } eating() { console.log(this.name + \\\" eating\\\") } } const p = new Person(\\\"why\\\", 18) console.log(p.name) console.log(p.age) p.eating() export {} \"]},\"391\":{\"h\":\"继承\",\"t\":[\"class Person { name: string = \\\"\\\" age: number = 0 eating() { console.log(\\\"eating\\\") } } class Student extends Person { sno: number = 0 studying() { console.log(\\\"studying\\\") } } class Teacher extends Person { title: string = \\\"\\\" teaching() { console.log(\\\"teaching\\\") } } const stu = new Student() stu.name = \\\"coderwhy\\\" stu.age = 10 console.log(stu.name) console.log(stu.age) stu.eating() \",\"class Person { name: string age: number constructor(name: string, age: number) { this.name = name this.age = age } eating() { console.log(\\\"eating 100行\\\") } } class Student extends Person { sno: number constructor(name: string, age: number, sno: number) { // super调用父类的构造器 super(name, age) this.sno = sno } eating() { console.log(\\\"student eating\\\") super.eating() } studying() { console.log(\\\"studying\\\") } } const stu = new Student(\\\"why\\\", 18, 111) console.log(stu.name) console.log(stu.age) console.log(stu.sno) stu.eating() export {} \"]},\"392\":{\"h\":\"多态\",\"t\":[\"class Animal { action() { console.log(\\\"animal action\\\") } } class Dog extends Animal { action() { console.log(\\\"dog running!!!\\\") } } class Fish extends Animal { action() { console.log(\\\"fish swimming\\\") } } class Person extends Animal { } // 父类引用指向子类对象(const animal:Animal = new Dog()) // animal: dog/fish // 多态的目的是为了写出更加具备通用性的代码 function makeActions(animals: Animal[]) { animals.forEach(animal => { animal.action() }) } makeActions([new Dog(), new Fish(), new Person()]) \"]},\"393\":{\"h\":\"private修饰符\",\"t\":[\"class Person { private name: string = \\\"\\\" // 封装了两个方法, 通过方法来访问name getName() { return this.name } setName(newName) { this.name = newName } } const p = new Person() console.log(p.getName()) p.setName(\\\"why\\\") export {} \"]},\"394\":{\"h\":\"protected修饰符\",\"t\":[\"// protected: 在类内部和子类中可以访问 class Person { protected name: string = \\\"123\\\" } class Student extends Person { getName() { return this.name } } const stu = new Student() console.log(stu.getName()) export {} \"]},\"395\":{\"h\":\"readonly修饰符\",\"t\":[\"class Person { // 1.只读属性是可以在构造器中赋值, 赋值之后就不可以修改 // 2.属性本身不能进行修改, 但是如果它是对象类型, 对象中的属性是可以修改 readonly name: string age?: number readonly friend?: Person constructor(name: string, friend?: Person) { this.name = name this.friend = friend } } const p = new Person(\\\"why\\\", new Person(\\\"kobe\\\")) console.log(p.name) console.log(p.friend) // 不可以直接修改friend // p.friend = new Person(\\\"james\\\") if (p.friend) { p.friend.age = 30 } // p.name = \\\"123\\\" \"]},\"396\":{\"h\":\"getter/setter方法\",\"t\":[\"class Person { private _name: string constructor(name: string) { this._name = name } // 访问器setter/getter // setter set name(newName) { this._name = newName } // getter get name() { return this._name } } const p = new Person(\\\"why\\\") p.name = \\\"coderwhy\\\" console.log(p.name) \"]},\"397\":{\"h\":\"静态成员变量\",\"t\":[\"// class Person { // name: string = \\\"\\\" // age: number = 12 // } // const p = new Person() // p.name = \\\"123\\\" class Student { static time: string = \\\"20:00\\\" static attendClass() { console.log(\\\"去学习~\\\") } } console.log(Student.time) Student.attendClass() \"]},\"398\":{\"h\":\"抽象类\",\"t\":[\" function makeArea(shape: Shape) { return shape.getArea() } abstract class Shape { abstract getArea(): number } class Rectangle extends Shape { private width: number private height: number constructor(width: number, height: number) { super() this.width = width this.height = height } getArea() { return this.width * this.height } } class Circle extends Shape { private r: number constructor(r: number) { super() this.r = r } getArea() { return this.r * this.r * 3.14 } } const rectangle = new Rectangle(20, 30) const circle = new Circle(10) console.log(makeArea(rectangle)) console.log(makeArea(circle)) // makeArea(new Shape()) // makeArea(123) // makeArea(\\\"123\\\") \"]},\"399\":{\"h\":\"类的类型\",\"t\":[\"class Person { name: string = \\\"123\\\" eating() { } } const p = new Person() const p1: Person = { name: \\\"why\\\", eating() { } } function printPerson(p: Person) { console.log(p.name) } printPerson(new Person()) printPerson({name: \\\"kobe\\\", eating: function() {}}) export {} \"]},\"400\":{\"c\":[\"TypeScript\"]},\"401\":{\"h\":\"数据类型\"},\"402\":{\"h\":\"any类型\",\"t\":[\"// 当进行一些类型断言 as any // 在不想给某些JavaScript添加具体的数据类型时(原生的JavaScript代码是一样) let message: any = \\\"Hello World\\\" message = 123 message = true message = { } // message() // message.split(\\\" \\\") console.log(message) const arr: any[] = [] \"]},\"403\":{\"h\":\"unknown类型\",\"t\":[\"function foo() { return \\\"abc\\\" } function bar() { return 123 } // unknown类型只能赋值给any和unknown类型 // any类型可以赋值给任意类型 let flag = true let result: unknown // 最好不要使用any,防止乱用 if (flag) { result = foo() } else { result = bar() } let message: string = result let num1: number = result let num2: unknown = result console.log(result) export {} \"]},\"404\":{\"h\":\"void类型\",\"t\":[\"function sum1(num1: number, num2: number) { console.log(num1 + num2) } function sum2(num1: number, num2: number): void { console.log(num1 + num2) return undefined } sum1(20, 30) // sum1(\\\"abc\\\", \\\"cba\\\") \"]},\"405\":{\"h\":\"never类型\",\"t\":[\"// function foo(): never { // // 死循环 // while(true) { // } // } // function bar(): never { // throw new Error() // } // 提前 // 封装一个核心函数 function handleMessage(message: string | number | boolean) { switch (typeof message) { case 'string': console.log(\\\"string处理方式处理message\\\") break case 'number': console.log(\\\"number处理方式处理message\\\") break case 'boolean': console.log(\\\"boolean处理方式处理message\\\") break default: const check: never = message } } handleMessage(\\\"abc\\\") handleMessage(123) // 张三 handleMessage(true) \"]},\"406\":{\"h\":\"tuple类型\",\"t\":[\"// tuple元组: 多种元素的组合(有点像集合) // \\\"why\\\" 18 1.88 // 1.数组的弊端 // const info: any[] = [\\\"why\\\", 18, 1.88] // const infoObj = { // name: \\\"why\\\", // age: 18, // height: 1.88 // } // const name = info[0] // console.log(name.length) // 2.元组的特点 const info: [string, number, number] = [\\\"why\\\", 18, 1.88] const name = info[0] console.log(name.length) // const age = info[1] // console.log(age.length) export {} \"]},\"407\":{\"h\":\"tuple类型的应用场景\",\"t\":[\"// hook: useState // const [counter, setCounter] = {counter: , setCounter:} function useState(state: any) { let currentState = state const changeState = (newState: any) => { currentState = newState } const tuple: [any, (newState: any) => void] = [currentState, changeState] return tuple } const [counter, setCounter] = useState(10); setCounter(1000) const [title, setTitle] = useState(\\\"abc\\\") export {} \",\"// tuple应用场景优化 // hook: useState // const [counter, setCounter] = {counter: , setCounter:} function useState(state: any) { let currentState = state const changeState = (newState: any) => { currentState = newState } const tuple: [any, (newState: any) => void] = [currentState, changeState] return tuple } const [counter, setCounter] = useState(10); setCounter(1000) const [title, setTitle] = useState(\\\"abc\\\") export {} \"]},\"408\":{\"h\":\"函数的参数和返回值类型\",\"t\":[\" // 给参数加上类型注解: num1: number, num2: number // 给返回值加上类型注释: (): number // 在开发中,通常情况下可以不写返回值的类型(自动推导) function sum(num1: number, num2: number) { return num1 + num2 } // sum(123, 321) \"]},\"409\":{\"h\":\"匿名函数的参数类型\",\"t\":[\"// 通常情况下, 在定义一个函数时, 都会给参数加上类型注解的 function foo(message: string) { } const names = [\\\"abc\\\", \\\"cba\\\", \\\"nba\\\"] // item根据上下文的环境推导出来的, 这个时候可以不添加的类型注解 // 上下文中的函数: 可以不添加类型注解 names.forEach(function(item) { console.log(item.split(\\\"\\\")) }) \"]},\"410\":{\"h\":\"对象类型\",\"t\":[\" // Point: x/y -> 对象类型 // {x: number, y: number} function printPoint(point: {x: number, y: number}) { console.log(point.x); console.log(point.y) } printPoint({x: 123, y: 321}) export {} \"]},\"411\":{\"h\":\"可选类型\",\"t\":[\" // Point: x/y/z -> 对象类型 // {x: number, y: number, z?: number} function printPoint(point: {x: number, y: number, z?: number}) { console.log(point.x) console.log(point.y) console.log(point.z) } printPoint({x: 123, y: 321}) printPoint({x: 123, y: 321, z: 111}) export {} \"]},\"412\":{\"h\":\"联合类型\",\"t\":[\"// number|string 联合类型 function printID(id: number|string|boolean) { // 使用联合类型的值时, 需要特别的小心 // narrow: 缩小 if (typeof id === 'string') { // TypeScript帮助确定id一定是string类型 console.log(id.toUpperCase()) } else { console.log(id) } } printID(123) printID(\\\"abc\\\") printID(true) \"]},\"413\":{\"h\":\"可选类型和联合类型的关系\",\"t\":[\"// 让一个参数本身是可选的 // 一个参数一个可选类型的时候, 它其实类似于是这个参数是 类型|undefined 的联合类型 // function foo(message?: string) { // console.log(message) // } function foo(message?: string) { console.log(message) } foo() \"]},\"414\":{\"h\":\"类型别名\",\"t\":[\"// type用于定义类型别名(type alias) type IDType = string | number | boolean type PointType = { x: number y: number z?: number } function printId(id: IDType) { } function printPoint(point: PointType) { } \"]},\"415\":{\"h\":\"类型断言\",\"t\":[\"// <img id=\\\"why\\\"/> // 1.类型断言 as const el = document.getElementById(\\\"why\\\") as HTMLImageElement el.src = \\\"url地址\\\" // 2.另外案例: Person是Student的父类 class Person { } class Student extends Person { studying() { } } function sayHello(p: Person) { (p as Student).studying() } const stu = new Student() sayHello(stu) // 3.了解: as any/unknown const message = \\\"Hello World\\\" // const num: number = (message as unknown) as number \"]},\"416\":{\"h\":\"非空类型断言\",\"t\":[\"// message? -> undefined | string function printMessageLength(message?: string) { // if (message) { // console.log(message.length) // } // vue3源码 console.log(message!.length) } printMessageLength(\\\"aaaa\\\") printMessageLength(\\\"hello world\\\") \"]},\"417\":{\"h\":\"可选链的使用\",\"t\":[\"type Person = { name: string friend?: { name: string age?: number, girlFriend?: { name: string } } } const info: Person = { name: \\\"why\\\", friend: { name: \\\"kobe\\\", girlFriend: { name: \\\"lily\\\" } } } // 另外一个文件中 console.log(info.name) // console.log(info.friend!.name) console.log(info.friend?.name) console.log(info.friend?.age) console.log(info.friend?.girlFriend?.name) // if (info.friend) { // console.log(info.friend.name) // if (info.friend.age) { // console.log(info.friend.age) // } // } \"]},\"418\":{\"h\":\"运算符\"},\"419\":{\"h\":\"！！运算符\",\"t\":[\"const message = \\\"Hello World\\\" // const flag = Boolean(message) // console.log(flag) const flag = !!message console.log(flag) \"]},\"420\":{\"h\":\"？？运算符\",\"t\":[\"let message: string|null = \\\"Hello World\\\" // 类似三目运算符 const content = message ?? \\\"你好啊, 李银河\\\" // const content = message ? message: \\\"你好啊, 李银河\\\" console.log(content) \"]},\"421\":{\"h\":\"字面量\"},\"422\":{\"h\":\"字面量类型\",\"t\":[\" // \\\"Hello World\\\"也是可以作为类型的, 叫做字面量类型 const message: \\\"Hello World\\\" = \\\"Hello World\\\" // let num: 123 = 123 // num = 321 // 字面量类型的意义, 就是必须结合联合类型 type Alignment = 'left' | 'right' | 'center' let align: Alignment = 'left' align = 'right' align = 'center' // align = 'hehehehe' export {} \"]},\"423\":{\"h\":\"字面量推理\",\"t\":[\"// const info = { // name: \\\"why\\\", // age: 18 // } // info.name = \\\"kobe\\\" // type Method = 'GET' | 'POST' function request(url: string, method: Method) {} type Request = { url: string, method: Method } // const options1 :Request = { // url: \\\"https://www.coderwhy.org/abc\\\", // method: \\\"POST\\\" // } // as const字面量推理 const options = { url: \\\"https://www.coderwhy.org/abc\\\", method: \\\"POST\\\" } as const // String类型断言为字面量类型 // request(options.url, options.method as Method) request(options.url, options.method) export {} \"]},\"424\":{\"h\":\"类型缩小\",\"t\":[\"// 1.typeof的类型缩小 type IDType = number | string function printID(id: IDType) { console.log(id) if (typeof id === 'string') { console.log(id.toUpperCase()) } else { console.log(id) } } // 2.\\b平等的类型缩小(=== == !== !=/switch) type Direction = \\\"left\\\" | \\\"right\\\" | \\\"top\\\" | \\\"bottom\\\" function printDirection(direction: Direction) { // 1.if判断 // if (direction === 'left') { // console.log(direction) // } else if () // 2.switch判断 // switch (direction) { // case 'left': // console.log(direction) // break; // case ... // } } // 3.instanceof(实例对象) function printTime(time: string | Date) { if (time instanceof Date) { console.log(time.toUTCString()) } else { console.log(time) } } class Student { studying() {} } class Teacher { teaching() {} } function work(p: Student | Teacher) { if (p instanceof Student) { p.studying() } else { p.teaching() } } const stu = new Student() work(stu) // 4. in(字面量) type Fish = { swimming: () => void } type Dog = { running: () => void } function walk(animal: Fish | Dog) { if ('swimming' in animal) { animal.swimming() } else { animal.running() } } const fish: Fish = { swimming() { console.log(\\\"swimming\\\") } } walk(fish) \"]},\"425\":{\"c\":[\"TypeScript\"]},\"426\":{\"h\":\"TypeScript案例\"},\"427\":{\"h\":\"Hello World\",\"t\":[\"let message: string = 'hello typescript' function foo(payload: string) { console.log(payload.length) } // foo(123) foo(\\\"aaa\\\") \"]},\"428\":{\"h\":\"简单案例\",\"t\":[\"// 当前foo函数, 在被其他地方调用时, 没有做任何的参数校验 // 1> 没有对类型进行校验 // 2> 没有对是否传入参数进行校验 function foo(message) { if (message) { console.log(message.length); } } foo(\\\"Hello World\\\"); foo(\\\"你好啊,李银河\\\"); foo(123) foo() // 永远执行不到 console.log(\\\"渲染界面成千上万行的JavaScript代码需要执行, 去渲染界面\\\") // 定义变量 let bar = \\\"abc\\\"; bar = 123; bar.length \"]},\"429\":{\"c\":[\"TypeScript\"]},\"430\":{\"h\":\"函数的使用\"},\"431\":{\"h\":\"函数的类型及使用\",\"t\":[\"// 1.函数作为参数时, 在参数中如何编写类型 function foo() {} type FooFnType = () => void function bar(fn: FooFnType) { fn() } bar(foo) // 2.定义常量时, 编写函数的类型 type AddFnType = (num1: number, num2: number) => number const add: AddFnType = (a1: number, a2: number) => { return a1 + a2 } \",\"function calc(n1: number, n2: number, fn: (num1: number, num2: number) => number) { return fn(n1, n2) } const result1 = calc(20, 30, function(a1, a2) { return a1 + a2 }) console.log(result1) const result2 = calc(20, 30, function(a1, a2) { return a1 * a2 }) console.log(result2) \"]},\"432\":{\"h\":\"可选类型\",\"t\":[\"// 可选类型是必须写在必选类型的后面的 // y -> undefined | number function foo(x: number, y?: number) { } foo(20, 30) foo(20) \"]},\"433\":{\"h\":\"参数的默认值\",\"t\":[\"// 必传参数 - 有默认值的参数 - 可选参数 function foo(y: number, x: number = 20) { console.log(x, y) } foo(30) \"]},\"434\":{\"h\":\"函数的剩余参数\",\"t\":[\"// function sum(num1: number, num2: number) { // return num1 + num2 // } function sum(initalNum: number, ...nums: number[]) { let total = initalNum for (const num of nums) { total += num } return total } console.log(sum(20, 30)) console.log(sum(20, 30, 40)) console.log(sum(20, 30, 40, 50)) \"]},\"435\":{\"h\":\"this的默认推导\",\"t\":[\"// this是可以被推导出来 info对象(TypeScript推导出来) const info = { name: \\\"why\\\", eating() { console.log(this.name + \\\" eating\\\") } } info.eating() export {} \"]},\"436\":{\"h\":\"this的不明确类型\",\"t\":[\"type ThisType = { name: string }; function eating(this: ThisType, message: string) { console.log(this.name + \\\" eating\\\", message); } const info = { name: \\\"why\\\", eating: eating, }; // 隐式绑定 info.eating(\\\"哈哈哈\\\"); // 显示绑定 eating.call({name: \\\"kobe\\\"}, \\\"呵呵呵\\\") eating.apply({name: \\\"james\\\"}, [\\\"嘿嘿嘿\\\"]) export {}; \"]},\"437\":{\"h\":\"函数重载\",\"t\":[\"// 函数的重载: 函数的名称相同, 但是参数不同的几个函数, 就是函数的重载 function add(num1: number, num2: number): number; // 没函数体 function add(num1: string, num2: string): string; // 实现函数 function add(num1: any, num2: any): any { if (typeof num1 === 'string' && typeof num2 === 'string') { return num1.length + num2.length } return num1 + num2 } const result = add(20, 30) const result2 = add(\\\"abc\\\", \\\"cba\\\") console.log(result) console.log(result2) // 在函数的重载中, 实现函数是不能直接被调用的 // add({name: \\\"why\\\"}, {age: 18}) export {} \"]},\"438\":{\"c\":[\"TypeScript\"]},\"439\":{\"h\":\"泛型的使用\"},\"440\":{\"h\":\"认识泛型\",\"t\":[\"// 类型的参数化 // 在定义这个函数时, 我不决定这些参数的类型 // 而是让调用者以参数的形式告知,我这里的函数参数应该是什么类型 function sum<Type>(num: Type): Type { return num } // 1.调用方式一: 明确的传入类型 sum<number>(20) sum<{name: string}>({name: \\\"why\\\"}) sum<any[]>([\\\"abc\\\"]) // 2.调用方式二: 类型推到 sum(50) sum(\\\"abc\\\") \"]},\"441\":{\"h\":\"泛型接受类型参数\",\"t\":[\"function foo<T, E, O>(arg1: T, arg2: E, arg3?: O, ...args: T[]) { } foo<number, string, boolean>(10, \\\"abc\\\", true) \"]},\"442\":{\"h\":\"泛型接口\",\"t\":[\"interface IPerson<T1 = string, T2 = number> { name: T1 age: T2 } const p: IPerson = { name: \\\"why\\\", age: 18 } \"]},\"443\":{\"h\":\"泛型类\",\"t\":[\"class Point<T> { x: T y: T z: T constructor(x: T, y: T, z: T) { this.x = x this.y = y this.z = y } } const p1 = new Point(\\\"1.33.2\\\", \\\"2.22.3\\\", \\\"4.22.1\\\") const p2 = new Point<string>(\\\"1.33.2\\\", \\\"2.22.3\\\", \\\"4.22.1\\\") const p3: Point<string> = new Point(\\\"1.33.2\\\", \\\"2.22.3\\\", \\\"4.22.1\\\") const names1: string[] = [\\\"abc\\\", \\\"cba\\\", \\\"nba\\\"] const names2: Array<string> = [\\\"abc\\\", \\\"cba\\\", \\\"nba\\\"] // 不推荐(react jsx <>) \"]},\"444\":{\"h\":\"类型约束\",\"t\":[\"interface ILength { length: number } // <T extends ILength>限制参数化类型 function getLength<T extends ILength>(arg: T) { return arg.length } getLength(\\\"abc\\\") getLength([\\\"abc\\\", \\\"cba\\\"]) getLength({length: 100}) \"]},\"445\":{\"h\":\"非空判断运算符\",\"t\":[\"const flag = \\\"\\\" ?? true console.log(flag) \"]},\"446\":{\"c\":[\"TypeScript\"]},\"447\":{\"h\":\"接口的使用\"},\"448\":{\"h\":\"声明对象类型\",\"t\":[\"// 通过类型(type)别名来声明对象类型 // type InfoType = {name: string, age: number} // 另外一种方式声明对象类型: 接口interface // 在其中可以定义可选类型 // 也可以定义只读属性 interface IInfoType { readonly name: string age: number friend?: { name: string } } const info: IInfoType = { name: \\\"why\\\", age: 18, friend: { name: \\\"kobe\\\" } } console.log(info.friend?.name) console.log(info.name) // info.name = \\\"123\\\" info.age = 20 \"]},\"449\":{\"h\":\"索引类型\",\"t\":[\"// 通过interface来定义索引类型 interface IndexLanguage { [index: number]: string } const frontLanguage: IndexLanguage = { 0: \\\"HTML\\\", 1: \\\"CSS\\\", 2: \\\"JavaScript\\\", 3: \\\"Vue\\\" } interface ILanguageYear { [name: string]: number } const languageYear: ILanguageYear = { \\\"C\\\": 1972, \\\"Java\\\": 1995, \\\"JavaScript\\\": 1996, \\\"TypeScript\\\": 2014 } \"]},\"450\":{\"h\":\"函数类型\",\"t\":[\"// type CalcFn = (n1: number, n2: number) => number // 可调用的接口 interface CalcFn { (n1: number, n2: number): number } function calc(num1: number, num2: number, calcFn: CalcFn) { return calcFn(num1, num2) } const add: CalcFn = (num1, num2) => { return num1 + num2 } calc(20, 30, add) \"]},\"451\":{\"h\":\"接口的继承\",\"t\":[\"interface ISwim { swimming: () => void } interface IFly { flying: () => void } interface IAction extends ISwim, IFly { } const action: IAction = { swimming() { }, flying() { } } \"]},\"452\":{\"h\":\"交叉类型\",\"t\":[\"// 一种组合类型的方式: 联合类型 type WhyType = number | string type Direction = \\\"left\\\" | \\\"right\\\" | \\\"center\\\" // 另一种组件类型的方式: 交叉类型 type WType = number & string interface ISwim { swimming: () => void } interface IFly { flying: () => void } type MyType1 = ISwim | IFly type MyType2 = ISwim & IFly const obj1: MyType1 = { flying() { } } const obj2: MyType2 = { swimming() { }, flying() { } } export {} \"]},\"453\":{\"h\":\"接口的实现\",\"t\":[\"interface ISwim { swimming: () => void } interface IEat { eating: () => void } // 类实现接口 class Animal { } // 继承: 只能实现单继承 // 实现: 实现接口, 类可以实现多个接口 class Fish extends Animal implements ISwim, IEat { swimming() { console.log(\\\"Fish Swmming\\\") } eating() { console.log(\\\"Fish Eating\\\") } } class Person implements ISwim { swimming() { console.log(\\\"Person Swimming\\\") } } // 编写一些公共的API: 面向接口编程 function swimAction(swimable: ISwim) { swimable.swimming() } // 1.所有实现了接口的类对应的对象, 都是可以传入 swimAction(new Fish()) swimAction(new Person()) swimAction({swimming: function() {}}) \"]},\"454\":{\"h\":\"interface和type的区别\",\"t\":[\"// 用于扩展 // interface IFoo { // name: string // } // interface IFoo { // age: number // } // const foo: IFoo = { // name: \\\"why\\\", // age: 18 // } // document.getElementById(\\\"app\\\") as HTMLDivElement // window.addEventListener // interface Window { // age: number // } // window.age = 19 // console.log(window.age) // type IBar = { // name: string // age: number // } // type IBar = { // } // 建议使用interface interface IPerson { } \"]},\"455\":{\"h\":\"字面量赋值\",\"t\":[\"interface IPerson { name: string age: number height: number } // const p: IPerson ={ // name: \\\"why\\\", // age: 18, // height: 1.88, // // 这样会报错 // address: \\\"广州市\\\" // } // const info = { // name: \\\"why\\\", // age: 18, // height: 1.88, // address: \\\"广州市\\\" // } // // freshness擦除 // const p: IPerson = info // console.log(info) // console.log(p) function printInfo(person: IPerson) { console.log(person) } // 代码会报错 // printInfo({ // name: \\\"why\\\", // age: 18, // height: 1.88, // address: \\\"广州市\\\" // }) const info = { name: \\\"why\\\", age: 18, height: 1.88, address: \\\"广州市\\\" } printInfo(info) export {} \"]},\"456\":{\"h\":\"枚举类型的使用\",\"t\":[\"// type Direction = \\\"left\\\" | \\\"Right\\\" | \\\"Top\\\" | \\\"Bottom\\\" enum Direction { LEFT, RIGHT, TOP, BOTTOM } function turnDirection(direction: Direction) { switch (direction) { case Direction.LEFT: console.log(\\\"改变角色的方向向左\\\") break; case Direction.RIGHT: console.log(\\\"改变角色的方向向右\\\") break; case Direction.TOP: console.log(\\\"改变角色的方向向上\\\") break; case Direction.BOTTOM: console.log(\\\"改变角色的方向向下\\\") break; default: // 穷举所有类型完后才会 const foo: never = direction; break; } } turnDirection(Direction.LEFT) turnDirection(Direction.RIGHT) turnDirection(Direction.TOP) turnDirection(Direction.BOTTOM) \"]},\"457\":{\"h\":\"枚举类型的值\",\"t\":[\"// type Direction = \\\"left\\\" | \\\"Right\\\" | \\\"Top\\\" | \\\"Bottom\\\" enum Direction { LEFT = \\\"LEFT\\\", RIGHT = \\\"RIGHT\\\", TOP = \\\"TOP\\\", BOTTOM = \\\"BOTTOM\\\" } let name: string = \\\"abc\\\" let d: Direction = Direction.BOTTOM function turnDirection(direction: Direction) { console.log(direction) switch (direction) { case Direction.LEFT: console.log(\\\"改变角色的方向向左\\\") break; case Direction.RIGHT: console.log(\\\"改变角色的方向向右\\\") break; case Direction.TOP: console.log(\\\"改变角色的方向向上\\\") break; case Direction.BOTTOM: console.log(\\\"改变角色的方向向下\\\") break; default: const foo: never = direction; break; } } turnDirection(Direction.LEFT) turnDirection(Direction.RIGHT) turnDirection(Direction.TOP) turnDirection(Direction.BOTTOM) export {} \"]},\"458\":{\"c\":[\"TypeScript\"]},\"459\":{\"h\":\"变量的定义\"},\"460\":{\"h\":\"变量的定义格式\",\"t\":[\"// 1.类型注解 // 2.var/let/const // 3.string和String的区别 // 4.类型推导 var name: string = \\\"why\\\" let age: number = 18 const height: number = 1.88 // string: TypeScript中的字符串类型 // String: JavaScript的字符串包装类的类型 const message: string = \\\"Hello World\\\" // 默认情况下进行赋值时, 会将赋值的值的类型, 作为前面标识符的类型 // 这个过程称之为类型推导/推断 // foo没有添加类型注解 let foo = \\\"foo\\\" // foo = 123 export {} \"]},\"461\":{\"h\":\"number类型\",\"t\":[\"let num: number = 123 num = 222 // num = \\\"123\\\" // 十进制 let num1: number = 100 // 二进制 let num2: number = 0b100 // 八进制 let num3: number = 0o100 // 十六进制 let num4: number = 0x100 console.log(num1, num2, num3, num4) \"]},\"462\":{\"h\":\"boolean类型\",\"t\":[\"let flag: boolean = true flag = 20 > 30 \"]},\"463\":{\"h\":\"string类型\",\"t\":[\"let message1: string = 'hello world' let message2: string = \\\"Hello World\\\" // 个人习惯: 默认情况下, 如果可以推导出对应的标识符的类型时, 一般情况下是不加 const name = \\\"why\\\" const age = 18 const height = 1.88 let message3 = `name:${name} age:${age} height:${height}` console.log(message3) export {} \"]},\"464\":{\"h\":\"array类型\",\"t\":[\"// 确定一个事实: names是一个数组类型, 但是数组中存放的是什么类型的元素呢? // 不好的习惯: 一个数组中在TypeScript开发中, 最好存放的数据类型是固定的(string) // 类型注解: type annotation const names1: Array<string> = [] // 不推荐(react jsx中是有冲突 <div></div>) const names2: string[] = [] // 推荐 // 在数组中存放不同的类型是不好的习惯 // names.push(\\\"abc\\\") // // names.push(123) \"]},\"465\":{\"h\":\"object类型\",\"t\":[\"const info = { name: \\\"why\\\", age: 18 } console.log(info.name) \"]},\"466\":{\"h\":\"null和undefined类型\",\"t\":[\"let n1: null = null let n2: undefined = undefined \"]},\"467\":{\"h\":\"symbol类型\",\"t\":[\"const title1 = Symbol(\\\"title\\\") const title2 = Symbol('title') const info = { [title1]: \\\"程序员\\\", [title2]: \\\"老师\\\" } export {} \"]},\"468\":{\"c\":[\"TypeScript\"]},\"469\":{\"h\":\"TarBar组件案例\"},\"470\":{\"h\":\"第1步（简单实现）\",\"t\":[\"// App.vue <template> <div id=\\\"app\\\"> <div id=\\\"tab-bar\\\"> <div class=\\\"tab-bar-item\\\"> <img src=\\\"../../assets/img/tabbar/home.svg\\\" alt=\\\"\\\"> <div>主页</div> </div> <div class=\\\"tab-bar-item\\\"> <img src=\\\"../../assets/img/tabbar/category.svg\\\" alt=\\\"\\\"> <div>分类</div> </div> <div class=\\\"tab-bar-item\\\"> <img src=\\\"../../assets/img/tabbar/shopcart.svg\\\" alt=\\\"\\\"> <div>购物车</div> </div> <div class=\\\"tab-bar-item\\\"> <img src=\\\"../../assets/img/tabbar/profile.svg\\\" alt=\\\"\\\"> <div>我的</div> </div> </div> </div> </template> <script> export default { name: \\\"App\\\", components: { }, }; </script> <style> // margin: 0, padding: 0 @import \\\"./assets/css/reset.css\\\"; #tab-bar { display: flex; background-color: #f6f6f6; /* 置于页面最低端 */ position: fixed; left: 0; right: 0; bottom: 0; /* 阴影 */ box-shadow: 0 -1px 1px rgba(100, 100, 100, 0.2); } .tab-bar-item { flex: 1; text-align: center; height: 49px; } .tab-bar-item img { width: 24px; height: 24px; } </style> \"]},\"471\":{\"h\":\"第2步（封装TabBar组件,包含TarBarItem组件）\",\"t\":[\"// TabBar.vue <template> <div id=\\\"tab-bar\\\"> <div class=\\\"tab-bar-item\\\"> <img src=\\\"../../assets/img/tabbar/home.svg\\\" alt=\\\"\\\"> <div>主页</div> </div> <div class=\\\"tab-bar-item\\\"> <img src=\\\"../../assets/img/tabbar/category.svg\\\" alt=\\\"\\\"> <div>分类</div> </div> <div class=\\\"tab-bar-item\\\"> <img src=\\\"../../assets/img/tabbar/shopcart.svg\\\" alt=\\\"\\\"> <div>购物车</div> </div> <div class=\\\"tab-bar-item\\\"> <img src=\\\"../../assets/img/tabbar/profile.svg\\\" alt=\\\"\\\"> <div>我的</div> </div> </div> </template> <script> export default { name: \\\"TabBar\\\", }; </script> <style scoped> #tab-bar { display: flex; background-color: #f6f6f6; /* 置于页面最低端 */ position: fixed; left: 0; right: 0; bottom: 0; /* 阴影 */ box-shadow: 0 -1px 1px rgba(100, 100, 100, 0.2); } .tab-bar-item { flex: 1; text-align: center; height: 49px; } .tab-bar-item img { width: 24px; height: 24px; } </style> \",\"// App.vue <template> <div id=\\\"app\\\"> <tab-bar></tab-bar> </div> </template> <script> import TabBar from './components/tabbar/TabBar.vue'; export default { name: \\\"App\\\", components: { TabBar, }, }; </script> <style> @import \\\"./assets/css/reset.css\\\"; </style> \"]},\"472\":{\"h\":\"第3步（使用插槽封装TabBarItem组件和TabBar组件）\",\"t\":[\"// TabBarItem.vue <template> <div class=\\\"tab-bar-item\\\"> // <img src=\\\"../../assets/img/tabbar/home.svg\\\" alt=\\\"\\\"> // <div>主页</div> <slot name=\\\"item-icon\\\"></slot> <slot name=\\\"item-text\\\"></slot> </div> </template> <script> export default({ name: \\\"TabBarItem\\\" }) </script> <style scoped> .tab-bar-item { flex: 1; text-align: center; height: 49px; font-size: 14px; } .tab-bar-item img { width: 24px; height: 24px; margin-top: 3px; vertical-align: center; } </style> \",\"// TabBar.vue <template> <div class=\\\"tab-bar\\\"> <slot></slot> </div> </template> <script> export default { name: \\\"TabBar\\\", }; </script> <style scoped> #tab-bar { display: flex; background-color: #f6f6f6; /* 置于页面最低端 */ position: fixed; left: 0; right: 0; bottom: 0; /* 阴影 */ box-shadow: 0 -1px 1px rgba(100, 100, 100, 0.2); } </style> \",\"// App.vue <template> <div id=\\\"app\\\"> <tab-bar> <tab-bar-item> // 具名插槽 <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/home.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">主页</div> </tab-bar-item> <tab-bar-item> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/category.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">分类</div> </tab-bar-item> <tab-bar-item> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/shopcart.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">购物车</div> </tab-bar-item> <tab-bar-item> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/profile.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">我的</div> </tab-bar-item> </tab-bar> </div> </template> <script> import TabBar from './components/tabbar/TabBar.vue'; import TabBarItem from './components/tabbar/TabBarItem.vue'; export default { name: \\\"App\\\", components: { TabBar, TabBarItem }, }; </script> <style> @import \\\"./assets/css/reset.css\\\"; </style> \"]},\"473\":{\"h\":\"第4步（实现路由功能）\",\"t\":[\"创建组件，配置路由映射\",\"// router.index.js import Vue from 'vue' import VueRouter from 'vue-router' const Home = () => import('../views/home/Home.vue') const Category =() => import('../views/category/Category.vue') const Cart =() => import('../views/cart/Cart.vue') const Profile =() => import('../views/profile/Profile.vue') Vue.use(VueRouter) const routes = [ { path: '/', redirect: '/home' }, { path: '/home', component: Home }, { path: '/category', component: Category }, { path: '/cart', component: Cart }, { path: '/profile', component: Profile } ] const router = new VueRouter ({ routes, mode: 'history' }) export default router \",\"// TabBarItem.vue <template> <div class=\\\"tab-bar-item\\\" @click=\\\"itemClick\\\"> <slot name=\\\"item-icon\\\"></slot> <slot name=\\\"item-text\\\"></slot> </div> </template> <script> export default({ name: 'TabBarItem', // 父传子（传路径） props: { path: String }, methods: { itemClick() { this.$router.replace(this.path).catch(err => err) } } }) </script> \",\"// App.vue <template> <div id=\\\"app\\\"> <tab-bar> <tab-bar-item path=\\\"/home\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/home.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">主页</div> </tab-bar-item> <tab-bar-item path=\\\"/category\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/category.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">分类</div> </tab-bar-item> <tab-bar-item path=\\\"/cart\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/shopcart.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">购物车</div> </tab-bar-item> <tab-bar-item path=\\\"/profile\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/profile.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">我的</div> </tab-bar-item> </tab-bar> </div> </template> <script> import TabBar from './components/tabbar/TabBar.vue'; import TabBarItem from './components/tabbar/TabBarItem.vue'; export default { name: \\\"App\\\", components: { TabBar, TabBarItem }, }; </script> <style> @import \\\"./assets/css/reset.css\\\"; </style> \"]},\"474\":{\"h\":\"第5步（实现激活颜色变化功能）\",\"t\":[\"// App.vue <template> <div id=\\\"app\\\"> <tab-bar> <tab-bar-item path=\\\"/home\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/home.svg\\\" alt=\\\"\\\"> <!-- 增添激活样式 --> <img slot=\\\"item-icon-active\\\" src=\\\"./assets/img/tabbar/home_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">主页</div> </tab-bar-item> <tab-bar-item path=\\\"/category\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/category.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"./assets/img/tabbar/category_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">分类</div> </tab-bar-item> <tab-bar-item path=\\\"/cart\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/shopcart.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"./assets/img/tabbar/shopcart_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">购物车</div> </tab-bar-item> <tab-bar-item path=\\\"/profile\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/profile.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"./assets/img/tabbar/profile_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">我的</div> </tab-bar-item> </tab-bar> </div> </template> <script> import TabBar from './components/tabbar/TabBar.vue'; import TabBarItem from './components/tabbar/TabBarItem.vue'; export default { name: \\\"App\\\", components: { TabBar, TabBarItem }, }; </script> <style> @import \\\"./assets/css/reset.css\\\"; </style> \",\"// TabBarItem.vue <template> <div class=\\\"tab-bar-item\\\" @click=\\\"itemClick\\\"> <div v-if=\\\"!isActive\\\"><slot name=\\\"item-icon\\\"></slot></div> <div v-else><slot name=\\\"item-icon-active\\\"></slot></div> <div :class=\\\"{active: isActive}\\\"><slot name=\\\"item-text\\\"></slot></div> </div> </template> <script> export default({ name: 'TabBarItem', // 父传子（传路径） props: { path: String }, data() { return { // isActive: false } }, computed: { isActive() { // return this.$route.path.indexOf(this.path) !== -1 return this.$route.path === this.path } }, methods: { itemClick() { this.$router.replace(this.path).catch(err => err) } } }) </script> <style scoped> .tab-bar-item { flex: 1; text-align: center; height: 49px; font-size: 14px; } .tab-bar-item img { width: 24px; height: 24px; margin-top: 3px; vertical-align: center; } .active { color:red } </style> \"]},\"475\":{\"h\":\"第6步（动态传入激活颜色）\",\"t\":[\"<// App.vue <template> <div id=\\\"app\\\"> <tab-bar> // 从<tab-bar-item>父组件传入一个activeColor属性 <tab-bar-item path=\\\"/home\\\" activeColor=\\\"pink\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/home.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"./assets/img/tabbar/home_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">主页</div> </tab-bar-item> <tab-bar-item path=\\\"/category\\\" activeColor=\\\"blue\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/category.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"./assets/img/tabbar/category_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">分类</div> </tab-bar-item> <tab-bar-item path=\\\"/cart\\\" activeColor=\\\"green\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/shopcart.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"./assets/img/tabbar/shopcart_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">购物车</div> </tab-bar-item> <tab-bar-item path=\\\"/profile\\\"> <img slot=\\\"item-icon\\\" src=\\\"./assets/img/tabbar/profile.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"./assets/img/tabbar/profile_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">我的</div> </tab-bar-item> </tab-bar> </div> </template> <script> import TabBar from './components/tabbar/TabBar.vue'; import TabBarItem from './components/tabbar/TabBarItem.vue'; export default { name: \\\"App\\\", components: { TabBar, TabBarItem }, }; </script> <style> @import \\\"./assets/css/reset.css\\\"; </style> \",\"<template> <div class=\\\"tab-bar-item\\\" @click=\\\"itemClick\\\"> <div v-if=\\\"!isActive\\\"><slot name=\\\"item-icon\\\"></slot></div> <div v-else><slot name=\\\"item-icon-active\\\"></slot></div> <div :style=\\\"activeStyle\\\"><slot name=\\\"item-text\\\"></slot></div> </div> </template> <script> export default({ name: 'TabBarItem', // 父传子（传路径） props: { path: String, // 接收父组件传入的activeColor activeColor: { type: String, default: 'red' } }, data() { return { } }, computed: { isActive() { // return this.$route.path.indexOf(this.path) !== -1 return this.$route.path === this.path }, activeStyle() { return this.isActive ? {color: this.activeColor} : {} } }, methods: { itemClick() { this.$router.replace(this.path).catch(err => err) } } }) </script> <style scoped> .tab-bar-item { flex: 1; text-align: center; height: 49px; font-size: 14px; } .tab-bar-item img { width: 24px; height: 24px; margin-top: 3px; vertical-align: center; } .active { color:red } </style> \"]},\"476\":{\"h\":\"第7步（最终版本）\",\"t\":[\"将App.vue中关于TabBar的组件信息全部封装到MainTabBar.vue中\"]},\"477\":{\"h\":\"App.vue\",\"t\":[\"// App.vue <template> <div id=\\\"app\\\"> <main-tab-bar/> </div> </template> <script> import MainTabBar from \\\"./components/mainTabbar/MainTabBar.vue\\\"; export default { name: \\\"App\\\", components: { MainTabBar, }, }; </script> <style> @import \\\"./assets/css/reset.css\\\"; </style> \"]},\"478\":{\"h\":\"MainTabBar.vue\",\"t\":[\"// MainTabBar.vue <template> <tab-bar> <tab-bar-item path=\\\"/home\\\" activeColor=\\\"red\\\"> // cli4可以通过@（@=src）给路径起别名（@/assets/..） <img slot=\\\"item-icon\\\" src=\\\"@/assets/img/tabbar/home.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"@/assets/img/tabbar/home_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">主页</div> </tab-bar-item> <tab-bar-item path=\\\"/category\\\" activeColor=\\\"red\\\"> <img slot=\\\"item-icon\\\" src=\\\"@/assets/img/tabbar/category.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"@/assets/img/tabbar/category_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">分类</div> </tab-bar-item> <tab-bar-item path=\\\"/cart\\\" activeColor=\\\"red\\\"> <img slot=\\\"item-icon\\\" src=\\\"@/assets/img/tabbar/shopcart.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"@/assets/img/tabbar/shopcart_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">购物车</div> </tab-bar-item> <tab-bar-item path=\\\"/profile\\\"> <img slot=\\\"item-icon\\\" src=\\\"@/assets/img/tabbar/profile.svg\\\" alt=\\\"\\\"> <img slot=\\\"item-icon-active\\\" src=\\\"@/assets/img/tabbar/profile_active.svg\\\" alt=\\\"\\\"> <div slot=\\\"item-text\\\">我的</div> </tab-bar-item> </tab-bar> </template> <script> import TabBar from '@/components/tabbar/TabBar.vue'; import TabBarItem from '@/components/tabbar/TabBarItem.vue'; export default { name: 'MainTabBar', components: { TabBar, TabBarItem } } </script> \"]},\"479\":{\"h\":\"TabBar.vue\",\"t\":[\"// TabBar.vue <template> <div id=\\\"tab-bar\\\"> <slot></slot> </div> </template> <script> export default { name: \\\"TabBar\\\", }; </script> <style scoped> #tab-bar { display: flex; background-color: #f6f6f6; /* 置于页面最低端 */ position: fixed; left: 0; right: 0; bottom: 0; /* 阴影 */ box-shadow: 0 -1px 1px rgba(100, 100, 100, 0.2); } </style> \"]},\"480\":{\"h\":\"TabBarItem.vue\",\"t\":[\"// TabBarItem.vue <template> <div class=\\\"tab-bar-item\\\" @click=\\\"itemClick\\\"> <div v-if=\\\"!isActive\\\"><slot name=\\\"item-icon\\\"></slot></div> <div v-else><slot name=\\\"item-icon-active\\\"></slot></div> <div :style=\\\"activeStyle\\\"><slot name=\\\"item-text\\\"></slot></div> </div> </template> <script> export default({ name: 'TabBarItem', // 父传子（传路径） props: { path: String, activeColor: { type: String, default: 'red' } }, data() { return { } }, computed: { isActive() { // return this.$route.path.indexOf(this.path) !== -1 return this.$route.path === this.path }, activeStyle() { return this.isActive ? {color: this.activeColor} : {} } }, methods: { itemClick() { this.$router.replace(this.path).catch(err => err) } } }) </script> <style scoped> .tab-bar-item { flex: 1; text-align: center; height: 49px; font-size: 14px; } .tab-bar-item img { width: 24px; height: 24px; margin-top: 3px; vertical-align: center; } .active { color:red } </style> \"]},\"481\":{\"h\":\"router.index.js\",\"t\":[\"// router.index.js import Vue from 'vue' import VueRouter from 'vue-router' const Home = () => import('../views/home/Home.vue') const Category =() => import('../views/category/Category.vue') const Cart =() => import('../views/cart/Cart.vue') const Profile =() => import('../views/profile/Profile.vue') Vue.use(VueRouter) const routes = [ { path: '/', redirect: '/home' }, { path: '/home', component: Home }, { path: '/category', component: Category }, { path: '/cart', component: Cart }, { path: '/profile', component: Profile } ] const router = new VueRouter ({ routes, mode: 'history' }) export default router \"]},\"482\":{\"c\":[\"Vue2\"]},\"483\":{\"h\":\"组件化\"},\"484\":{\"h\":\"注册组件基本步骤\",\"t\":[\"调用Vue.extend()方法创建组件构造器\",\"调用Vue.component()方法注册组件\",\"在Vue实例的作用范围内使用组件<my-cpn></my-cpn>\",\" // Vue1.0 <div id=\\\"app\\\"> <!--3.使用组件--> <my-cpn></my-cpn> // 放入实例挂载 <my-cpn></my-cpn> <my-cpn></my-cpn> <my-cpn></my-cpn> </div> // 1.创建组件构造器对象 const cpnC = Vue.extend({ template: ` <div> <h2>我是标题</h2> <p>我是内容, 哈哈哈哈</p> <p>我是内容, 呵呵呵呵</p> </div>` }) // 2.注册组件（全局组件，意味着可以在多个Vue的实例下面使用） Vue.component('my-cpn', cpnC) const app = new Vue({ el: '#app', components: { my-cpn: cpnC // id为app实例下的局部组件 } }) \",\"Vue2.0注册全局组件语法糖\",\" // 直接注册组件（包含了Vue.extend的步骤） Vue.component('cpn1', { template: ` <div> <h2>我是标题1</h2> <p>我是内容, 哈哈哈哈</p> </div> ` }) \",\"Vue2.0注册局部组件语法糖\",\" //const cpn = { // template: `<div> ... </div>`, // data() { return {} }, // methods: {} //} const app = new Vue({ el: '#app', components: { 'cpn2': { // 'cpn': cpn template: ` <div> <h2>我是标题2</h2> <p>我是内容, 呵呵呵</p> </div> ` } } }) \"]},\"485\":{\"h\":\"组件模板分离写法\",\"t\":[\"script\",\" // 1.script标签, 注意:类型必须是text/x-template <script type=\\\"text/x-template\\\" id=\\\"cpn\\\"> <div> // ... </div> </script> \",\"template\",\" // 2.template标签 <template id = \\\"cpn\\\"> <div> // ... </div> </template> // 1.全局组件写法 Vue.component('cpn', { template: '#cpn' }) // 2.局部组件写法 new Vue({ // ... components: { 'cpn':{ template: '#cpn' } }) \"]},\"486\":{\"h\":\"组件数据存放\",\"t\":[\"注意：\",\"子组件不能直接访问父组件（组件变量访问不到Vue实例的数据）\",\"组件中的data必须是一个函数（面试题： 正因为data是函数,函数在每次执行时都会在栈空间创建新的变量，所以每个组件实例对象都有自己的data数据, 互不影响，每次函数return的都是一个新的对象；若是对象的话就会返回同一个内存地址，产生相互影响）\",\" // 注册一个全局组件 Vue.component('cpn', { template: '#cpn', // 组件data不能是一个对象，必须是一个函数且返回一个对象 // data: { // 不能这么写 // title: 'abc' // }, data() { return { title: 'abc' } } }) \"]},\"487\":{\"h\":\"父子组件通信\",\"t\":[\"父传子：props\",\"注意：在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写\",\" <div id=\\\"app\\\"> <cpn :cmessage=\\\"message\\\" :cmovies=\\\"movies\\\"></cpn> </div> <template id=\\\"cpn\\\"> // 每个组件必须只有一个根元素 <div> <li v-for=\\\"item in cmovies\\\">{{item}}</li> <h2>{{cmessage}}</h2> </div> </template> const cpn = { template: '#cpn', // props: ['cmovies', 'cmessage'], props: { // 1.类型限制 // cmovies: Array, // cmessage: String, // 2.提供一些默认值default, 以及必传值required cmessage: { type: String, default: 'aaaaaaaa', required: true }, // 类型是对象或者数组时, 默认值必须是一个函数 cmovies: { type: Array, default() { return [] } } }, } const app = new Vue({ el: '#app', data: { message: '你好啊', movies: ['海王', '海贼王', '海尔兄弟'] }, components: { cpn } }) \",\"子传父：$emit\",\" // 父组件模板 <div id=\\\"app\\\"> // 不能写驼峰@itemClick，父组件cpnClick方法接收子组件发射过来的item-click自定义事件 // 这里cpnClick没有参数会默认把item传过去，而不是event事件 <cpn @item-click=\\\"cpnClick\\\"></cpn> </div> // 子组件模板 <template id=\\\"cpn\\\"> <div> <button v-for=\\\"item in categories\\\" @click=\\\"btnClick(item)\\\"> {{item.name}} </button> </div> </template> // 1.子组件 const cpn = { template: '#cpn', data() { return { categories: [ {id: 'aaa', name: '热门推荐'}, {id: 'bbb', name: '手机数码'}, {id: 'ccc', name: '家用家电'}, {id: 'ddd', name: '电脑办公'}, ] } }, methods: { btnClick(item) { // 发射事件: 自定义事件(将点击的按钮事件发送给父组件) this.$emit('item-click', item) } } } // 2.父组件 const app = new Vue({ el: '#app', data: { message: '你好啊' }, components: { cpn }, methods: { cpnClick(item) { console.log('cpnClick', item); } } }) \"]},\"488\":{\"h\":\"父子组件访问\",\"t\":[\"父访问子：$children$refs(常用)\",\"$children的缺陷：\",\"通过$children访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值。\",\"但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至还可能会发生变化。解决方法：依赖注入provide 和 inject。\",\"示例：provide() { return { getMap: this.getMap } } inject: [ 'getMap' ]``$refs的使用：\",\"用于明确获取其中的一个特定的组件。\",\"$refs和ref指令通常是一起使用的。\",\"首先，我们通过ref给某一个子组件绑定一个特定的ID。\",\"其次，通过this.$refs.ID就可以访问到该组件了。\",\" <child-cpn></child-cpn> <child-cpn ref=\\\"cpn\\\"></child-cpn> <child-cpn></child-cpn> // 父methods methods: { showRefsCpn() { // 打印第二个children-cpn组件的name console.log(this.$children[1].name) // 打印ref指定的children-cpn组件的name console.log(this.$refs.cpn.name) } }, components: { child-cpn: { template: '#child-cpn', data() { return { name: '我是子组件的name' } } } } \",\"子访问父：$parent$root\",\"new Vue({ el: '#app', data: { message: '你好啊' }, components: { cpn: { template: '#cpn', data() { return { name: '我是cpn组件的name' } }, components: { ccpn: { template: '#ccpn', methods: { btnClick() { // 1.访问父组件$parent console.log(this.$parent); console.log(this.$parent.name); // 2.访问根组件$root console.log(this.$root); console.log(this.$root.message); } }}} } }}) \"]},\"489\":{\"h\":\"动态组件\",\"t\":[\"通过使用保留的 <component> 元素，动态地绑定到它的 is 特性，可以实现动态组件\",\"<keep-alive> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。<keep-alive> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。\",\"https://v2.cn.vuejs.org/v2/guide/components-dynamic-async.html\",\"注意：\",\"所有的组件都继承Vue的源型（如Vue.prototype.shareObj=shareObj即所有的组件都可访问该变量）\"]},\"490\":{\"c\":[\"Vue2\"]},\"491\":{\"h\":\"slot插槽\"},\"492\":{\"h\":\"基本用法\",\"t\":[\" <div id=#app> <cpn><button>具有按钮功能的cpn个性化组件</button></cpn> <cpn><p>带有p标签的cpn个性化组件</p></cpn> <cpn></cpn> <cpn> <i>呵呵呵</i> <div>我是div元素</div> <p>我是p元素</p> </cpn> </div> <template id=\\\"cpn\\\"> <div> <span>我是cpn组件</span> <p>slot的基本使用</p> <slot></slot> <!-- 插槽默认带按钮（后备内容） --> <!-- <slot><button>按钮</button></slot> --> </div> </template> \"]},\"493\":{\"h\":\"具名插槽\",\"t\":[\"v-slot:→#（缩写）\",\"注意 ：v-slot只能添加在<template> 上 (只有一种例外情况)，这一点和已经废弃的 slot attribute 不同（slot可以用在<template>上也可以用在普通元素上）。\",\" <div id = \\\"app\\\"> <!-- 在中插槽指定位置插入 --> <!-- 2.6.0以下的写法 --> <cpn><span slot=\\\"center\\\">标题</span></cpn> <!-- 2.6.0以上的写法 --> <template v-slot:center> <cpn><span>标题</span></cpn> </template> </div> <template id=\\\"cpn\\\"> <div> <slot name=\\\"left\\\"><span>左插槽</span></slot> <slot name=\\\"center\\\"><span>中插槽</span></slot> <slot name=\\\"right\\\"><span>右插槽</span></slot> </div> </template> \"]},\"494\":{\"h\":\"编译作用域\",\"t\":[\"父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译。如：\",\" <div id=\\\"app\\\"> <cpn v-show=\\\"isShow\\\"></cpn> <!-- true --> <cpn v-for=\\\"item in names\\\"></cpn> </div> <template id=\\\"cpn\\\"> <div> <h2>我是子组件</h2> <button v-show=\\\"isShow\\\">按钮</button> <!-- false --> </div> </template> <script src=\\\"../js/vue.js\\\"></script> <script> const app = new Vue({ el: '#app', data: { isShow: true }, components: { cpn: { template: '#cpn', data() { return { isShow: false } } }, } }) </script> \"]},\"495\":{\"h\":\"作用域插槽\",\"t\":[\"父组件替换插槽的标签，但是内容由子组件来提供。\",\" <!-- 父组件 --> <cpn> <!-- 目的是获取子组件中的pLanguages数据内容 --> <!-- 不加slot-scope的话，访问不到子组件的pLanguages数据，因为编译作用域 --> <template slot-scope=\\\"slot\\\"> <span v-for=\\\"item in slot.data\\\"> - {{item}}</span> </template> </cpn> <template id=\\\"cpn\\\"> <div> <slot :data=\\\"pLanguages\\\"> <ul> <li v-for=\\\"item in pLanguages\\\">{{item}}</li> </ul> </slot> </div> </template> new Vue({ <!-- ... --> components: { cpn: { template: #cpn, data() { return { pLanguages: ['JavaScript', 'C++', 'Java', 'C#', 'Python', 'Go', 'Swift'] } } } } }) \"]},\"496\":{\"c\":[\"Vue2\"]},\"497\":{\"h\":\"Vue脚手架\"},\"498\":{\"h\":\"Vue CLI2\",\"t\":[\"初始化项目：vue init webpack my-project\",\"Vue CLI2初始化配置\",\"Vue CLI2项目结构\"]},\"499\":{\"h\":\"Vue CLI3\",\"t\":[\"初始化项目：vue create my-project\",\"Vue CLI3初始化配置\",\"Vue CLI3项目结构\",\"Runtime-Compiler 和 Runtime-only\",\"如何在开发中使用template，选择Runtime-Compiler。\",\"如何在开发中使用的是.vue文件夹开发，那么可以选择Runtime-only\",\"// 一下两者等价 // 这种情况需要编译器 new Vue({ el: '#app', components: { App }, template: '<App>' }) // 这种情况不需要 new Vue({ el: '#app', render: h => h(App) }) \"]},\"500\":{\"h\":\"Vue程序运行过程\",\"t\":[\"template → ast （Runtime-Compiler）→ render → vdom → 真实dom\",\"Vue程序运行过程\"]},\"501\":{\"c\":[\"Vue2\"]},\"502\":{\"h\":\"Vue-Router路由\"},\"503\":{\"h\":\"路由2种模式\",\"t\":[\"URL的hash路径：带#号，本质上是改变window.location的href属性。\",\"HTML5的history模式：不带#号，history.pushState()(可返回)、history.replaceState()(不可返回)、history.go(-1)、history.back()、history.forward()\"]},\"504\":{\"h\":\"安装\",\"t\":[\"官方文档\",\"npm install vue-router --save\"]},\"505\":{\"h\":\"vue-router框架\",\"t\":[\"Vue.user(VueRouter)：底层执行插件的install方法\",\"创建VueRouter对象\",\"挂载到Vue实例上\",\"import VueRouter from 'vue-router' import Vue from 'vue' // 1.通过Vue.use(插件), 安装插件 Vue.use(VueRouter) // 2.创建VueRouter对象 const routes = [ { path: xxx component: xxx }, { path: xxx component: xxx } ] const router = new VueRouter({ //routes: [ // ... //] // 配置路由和组件之间的应用关系 routes // 配置history模式，默认是hash模式 mode: 'history' }) // 3.将router对象传入到Vue实例 export default router // 4.Vue实例中挂载router // 实质：Vue.prototype.$router = router new Vue({ el: #app router }) \"]},\"506\":{\"h\":\"配置vue-router映射关系步骤\",\"t\":[\"第一步：创建路由组件\",\"import Home from '../components/Home' import About from '../components/About' \",\"第二步：在VueRouter对象中配置路由映射：组件和路径映射关系\",\"const routes = [ { // 重定向默认路径 path: '', redirect: /home }, { path: /home, component: Home }, { path: /about, component: About } ] \",\"第三步：在App.vue主页使用路由<router-link>和<router-view>\",\"<router-link>：vue-router中内置的组件，会被渲染成<a>标签\",\"<template> <div> <router-link to=\\\"/home\\\">主页</router-link> <router-link to=\\\"/about\\\">关于</router-link> // 页面渲染占位 <router-view></router-view> </div> </template> \"]},\"507\":{\"h\":\"细节处理\",\"t\":[\"默认路由\",\"const routes = [ { // 重定向默认路径 path: '', redirect: /home }, ... } \",\"路由模式\",\"const router = new VueRouter({ routes // 配置history模式，默认是hash模式 mode: 'history' }) \",\"router-link属性\",\"to：用于指定跳转的路径。\",\"tag：指定<router-link>之后渲染成什么组件，如button。\",\"replace：后退键返回不能返回到上一个页面中。\",\"active-class：当<router-link>对应的路由匹配成功时, 会自动给当前元素设置一个router-link-active的class。\",\"const router = new VueRouter({ ... linkActiveClass: 'active' }) \"]},\"508\":{\"h\":\"动态路由\",\"t\":[\"/user/:id：传递参数\",\"this.$route.params.id：js代码获得参数\",\"{{ $route.params.id }}：Mustache 获得参数\"]},\"509\":{\"h\":\"参数传递\",\"t\":[\"params类型：如 /router/123\",\"query 类型，如 /router?id=123\",\"// <router-link>传递参数 <router-link :to=\\\"{ path: '/router/' + 123, query: { name: 'Nevermore', age: 22 }}\\\" /> // JS代码传递参数 method() { this.$router.push({ path: '/router/' + 123, query: { name: 'Nevermore', age: 22 }}\\\" }) } \"]},\"510\":{\"h\":\"Route和Router区别\",\"t\":[\"$route是处于活跃状态的路由对象，可以获取name、path、query、params等（获取url传过来的参数this.$route.params.userId）\",\"$router是 VueRouter的实例对象，想要导航到不同URL，则使用$router.push方法（可以通过代码跳转路由）\",\"ButtonClick() { this.$router.push('/home') this.$router.replace('/home') } \"]},\"511\":{\"h\":\"路由懒加载\",\"t\":[\"组件被使用的时候，才加载\",\"原来：import Home from '../components/Home'\",\"懒加载：const Home = () ⇒ import(../components/Home)\"]},\"512\":{\"h\":\"嵌套路由\",\"t\":[\"children：[ ... ]\",\"// index.js { path: '/home', component: Home, children: [ { path: '', redirect: 'news' }, { path: 'news', component: HomeNews }, { path: 'message', component: HomeMessage } ] } // Home.vue <template> <div> <route-link to=\\\"/home/news\\\" tag=\\\"button\\\">新闻</route-link> <route-link to=\\\"/home/message\\\">消息</route-link> <router-view></router-view> </div> </template> \"]},\"513\":{\"h\":\"全局导航守卫\",\"t\":[\"router.beforeEach\",\"to：Route：即将要进入的目标的路由对象。\",\"from：Route：当前导航即将要离开的路由对象。\",\"next：Function：调用该方法后, 才能进入下一个钩子。 \",\"next()：进行下一个钩子函数。\",\"next(false)：中断当前导航。\",\"next('/')：若未登录，跳转到登录页面。\",\"next(error)：传入error，导航被终止并将该错误传递给router.onError()\",\"// index.js { path: '/home', component: Home, // 描述数据的数据 meta: { title: '首页' } } // 前置守卫 router.beforeEach((to, from, next) => { // 从from跳转到to document.title = to.matched[0].meta.title // next必须调用 next() }) // 后置钩子（钩子=回调） router.afterEach((to, from) => { console.log('-----') }) \"]},\"514\":{\"h\":\"路由独享守卫\",\"t\":[\"路由配置上定义beforeEnter 守卫。\"]},\"515\":{\"h\":\"组件内守卫\",\"t\":[\"在路由组件内定义beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave守卫。\"]},\"516\":{\"h\":\"Keep-alive\",\"t\":[\"概念：是Vue内置的一个组件，可以使被包含的组件保留状态（缓存起来），或避免重新污染。\",\"include：只有匹配的组件会被缓存。\",\"exclude：任何匹配的组件都不会被缓存。\",\"// 排除的属性为组件中定义的name, 所有的路径匹配到的视图组件都会被缓存 <keep-alive exclude=\\\"Profile,User\\\"> <router-view></router-view> </keep-alive> \"]},\"517\":{\"h\":\"生命周期钩子\",\"t\":[\"生命周期\"]},\"518\":{\"c\":[\"Vue2\"]},\"519\":{\"h\":\"Vue2基础\"},\"520\":{\"h\":\"概念\",\"t\":[\"MVVM思想\",\"MVVM思想\",\"M：model包括数据和一些基本操作\",\"V：view视图，页面渲染结果\",\"VM：View-model,模型与视图间的双向操作（无需开发人员干涉）\",\"视图和数据通过VM绑定起来，model里有变化会自动地通过Directives填写到视view中，视图表单中添加了内容也会自动地通过DOM Listeners保存到模型中。\"]},\"521\":{\"h\":\"基本语法及语法糖写法\",\"t\":[\"v-once：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。\",\"v-text：类似于Mustache语法的插值{{text}}。\",\"v-pre：显示原始 Mustache 标签，不执行元素的编译。\",\"v-cloak：一般和[v-cloak] { display: none }一起使用，用于隐藏未编译的 Mustache 标签直到实例准备完毕。\",\"v-html：将数据解析为HTML代码。\",\"v-for：\",\"<div v-for=\\\"item in items\\\"></div>\",\"<div v-for=\\\"(item, index) in items\\\"></div>\",\"<div v-for=\\\"(val, key) in object\\\"></div>\",\"<div v-for=\\\"(val, name, index) in object\\\"></div>\",\"2.2.0+ 的版本里，当在组件上使用 v-for 时，key 现在是必须的\",\"v-bind:src→:src单向绑定（因为Mustache 语法不能作用在 HTML 属性上，从而使用v-bind）\",\" <!-- 绑定一个 attribute --> <img v-bind:src=\\\"imageSrc\\\"> <!-- 动态 attribute 名 (2.6.0+) --> <button v-bind:[key]=\\\"value\\\"></button> <!-- 缩写 --> <img :src=\\\"imageSrc\\\"> <!-- 动态 attribute 名缩写 (2.6.0+) --> <button :[key]=\\\"value\\\"></button> <!-- 内联字符串拼接 --> <img :src=\\\"'/path/to/images/' + fileName\\\"> <!-- class 绑定 --> <div :class=\\\"{ red: isRed }\\\"></div> <div :class=\\\"[classA, classB]\\\"></div> <div :class=\\\"[classA, { classB: isB, classC: isC }]\\\"></div> <!-- style 绑定 --> <div :style=\\\"{ fontSize: size + 'px' }\\\"></div> <div :style=\\\"[styleObjectA, styleObjectB]\\\"></div> <!-- 绑定一个全是 attribute 的对象 --> <div v-bind=\\\"{ id: someProp, 'other-attr': otherProp }\\\"></div> <!-- 通过 prop 修饰符绑定 DOM attribute --> <div v-bind:text-content.prop=\\\"text\\\"></div> <!-- prop 绑定。“prop”必须在 my-component 中声明。--> <my-component :prop=\\\"someThing\\\"></my-component> <!-- 通过 $props 将父组件的 props 一起传给子组件 --> <child-component v-bind=\\\"$props\\\"></child-component> <!-- XLink --> <svg><a :xlink:special=\\\"foo\\\"></a></svg> \",\"v-on:click → @click\",\"事件监听参数问题\",\"事件调用的方法没有参数→普通按钮（括号可省略）\",\"事件定义时, 写方法时省略了小括号, 但是方法本身是需要一个参数的, 这个时候, Vue会默认将浏览器生产的event事件对象作为参数传入到方法。\",\"<button @click=\\\"btnClick(123)\\\">按钮</button>btn2Click(event) {...}：event=123\",\"<button @click=\\\"btnClick()\\\">按钮</button>btn2Click(event) {...}：event=undefined\",\"<button @click=\\\"btnClick\\\">按钮</button>btn2Click(event) {...}：event=Event事件\",\"方法定义时, 我们需要event对象, 同时又需要其他参数，用$event获取浏览器参数的event对象。\",\"<button @click=\\\"btnClick(abc, $event)\\\">按钮</button>\",\"v-on修饰符\",\"stop：禁止冒泡\",\"prevent：提交事件不再重载页面\",\"enter：监听某个按键的事件\",\"once：只触发一次回调\",\"native：监听组件根元素的原生事件\",\"v-model=v-bind:value=\\\"key\\\"+v-on:input=\\\"key=$event.target.value\\\"双向绑定（单向绑定+input事件监听）\",\"v-model结合input\",\" <div id=\\\"app\\\"> <input type=\\\"text\\\" v-model=\\\"message\\\"> // <input type=\\\"text\\\" :value=\\\"message\\\" @input=\\\"valueChange\\\">双向绑定原理 </div> const app = new Vue({ el: '#app', data: { message: '你好啊' }, methods: { valueChange(event) { this.message = event.target.value; } } }) \",\"v-model结合radio\",\" <div id=\\\"app\\\"> // 注意使用了v-model可以使radio互斥,使用name属性也可以互斥 <label for=\\\"male\\\"> <input type=\\\"radio\\\" id=\\\"male\\\" value=\\\"男\\\" v-model=\\\"sex\\\">男 </label> <label for=\\\"female\\\"> <input type=\\\"radio\\\" id=\\\"female\\\" value=\\\"女\\\" v-model=\\\"sex\\\">女 </label> <h2>您选择的性别是: {{sex}}</h2> </div> const app = new Vue({ el: '#app', data: { sex: '男' } }) \",\"v-model结合checkbox\",\" // <!--1.checkbox单选框--> <label for=\\\"agree\\\"> <input type=\\\"checkbox\\\" id=\\\"agree\\\" v-model=\\\"isAgree\\\">同意协议 </label> <h2>您选择的是: {{isAgree}}</h2> <button :disabled=\\\"!isAgree\\\">下一步</button> // <!--2.checkbox多选框--> <input type=\\\"checkbox\\\" value=\\\"篮球\\\" v-model=\\\"hobbies\\\">篮球 <input type=\\\"checkbox\\\" value=\\\"足球\\\" v-model=\\\"hobbies\\\">足球 <input type=\\\"checkbox\\\" value=\\\"乒乓球\\\" v-model=\\\"hobbies\\\">乒乓球 <input type=\\\"checkbox\\\" value=\\\"羽毛球\\\" v-model=\\\"hobbies\\\">羽毛球 <h2>您的爱好是: {{hobbies}}</h2> // 值绑定v-bind，不将value写死 <label v-for=\\\"item in originHobbies\\\" :for=\\\"item\\\"> <input type=\\\"checkbox\\\" :value=\\\"item\\\" :id=\\\"item\\\" v-model=\\\"hobbies\\\">{{item}} </label> const app = new Vue({ el: '#app', data: { message: '你好啊', isAgree: false, // 单选框 hobbies: [], // 多选框, originHobbies: ['篮球', '足球', '乒乓球', '羽毛球', '台球', '高尔夫球'] } }) \",\"v-model结合select\",\" <div id=\\\"app\\\"> // <!--1.选择一个--> <select name=\\\"abc\\\" v-model=\\\"fruit\\\"> <option value=\\\"苹果\\\">苹果</option> <option value=\\\"香蕉\\\">香蕉</option> <option value=\\\"榴莲\\\">榴莲</option> <option value=\\\"葡萄\\\">葡萄</option> </select> <h2>您选择的水果是: {{fruit}}</h2> // <!--2.选择多个--> <select name=\\\"abc\\\" v-model=\\\"fruits\\\" multiple> <option value=\\\"苹果\\\">苹果</option> <option value=\\\"香蕉\\\">香蕉</option> <option value=\\\"榴莲\\\">榴莲</option> <option value=\\\"葡萄\\\">葡萄</option> </select> <h2>您选择的水果是: {{fruits}}</h2> </div> const app = new Vue({ el: '#app', data: { message: '你好啊', fruit: '香蕉', fruits: [] } }) \",\"v-model修饰符\",\"lazy：懒加载，输入框点击回车后加载\",\"<input type=\\\"text\\\" v-model.lazy=\\\"message\\\">\",\"number：输入框必须是数字类型\",\"<input type=\\\"number\\\" v-model.number=\\\"age\\\">\",\"trim：消除两边的空格\",\"<input type=\\\"text\\\" v-model.trim=\\\"name\\\">\"]},\"522\":{\"h\":\"computed和methods区别\",\"t\":[\"计算属性一般默认只有 getter， 只读属性，不过在需要时你也可以提供一个 setter。\",\"计算属性在多次使用时，只会调用一次，它是有缓存的，性能更好。\"]},\"523\":{\"h\":\"v-if和v-show区别\",\"t\":[\"v-if: 当条件为false时, 包含v-if指令的元素, 根本就不会存在dom中\",\"v-show: 当条件为false时, v-show只是给我们的元素添加一个行内样式: display: none\"]},\"524\":{\"h\":\"v-for使用过程添加key可以提高性能（类似Diff算法）\",\"t\":[\"<li v-for=\\\"item in letters\\\" :key=\\\"item\\\">{{item}}</li>\"]},\"525\":{\"h\":\"数组的几个响应式方法\",\"t\":[\"push()：在数组最后增加元素\",\"pop()：删除数组中的最后一个元素\",\"shift()：删除数组中的第一个元素\",\"unshift()：在数组最前面添加元素\",\"splice()：删除元素/插入元素/替换元素 \",\"删除元素: 第二个参数传入你要删除几个元素(如果没有传,就删除后面所有的元素)\",\"替换元素: 第二个参数, 表示我们要替换几个元素, 后面是用于替换前面的元素\",\"插入元素: 第二个参数, 传入0, 并且后面跟上要插入的元素\",\"sort()：给数组中的元素排序\",\"reverse()：翻转数组中的元素\",\"注意：通过索引值修改数组中的元素不是响应式的如：this.letters[0] = 'aaa'，但可以使用this.letters.splice(0, 1, 'aaa')和**Vue.set(this.letters, 0, 'aaa')**实现响应式。\"]},\"526\":{\"h\":\"Watch\",\"t\":[\"数据变化时，使用watch()\"]},\"527\":{\"h\":\"案例补充\"},\"528\":{\"h\":\"vue声明式渲染\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <div id=\\\"app\\\"> <input type=\\\"text\\\" v-model=\\\"num\\\"> v-model实现双向绑定 <button v-on:click=\\\"num++\\\">点赞</button> v-on:click绑定事件，实现自增 <button v-on:click=\\\"cancel\\\">取消</button> 回到自定义的方法 <h1> {{name}} ,非常帅，有{{num}}个人为他点赞{{hello()}}</h1> </div> <!-- 导入依赖 --> <script src=\\\"./node_modules/vue/dist/vue.js\\\"></script> <script> //1、vue声明式渲染 let vm = new Vue({ //生成vue对象 el: \\\"#app\\\",//绑定元素 div id=\\\"app\\\" data: { //封装数据 name: \\\"张三\\\", // 也可以使用{} //表单中可以取出 num: 1 }, methods:{ //封装方法 cancel(){ this.num -- ; }, hello(){ return \\\"1\\\" } } }); 还可以在html控制台vm.name //2、双向绑定,模型变化，视图变化。反之亦然。 //3、事件处理 //v-xx：指令 //1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的 //2、指令来简化对dom的一些操作。 //3、声明方法来做更复杂的操作。methods里面可以封装方法。 </script> </body> </html> \"]},\"529\":{\"h\":\"v-text、v-html.html\",\"t\":[\"注意：插值表达式\",\"花括号：只能写在标签体内，不能用在标签内。用v-bind解决\",\"{{}}必须有返回值\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <div id=\\\"app\\\"> {{msg}} {{1+1}} {{hello()}}<br/> <!--用v-html取内容,转义HTML标签--> <span v-html=\\\"msg\\\"></span> <br/> 原样显示 <span v-text=\\\"msg\\\"></span> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> new Vue({ el:\\\"#app\\\", data:{ msg:\\\"<h1>Hello</h1>\\\", link:\\\"http://www.baidu.com\\\" }, methods:{ hello(){ return \\\"World\\\" } } }) </script> </body> </html> \"]},\"530\":{\"h\":\"单向绑定v-bind\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <!-- 给html标签的属性绑定 --> <div id=\\\"app\\\"> <a v-bind:href=\\\"link\\\">gogogo</a> <!-- class,style {class名：加上？}--> <span v-bind:class=\\\"{active:isActive,'text-danger':hasError}\\\" :style=\\\"{color: color1,fontSize: size}\\\">你好</span> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> let vm = new Vue({ el:\\\"#app\\\", data:{ link: \\\"http://www.baidu.com\\\", isActive:true, hasError:true, color1:'red', size:'36px' } }) </script> </body> </html> \"]},\"531\":{\"h\":\"双向绑定v-model\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <!-- 表单项，自定义组件 --> <div id=\\\"app\\\"> 精通的语言： <input type=\\\"checkbox\\\" v-model=\\\"language\\\" value=\\\"Java\\\"> java<br/> <input type=\\\"checkbox\\\" v-model=\\\"language\\\" value=\\\"PHP\\\"> PHP<br/> <input type=\\\"checkbox\\\" v-model=\\\"language\\\" value=\\\"Python\\\"> Python<br/> 选中了 {{language.join(\\\",\\\")}} </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> let vm = new Vue({ el:\\\"#app\\\", data:{ language: [] } }) </script> </body> </html> \"]},\"532\":{\"h\":\"事件绑定v-on\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <div id=\\\"app\\\"> <!--事件中直接写js片段--> <button v-on:click=\\\"num++\\\">点赞</button> <!--事件指定一个回调函数，必须是Vue实例中定义的函数--> <button @click=\\\"cancel\\\">取消</button> <!-- --> <h1>有{{num}}个赞</h1> <!-- 事件修饰符 --> <div style=\\\"border: 1px solid red;padding: 20px;\\\" v-on:click.once=\\\"hello\\\"> 大div <div style=\\\"border: 1px solid blue;padding: 20px;\\\" @click.stop=\\\"hello\\\"> 小div <br /> <a href=\\\"http://www.baidu.com\\\" @click.prevent.stop=\\\"hello\\\">去百度</a> </div> </div> <!-- 按键修饰符： --> <input type=\\\"text\\\" v-model=\\\"num\\\" v-on:keyup.up=\\\"num+=2\\\" @keyup.down=\\\"num-=2\\\" @click.ctrl=\\\"num=10\\\"><br/> 提示： </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> new Vue({ el:\\\"#app\\\", data:{ num: 1 }, methods:{ cancel(){ this.num--; }, hello(){ alert(\\\"点击了\\\") } } }) </script> </body> </html> \"]},\"533\":{\"h\":\"循环遍历v-for\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <div id=\\\"app\\\"> <ul> <li v-for=\\\"(user,index) in users\\\" :key=\\\"user.name\\\" v-if=\\\"user.gender == '女'\\\"> <!-- 1、显示user信息：v-for=\\\"item in items\\\" --> 当前索引：{{index}} ==> {{user.name}} ==> {{user.gender}} ==>{{user.age}} <br> <!-- 2、获取数组下标：v-for=\\\"(item,index) in items\\\" --> <!-- 3、遍历对象： v-for=\\\"value in object\\\" v-for=\\\"(value,key) in object\\\" v-for=\\\"(value,key,index) in object\\\" --> 对象信息： <span v-for=\\\"(v,k,i) in user\\\">{{k}}=={{v}}=={{i}}；</span> <!-- 4、遍历的时候都加上:key来区分不同数据，提高vue渲染效率 --> </li> </ul> <ul> <li v-for=\\\"(num,index) in nums\\\" :key=\\\"index\\\"></li> </ul> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> let app = new Vue({ el: \\\"#app\\\", data: { users: [{ name: '柳岩', gender: '女', age: 21 }, { name: '张三', gender: '男', age: 18 }, { name: '范冰冰', gender: '女', age: 24 }, { name: '刘亦菲', gender: '女', age: 18 }, { name: '古力娜扎', gender: '女', age: 25 }], nums: [1,2,3,4,4] }, }) </script> </body> </html> \"]},\"534\":{\"h\":\"v-if和v-show\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <!-- v-if，顾名思义，条件判断。当得到结果为true时，所在的元素才会被渲染。 v-show，当得到结果为true时，所在的元素才会被显示,本质是加了一个隐藏样式。 --> <div id=\\\"app\\\"> <button v-on:click=\\\"show = !show\\\">点我呀</button> <!-- 1、使用v-if显示 --> <h1 v-if=\\\"show\\\">if=看到我....</h1> <!-- 2、使用v-show显示 --> <h1 v-show=\\\"show\\\">show=看到我</h1> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> let app = new Vue({ el: \\\"#app\\\", data: { show: true } }) </script> </body> </html> \"]},\"535\":{\"h\":\"v-else和v-else-if\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <div id=\\\"app\\\"> <button v-on:click=\\\"random=Math.random()\\\">点我呀</button> <span>{{random}}</span> <h1 v-if=\\\"random>=0.75\\\"> 看到我啦？！ &gt;= 0.75 </h1> <h1 v-else-if=\\\"random>=0.5\\\"> 看到我啦？！ &gt;= 0.5 </h1> <h1 v-else-if=\\\"random>=0.2\\\"> 看到我啦？！ &gt;= 0.2 </h1> <h1 v-else> 看到我啦？！ &lt; 0.2 </h1> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> let app = new Vue({ el: \\\"#app\\\", data: { random: 1 } }) </script> </body> </html> \"]},\"536\":{\"h\":\"计算属性computed和监听器watch\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <div id=\\\"app\\\"> <!-- 某些结果是基于之前数据实时计算出来的，我们可以利用计算属性。来完成 --> <ul> <li>西游记； 价格：{{xyjPrice}}，数量：<input type=\\\"number\\\" v-model=\\\"xyjNum\\\"> </li> <li>水浒传； 价格：{{shzPrice}}，数量：<input type=\\\"number\\\" v-model=\\\"shzNum\\\"> </li> <li>总价：{{totalPrice}}</li> {{msg}} </ul> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> //watch可以让我们监控一个值的变化。从而做出相应的反应。 new Vue({ el: \\\"#app\\\", data: { xyjPrice: 99.98, shzPrice: 98.00, xyjNum: 1, shzNum: 1, msg: \\\"\\\" }, computed: { totalPrice(){ return this.xyjPrice*this.xyjNum + this.shzPrice*this.shzNum } }, watch: { xyjNum(newVal,oldVal){ if(newVal>=3){ this.msg = \\\"库存超出限制\\\"; this.xyjNum = 3 }else{ this.msg = \\\"\\\"; } } }, }) </script> </body> </html> \"]},\"537\":{\"h\":\"过滤器\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <!-- 过滤器常用来处理文本格式化的操作。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 --> <div id=\\\"app\\\"> <ul> <li v-for=\\\"user in userList\\\"> {{user.id}} ==> {{user.name}} ==> {{user.gender == 1?\\\"男\\\":\\\"女\\\"}} ==> {{user.gender | genderFilter}} ==> {{user.gender | gFilter}} </li> </ul> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> Vue.filter(\\\"gFilter\\\", function (val) { if (val == 1) { return \\\"男~~~\\\"; } else { return \\\"女~~~\\\"; } }) let vm = new Vue({ el: \\\"#app\\\", data: { userList: [ { id: 1, name: 'jacky', gender: 1 }, { id: 2, name: 'peter', gender: 0 } ] }, filters: { // filters 定义局部过滤器，只可以在当前vue实例中使用 genderFilter(val) { if (val == 1) { return \\\"男\\\"; } else { return \\\"女\\\"; } } } }) </script> </body> </html> \"]},\"538\":{\"h\":\"组件化（相当于封装函数）\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <div id=\\\"app\\\"> <button v-on:click=\\\"count++\\\">我被点击了 {{count}} 次</button> <counter></counter> <counter></counter> <counter></counter> <counter></counter> <counter></counter> <button-counter></button-counter> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> //1、全局声明注册一个组件 Vue.component(\\\"counter\\\", { template: `<button v-on:click=\\\"count++\\\">我被点击了 {{count}} 次</button>`, data() { return { count: 1 } } }); //2、局部声明一个组件 const buttonCounter = { template: `<button v-on:click=\\\"count++\\\">我被点击了 {{count}} 次~~~</button>`, data() { return { count: 1 } } }; new Vue({ el: \\\"#app\\\", data: { count: 1 }, components: { 'button-counter': buttonCounter } }) </script> </body> </html> \"]},\"539\":{\"h\":\"生命周期钩子函数\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <div id=\\\"app\\\"> <span id=\\\"num\\\">{{num}}</span> <button @click=\\\"num++\\\">赞！</button> <h2>{{name}}，有{{num}}个人点赞</h2> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> let app = new Vue({ el: \\\"#app\\\", data: { name: \\\"张三\\\", num: 100 }, methods: { show() { return this.name; }, add() { this.num++; } }, beforeCreate() { console.log(\\\"=========beforeCreate=============\\\"); console.log(\\\"数据模型未加载：\\\" + this.name, this.num); console.log(\\\"方法未加载：\\\" + this.show()); console.log(\\\"html模板未加载：\\\" + document.getElementById(\\\"num\\\")); }, created: function () { console.log(\\\"=========created=============\\\"); console.log(\\\"数据模型已加载：\\\" + this.name, this.num); console.log(\\\"方法已加载：\\\" + this.show()); console.log(\\\"html模板已加载：\\\" + document.getElementById(\\\"num\\\")); console.log(\\\"html模板未渲染：\\\" + document.getElementById(\\\"num\\\").innerText); }, beforeMount() { console.log(\\\"=========beforeMount=============\\\"); console.log(\\\"html模板未渲染：\\\" + document.getElementById(\\\"num\\\").innerText); }, mounted() { console.log(\\\"=========mounted=============\\\"); console.log(\\\"html模板已渲染：\\\" + document.getElementById(\\\"num\\\").innerText); }, beforeUpdate() { console.log(\\\"=========beforeUpdate=============\\\"); console.log(\\\"数据模型已更新：\\\" + this.num); console.log(\\\"html模板未更新：\\\" + document.getElementById(\\\"num\\\").innerText); }, updated() { console.log(\\\"=========updated=============\\\"); console.log(\\\"数据模型已更新：\\\" + this.num); console.log(\\\"html模板已更新：\\\" + document.getElementById(\\\"num\\\").innerText); } }); </script> </body> </html> \"]},\"540\":{\"c\":[\"Vue2\"]},\"541\":{\"h\":\"Vuex状态管理库\"},\"542\":{\"h\":\"概念\",\"t\":[\"状态管理模式，简单的讲，将多个组件共享的变量全部存储在一个对象里面。\",\"vuex原理图解\"]},\"543\":{\"h\":\"简易实现\",\"t\":[\"所有的组件都继承Vue的源型。（如Vue.prototype.shareObj = shareObj即所有的组件都可访问该变量）这样也可以实现状态管理功能，但是缺乏响应式。\"]},\"544\":{\"h\":\"需要管理的状态\",\"t\":[\"多个界面共享的状态，如\",\"用户登录状态、名称、头像、地理位置等。\",\"商品收藏、购物车\"]},\"545\":{\"h\":\"基本步骤\",\"t\":[\"安装插件\",\"Vue.use(Vuex) \",\"创建对象\",\"const store = new Vuex.Store({ state: {}, mutations: {}, actions: {}, getters: {}, modules: {} }) // 导出store独享 export default store \",\"挂载Vue实例\",\"// main.js import store from './store' new Vue({ el: '#app', store, render: h => h(App) }) \"]},\"546\":{\"h\":\"简单使用\",\"t\":[\"计数器案例\",\"创建store文件下的index.js\",\"import Vuex from 'vuex' import Vue from 'vue' Vue.use(Vuex) const store = new Vuex.Store({ state: { count: 0 }, mutations: { increment(state) { state.count++ }, decrement(state) { state.count-- } } }) export default store \",\"使用Vuex的count\",\"获取：$store.state.count\",\"修改：this.$store.commit('mutation中的方法')通过提交mutation的方式，而非直接改变，因为Vuex可以更明确的追踪状态的变化\",\"// App.vue <template> <div id='app'> <p>{{ $store.state.count }}</p> <button @click=\\\"addition\\\"></button> <button @click=\\\"subtraction\\\"></button> </div> </template> <script> export default { ... methods: { addition() { this.$store.commit('increment') }, subtraction() { this.$store.commit('decrement') } } } </script> \"]},\"547\":{\"h\":\"核心概念\"},\"548\":{\"h\":\"State单一状态树\",\"t\":[\"如果你的状态信息是保存到多个Store对象中的，那么之后的管理和维护等等都会变得特别困难。\",\"所以Vuex也使用了单一状态树来管理应用层级的全部状态。\",\"单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。\"]},\"549\":{\"h\":\"Getters\",\"t\":[\"类似于Computed计算属性用法，多个组件需要调用经过变化的数据时使用。\",\"第一个参数：state\",\"第二个参数：调用getter本身\",\"通过返回函数来实现getter传参\",\"const store = new Vuex.Store({ state: { students: [ {id: 110, name: 'why', age: 18}, {id: 111, name: 'kobe', age: 24}, {id: 112, name: 'james', age: 30}, {id: 113, name: 'curry', age: 10} ] }, Getters: { // 接收state作为第一个参数 more20age(state) { return state.students.filter(s => s.age > 20) } // Getter 也可以接受其他 getter 作为第二个参数 more20agecount(state, getters) { return getters.more20age.length // return state.students.filter(s => s.age > 20).length } // 通过让 getter 返回一个函数，来实现给 getter 传参（使用：moreage(20)） moreage(state) { return function(age) { return state.students.filter(s => s.age > age) } // return age => { // return state.students.filter(s => s.age > age) // } } } }) \"]},\"550\":{\"h\":\"Mutation\"},\"551\":{\"h\":\"Mutation状态更新\",\"t\":[\"mutation的定义方式\",\"// store/index.js mutations: { increment(state) { ... } } \",\"通过mutation更新\",\"// App.vue addition() { this.$store.commit(\\\"increment\\\") } \"]},\"552\":{\"h\":\"Mutation传递参数\",\"t\":[\"传递的额外参数也称为mutation的载荷（payload）\",\"传递普通参数\",\"// store/index.js mutation: { increment(state, count) { state.count += count } } // App.vue addition() { this.$store.commit('increment', 5) } \",\"传递对象参数\",\"// store/index.js mutation: { addStudent(state, stu) { state.students.push(stu) } } // App.vue addStudent() { const stu = { id: 1, name: Never, age: 24 } this.$store.commit('addStudent', stu) } \"]},\"553\":{\"h\":\"Mutation提交风格\",\"t\":[\"普通方式：this.$store.commit('incrementCount', count)\",\"对象风格方式：将整个提交的对象作为payload使用\",\"// App.vue this.$store.commit({ type: 'incrementCount', count }) // store/index.js // 此时payload：{ type: 'incrementCount', count: count} mutation: { incrementCount(state, payload) { state.count += payload.count } } \"]},\"554\":{\"h\":\"Action\",\"t\":[\"用来代替Mutation进行异步操作的，同样也支持payload。\"]},\"555\":{\"h\":\"基本使用\",\"t\":[\"通过dispatch分发到Action，再通过context进行commit提交到mutation。\",\"// App.vue methods: { increment() { // 传递一个对象参数的payload this.$store.dispatch('increment', {count: 5}) } } // store/index.js mutation: { increment(state, payload) { state.count += payload.count } }, actions: { // 这里的参数是context上下文 increment(context, payload) { setTimeout(() => { context.commit('increment', payload) }, 5000) } } \",\"一般将异步操作放在Promise中\",\"// store/index.js actions: { increment(context) { return new Promise((resolve) => { setTimeout(() => { context.commit('increment') resolve() }) }) } } // App.vue methods: { increment() { this.$store.dispatch('increment').then(res => { console.log(\\\"返回一个Actions成功的回调！\\\") }) } } \"]},\"556\":{\"h\":\"Module\",\"t\":[\"const moduleA = { state: () => ({ ... }), mutations: { ... }, actions: { ... }, getters: { ... } } const moduleB = { state: () => ({ ... }), mutations: { ... }, actions: { ... } } const store = createStore({ modules: { a: moduleA, b: moduleB } }) $store.state.a.xxx // -> moduleA 的状态 $store.state.b.xxx // -> moduleB 的状态 \",\"对于模块内部的 getter，就会有第三个参数为根节点状态rootState：\",\"const moduleA = { // ... getters: { fullname(state) { return state.name + 'aaa' }, fullname2(state, getters) { return getters.fullname + 'bbb' }, fullname3(state, getters, rootState) { // rootState.name为根节点中state中的name return getters.fullname2 + rootState.name } } } \"]},\"557\":{\"h\":\"项目组织结构\",\"t\":[\"项目组织结构\"]},\"558\":{\"c\":[\"Vue2\"]},\"559\":{\"h\":\"苹果 1\"},\"560\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"561\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"562\":{\"c\":[\"苹果\"]},\"563\":{\"c\":[\"红\",\"大\",\"圆\"]},\"564\":{\"h\":\"苹果 2\",\"t\":[\"一个被星标了的苹果文章。\"]},\"565\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"566\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"567\":{\"c\":[\"苹果\"]},\"568\":{\"c\":[\"红\",\"大\",\"圆\"]},\"569\":{\"h\":\"香蕉 1\"},\"570\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"571\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"572\":{\"c\":[\"香蕉\",\"水果\"]},\"573\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"574\":{\"h\":\"香蕉 2\",\"t\":[\"一个被数字 10 星标了的香蕉文章。\"]},\"575\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"576\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"577\":{\"c\":[\"香蕉\",\"水果\"]},\"578\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"579\":{\"h\":\"浏览器渲染机制\"},\"580\":{\"h\":\"从输入 URL 到页面渲染的过程\",\"t\":[\"加载过程：\",\"DNS 解析域名成 IP 地址\",\"浏览器向 IP 地址所在的服务器发起 HTTP 请求\",\"服务器处理 HTTP 请求，并返回给浏览器。\",\"渲染过程：\",\"根据 HTML 代码生成 DOM 树\",\"根据 CSS 代码生成 CSSOM\",\"将 DOM 树与 CSSOM 合并成渲染树 Render Tree\",\"遍历渲染树，进行布局与绘制\",\"渲染阻塞：若遇到 <script> 则暂停渲染，优先执行 JS 代码，直至渲染完成。\",\"所以建议：\",\"<style> 放在 <head> 里：避免页面结构渲染完成，而样式还没开始渲染。\",\"<script> 放在 <body> 的最后：优先渲染页面，避免执行 JS 代码时暂停渲染。\"]},\"581\":{\"h\":\"script 标签中的 defer 和 async\",\"t\":[\"<script>：阻断 HTML 解析，只有下载好并执行完脚本才会继续解析 HTML。<script async>：解析 HTML 过程中，异步下载脚本，下载成功立马执行，会阻断 HTML 的解析。<script defer>：完全不会阻断 HTML 的解析，解析完成后再执行脚本。\"]},\"582\":{\"h\":\"SPA、CSR 与 SSR\",\"t\":[\"SPA（Single Page Application）单页面应用程序，是前后端分离时提出的一种解决方案。在一个应用中，只有一个完整的HTML页面，页面中有一个根节点容器。由 JS 代码把需要加载的 DOM 片段插入到该容器中。 SPA 工作原理：使用前端路由，通过改变页面的URL，在不重新请求页面的情况下，实现局部更新页面视图。\",\"CSR（Client Side Render）客户端渲染：客户端请求页面 URL 时，服务端返回带有根节点容器的 HTML。再次请求得到 JS，向根节点容器插入 DOM 片段并进行事件绑定等操作。动态数据则通过 AJAX 请求。普通的 SPA 是 CSR。\",\"SSR（Server Side Render）服务端渲染：客户端请求页面 URL 时，服务端返回带有数据的 HTML，客户端只需要解析HTML，直接构建 DOM 树。\",\"SEO（Search Engine Optimization ） 搜索引擎优化：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。搜索引擎爬虫会爬取服务器返回的 HTML 文档，网页内容能被搜索到。\",\"可以通过在网页中右键显示网页源代码能否查看到完整页面内容判断是否为服务端渲染。 可以通过服务端渲染框架 Nuxt、Next 分别将 SPA 的 Vue 网页、React 网页改造为 SSR。\"]},\"583\":{\"h\":\"SSR 与 CSR 对比\",\"t\":[\"SSR\",\"CSR\",\"优点\",\"1. 首屏加载速度快：客户端直接解析服务端返回的 HTML2. SEO 友好，爬虫可直接爬取返回的 HTML 页面数据\",\"1. 前后端分离2. 用户体验好：页面局部改变，无需请求完整页面3. 节省服务器性能\",\"缺点\",\"1. 前后端耦合2. 用户体验差：页面局部改变，需要请求完整页面3. 耗费服务器性能\",\"1. 首屏加载速度慢：客户端等待 JS 加载完成才能渲染页面2. SEO 不友好：通过 JS 渲染页面，爬虫爬不到页面数据\",\"参考资料\",\"谈谈我对服务端渲染(SSR)的理解\"]},\"584\":{\"h\":\"window.onload 与 DOMContentLoaded\",\"t\":[\"window.addEventListener('load', function(){ // 页面的全部资源加载完才执行，包括图片视频 }) document.addEventListener('DOMContentLoaded', function(){ // DOM 渲染完成就执行，图片视频可能还没加载完（优先使用这个） }) \"]},\"585\":{\"h\":\"回流与重绘\",\"t\":[\"回流比重绘的性能代价高。 回流一定引起重绘，重绘不一定引起回流。\"]},\"586\":{\"h\":\"回流\",\"t\":[\"回流（reflow）：当 DOM 元素的内容、尺寸、结构、位置发生改变，浏览器重新渲染部分或全部文档。\",\"提示\",\"文档流（又称标准流、正常流，英文：Normal flow）是指在不对页面进行任何布局控制时，浏览器默认的 HTML 布局方式 —— 引自 MDN\",\"会导致回流的操作：\",\"浏览器窗口大小发生改变\",\"元素尺寸、位置发生改变\",\"元素内容变化（文字大小、文字数量、图片大小等）\",\"添加或者删除可见的 DOM 元素\",\"激活 CSS 伪类（例如：:hover）\"]},\"587\":{\"h\":\"重绘\",\"t\":[\"重绘（repaint）：当 DOM 元素的样式（背景色、边框颜色、文字颜色等）发生改变，浏览器重新绘制该 DOM 元素。\"]},\"588\":{\"h\":\"BFC\",\"t\":[\"块级格式化上下文（简称 BFC），形成一个独立的渲染区域，内部元素的渲染不会影响到外部元素。\",\"在BFC中，盒子会在垂直方向上一个挨着一个的排布。\",\"垂直方向的间距由margin决定。\",\"属于同一个BFC的两个相邻盒子的margin会发生重叠。\",\"在BFC中，每个元素的左外边距（margin-left）会触碰到包含块的左边界（对于从左往右的格式化，否则就触碰右边界），即使浮动元素也是如此。\"]},\"589\":{\"h\":\"创建 BFC\",\"t\":[\"下列（常见）方式会创建 BFC：\",\"根元素（html 标签）\",\"浮动元素（float 不是 none）\",\"绝对定位元素（position 是 absolute 或 fixed）\",\"overflow 不是 visible 的块级元素\",\"行内块元素（display 是 inline-block）\",\"弹性元素（display 是 flex 或 inline-flex）\",\"网格元素（display 是 grid 或 inline-grid）\",\"表格单元格（display 是 table-cell）\",\"以上是 CSS2.1 规范定义的 BFC 触发方式，在最新的 CSS3 规范中，弹性元素和网格元素会创建 F(Flex)FC 和 G(Grid)FC。\"]},\"590\":{\"h\":\"应用场景\",\"t\":[\"常用上述第 2、3、4 方式创建 BFC：\"]},\"591\":{\"h\":\"1.解决外边距重叠\",\"t\":[\"相邻盒子垂直外边距相遇时，它们将形成一个外边距。在相邻元素外分别包裹 BFC 容器，把元素放到不同BFC中。\",\"::: normal-demo 演示\",\"<div class=\\\"bfc\\\"> <div class=\\\"box\\\"></div> </div> <div class=\\\"bfc\\\"> <div class=\\\"box\\\"></div> </div> \",\".box { width :100px; height: 100px; background: red; margin: 20px; } .bfc{ overflow: hidden; } \",\":::\"]},\"592\":{\"h\":\"2.解决父容器高度塌陷\",\"t\":[\"子元素设置浮动，脱离文档流致使父元素高度塌陷，可以使用清除浮动技巧依据计算 BFC 的高度时，浮动元素也参与计算，使父元素成为 BFC 容器\",\"BFC解决高度塌陷需满足的两个条件\",\"浮动元素的父元素触发BFC，形成独立的块级格式化上下文。\",\"浮动元素的父元素的高度是auto。\",\"::: normal-demo 演示\",\"<div class=\\\"container bfc\\\"> <div class=\\\"box\\\"></div> </div> \",\".box { width :100px; height: 100px; background: red; float: left; } .container{ background: #ccc; } .bfc { overflow: hidden } \",\":::\"]},\"593\":{\"h\":\"3.实现自适应两列布局\",\"t\":[\"左侧元素浮动覆盖右侧元素，使右侧元素成为 BFC 容器）在线示例\",\"::: normal-demo 演示\",\"<div class=\\\"box1\\\"></div> <div class=\\\"box2 bfc\\\"></div> \",\".box1 { width :100px; height: 100px; background: red; float: left; } .box2 { width: 150px; height: 150px; background: skyblue; } .bfc { overflow: hidden } \",\":::\"]},\"594\":{\"h\":\"清除浮动\",\"t\":[\"清除浮动常用代码：使用伪元素 ::after（给末尾添加一个看不见的块元素来清除浮动）\",\"设置父元素 class = \\\"clearfix\\\" 并添加样式 .clearfix::after 如下：\",\".clearfix::after { content: ''; display: block; clear: both; } \",\"::: normal-demo 演示\",\"<div class=\\\"box clearfix\\\"> <img src=\\\"/demo-img/cat-wink.webp\\\" /> <p>right text</p> </div> \",\".box { background-color: #ccc; border: solid 1px black; } .box img { float: left; } .box p { float: right; } .clearfix::after { content: ''; display: block; clear: both; } \",\":::\",\":before 与 ::before 的区别：\",\":before 和 :after 是 CSS2 的写法，所以兼容性较好。\",\"::before 和 ::after 是 CSS3 的写法，为了将伪类 : 和伪元素 :: 区分开。但是平时为了兼容性，还是会用一个冒号的写法。\"]},\"595\":{\"h\":\"参考资料\",\"t\":[\"带你用最简单的方式理解最全面的BFC（视频）\"]},\"596\":{\"h\":\"水平垂直居中\",\"t\":[\"image.png\"]},\"597\":{\"h\":\"基本代码\"},\"598\":{\"h\":\"块级元素\",\"t\":[\"注：把宽、高、边框、背景色作为内联样式，便于直观理解实现垂直和水平居中的 CSS 代码。\",\"<div style=\\\"width:200px; height:200px; border:1px solid black\\\" class=\\\"parent\\\"> <div style=\\\"width:100px; height:100px; background:red\\\" class=\\\"child\\\">文字</div> </div> \"]},\"599\":{\"h\":\"行内元素\",\"t\":[\"行内元素不设置宽高\",\"<div style=\\\"width:200px; height:200px; border:1px solid black\\\" class=\\\"parent\\\"> <span style=\\\"background:red\\\" class=\\\"child\\\">文字</span> </div> \"]},\"600\":{\"h\":\"CSS 代码\",\"t\":[\"* { box-sizing: border-box } \"]},\"601\":{\"h\":\"水平居中\"},\"602\":{\"h\":\"行内元素\"},\"603\":{\"h\":\"单行/多行文字\",\"t\":[\".parent { text-align: center; } \",\"效果图：\"]},\"604\":{\"h\":\"块级元素\"},\"605\":{\"h\":\"1. flex\",\"t\":[\".parent { display: flex; justify-content: center; } \",\"效果图：\"]},\"606\":{\"h\":\"2. margin: auto\",\"t\":[\".child { margin: auto; /* 盒子外水平居中 */ } \",\"效果图：\",\".child { text-align: center; /* 盒子内水平居中 */ margin: auto; } \",\"效果图：\"]},\"607\":{\"h\":\"3. 绝对定位\",\"t\":[\"需要提前知道 child 的尺寸\",\"（1）left: 50% + margin-left: -宽度的一半\",\".parent { position: relative; } .child { position: absolute; left: 50%; margin-left: -50px; } \",\"（2）left/right: 0 + margin: auto\",\".parent { position: relative; } .child { position: absolute; left: 0; right: 0; margin: auto; } \",\"（3）left: 50% + transform\",\".parent { position: relative; } .child { position: absolute; left: 50%; transform: translate(-50%, 0); } \",\"效果图均为：\"]},\"608\":{\"h\":\"垂直居中\"},\"609\":{\"h\":\"行内元素\"},\"610\":{\"h\":\"单行文字\",\"t\":[\"line-height: height （行高=父高）\",\"主要用于文字的排版，也可以用于图片元素居中\",\".child { line-height: 200px; } \",\"效果图：\"]},\"611\":{\"h\":\"多行文字\",\"t\":[\"table-cell + inline-block + vertical-align: middle\",\"<div style=\\\"width:200px; height:200px; border:1px solid black\\\" class=\\\"parent\\\"> <span style=\\\"background:red\\\" class=\\\"child\\\">多行文字<br>多行文字<br>多行文字<br>多行</span> </div> \",\".parent { display: table-cell; vertical-align: middle; } .child { display: inline-block; vertical-align: middle; } \",\"效果图：\"]},\"612\":{\"h\":\"块级元素\"},\"613\":{\"h\":\"1. flex\",\"t\":[\"只要不考虑兼容 IE，flex 一把梭。\",\".parent { display: flex; align-items: center; } \"]},\"614\":{\"h\":\"2. table-cell\",\"t\":[\".parent { display: table-cell; vertical-align: middle; } \"]},\"615\":{\"h\":\"3. 绝对定位\",\"t\":[\"需要提前知道 child 的尺寸\",\"（1）top: 50% + margin-top: -高度的一半\",\".parent { position: relative; } .child { position: absolute; top: 50%; margin-top: -50px; } \",\"（2）top/bottom: 0 + margin: auto\",\".parent { position: relative; } .child { position: absolute; top: 0; bottom: 0; margin: auto; } \",\"（3）top: 50% + transform\",\".parent { position: relative; } .child { position: absolute; top: 50%; transform: translate(0, -50%); } \",\"效果图均为：\"]},\"616\":{\"h\":\"4. 伪元素\",\"t\":[\":before、:after 必须都写\",\".parent { text-align: center; } .child { display: inline-block; vertical-align: middle; } .parent::before { content: ''; height: 100%; display: inline-block; vertical-align: middle; } .parent::after { content: ''; height: 100%; display: inline-block; vertical-align: middle; } \",\"效果图：\"]},\"617\":{\"h\":\"5. table 标签\",\"t\":[\"不推荐使用\",\"<table class=\\\"parent\\\"> <tr> <td class=\\\"child\\\"> 文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字 </td> </tr> </table> \",\".parent{ border: 1px solid black; height: 200px; width: 200px; } .child{ background: red } \",\"效果图：（table 标签自带 2px 空隙）\"]},\"618\":{\"h\":\"总结\",\"t\":[\"image.png\"]},\"619\":{\"h\":\"参考资料\",\"t\":[\"CSS设置居中的方案总结-超全\",\"一起搞懂 CSS 水平居中与垂直居中的16个方法\"]},\"620\":{\"h\":\"基础知识\"},\"621\":{\"h\":\"css文本的属性\",\"t\":[\"text-decoration\",\"设置文字装饰线\",\"none：无任何装饰线（可以去除a元素下划线）\",\"underline：下划线\",\"overline：上划线\",\"line-through：中划线（删除线）\",\"text-transform\",\"设置文字大小写转换\",\"capitalize：每个单词首字符变为大写\",\"uppercase：每个单词所有字符变为大写\",\"lowecase：每个单词所有字符变为小写\",\"none\",\"text-indent\",\"设置第一行内容缩进\",\"2em：缩进2个文字\",\"text-align（重要）\",\"设置行内级元素（文本、图片等）对齐\",\"left\",\"right\",\"center\",\"justify：两端对齐\"]},\"622\":{\"h\":\"css字体的属性\",\"t\":[\"font-size\",\"设置字体大小\",\"font-family\",\"设置字体名称\",\"@font-face：加载自定义字体\",\"@font-face { font-family: 'myFont'; src: url('./fonts/AaJianHaoTi-2.ttf'); // 下载指定字体导入本地 } \",\"font-weight\",\"设置字体粗细\",\"normal：等于400\",\"bold：等于700\",\"font-style\",\"设置字体样式\",\"normal：正常\",\"italic：斜体（字体本身支持斜体时，显示的斜体）\",\"oblique：倾斜（文本进行倾斜）\",\"font-variant\",\"可以设置字体的小型大写字母\",\"normal：正常\",\"small-caps：小型大写字母\",\"line-hight（重点）\",\"设置文本行高（实质：两行文字基线之间的距离）\",\"让line-height的值等于div的高heght，即可实现文本在div内部垂直居中。\",\"font缩写属性\",\"font: font-style font-variant font-weight font-size/line-height font-family\",\"规则\",\"font-size和font-family是必须的。\",\"font-size和line-height之间用/分隔（/line-height可省略且必须跟在font-size后面）。\",\"font-style、font-variant、font-weight的顺序可以任意，也可以省略。\"]},\"623\":{\"h\":\"css常见选择器\",\"t\":[\"通配符选择器\",\"简单选择器\",\"元素选择器：选择元素\",\"类选择器：.class\",\"id选择器：#id\",\"属性选择器\",\"[attr]：选择具有attr属性的元素\",\"[attr=val]：选择具有attr属性且值为val的元素\",\"[attr~=val]：选择具有attr属性且值为val的元素\",\"[attr|=val]：选择具有attr属性且值为val或以val-开头的元素\",\"[attr^=val]：选择具有attr属性且值以val开头的元素\",\"[attr$=val]：选择具有attr属性且值以val结尾的元素\",\"[attr*=val]：选择具有attr属性且值包含val的元素\",\"[attr1][attr2]：选择具有attr1和attr2属性的元素\",\"后代选择器\",\"选择器1 选择器2：选择器1所有后代中的选择器2（以空格分隔）\",\"选择器1>选择器2：选择器1直接子代中的选择器2（以>分隔）\",\"兄弟选择器\",\"选择器1+选择器2：选择器1后面紧跟的兄弟选择器2（以+分隔）\",\"选择器1选择器2：选择器1后面所有的兄弟选择器2（以分隔）\",\"交集选择器&并集选择器\",\"选择器1,选择器2：选择器1和选择器2的并集（以,分隔）\",\"选择器1选择器2：选择器1和选择器2的交集（不分隔）\",\"伪类选择器\",\"动态伪类（固定顺序）\",\":link：未访问的链接（只能用在a元素）\",\":visited：已访问的链接（只能用在a元素）\",\":focus：元素获得焦点\",\":hover：鼠标悬停在元素上\",\":active：鼠标点击元素\",\"目标伪类\",\":target：当前活动的目标元素\",\"语言伪类\",\":lang()：选择lang属性值为指定值（如：en）的元素\",\"结构伪类\",\":nth-child(n)：选择父元素的第n个子元素,当为n时，选择所有子元素\",\":nth-last-child(n)：选择父元素的倒数第n个子元素\",\":nth-of-type(n)：选择父元素的第n个同类型子元素\",\":nth-last-of-type(n)：选择父元素的倒数第n个同类型子元素\",\":first-child：选择父元素的第一个子元素\",\":last-child：选择父元素的最后一个子元素\",\":first-of-type：选择父元素的第一个同类型子元素\",\":last-of-type：选择父元素的最后一个同类型子元素\",\":only-child：选择父元素的唯一子元素\",\":only-of-type：选择父元素的唯一同类型子元素\",\":empty：选择没有子元素的元素（如用在小程序默认插槽）\",\":root：选择文档的根元素\",\"否定伪类\",\":not(选择器)：选择不符合选择器的元素\",\"伪元素选择器（行内非替换）\",\"::first-line：选择元素的第一行\",\"::first-letter：选择元素的第一个字母\",\"::before（重要）：在元素之前插入内容\",\"::after（重要）：在元素之后插入内容（不要将content省略）\"]},\"624\":{\"h\":\"display特性\",\"t\":[\"block：块级元素（独占一行，可设置宽度和高度）\",\"inline：行内元素（和其它行内元素在同一行，不可以设置宽度和高度）\",\"inline-block：行内块元素（和其它行内元素在同一行，可设置宽度和高度）\",\"none：隐藏元素（不占据空间）\",\"元素隐藏技巧\",\"display:none：隐藏元素，不占据空间\",\"visibility:hidden：隐藏元素，占据空间\",\"opacity:0：设置透明度隐藏元素及其所有子元素，占据空间\",\"rgba(0,0,0,0)：设置透明度隐藏元素不会影响子元素，占据空间\"]},\"625\":{\"h\":\"内容溢出处理\",\"t\":[\"overflow\",\"visible（默认值）：内容不会被修剪，会呈现在元素框之外\",\"hidden：内容会被修剪，并且其余内容是不可见的\",\"scroll：内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容\",\"auto：如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容\"]},\"626\":{\"h\":\"margin上下传递\",\"t\":[\"如果块级元素的顶部线和父元素的顶部线重叠，那么块级元素的margin-top值会传递给父元素。\",\"防止传递问题\",\"父元素设置padding-top\\\\padding-bottom\",\"父元素设置border\",\"触发BFC：设置overflow:hidden\"]},\"627\":{\"h\":\"background属性\",\"t\":[\"background-color：背景颜色\",\"background-image：背景图片\",\"background-repeat：背景图片平铺\",\"repeat：默认值，背景图片在水平和垂直方向平铺。\",\"repeat-x：背景图片在水平方向平铺。\",\"repeat-y：背景图片在垂直方向平铺。\",\"no-repeat：背景图片不平铺。\",\"background-position：背景图片位置\",\"水平方向：left、center、right、具体数值\",\"垂直方向：top、center、bottom、具体数值\",\"如果只设置一个值，那么另一个值默认为center（通常用来实现背景图片响应式）\",\"background-size：背景图片大小\",\"auto：默认值，背景图片保持原始大小\",\"cover：背景图片缩放到填充整个容器，可能会导致图片部分看不见\",\"contain：缩放背景图片，宽度或高度铺满容器，保持图片的宽高比不变\",\"background-attachment：背景图片是否固定\",\"scroll：默认值，相对于元素本身固定，而不是随着它的内容滚动\",\"local：相对于元素的内容固定，如果一个元素拥有滚动机制，背景将会随着元素的内容滚动\",\"fixed：相对于浏览器窗口固定，即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动（类似于视差滚动）\",\"background：简写属性\",\"background：#fff url(../img/bg.jpg) no-repeat center center/cover fixed\"]},\"628\":{\"h\":\"表单元素\",\"t\":[\"input\",\"type：text、password、radio、checkbox、button、submit、reset、file、hidden、image、email、url、number、range、date、month、week、time、datetime、datetime-local、search、tel、color\",\"input和label的关联\",\"label可以跟某个input绑定，点击label时，input会自动获得焦点。\",\"在类型为radio的input中，如果name相同，那么两个radio才能变为一组就会互斥即二选一。\",\"<label for=\\\"username\\\"> 用户名：<input type=\\\"text\\\" id=\\\"username\\\"> </label> <label for=\\\"password\\\"> 密码：<input type=\\\"password\\\" id=\\\"password\\\"> </label> <label for=\\\"male\\\"> <input type=\\\"radio\\\" id=\\\"male\\\" name=\\\"sex\\\" value=\\\"male\\\">男 </label> <label for=\\\"female\\\"> <input type=\\\"radio\\\" id=\\\"female\\\" name=\\\"sex\\\" value=\\\"female\\\">女 </label> \"]},\"629\":{\"h\":\"定位\",\"t\":[\"position\",\"static：默认值，元素在文档流中正常显示，top、right、bottom、left、z-index属性在static下无效。\",\"relative（一般用于对当前元素微调）：相对于自己原来的位置进行定位，不脱离标准流。\",\"absolute：相对于最邻近的一个非static定位的祖先元素进行定位；若没有这样的祖先，则相对于视口进行定位，脱离标准流（子绝父相）。\",\"fixed：相对于浏览器窗口（视口：当画面滚动时，固定不动）进行定位，脱离标准流（常用）。\",\"sticky（最新）：它的行为就像 position:relative; 而当页面滚动超出阈值（top、right、bottom、left）时，它的表现就像 position:fixed，它会固定在目标位置，是相对于最近的滚动祖先包含的滚动视口。\",\"定位总结\",\"将position设置为absolute和fixed元素的特点\",\"可以随意设置宽高，块级、行内级、行内块级元素的特性消失（如行内级元素可以设置宽高）。\",\"宽高默认由内容决定。\",\"不再给父元素汇报宽高数据（如父元素的高度由子元素撑开，子元素设置为绝对定位后，父元素高度不再由子元素撑开）。\",\"脱标元素内部默认还是按照标准流布局。\",\"定位参照对象的宽度（父元素） = left + right + margin-left + margin-right +绝对定位元素的宽度（子元素）\",\"定位参照对象的高度（父元素） = top + bottom + margin-top + margin-bottom +绝对定位元素的高度（子元素）\",\"/* 子元素在父级元素里面水平垂直居中 */ .child{ position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto; } \",\"width:auto\",\"行内非替换元素：width包裹内容\",\"块级元素：width包含块的宽度\",\"绝对定位元素：width包含内容\"]},\"630\":{\"h\":\"浮动规则\",\"t\":[\"只能向左浮动或者向右浮动，不能超出本行高度。\",\"不能超出包含块。\",\"浮动元素不能层叠。\",\"浮动元素会将行内级元素内容推出。\",\"clear属性\",\"指定一个元素是否必须移动（清除浮动后）到在它之前的浮动元素下面，用于清除浮动，解决浮动产生的高度塌陷问题。\",\"/* 给父元素增加::after伪元素 */ .clear-fix::after { content: \\\"\\\"; display: block; /* 伪元素为行内非替换元素，没有高度 */ clear: both; /* 值:left、right、both、none */ /* 浏览器兼容性 */ visibility: hidden; height: 0; } /* IE6/7兼容性 */ .clear-fix { *zoom: 1; } \"]},\"631\":{\"h\":\"形变动画\",\"t\":[\"transform形变\",\"2D形变：translate（平移）、scale（缩放）、rotate（旋转）、skew（倾斜）、transform-origin（形变坐标原点）\",\"3D形变：translate3d、scale3d、rotate3d、skew3d\",\"transition过渡\",\"transition-property：过渡属性\",\"transition-duration：过渡时间\",\"transition-timing-function：过渡函数 \",\"linear：匀速\",\"ease：缓冲\",\"ease-in：加速\",\"ease-out：减速\",\"ease-in-out：先加速后减速\",\"transition-delay：过渡延迟时间\",\"animation动画\",\"animation-name：动画名称（与@Keyframes的标识符要对应）\",\"animation-duration：动画时间（常用）\",\"animation-timing-function：动画函数（常用）\",\"animation-delay：动画延迟\",\"animation-iteration-count：动画次数\",\"animation-direction：动画方向 \",\"normal：正常方向\",\"reverse：反向\",\"alternate：交替\",\"alternate-reverse：交替反向\",\"animation-fill-mode：元素停留在动画的哪个位置 \",\"none：动画结束后，元素恢复到初始状态\",\"forwards：动画结束后，元素保持动画最后一帧的状态（常用）\",\"backwards：动画结束后，元素保持动画第一帧的状态\",\"animation-play-state：动画状态（JavaScript中使用） \",\"paused：暂停（音乐播放器常用）\",\"running：运行\",\"animation：简写属性 \",\"animation: name duration timing-function delay iteration-count direction fill-mode play-state;\",\"@keyframes：定义每一帧的属性\",\" @keyframes name { from { /* 起始状态 */ } to { /* 结束状态 */ } } @keyframes name { 0% { /* 起始状态 */ } 50% { /* 中间状态 */ } 100% { /* 结束状态 */ } } \"]},\"632\":{\"h\":\"Emmet语法\",\"t\":[\"!：生成html文档\",\"+：兄弟 >：子代\",\"div>ul>li+li+li\",\"*：多个 ^：父级\",\"div>ul>li*3\",\"div+div>p>span^h1\",\"()：分组 $：迭代个数\",\"(header>div>p+span)+footer>p\",\"ul>li.item$*3\",\"属性(id属性、class属性等)\",\"div#id.class1.class2\",\"css Emmet\",\"w100：width：100px\",\"h100：height：100px\",\"m10：margin：10px\",\"p10：padding：10px\"]},\"633\":{\"h\":\"其它\",\"t\":[\"outline\",\"外轮廓线，不占据空间，用于去除a元素和input元素的默认focus轮廓效果。\",\"outline：none：隐藏外轮廓线（常用）\",\"单行显示省略号\",\"white-space：nowrap（单行显示，合并空白）\",\"overflow：hidden（超出部分隐藏）\",\"text-overflow：ellipsis（超出部分用省略号显示）、clip（超出部分直接裁剪）\",\"referrerpolicy\",\"在获取资源（如图片等）时使用来源地址，用于防止盗链。\",\"no-referrer：不发送来源地址，一般用于获取来源图片\",\"border-collapse\",\"collapse：合并单元格边框\",\"separate：不合并单元格边框\",\"精灵图\",\"精灵图快速定位工具网站\",\"优点：减少http请求，减少图片大小，提高页面加载速度\",\"缺点：不利于SEO，不利于维护，不利于修改\",\"vertical-align\",\"默认值：baseline（在行盒中以基线对齐） \",\"文本的baseline是字母x的下方。\",\"inline-block默认的baseline是margin-bottom的底部（没有就是盒子的底部）。\",\"inline-block有文本时，baseline是最后一行文本的x的下方。\",\"top：把行内级盒子的顶端与行盒的顶端对齐\",\"bottom：把行内级盒子的底端与行盒的底端对齐\",\"middle：行内级盒子的中心点与父盒基线加上x字母高度一半的线对齐\",\"flex布局中justify-content最后一行布局问题\",\"flex布局常见问题\",\"<!-- 解决方案：加跟item宽度相等的空标签填充 --> .container > i { <!-- 与iten宽度相等 --> width: 110px } <div class=\\\"container\\\"> <div class=\\\"item item1\\\">1</div> <div class=\\\"item item2\\\">2</div> <div class=\\\"item item3\\\">3</div> <div class=\\\"item item4\\\">4</div> <!-- 添加i的个数是列数-2 --> <i></i> <i></i> </div> \",\"CSS常用函数\",\"rgb()/rgba()/translate()/rotate()/scale()\",\"var()：变量\",\"html { --main-color: #f00; } .box { background-color: var(--main-color); } span { color: var(--main-color); } \",\"calc()：计算 \",\"如calc(100% - 20px)（运算符两边必须要有空白字符）\",\"blur()：毛玻璃 \",\"filter: blur(10px)\",\"backdrop-filter: blur(10px) + background-color: rgba(255, 255, 255, 0.5)\",\"gradient()：颜色渐变 \",\"background-image: linear-gradient(45deg, blue, red)\",\"媒体查询\",\"@import url(../css) (max-width: 800px)\",\"<link rel=\\\"stylesheet\\\" media=\\\"screen and (max-width: 800px)\\\" href=\\\"../css\\\">\",\"@media screen and (max-width: 800px) and (min-width: 500px) { ... }\",\"使用Window.matchMedia()和MediaQueryList.addListener()来测试和监控媒体状态\",\"/* 利用了CSS的层叠性 */\\n@media screen and (min-width: 320px) {\\n  /* 320~375 */\\n  .box { font-size: 15px;}\\n}\\n@media screen and (min-width: 375px) {\\n  /* 375~414 */\\n  .box { font-size: 18px;}\\n}\\n@media screen and (min-width: 414px) {\\n  /* 414~480 */\\n  .box { font-size: 21px;}\\n}\\n@media screen and (min-width: 480px) {\\n  /* >480 */\\n  .box { font-size: 24px;}\\n}\\n\"]},\"634\":{\"h\":\"盒模型\"},\"635\":{\"h\":\"内容盒与边框盒\",\"t\":[\"W3C 内容盒模型（content-box）：width = content\",\"IE 边框盒模型（border-box）：width = content + padding + border\",\"浏览器默认使用 W3C 内容盒模型，width = 内容，即 box-sizing 的默认属性为 content-box\",\"一般使用 IE 盒模型（border-box）\"]},\"636\":{\"h\":\"offsetWidth\",\"t\":[\"offsetWidth = content + padding + border\",\"offsetWidth 是一个 DHTML 对象模型中的属性，由微软 IE 浏览器首次引入。有时候它也可以称为一个元素的物理或图形尺寸，或者 border-box 的宽度。\"]},\"637\":{\"h\":\"CSS 优先级\"},\"638\":{\"h\":\"样式类型优先级\",\"t\":[\"优先级递减顺序：\",\"行内样式：style=\\\"\\\"\",\"内联样式与外联优先级相同，遵循后面覆盖前面原则：在线示例\",\"内联样式：<style></style>\",\"外联样式：<link> 或 @import 引入（@import 不建议使用）\"]},\"639\":{\"h\":\"选择器类型优先级\",\"t\":[\"优先级递减顺序：\",\"ID 选择器（#example）\",\"类（.example）、属性（[type=\\\"radio\\\"]）、伪类（:hover）选择器\",\"标签（h1）、伪元素（::before）选择器\",\"通配符（*）、关系选择器（有相邻兄弟、子类、通用兄弟、后代、列合并选择器+, >, ~, '', ||）、反选伪类（:not()在 :not() 内部声明的选择器会影响优先级）\"]},\"640\":{\"h\":\"权重计算规则\",\"t\":[\"最高优先级 !important\",\"1,0,0,0 行内样式\",\"0,1,0,0 ID 选择器\",\"0,0,1,0 类、属性、伪类选择器\",\"0,0,0,1 标签、伪元素选择器\",\"0,0,0,0 通配符、子类、兄弟选择器\",\"继承的样式没有权值\",\"权重的进制是 256 进制，越具体权重越高，后面覆盖前面。!important最高，但尽量少用，避免样式优先级内卷 🐶\"]},\"641\":{\"h\":\"CSS 三角形\",\"t\":[\"使用 CSS 实现三角形\"]},\"642\":{\"h\":\"border-color\",\"t\":[\"如果想实现其中的任一个三角形，把其他方向上的 border-color 都设置成透明即可。\",\".triangle { height:0; width:0; border-color:red transparent transparent transparent; border-style:solid; border-width:30px; } \"]},\"643\":{\"h\":\"clip-path\",\"t\":[\"MDN 上的介绍：chip-path\",\".triangle {\\n  width: 30px;\\n  height: 30px;\\n  background: red;\\n  clip-path: polygon(0px 0px, 0px 30px, 30px 0px); // 将坐标(0,0),(0,30),(30,0)连成一个三角形\\n  transform: rotate(225deg); // 旋转225，变成下三角\\n}\\n\"]},\"644\":{\"h\":\"Flex 布局\",\"t\":[\"容器即父元素，项目即子元素\"]},\"645\":{\"h\":\"Flex container容器\",\"t\":[\"display: flex | inline-flex; 分别生成一个块状或行内的 flex 容器盒子。简单说来，如果你使用块元素如 div，你就可以使用 flex，而如果你使用行内元素，你可以使用 inline-flex。\",\"有下面六种属性可以设置在容器上：\",\"flex-direction 主轴的方向 （默认：row 水平）\",\"flex-wrap 容器内项目是否可换行 (默认：nowrap 不换行 常用：wrap)\",\"flex-flow flex-direction 和 flex-wrap 的简写形式 （没用）\",\"justify-content 项目在主轴的对齐方式。（默认: flex-start 左对齐）\",\"justify-content属性\",\"align-items 项目在交叉轴上的对齐方式（默认：stretch 即如果项目未设置高度或者设为 auto，将占满整个容器的高度。）\",\"align-items属性\",\"align-content 多根轴线的对齐方式，如果项目只有一根轴线，即flex-wrap: nowrap 不换行，那么该属性将不起作用（默认值为 stretch）\",\"align-content属性\"]},\"646\":{\"h\":\"Flex item项目\",\"t\":[\"有下面六种属性可以设置在项目上：\",\"order 项目在容器中的排列顺序，数值越小，排列越靠前（默认值为 0）\",\"flex-basis 项目在主轴上占据的空间（默认值：auto，即项目本来的大小，优先级高于 weight、height）\",\"flex-grow 项目的放大拉伸比例（默认值为 0，即如果存在多余空间，也不放大） \",\"如果所有项目的flex-grow属性都为 1，则它们将等分剩余空间（如果有的话）。\",\"当flex container在主轴方向上有剩余size时，才生效。\",\"flex-shrink 项目的缩小比例（默认值: 1，即如果空间不足，该项目将缩小，负值对该属性无效）\",\"flex flex-grow, flex-shrink 和 flex-basis的简写（默认值是 0 1 auto） 有关快捷值：auto (1 1 auto) 、 none (0 0 auto) 、1 建议优先使用这个属性，而不是单独写三个分离的属性。\",\"align-self 单个项目在交叉轴的对齐方式 (center、flex-end)\",\"align-self属性\"]},\"647\":{\"h\":\"参考资料\",\"t\":[\"30 分钟学会 Flex 布局\",\"20分钟掌握CSS Flex布局\"]},\"648\":{\"h\":\"概述\",\"t\":[\"层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种样式表语言（不是编程、标记语言），用来描述 HTML 或 XML 文档的样貌。目前广泛使用的版本 CSS2.1，CSS3正在标准化。\",\"层叠指的是：\",\"样式层叠：可以多次对同一选择器进行样式声明\",\"选择器层叠：可以用不同选择器对同一个元素进行样式声明\",\"文件层叠：可以用多个文件进行层叠\",\"这些特性使得CSS极度灵活，导致其不具有正交性，修改一处可能导致多处修改\",\"浏览器渲染流程\",\"浏览器渲染流程\"]},\"649\":{\"h\":\"Less\"},\"650\":{\"h\":\"Less代码的编译\",\"t\":[\"安装npm install -g less，通过webpack编译\",\"module: { rules: [ { test: /\\\\.less$/, use: [ { loader: 'style-loader', }, { loader: 'css-loader', }, { loader: 'less-loader', }, ], }, ], }, \",\"引入CDN\",\"<link rel=\\\"stylesheet/less\\\" href=\\\"style.less\\\" /> <script src=\\\"https://cdn.jsdelivr.net/npm/less@4\\\"></script> \",\"通过vscode插件easy-less编译或CSS在线编译https://lesscss.org/less-preview/\"]},\"651\":{\"h\":\"Less语法\"},\"652\":{\"h\":\"变量\",\"t\":[\"@themecolor: #4D926F; @mainFontSize: 12px; @smallFontSize: 10px; body { color: @themecolor; font-size: @mainFontSize; } \"]},\"653\":{\"h\":\"嵌套\",\"t\":[\"#header { color: #fff; .logo { width: 300px; height: 80px; } h1 { font-size: @mainFontSize; } p { .link { color: @themecolor; font-size: @smallFontSize; &:hover { color: #00f; } } } } \"]},\"654\":{\"h\":\"混入\",\"t\":[\"通俗的讲，就是把一些重复的代码抽离出来，以后直接复用就可以了。\",\".nowrap_ellipsis { // 无参混入 white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .border(@borderWith: 5px, @borderColor: blue) { // 有参混入 border: @borderWith solid @borderColor; } .box_size { // 混入和映射结合使用 width: 100px; height: 100px; } .box1 { width: .box_size()[width]; background: #f00; .nowrap_ellipsis(); .border(10px, red); } .box2 { width: 200px; background: #0f0; .nowrap_ellipsis(); } \",\"继承：&:extend(.box_size);\",\"内置函数：color: color(skyblue);、width: convert(100px, \\\"in\\\");等\",\"作用域：首先在本地查找变量或混入，若找不到，则从父级作用域继承。\"]},\"655\":{\"h\":\"响应式\",\"t\":[\"媒体查询\",\"@media only screen and (min-width: 375px) and (max-width: 413px) {}\",\"em 相对于自己的 font-size（不常用）\",\"rem 相对于根元素 html 的 font-size（常用）\",\"动态设置html的font-size（font-size：视口的宽度 / 10，可引入lib-flexible）\",\"换算成rem的单位（webpack、pxtorem插件、Less混入）\",\"vh 相对于视口高度的百分比（100vh）\",\"vw 相对于视口宽度百分比（100vw）\",\"vmax、vmin 获取视口高度与宽度相比的最大、最小值（手机横竖旋转视口宽高会对调）\",\"window.screen.height 显示屏高度\",\"window.innerHeight 视口高度（除去浏览器导航栏等浏览器自带功能键的高度）\",\"document.body.clientHeight 网页文档 body 高度\",\"vw相比于rem的优势（1rem = 10vw）：\",\"不需要去计算html的font-size，也不需要给html设置font-size；\",\"不会因为设置html的font-size，而必须给body再设置一个font-size，防止继承；\",\"因为不依赖font-size的尺寸，所以不用担心某些原因html的font-size尺寸被篡改，导致页面尺寸混乱；\",\"更加语义化，1vw刚好是百分之一的viewport的大小；\",\"具备rem之前所有的优点；\"]},\"656\":{\"h\":\"HTML5\",\"t\":[\"自 1999 年以后 HTML 4.01 已经改变了很多。今天，在 HTML 4.01 中的几个已经被废弃，这些元素在 HTML5 中已经被删除或重新定义。\",\"为了更好地处理今天的互联网应用，HTML5 添加了很多新元素及功能，比如: 图形的绘制，多媒体内容，应用程序缓存，存储，网络工作者等。\"]},\"657\":{\"h\":\"语义化标签\",\"t\":[\"使用恰当语义的 HTML 标签、CSS 类名，让页面具有良好的语义和结构，从而方便人类和机器都能快速理解网页内容\",\"文章：<article>\",\"边栏：<aside>\",\"主要内容：<main>\",\"导航：<nav>\",\"区域：<section>\",\"网页页眉或 <section> 的头部：<header>\",\"网页页脚或 <section> 的脚部：<footer>\",\"段落：<p>\",\"标题：<h1>~<h6>\",\"标题组：<hgroup>，包住多个 <h1>~<h6>\",\"时间：<time><time>9:00</time>、<time datetime=\\\"2021-07-17\\\">日期</time>\",\"<b>、<strong>、<i>、<em> 的异同点：\",\"同：<b> 和 <strong> 会让文本变粗；<i> 和 <em> 会让文本斜体。\",\"异：\",\"<b> 定义粗体的文本。\",\"<strong> 把文本定义为粗体语气更强的强调的内容。\",\"<i> 定义斜体的文本。\",\"<em> 把文本定义为斜体强调的内容。\",\"v2-a99aec34ad154369ecc31954c1b9d036_r\"]},\"658\":{\"h\":\"语义化好处\",\"t\":[\"对人：\",\"便于团队的开发和维护。\",\"在没有加载 CSS 的情况下也能呈现较好的内容结构与代码结构，易于阅读。\",\"对机器：\",\"有利于 SEO（搜索引擎优化），搜索引擎的爬虫依赖于标签来确定上下文和各个关键字的权重。\",\"方便其他设备的解析（如屏幕阅读器、盲人阅读器等），利于无障碍阅读，提高可访问性。\"]},\"659\":{\"h\":\"多媒体标签\",\"t\":[\"<audio controls autoplay loop='true'> <source src=\\\"./source/audio.mp3\\\"/> </audio> <video controls poster='imgs/poster.jpg'> <source src=\\\"./source/video.mp4\\\"> </video> \",\"属性：\",\"controls：展示多媒体控制面板\",\"autoplay：是否自动播放\",\"loop：是否循环播放\",\"poster：指定视频封面\",\"source：指定音视频源\"]},\"660\":{\"h\":\"Canvas 标签\",\"t\":[\"首先获取 canvaslet canvas = document.getElementById('canvas')\",\"获取 canvas 2d 上下文let ctx = canvas.getContent('2d')\",\"设置笔刷样式、绘制形状，开始绘制\"]},\"661\":{\"h\":\"字符实体\",\"t\":[\"常见字符实体\"]},\"662\":{\"h\":\"概述\",\"t\":[\"HyperText Markup Language，超文本标记语言，简称：HTML，是一种描述网页的，构建⽹⻚基本结构的标记语言，而非编程语言。\"]},\"663\":{\"h\":\"HTML 结构\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"zh-CN\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <link rel=\\\"icon\\\" href=\\\"/favicon.ico\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover\\\" /> <title>网页标题</title> <style></style> </head> <body> <div id=\\\"app\\\"></div> <script type=\\\"module\\\" src=\\\"/src/main.js\\\"></script> </body> </html> \",\"文档类型：<!DOCTYPE> 指定浏览器文档使用何种规范，有 HTML、XHTML 规范\",\"网页语言：<html lang=\\\"\\\"> 指定网页语言，常用的有 \\\"zh-CN\\\"、\\\"en\\\"\",\"根元素 <html>\",\"head 元素：指定网页数据信息、样式表等，包括 <link>、<meta>、<style> 等\",\"元标签：<meta>\",\"字符集（charset），常用的有 \\\"UTF-8\\\"、\\\"GBK\\\"\",\"IE 兼容 <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> 告诉 IE 使用最新的引擎渲染网页\",\"视口 <meta name=\\\"viewport\\\"> 控制页面在移动端浏览器中的布局 \",\"视口宽度：设备宽度\",\"初始缩放比例：1\",\"最小缩放比例：1\",\"最大缩放比例：1\",\"禁止用户缩放\",\"视口适配刘海屏：覆盖\",\"网页标题图标 <link rel=\\\"icon\\\" href=\\\"/favicon.ico\\\" />\",\"body 元素：包含了可见的页面内容\",\"由于一开始的网页主要只是用于在 PC 上展示，所以开发者们并没有过多考虑关于移动端访问的问题，但随着移动端的兴起，越来越多的 Web 访问变成了通过移动端进行的。而由于 PC 端的 viewport 比移动端大，所以为了解决这个问题，浏览器只能的等比的缩小整个页面，导致页面的字体，图片等等都显得非常小，而由于 PC 端的 viewport 是横屏的（宽大大于高），而移动端是竖屏，所以用户放大网页之后还会出现横向的滚动条，这一系列都让用户体验相当不好。 所以为了解决上面的问题，最早由 Apple 在 Safari iOS 中引入了 viewport meta 标签，让 Web 开发人员控制视口的大小和比例。\",\"引用自 [ 面试系列 ] - 二：meta viewport 是做什么用的，怎么写？\"]},\"664\":{\"h\":\"常用标签\"},\"665\":{\"h\":\"a标签\",\"t\":[\"属性：\",\"href\",\"target\",\"download\",\"作用：\",\"跳转外部页面\",\"跳转内部锚点\",\"跳转到邮箱或电话\"]},\"666\":{\"h\":\"href 属性\",\"t\":[\"网址\",\"https://google.com\",\"http://google.com\",\"//google.com\",\"路径\",\"index.html\",\"./index.html\",\"伪协议\",\"javascript:代码;\",\"mailto:邮箱\",\"tel:手机号\",\"id\",\"href = #xxx 跳转内部锚点\"]},\"667\":{\"h\":\"target 属性\",\"t\":[\"内置名字\",\"_blank （在新页面打开）\",\"_top （在最上层内联框架打开,一般和iframe一起使用）\",\"_parent（在父级内联框架内打开,一般和iframe一起使用）\",\"_self （默认：在当前页面打开）\",\"自定义名字\",\"window 的名字\",\"iframe 的名字\"]},\"668\":{\"h\":\"download 属性\",\"t\":[\"下载页面，不是所有浏览器都支持\"]},\"669\":{\"h\":\"iframe 标签（不推荐使用）\",\"t\":[\"属性：\",\"src\",\"frameborder （是否显示边框）\",\"作用：\",\"页面嵌套\",\"和a元素结合\"]},\"670\":{\"h\":\"table 标签\",\"t\":[\"thead\",\"tbody\",\"tfoot\",\"tr\",\"td\",\"th\",\"<table> <thead> <tr> <th></th> <th>小明</th> <th>小红</th> </tr> </thead> <tbody> <tr> <th>数学</th> <td>100</td> <td>99</td> </tr> <tr> <th>语文</th> <td>100</td> <td>99</td> </tr> </tbody> <tfoot></tfoot> </table> \",\"样式\",\"table-layout （ auto 与 fixed ）\",\"清除 table 默认样式\",\" table { border-collapse: collapse; border-spacing: 0; } \"]},\"671\":{\"h\":\"img 标签\",\"t\":[\"作用：\",\"发出 get 请求，展示图片\",\"属性：\",\"alt （图片加载失败时替换文本）\",\"height\",\"width\",\"src\",\"事件：\",\"onload\",\"onerror\",\"响应式：\",\"max-width: 100%\"]},\"672\":{\"h\":\"form 标签\",\"t\":[\"作用：\",\"发出 get 和 post 请求，然后刷新页面\",\"属性：\",\"action、autocomplete、method、target\",\"事件：\",\"onsubmit\",\"<input type=\\\"submit\\\" value=\\\"提交\\\" /> <button type=\\\"submit\\\">提交</button> // 区别：button标签内可以加其他标签，如图片、加粗等。input不能 \"]},\"673\":{\"h\":\"input 标签\",\"t\":[\"作用：\",\"让用户输入内容\",\"属性：\",\"type: button / checkbox / email / file / hidden / number / password / radio / search / submit / tel / text\",\"其他 name/ autofocus/ checked/ disabled/ maxlength /pattern/value/placeholder\",\"事件：\",\"onchange\",\"onfocus\",\"noblur\",\"验证器：\",\"H5新增(required)\"]},\"674\":{\"h\":\"其他输入标签\",\"t\":[\"select + option\",\"textarea\",\"label\",\"常用全局属性：\",\"id\",\"class\",\"style\",\"title （鼠标悬停时显示文字注释）\",\"一般不监听 input的 click 事件\",\"form 标签中的 input 要有 name\",\"form 标签中必须有type = submit的按钮input或button，否则无法提交\",\"meta\",\"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\\\"> \",\"让viewport的宽度等于物理设备上的真实分辨率，不允许用户缩放\",\"是否独占一行\",\"width、height\",\"padding、margin\",\"默认宽高\",\"块级元素\",\"是\",\"有效\",\"有效\",\"撑满父元素\",\"行内元素\",\"否\",\"无效\",\"padding 有效；margin 水平方向有效，竖直方向无效\",\"随内部元素的内容变化\",\"行内块级元素\",\"否\",\"有效\",\"有效\",\"随内部元素的内容变化\",\"常⽤的块级元素：<div>、<p>、<h1>~<h6>、<ol>、<ul>、<dl>、<table>、<blockquote>、<form>\",\"常⽤的内联元素：<a>、<span>、<br>、<i>、<em>、<strong>、<label>、<q>、<code>\",\"常⽤的内联元素：<img>、<input>、<td>、<textarea>、<select>\"]},\"675\":{\"h\":\"Cookie、Session、LocalStorage、SessionStorage\",\"t\":[\"HTTP 是无状态的协议，无法记录历史状态，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。Cookie 和 Session 是常用的会话跟踪技术。\"]},\"676\":{\"h\":\"Cookie\",\"t\":[\"客户端向服务端发送首次请求，服务端返回包含 Set-Cookie 头部的响应通知客户端保存 Cookie。在后续的请求中，客户端每次都在请求头携带上 Cookie 发送给服务端。\",\"缺点：不安全，存储量小\"]},\"677\":{\"h\":\"Session\",\"t\":[\"客户端向服务端发送首次请求，服务端会创建一个Session 保存客户端信息，同时生成一个唯一的 SessionID，并保存在服务端，再返回包含 SessionID 的响应给客户端。\",\"客户端收到后，将 SessionID 存入 Cookie 中。\",\"在后续的请求中，客户端每次都在请求头携带记录有 SessionID 的 Cookie 发送给服务端，服务端根据 SessionID 匹配对应的 Session 获取客户端状态。\",\"如果浏览器禁用了 Cookie，可以通过将 SessionID 写入 URL 的方式发送给服务端。\",\"缺点：服务器内存消耗大\"]},\"678\":{\"h\":\"Cookie 与 Session 区别\",\"t\":[\"存储容量\",\"生命周期\",\"存储位置\",\"安全性\",\"Cookie\",\"4KB\",\"无过期时间：关闭浏览器后被清除有过期时间：在过期时间后失效\",\"客户端\",\"低\",\"Session\",\"5MB\",\"关闭页面或浏览器失效\",\"服务端\",\"高\",\"比喻：\",\"Session 像用户档案表，里面包含了用户的认证信息和登录状态等信息，保存在服务端。\",\"Cookie 像用户通行证，保存在客户端。\"]},\"679\":{\"h\":\"LocalStorage\",\"t\":[\"LocalStorage 是 HTML5 新增的存储对象，用于在浏览器本地长久保存数据。\"]},\"680\":{\"h\":\"SessionStorage\",\"t\":[\"SessionStorage 是 HTML5 新增的存储对象，用于在浏览器本地临时保存数据。\",\"打开多个相同的 URL 的标签页，会创建各自的 SessionStorage\"]},\"681\":{\"h\":\"Cookie、LocalStorage 与 SessionStorage 的区别\",\"t\":[\"存储容量\",\"生命周期\",\"存储位置\",\"Cookie\",\"4KB\",\"无过期时间：关闭浏览器后被清除有过期时间：在过期时间后失效\",\"客户端，每次请求都会携带\",\"LocalStorage\",\"5MB（视浏览器而定）\",\"不会自动过期，除非用户手动清除\",\"客户端\",\"SessionStorage\",\"5MB\",\"仅在当前网页会话下有效，关闭页面或浏览器后会被清除\",\"客户端\"]},\"682\":{\"h\":\"Token\",\"t\":[\"JWT(JSON Web Token) 一种基于 token 的跨域认证方案\",\"客户端携带用户的登录凭证（一般为用户名和密码）向服务端发送首次请求\",\"服务端查询数据库验证用户有效性，如果有效会根据储存在服务端秘钥对登录凭证进行签名生成 token，并返回给客户端\",\"客户端收到 token 信息，可以保存在cookie或者 localStorage\",\"后续请求中，客户端都在请求头的 Authorization 字段写上token信息，服务端再对 token 解密取得用户登录凭证，根据登录凭证再去数据库中对相应的用户数据进行操作。\"]},\"683\":{\"h\":\"参考资料\",\"t\":[\"JSON Web Token 入门教程\",\"彻底弄懂session，cookie，token\"]},\"684\":{\"h\":\"HTTP 缓存\",\"t\":[\"HTTP 缓存是浏览器对之前请求过的文件进行缓存，以便下次访问时重复使用，减少网络请求次数，提高页面加载速度，缓解服务端的压力。 HTTP 缓存分为：强制缓存与协商缓存\"]},\"685\":{\"h\":\"强制缓存\"},\"686\":{\"h\":\"定义与过程\",\"t\":[\"定义：客户端向服务端发送首次请求，服务端返回带有 Cache-Control 或 Expires 字段控制资源过期时间的响应。在过期时间内客户端不再重复发送请求，直接读取客户端本地缓存。\",\"过程：\",\"客户端向服务端发送首次请求，服务端返回带有 Cache-Control 或 Expires 字段的资源。\",\"后续请求时，如果资源没有过期（强制缓存生效）：直接从浏览器本地缓存中获取资源，状态码 200 OK (from memory cache)。\",\"后续请求时，如果资源过期（强制缓存失效）：在没有使用协商缓存的情况下会重复首次请求的步骤。所以一般会搭配使用协商缓存。\",\"控制强制缓存的字段有：\",\"Pragma（不推荐使用）\",\"Expires（HTTP/1.0）\",\"Cache-Control（HTTP/1.1）\"]},\"687\":{\"h\":\"Expires 与 Cache-Control\",\"t\":[\"Expires 过期时间。缺点在于该日期依赖的是用户的系统时间，如果用户系统时间不准确，缓存有效期就不准确。\",\"Cache-Control 缓存控制。在请求头和响应头中都可以使用，常用的属性有：\",\"max-age： 最大缓存时间（秒）\",\"no-cache：不使用强缓存，需要向服务器验证缓存是否是最新的\",\"no-store：禁止使用缓存（包括协商缓存），每次都向服务器请求最新的资源\",\"public：响应可以被中间代理、CDN 等缓存\",\"private：仅客户端可以缓存数据，代理服务器、CDN 不可缓存\",\"must-revalidate：在缓存过期前可以使用，过期后必须向服务器验证\",\"优先级：Cache-Control 的优先级比 Expires 高。\"]},\"688\":{\"h\":\"协商缓存（对比缓存）\"},\"689\":{\"h\":\"定义与过程\",\"t\":[\"定义：强制缓存失效后，客户端携带资源标识向服务端发送请求。服务端根据资源标识判断缓存资源与最新资源是否相同，告诉客户端是否使用缓存资源。\",\"过程：\",\"客户端向服务端发送首次请求时，服务端返回资源文件和资源标识（携带有 Last-Modified 或 Etag 的响应）。\",\"后续请求时，客户端发送携带 If-Modified-Since 或 If-None-Match 的请求。（值分别与首次请求的 Last-Modified 或 Etag 相等）\",\"服务端根据两者是否相等判断资源是否没有更新： 如果相等（协商缓存生效），则返回 304 状态码，告诉客户端使用本地缓存。 如果不相等（协商缓存失效），则返回 200 状态码，并返回最新的资源文件和资源标识。\",\"控制协商缓存的字段有：\",\"Last-Modified/If-Modified-Since（HTTP/1.0）\",\"Etag/If-None-Match（HTTP/1.1）\"]},\"690\":{\"h\":\"Etag 与 Last-Modified\",\"t\":[\"Last-Modified/If-Modified-Since 最后修改时间，某个资源文件在服务器最后被修改时间。缺点在于精度只到秒级，1 秒内的多次修改无法判断资源是否更新。\",\"Etag/If-None-Match 资源标识，服务端根据资源文件的内容生成的唯一资源标识。\",\"优先级：Etag/If-None-Match优先级比Last-Modified/If-Modified-Since高。\"]},\"691\":{\"h\":\"三种刷新操作对缓存的影响\",\"t\":[\"正常操作（强制缓存有效，协商缓存有效）：地址栏输入 URL，跳转链接，前进后退等\",\"手动刷新（强制缓存失效，协商缓存有效）：F5，点击工具栏中的刷新按钮，右键菜单重新加载\",\"强制刷新（强制缓存失效，协商缓存失效）：Ctrl+F5，Shift+Command+R\",\"强制缓存\",\"协商缓存\",\"正常操作\",\"✅\",\"✅\",\"手动刷新\",\"❌\",\"✅\",\"强制刷新\",\"❌\",\"❌\"]},\"692\":{\"h\":\"参考资料\",\"t\":[\"Cache-Control —— MDN\",\"HTTP缓存之协商缓存和强制缓存\",\"http面试必会的：强制缓存和协商缓存\",\"HTTP 缓存【JS面试题小合集】\"]},\"693\":{\"h\":\"HTTP\",\"t\":[\"超文本传输协议（HTTP，HyperText Transfer Protocol）是一个用于传输超媒体文档（例如 HTML）的应用层协议。\",\"HTTP 是无状态的协议，无法记录客户端用户的状态。\"]},\"694\":{\"h\":\"响应状态码\",\"t\":[\"响应状态码分为五大类：\",\"分类\",\"描述\",\"1xx\",\"信息\",\"2xx\",\"成功\",\"3xx\",\"重定向\",\"4xx\",\"客户端错误\",\"5xx\",\"服务器错误\",\"常见状态码：\",\"100（继续）：客户端应继续其请求\",\"200（成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页\",\"201（已创建） 请求成功并且服务器创建了新的资源\",\"202（已接受） 服务器已接受请求，但尚未处理\",\"301（永久重定向） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置\",\"302（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求\",\"304（资源未修改）客户端请求的数据还是最新的，服务器不再返回数据\",\"403（禁止） 请求的资源被禁止，服务器拒绝请求\",\"404（未找到） 请求的资源不存在，服务器找不到请求的网页\",\"500（服务器内部错误）：服务器遇到错误，无法完成请求\",\"502（错误网关）：服务器作为网关或代理，但是从上游服务器得到错误响应。常见于：客户端访问服务器某个防火墙没有开放的接口\",\"503 （服务不可用）：服务器因维护或过载而停机，通常只是暂时的，应返回解释当前问题的页面\",\"504 （网关超时）：服务器作为网关或代理，但是没有及时从上游服务器收到请求\"]},\"695\":{\"h\":\"HTTP header\",\"t\":[\"请求头 Request Headers:\",\"Accept：浏览器可接收的数据格式\",\"Accept-Encoding：浏览器可接收的压缩算法，如 gzip\",\"Accept-Languange：浏览器可接收的语言，如 zh-CN\",\"Connection：keep-alive 一次 TCP 连接重复使用\",\"cookie\",\"Host：域名\",\"User-Agent：浏览器信息\",\"Content-type：发送数据的格式，如 application/json\",\"响应头 Response Headers:\",\"Ccontent-type：返回数据的格式，如 application/json\",\"Content-length：返回数据的大小（字节）\",\"Content-Encoding：返回数据的压缩算法，如 gzip\"]},\"696\":{\"h\":\"HTTP1 与 HTTP2\",\"t\":[\"HTTP1 与 HTTP2 的区别：\",\"HTTP/2 使用二进制传输，将 header 和 body 分成帧来传输。HTTP/1.1 是字符串传输。\",\"HTTP/2 支持多路复用，速度快，延迟低。HTTP/1.1 不支持。\",\"HTTP/2 支持头部压缩，HTTP/1.1 不支持。\",\"HTTP/2 支持服务器推送， HTTP/1.1 不支持。\"]},\"697\":{\"h\":\"HTTPS\",\"t\":[\"HTTPS = HTTP + SSL/TLS(安全层)\",\"TLS（Transport Layer Security，安全传输层协议），前身是 SSL（Secure Socket Layer，安全套接字协议）\",\"对称加密：客户端和服务端使用相同的秘钥进行加密解密。优点：速度快；缺点：服务端需要保存很多个客户端的密钥，并保证不被泄露。\",\"非对称加密：也称为公钥加密。服务端拥有一对可以互相加密解密的公钥和私钥，服务端在网络上任意分发公钥，客户端用公钥加密数据后，再发给服务端。缺点：速度慢\",\"混合加密：同时使用对称加密和非对称加密，平衡两者的优缺点。\",\"TLS 使用了对称加密、非对称加密、身份认证等技术。\"]},\"698\":{\"h\":\"TLS1.2 握手过程\",\"t\":[\"握手过程：\",\"客户端向服务端发送第1随机数，服务端收到后再发送第2随机数、公钥和证书，客户端比对服务端发放的公钥是否通过证书颁发机构（CA）的认证；\",\"客户端再生成第3随机数（预主密钥）通过公钥加密发送，服务端收到后通过自己的私钥进行解密，得到预主密钥；\",\"客户端和服务端都通过第1随机数、第2随机数和预主密钥计算出会话秘钥，后续就使用会话秘钥进行加密通信。\",\"TLS1.2 使用了对称加密、非对称加密、身份认证等技术：\",\"身份认证：客户端比对服务端发放的公钥是否通过证书颁发机构（CA）的认证\",\"非对称加密：客户端发送公钥给客户端加密第3随机数（预主密钥），再通过私钥解密得到第3随机数。\",\"对称加密：客户端和服务端都持有相同的会话秘钥（第1随机数 + 第2随机数 + 第3随机数）\"]},\"699\":{\"h\":\"HTTP 与 HTTPS 的区别\",\"t\":[\"HTTP 是明文传输的，不安全；HTTPS 是加密传输的，非常安全。\",\"HTTP 使用 80 端口，HTTPS 使用 443 端口。\",\"HTTP 较快，HTTPS 较慢。\",\"HTTPS 的 CA 证书需要购买（但也有免费的），HTTP 不需要证书。\"]},\"700\":{\"h\":\"GET 与 POST 的区别\",\"t\":[\"协议规定的根本区别：HTTP 协议规定的语义上获取数据与提交数据的区别\",\"工程实践中的区别：\",\"GET 用于获取数据，无副作用，幂等，请求参数一般放在 URL 里，可缓存，产生一个 TCP 数据包。\",\"POST 用于提交数据，有副作用，非幂等，请求参数一般放在请求体中，不可缓存，产生两个或以上 TCP 数据包。\",\"(幂等表示执行相同的操作，结果也是相同的)\",\"详细区别：\",\"从缓存的角度，GET 请求会被浏览器主动缓存下来，留下历史记录，而 POST 默认不会。\",\"从编码的角度，GET 只能进行 URL 编码，只能接收 ASCII 字符，而 POST 没有限制。\",\"从参数的角度，GET 一般放在 URL 中，因此不安全，POST 放在请求体中，更适合传输敏感信息。\",\"从幂等性的角度，GET 是幂等的，而 POST 不是。\",\"从 TCP 的角度，GET 请求会把请求报文一次性发出去。而 POST 会分为两个 TCP 数据包：首先发 header 部分，如果服务器响应 100(continue)， 再发 body 部分。\"]},\"701\":{\"h\":\"参考资料\",\"t\":[\"HTTPS是什么？加密原理和证书。SSL/TLS握手过程\",\"搞懂HTTPS工作原理\"]},\"702\":{\"h\":\"同源策略与跨域\"},\"703\":{\"h\":\"同源策略\",\"t\":[\"同源策略：浏览器的安全策略，用于限制一个源如何与另一个源的资源进行交互，保障用户隐私、数据安全，避免 XSS、CSFR 等网络攻击。\",\"浏览器默认开启了同源策略，向其他源发出的请求可以发出，但响应会被浏览器拦截，可以通过插件关闭（不建议）。另外，Postman 没有使用同源策略，才能随意前后端联调。\"]},\"704\":{\"h\":\"源\",\"t\":[\"源 = 协议 + 域名+ 端口号 URL = 协议 + 域名 + 端口号 + 资源路径 [+ 参数 + 查询 + 锚点] 同源：协议、域名、端口号完全一致。即便两个不同的域名指向同一个ip地址，也非同源\",\"https://example.com 与以下 URL 同源判断：\",\"URL\",\"判断\",\"说明\",\"http://example.com\",\"不同源\",\"协议不同\",\"https://www.example.com\",\"不同源\",\"子域名不同\",\"https://www.example.cn\",\"不同源\",\"主域名不同\",\"https://example.com:443\",\"同源\",\"https 默认端口443http 默认端口 80\",\"顶级域有 .com、.org、.edu、.cn、.us 等www. 是互联网早期常用的子域名，表示提供网站服务，以与 mail. 邮件服务等作区分。 顶级域名需要备案，而二级域名不需要单独备案，只要它所处的一级域名已经备案，就能直接解析。 通过 window.origin 或 location.origin 可以得到当前网页源\"]},\"705\":{\"h\":\"跨域\",\"t\":[\"跨域：绕开浏览器的同源策略限制，在不同域之间相互请求资源。实现跨域有三种常用方式：JSONP、CORS、服务器代理。\"]},\"706\":{\"h\":\"JSONP\",\"t\":[\"JSONP：JSON with Padding。利用 script 标签不受浏览器同源策略的限制，进行跨域 GET 请求。注意它不是 AJAX 请求。\",\"<!-- 前端 --> <!DOCTYPE html> <html lang=\\\"zh-CN\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> </head> <body> <script src=\\\"https://backend.com/data?callback=getName\\\" type=\\\"text/javascript\\\"></script> <script> function getName(data) { console.log(data) } </script> </body> </html> \",\"// 后端：将数据传入回调函数，再拼接为字符串返回。 // query.callback 即 getName response.send( `${query.callback}({ \\\"name\\\": \\\"Nevermore\\\" })` ) \",\"过程：\",\"前端利用 script 标签的 src 属性可以请求外部的 JS 文件的特性，向后端发送 GET 请求\",\"后端将数据传入回调函数\",\"浏览器加载 script 标签，因为指定了类型 type=\\\"text/javascript\\\"，于是执行服务端返回的函数\",\"优缺点：\",\"优点：使用简单，没有兼容性问题\",\"缺点：只支持 GET 请求\"]},\"707\":{\"h\":\"CORS\",\"t\":[\"CORS：Cross-Origin Resource Sharing，跨源资源共享（又称跨域资源共享）\",\"请求又分简单请求与复杂请求（非简单请求）：简单请求不会触发 CORS 的 OPTIONS预检请求，复杂请求一般会修改数据库数据，浏览器需要预先检查下服务器是否允许该请求。\",\"简单请求主要满足以下两大条件：\",\"条件 1：使用下列方法之一：\",\"GET\",\"HEAD\",\"POST\",\"条件 2：Content-Type 的值仅限于下列三者之一：\",\"text/plain\",\"multipart/form-data\",\"application/x-www-form-urlencoded\",\"POST 提交 JSON 数据是复杂请求，POST 提交 form 表单数据是简单请求。\",\"如何通过 CORS 跨域：\",\"对于简单请求：服务端在响应头设置\",\"Access-Control-Allow-Origin: https://server // 或 * 允许所有源访问 Access-Control-Allow-Origin: * \",\"对于复杂请求：服务端在响应头设置\",\"Access-Control-Allow-Origin: https://client Access-Control-Allow-Methods: GET, HEAD, PUT, POST, DELETE, PATCH, OPTIONS Access-Control-Allow-Headers: Content-Type \",\"如果需要携带 Cookie：\",\"客户端 AJAX 请求需要设置xhr.withCredentials: true\",\"服务端响应头需要设置 Access-Control-Allow-Credentials: true\"]},\"708\":{\"h\":\"服务器代理\",\"t\":[\"Nginx 反向代理，监听某个域名的，再转发到另一个域名。\"]},\"709\":{\"h\":\"参考资料\",\"t\":[\"九种跨域方式实现原理（完整版）\"]},\"710\":{\"h\":\"TCP 三次握手与四次挥手\",\"t\":[\"TCP（Transmission Control Protocol，传输控制协议 ）是一种基于连接的、可靠的传输层协议。TCP 协议建立连接的本质是交换双方的状态（比如序号） UDP（User Datagram Protocol，用户数据报协议）是一种基于非连接的、不可靠的传输层协议\",\"TCP 与 UDP 的区别：\",\"TCP 基于连接（类比打电话），稳定。常用于文件传输、网页浏览等\",\"UDP 基于非连接（类比写信），速度快，但不稳定会丢包。常用于语音通话、视频直播。\",\"提示\",\"DDOS(distributed denial of service)：分布式拒绝服务。比如 SYN 攻击：通过向服务端不停发送 SYN 请求，但不响应SYN+ACK 报文，从而消耗服务端的资源。\"]},\"711\":{\"h\":\"TCP 报文\",\"t\":[\"TCP被封装在IP数据报中\",\"序号（seq）：在初次建立连接的时候，客户端和服务端都会为本次的连接随机初始化一个序号（解决网络包乱序的问题）\",\"确认号（ack）：表示「接收端」告诉「发送端」对上一个数据包已经成功接收（解决网络包丢失的问题）\",\"标志位：SYN/FIN/ACK。SYN 用来同步建立连接，FIN 断开连接，ACK 应答\"]},\"712\":{\"h\":\"三次握手\",\"t\":[\"握手过程：\",\"客户端向服务端发送 SYN，seq = x （x 是客户端随机生成的初始序号 ISN）\",\"服务端接收到客户端的 SYN 后，向客户端发送 SYN、ACK，seq = y，ack = x + 1。 （y 是服务端随机生成的初始序号 ISN，确认号 ack = 对方的序号 + 1）\",\"客户端接收到服务端的 SYN、ACK 后，向服务端发送 ACK，ack = y + 1。完成握手。\",\"简单理解：\",\"A：我要跟你通信，你听得到吗？\",\"B：可以听到，你听得到吗？\",\"A：我可以听到\"]},\"713\":{\"h\":\"为什么需要至少三次握手\",\"t\":[\"为了防止失效的连接请求报文段被服务端接收，从而产生错误。为了在不可靠的信道上建立起可靠连接，必须至少握手三次。\",\"假设两次握手后，建立连接：\",\"客户端发送的 SYN 可能在某个网络节点滞留，长时间未收到服务端的 ACK。\",\"客户端会再次重发 SYN，\\b服务端成功接收到后，返回 SYN + ACK，此时成功建立连接，双方进入数据传输状态。\",\"但是如果第一次发送的 SYN 因为网络恢复正常，又送达到服务端。服务端会误认为是客户端又发起了一个新的连接，返回 SYN + ACK，服务端进入等待数据状态。\",\"最终导致双方状态不一致。\"]},\"714\":{\"h\":\"四次挥手\",\"t\":[\"挥手过程：\",\"客户端发送 FIN，表示释放连接\",\"服务端收到客户端的 FIN 后，回复 ACK\",\"服务端可能还有数据要发送给客户端，等服务端确认自己已经没有数据需要发送给客户端之后，就发送 FIN 给客户端\",\"客户端收到服务端的 FIN 之后，回应 ACK\",\"简单理解：\",\"A：我要跟你断开通信\",\"B：知道了，等一下，我还有东西要发给你\",\"B：好了，我发完了\",\"A：好的，我知道了\"]},\"715\":{\"h\":\"为什么需要四次挥手\",\"t\":[\"服务端接收到客户端的 FIN，并回复 ACK 之后，可能还有数据要发送，确认没有数据要发送后再发送 FIN。\"]},\"716\":{\"h\":\"为什么需要超时等待 2MSL\",\"t\":[\"MSL：Maximum Segment Lifetime 最大报文寿命，超过这个时间报文将被丢弃。\",\"原因：\",\"保证服务端能够收到 ACK（如果收不到，服务端会重发 FIN）\",\"确保在下次创建新连接时，不会出现先前连接的报文。\"]},\"717\":{\"h\":\"参考资料\",\"t\":[\"一条视频讲清楚TCP协议与UDP协议-什么是三次握手与四次挥手\"]},\"718\":{\"h\":\"Posts\"},\"719\":{\"h\":\"Database\"},\"720\":{\"h\":\"Apple\"},\"721\":{\"h\":\"Banana\"},\"722\":{\"h\":\"Browser\"},\"723\":{\"h\":\"Css\"},\"724\":{\"h\":\"Html\"},\"725\":{\"h\":\"Network\"}},\"dirtCount\":0,\"index\":[[\"好的\",{\"1\":{\"714\":1}}],[\"好了\",{\"1\":{\"714\":1}}],[\"知道了\",{\"1\":{\"714\":1}}],[\"知道这个事情其实应该b局来管\",{\"1\":{\"24\":1}}],[\"挥手过程\",{\"1\":{\"714\":1}}],[\"\\b服务端成功接收到后\",{\"1\":{\"713\":1}}],[\"\\b平等的类型缩小\",{\"1\":{\"424\":1}}],[\"建立连接\",{\"1\":{\"713\":1}}],[\"建议优先使用这个属性\",{\"1\":{\"646\":1}}],[\"建议使用interface\",{\"1\":{\"454\":1}}],[\"确保在下次创建新连接时\",{\"1\":{\"716\":1}}],[\"确认没有数据要发送后再发送\",{\"1\":{\"715\":1}}],[\"确认号\",{\"1\":{\"711\":1,\"712\":1}}],[\"确定一个事实\",{\"1\":{\"464\":1}}],[\"序号\",{\"1\":{\"711\":1}}],[\"序列化再反序列化\",{\"0\":{\"233\":1}}],[\"序列化\",{\"1\":{\"38\":1,\"233\":1}}],[\"报文\",{\"0\":{\"711\":1},\"1\":{\"710\":1}}],[\"报错则失败\",{\"1\":{\"349\":2}}],[\"报错被\",{\"1\":{\"205\":1}}],[\"报错\",{\"1\":{\"91\":1,\"199\":1,\"202\":2,\"204\":2,\"280\":1,\"324\":2,\"355\":1,\"369\":1}}],[\"攻击\",{\"1\":{\"710\":1}}],[\"稳定\",{\"1\":{\"710\":1}}],[\"九种跨域方式实现原理\",{\"1\":{\"709\":1}}],[\"条件\",{\"1\":{\"707\":2}}],[\"条件判断\",{\"1\":{\"534\":1}}],[\"复杂请求一般会修改数据库数据\",{\"1\":{\"707\":1}}],[\"跨源资源共享\",{\"1\":{\"707\":1}}],[\"跨域\",{\"0\":{\"705\":1},\"1\":{\"705\":1,\"707\":1}}],[\"于是执行服务端返回的函数\",{\"1\":{\"706\":1}}],[\"绕开浏览器的同源策略限制\",{\"1\":{\"705\":1}}],[\"邮件服务等作区分\",{\"1\":{\"704\":1}}],[\"邮箱\",{\"1\":{\"666\":1}}],[\"顶级域名需要备案\",{\"1\":{\"704\":1}}],[\"顶级域有\",{\"1\":{\"704\":1}}],[\"顶层\",{\"1\":{\"337\":2}}],[\"说明\",{\"1\":{\"704\":1}}],[\"锚点\",{\"1\":{\"704\":1}}],[\"源\",{\"0\":{\"704\":1},\"1\":{\"704\":1}}],[\"源代码经过解析器的词法分析\",{\"1\":{\"263\":1}}],[\"搞懂https工作原理\",{\"1\":{\"701\":1}}],[\"部分\",{\"1\":{\"700\":2}}],[\"留下历史记录\",{\"1\":{\"700\":1}}],[\"留下来的\",{\"1\":{\"357\":1}}],[\"幂等表示执行相同的操作\",{\"1\":{\"700\":1}}],[\"幂等\",{\"1\":{\"700\":1}}],[\"证书需要购买\",{\"1\":{\"699\":1}}],[\"较慢\",{\"1\":{\"699\":1}}],[\"较快\",{\"1\":{\"699\":1}}],[\"端口号完全一致\",{\"1\":{\"704\":1}}],[\"端口号\",{\"1\":{\"704\":2}}],[\"端口\",{\"1\":{\"699\":2}}],[\"端的\",{\"1\":{\"663\":2}}],[\"身份认证\",{\"1\":{\"698\":1}}],[\"身份认证等技术\",{\"1\":{\"697\":1,\"698\":1}}],[\"预主密钥\",{\"1\":{\"698\":2}}],[\"预解析器\",{\"1\":{\"264\":1}}],[\"握手过程\",{\"0\":{\"698\":1},\"1\":{\"698\":1,\"712\":1}}],[\"速度慢\",{\"1\":{\"697\":1}}],[\"速度快\",{\"1\":{\"696\":1,\"697\":1,\"710\":1}}],[\"域名+\",{\"1\":{\"704\":1}}],[\"域名\",{\"1\":{\"695\":1,\"704\":2}}],[\"资源路径\",{\"1\":{\"704\":1}}],[\"资源未修改\",{\"1\":{\"694\":1}}],[\"资源标识\",{\"1\":{\"690\":1}}],[\"临时重定向\",{\"1\":{\"694\":1}}],[\"临时构造函数\",{\"1\":{\"282\":1}}],[\"右键菜单重新加载\",{\"1\":{\"691\":1}}],[\"右侧为需要执行的功能\",{\"0\":{\"78\":1}}],[\"携带有\",{\"1\":{\"689\":1}}],[\"协议建立连接的本质是交换双方的状态\",{\"1\":{\"710\":1}}],[\"协议不同\",{\"1\":{\"704\":1}}],[\"协议\",{\"1\":{\"704\":3}}],[\"协议规定的语义上获取数据与提交数据的区别\",{\"1\":{\"700\":1}}],[\"协议规定的根本区别\",{\"1\":{\"700\":1}}],[\"协议是无状态的\",{\"1\":{\"25\":1}}],[\"协商缓存有效\",{\"1\":{\"691\":2}}],[\"协商缓存失效\",{\"1\":{\"689\":1,\"691\":1}}],[\"协商缓存生效\",{\"1\":{\"689\":1}}],[\"协商缓存\",{\"0\":{\"688\":1},\"1\":{\"691\":1}}],[\"响应头\",{\"1\":{\"695\":1}}],[\"响应状态码分为五大类\",{\"1\":{\"694\":1}}],[\"响应状态码\",{\"0\":{\"694\":1}}],[\"响应可以被中间代理\",{\"1\":{\"687\":1}}],[\"响应式\",{\"0\":{\"655\":1},\"1\":{\"671\":1}}],[\"响应式的\",{\"1\":{\"528\":1}}],[\"秒内的多次修改无法判断资源是否更新\",{\"1\":{\"690\":1}}],[\"秒\",{\"1\":{\"687\":1}}],[\"控制协商缓存的字段有\",{\"1\":{\"689\":1}}],[\"控制强制缓存的字段有\",{\"1\":{\"686\":1}}],[\"控制页面在移动端浏览器中的布局\",{\"1\":{\"663\":1}}],[\"强制刷新\",{\"1\":{\"691\":2}}],[\"强制缓存和协商缓存\",{\"1\":{\"692\":1}}],[\"强制缓存有效\",{\"1\":{\"691\":1}}],[\"强制缓存失效后\",{\"1\":{\"689\":1}}],[\"强制缓存失效\",{\"1\":{\"686\":1,\"691\":2}}],[\"强制缓存生效\",{\"1\":{\"686\":1}}],[\"强制缓存\",{\"0\":{\"685\":1},\"1\":{\"691\":1}}],[\"强制缓存与协商缓存\",{\"1\":{\"684\":1}}],[\"强引用需要自己手动置为\",{\"1\":{\"234\":1}}],[\"强引用映射不同点\",{\"1\":{\"234\":1}}],[\"彻底弄懂session\",{\"1\":{\"683\":1}}],[\"彻底弄懂函数组合\",{\"1\":{\"294\":1}}],[\"入门教程\",{\"1\":{\"683\":1}}],[\"信息\",{\"1\":{\"682\":1,\"694\":1}}],[\"信息容器\",{\"1\":{\"119\":1}}],[\"打开多个相同的\",{\"1\":{\"680\":1}}],[\"打印ref指定的children\",{\"1\":{\"488\":1}}],[\"打印第二个children\",{\"1\":{\"488\":1}}],[\"打印和定义可以顺序反\",{\"1\":{\"238\":1}}],[\"打印\",{\"1\":{\"195\":1,\"300\":2,\"332\":1,\"364\":1}}],[\"像用户通行证\",{\"1\":{\"678\":1}}],[\"像用户档案表\",{\"1\":{\"678\":1}}],[\"像是接力一样\",{\"1\":{\"333\":1}}],[\"低\",{\"1\":{\"678\":1}}],[\"匹配对应的\",{\"1\":{\"677\":1}}],[\"随内部元素的内容变化\",{\"1\":{\"674\":2}}],[\"随后的重新渲染\",{\"1\":{\"521\":1}}],[\"竖直方向无效\",{\"1\":{\"674\":1}}],[\"撑满父元素\",{\"1\":{\"674\":1}}],[\"怎么写\",{\"1\":{\"663\":1}}],[\"越来越多的\",{\"1\":{\"663\":1}}],[\"越具体权重越高\",{\"1\":{\"640\":1}}],[\"覆盖\",{\"1\":{\"663\":1}}],[\"覆盖索引\",{\"0\":{\"174\":1},\"1\":{\"174\":1}}],[\"设备宽度\",{\"1\":{\"663\":1}}],[\"设置笔刷样式\",{\"1\":{\"660\":1}}],[\"设置overflow\",{\"1\":{\"626\":1}}],[\"设置透明度隐藏元素不会影响子元素\",{\"1\":{\"624\":1}}],[\"设置透明度隐藏元素及其所有子元素\",{\"1\":{\"624\":1}}],[\"设置文本行高\",{\"1\":{\"622\":1}}],[\"设置文字大小写转换\",{\"1\":{\"621\":1}}],[\"设置文字装饰线\",{\"1\":{\"621\":1}}],[\"设置字体样式\",{\"1\":{\"622\":1}}],[\"设置字体粗细\",{\"1\":{\"622\":1}}],[\"设置字体名称\",{\"1\":{\"622\":1}}],[\"设置字体大小\",{\"1\":{\"622\":1}}],[\"设置行内级元素\",{\"1\":{\"621\":1}}],[\"设置第一行内容缩进\",{\"1\":{\"621\":1}}],[\"设置父元素\",{\"1\":{\"594\":1}}],[\"设置原型\",{\"0\":{\"354\":1}}],[\"告诉客户端使用本地缓存\",{\"1\":{\"689\":1}}],[\"告诉客户端是否使用缓存资源\",{\"1\":{\"689\":1}}],[\"告诉\",{\"1\":{\"663\":1,\"711\":1}}],[\"告诉浏览器重新去请求那个地址\",{\"1\":{\"24\":1}}],[\"兼容\",{\"1\":{\"663\":1}}],[\"构建⽹⻚基本结构的标记语言\",{\"1\":{\"662\":1}}],[\"构造函数的\",{\"1\":{\"377\":1}}],[\"构造函数的显式原型的\",{\"1\":{\"351\":2}}],[\"构造函数都有显式原型\",{\"1\":{\"351\":2}}],[\"构造函数\",{\"0\":{\"191\":1},\"1\":{\"351\":5,\"354\":1,\"358\":1,\"377\":1}}],[\"构造函数模式的缺点\",{\"1\":{\"190\":1}}],[\"构造函数模式\",{\"0\":{\"190\":1}}],[\"构造器引用语法格式\",{\"1\":{\"88\":1}}],[\"构造器\",{\"1\":{\"12\":1}}],[\"构造方法不能被\",{\"1\":{\"11\":1}}],[\"构造方法特点如下\",{\"1\":{\"11\":1}}],[\"构造方法有哪些特点\",{\"0\":{\"11\":1}}],[\"绘制形状\",{\"1\":{\"660\":1}}],[\"利于无障碍阅读\",{\"1\":{\"658\":1}}],[\"利用\",{\"1\":{\"706\":1}}],[\"利用了css的层叠性\",{\"1\":{\"633\":1}}],[\"利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名\",{\"1\":{\"582\":1}}],[\"盲人阅读器等\",{\"1\":{\"658\":1}}],[\"易于阅读\",{\"1\":{\"658\":1}}],[\"易错\",{\"1\":{\"349\":1}}],[\"边栏\",{\"1\":{\"657\":1}}],[\"边框盒模型\",{\"1\":{\"635\":1}}],[\"边框\",{\"1\":{\"598\":1}}],[\"边框颜色\",{\"1\":{\"587\":1}}],[\"今天\",{\"1\":{\"656\":1}}],[\"今年$\",{\"1\":{\"239\":1}}],[\"换算成rem的单位\",{\"1\":{\"655\":1}}],[\"混合加密\",{\"1\":{\"697\":1}}],[\"混合使用编译器和解释器的技术\",{\"1\":{\"262\":1}}],[\"混入和映射结合使用\",{\"1\":{\"654\":1}}],[\"混入\",{\"0\":{\"654\":1}}],[\"层叠指的是\",{\"1\":{\"648\":1}}],[\"层叠样式表\",{\"1\":{\"648\":1}}],[\"层层嵌套\",{\"1\":{\"333\":1}}],[\"负值对该属性无效\",{\"1\":{\"646\":1}}],[\"负责回收程序不需要的内存空间\",{\"1\":{\"262\":1}}],[\"负责将热点代码编译成比字节码更高效的机器码并执行\",{\"1\":{\"262\":1}}],[\"负责将\",{\"1\":{\"262\":1}}],[\"负责将源代码解析成\",{\"1\":{\"262\":1}}],[\"左对齐\",{\"1\":{\"645\":1}}],[\"左侧元素浮动覆盖右侧元素\",{\"1\":{\"593\":1}}],[\"左侧为参数列表\",{\"0\":{\"78\":1}}],[\"项目的缩小比例\",{\"1\":{\"646\":1}}],[\"项目的放大拉伸比例\",{\"1\":{\"646\":1}}],[\"项目在主轴上占据的空间\",{\"1\":{\"646\":1}}],[\"项目在主轴的对齐方式\",{\"1\":{\"645\":1}}],[\"项目在容器中的排列顺序\",{\"1\":{\"646\":1}}],[\"项目在交叉轴上的对齐方式\",{\"1\":{\"645\":1}}],[\"项目即子元素\",{\"1\":{\"644\":1}}],[\"项目组织结构\",{\"0\":{\"557\":1},\"1\":{\"557\":1}}],[\"连接重复使用\",{\"1\":{\"695\":1}}],[\"连成一个三角形\",{\"1\":{\"643\":1}}],[\"连续使用\",{\"1\":{\"91\":1}}],[\"🐶\",{\"1\":{\"640\":1}}],[\"权重的进制是\",{\"1\":{\"640\":1}}],[\"权重计算规则\",{\"0\":{\"640\":1}}],[\"~\",{\"1\":{\"639\":1}}],[\"遵循后面覆盖前面原则\",{\"1\":{\"638\":1}}],[\"样式\",{\"1\":{\"670\":1}}],[\"样式表等\",{\"1\":{\"663\":1}}],[\"样式层叠\",{\"1\":{\"648\":1}}],[\"样式类型优先级\",{\"0\":{\"638\":1}}],[\"样式化\",{\"0\":{\"136\":1}}],[\"盒模型\",{\"0\":{\"634\":1},\"1\":{\"635\":1}}],[\"盒子内水平居中\",{\"1\":{\"606\":1}}],[\"盒子外水平居中\",{\"1\":{\"606\":1}}],[\"盒子会在垂直方向上一个挨着一个的排布\",{\"1\":{\"588\":1}}],[\"媒体查询\",{\"1\":{\"633\":1,\"655\":1}}],[\"颜色渐变\",{\"1\":{\"633\":1}}],[\"毛玻璃\",{\"1\":{\"633\":1}}],[\"精灵图快速定位工具网站\",{\"1\":{\"633\":1}}],[\"精灵图\",{\"1\":{\"633\":1}}],[\"精通的语言\",{\"1\":{\"531\":1}}],[\"超过这个时间报文将被丢弃\",{\"1\":{\"716\":1}}],[\"超文本传输协议\",{\"1\":{\"693\":1}}],[\"超文本标记语言\",{\"1\":{\"662\":1}}],[\"超出部分直接裁剪\",{\"1\":{\"633\":1}}],[\"超出部分用省略号显示\",{\"1\":{\"633\":1}}],[\"超出部分隐藏\",{\"1\":{\"633\":1}}],[\"超全\",{\"1\":{\"619\":1}}],[\"^\",{\"1\":{\"632\":1}}],[\"^2\",{\"1\":{\"320\":1}}],[\"兄弟\",{\"1\":{\"632\":1}}],[\"兄弟选择器\",{\"1\":{\"623\":1,\"640\":1}}],[\"起始状态\",{\"1\":{\"631\":2}}],[\"起始值\",{\"1\":{\"90\":1}}],[\"音乐播放器常用\",{\"1\":{\"631\":1}}],[\"暂停\",{\"1\":{\"631\":1}}],[\"暂停函数的执行\",{\"1\":{\"304\":1}}],[\"动画状态\",{\"1\":{\"631\":1}}],[\"动画结束后\",{\"1\":{\"631\":3}}],[\"动画方向\",{\"1\":{\"631\":1}}],[\"动画次数\",{\"1\":{\"631\":1}}],[\"动画延迟\",{\"1\":{\"631\":1}}],[\"动画函数\",{\"1\":{\"631\":1}}],[\"动画时间\",{\"1\":{\"631\":1}}],[\"动画名称\",{\"1\":{\"631\":1}}],[\"动态设置html的font\",{\"1\":{\"655\":1}}],[\"动态伪类\",{\"1\":{\"623\":1}}],[\"动态数据则通过\",{\"1\":{\"582\":1}}],[\"动态\",{\"1\":{\"521\":2}}],[\"动态路由\",{\"0\":{\"508\":1}}],[\"动态地绑定到它的\",{\"1\":{\"489\":1}}],[\"动态组件\",{\"0\":{\"489\":1}}],[\"动态传入激活颜色\",{\"0\":{\"475\":1}}],[\"动态平衡二叉树\",{\"1\":{\"50\":1,\"69\":1}}],[\"动态代理中的\",{\"1\":{\"32\":1}}],[\"动态代理是在运行时动态生成类字节码\",{\"1\":{\"32\":1}}],[\"动态代理\",{\"1\":{\"32\":1}}],[\"减少网络请求次数\",{\"1\":{\"684\":1}}],[\"减少图片大小\",{\"1\":{\"633\":1}}],[\"减少http请求\",{\"1\":{\"633\":1}}],[\"减少碰撞\",{\"1\":{\"49\":1,\"68\":1}}],[\"减速\",{\"1\":{\"631\":1}}],[\"缓解服务端的压力\",{\"1\":{\"684\":1}}],[\"缓存控制\",{\"1\":{\"687\":1}}],[\"缓存有效期就不准确\",{\"1\":{\"687\":1}}],[\"缓存分为\",{\"1\":{\"684\":1}}],[\"缓存是浏览器对之前请求过的文件进行缓存\",{\"1\":{\"684\":1}}],[\"缓存\",{\"0\":{\"684\":1},\"1\":{\"692\":1}}],[\"缓存起来\",{\"1\":{\"516\":1}}],[\"缓冲\",{\"1\":{\"631\":1}}],[\"匀速\",{\"1\":{\"631\":1}}],[\"旋转225\",{\"1\":{\"643\":1}}],[\"旋转\",{\"1\":{\"631\":1}}],[\"平衡两者的优缺点\",{\"1\":{\"697\":1}}],[\"平移\",{\"1\":{\"631\":1}}],[\"平均数\",{\"1\":{\"91\":1}}],[\"浮动规则\",{\"0\":{\"630\":1}}],[\"浮动元素会将行内级元素内容推出\",{\"1\":{\"630\":1}}],[\"浮动元素不能层叠\",{\"1\":{\"630\":1}}],[\"浮动元素的父元素的高度是auto\",{\"1\":{\"592\":1}}],[\"浮动元素的父元素触发bfc\",{\"1\":{\"592\":1}}],[\"浮动元素也参与计算\",{\"1\":{\"592\":1}}],[\"浮动元素\",{\"1\":{\"589\":1}}],[\"脱标元素内部默认还是按照标准流布局\",{\"1\":{\"629\":1}}],[\"脱离标准流\",{\"1\":{\"629\":2}}],[\"脱离文档流致使父元素高度塌陷\",{\"1\":{\"592\":1}}],[\"宽大大于高\",{\"1\":{\"663\":1}}],[\"宽高默认由内容决定\",{\"1\":{\"629\":1}}],[\"宽度或高度铺满容器\",{\"1\":{\"627\":1}}],[\"宽度的一半\",{\"1\":{\"607\":1}}],[\"固定不动\",{\"1\":{\"629\":1}}],[\"固定顺序\",{\"1\":{\"623\":1}}],[\"点击工具栏中的刷新按钮\",{\"1\":{\"691\":1}}],[\"点击label时\",{\"1\":{\"628\":1}}],[\"点击了\",{\"1\":{\"532\":1}}],[\"背景也不会随着元素的内容滚动\",{\"1\":{\"627\":1}}],[\"背景将会随着元素的内容滚动\",{\"1\":{\"627\":1}}],[\"背景图片是否固定\",{\"1\":{\"627\":1}}],[\"背景图片缩放到填充整个容器\",{\"1\":{\"627\":1}}],[\"背景图片保持原始大小\",{\"1\":{\"627\":1}}],[\"背景图片大小\",{\"1\":{\"627\":1}}],[\"背景图片位置\",{\"1\":{\"627\":1}}],[\"背景图片不平铺\",{\"1\":{\"627\":1}}],[\"背景图片在垂直方向平铺\",{\"1\":{\"627\":1}}],[\"背景图片在水平方向平铺\",{\"1\":{\"627\":1}}],[\"背景图片在水平和垂直方向平铺\",{\"1\":{\"627\":1}}],[\"背景图片平铺\",{\"1\":{\"627\":1}}],[\"背景图片\",{\"1\":{\"627\":1}}],[\"背景颜色\",{\"1\":{\"627\":1}}],[\"背景色作为内联样式\",{\"1\":{\"598\":1}}],[\"背景色\",{\"1\":{\"587\":1}}],[\"占据空间\",{\"1\":{\"624\":3}}],[\"占位符功能\",{\"1\":{\"239\":1}}],[\"独占一行\",{\"1\":{\"624\":1}}],[\"独立函数调用\",{\"1\":{\"361\":1,\"375\":2}}],[\"否\",{\"1\":{\"674\":2}}],[\"否定伪类\",{\"1\":{\"623\":1}}],[\"否则无法提交\",{\"1\":{\"674\":1}}],[\"否则就触碰右边界\",{\"1\":{\"588\":1}}],[\"否则状态不能锁定\",{\"1\":{\"309\":2,\"318\":2,\"319\":2}}],[\"否则\",{\"1\":{\"299\":1}}],[\"否则递归执行一个返回\",{\"1\":{\"292\":1}}],[\"否则空的闭包没有被引用\",{\"1\":{\"213\":1,\"225\":1}}],[\"否则会自动创建一个6byte的自增主键\",{\"1\":{\"172\":1}}],[\"否则会报错\",{\"1\":{\"91\":1,\"206\":1,\"238\":1}}],[\"否则返回函数式接口s的值\",{\"1\":{\"93\":1}}],[\"否则返回自定义对象t的值\",{\"1\":{\"93\":1}}],[\"否则创建空实例\",{\"1\":{\"93\":1}}],[\"鼠标悬停时显示文字注释\",{\"1\":{\"674\":1}}],[\"鼠标悬停在元素上\",{\"1\":{\"623\":1}}],[\"鼠标点击元素\",{\"1\":{\"623\":1}}],[\"已接受\",{\"1\":{\"694\":1}}],[\"已创建\",{\"1\":{\"694\":1}}],[\"已经改变了很多\",{\"1\":{\"656\":1}}],[\"已访问的链接\",{\"1\":{\"623\":1}}],[\"已弃用\",{\"1\":{\"96\":1}}],[\"倾斜\",{\"1\":{\"622\":1,\"631\":1}}],[\"斜体\",{\"1\":{\"622\":1}}],[\"行高=父高\",{\"1\":{\"610\":1}}],[\"行内样式\",{\"1\":{\"638\":1,\"640\":1}}],[\"行内块级元素\",{\"1\":{\"674\":1}}],[\"行内块级元素的特性消失\",{\"1\":{\"629\":1}}],[\"行内块元素\",{\"1\":{\"589\":1,\"624\":1}}],[\"行内级盒子的中心点与父盒基线加上x字母高度一半的线对齐\",{\"1\":{\"633\":1}}],[\"行内级\",{\"1\":{\"629\":1}}],[\"行内非替换元素\",{\"1\":{\"629\":1}}],[\"行内非替换\",{\"1\":{\"623\":1}}],[\"行内元素不设置宽高\",{\"1\":{\"599\":1}}],[\"行内元素\",{\"0\":{\"599\":1,\"602\":1,\"609\":1},\"1\":{\"624\":1,\"674\":1}}],[\"垂直方向\",{\"1\":{\"627\":1}}],[\"垂直方向的间距由margin决定\",{\"1\":{\"588\":1}}],[\"垂直居中\",{\"0\":{\"608\":1}}],[\"绝对定位\",{\"0\":{\"607\":1,\"615\":1}}],[\"绝对定位元素\",{\"1\":{\"589\":1,\"629\":1}}],[\"效果图均为\",{\"1\":{\"607\":1,\"615\":1}}],[\"效果图\",{\"1\":{\"603\":1,\"605\":1,\"606\":2,\"610\":1,\"611\":1,\"616\":1,\"617\":1}}],[\"效率又提升\",{\"1\":{\"53\":1,\"72\":1}}],[\"效率低\",{\"1\":{\"43\":1,\"46\":1}}],[\"效率高\",{\"1\":{\"43\":1}}],[\"效率更高\",{\"1\":{\"32\":1}}],[\"便于团队的开发和维护\",{\"1\":{\"658\":1}}],[\"便于直观理解实现垂直和水平居中的\",{\"1\":{\"598\":1}}],[\"便于写出高阶函数和闭包\",{\"1\":{\"216\":1}}],[\"视浏览器而定\",{\"1\":{\"681\":1}}],[\"视口适配刘海屏\",{\"1\":{\"663\":1}}],[\"视口宽度\",{\"1\":{\"663\":1}}],[\"视口高度\",{\"1\":{\"655\":1}}],[\"视口的宽度\",{\"1\":{\"655\":1}}],[\"视口\",{\"1\":{\"629\":1,\"663\":1}}],[\"视频直播\",{\"1\":{\"710\":1}}],[\"视频\",{\"1\":{\"595\":1}}],[\"视图变化\",{\"1\":{\"528\":1}}],[\"视图表单中添加了内容也会自动地通过dom\",{\"1\":{\"520\":1}}],[\"视图和数据通过vm绑定起来\",{\"1\":{\"520\":1}}],[\"区域\",{\"1\":{\"657\":1}}],[\"区分开\",{\"1\":{\"594\":1}}],[\"区别\",{\"0\":{\"168\":1,\"678\":1},\"1\":{\"672\":1}}],[\"区别于引用拷贝的一点\",{\"1\":{\"21\":1}}],[\"区别点\",{\"1\":{\"12\":1}}],[\"清除\",{\"1\":{\"670\":1}}],[\"清除浮动后\",{\"1\":{\"630\":1}}],[\"清除浮动常用代码\",{\"1\":{\"594\":1}}],[\"清除浮动\",{\"0\":{\"594\":1}}],[\"清空数据\",{\"1\":{\"168\":1}}],[\"容器内项目是否可换行\",{\"1\":{\"645\":1}}],[\"容器盒子\",{\"1\":{\"645\":1}}],[\"容器即父元素\",{\"1\":{\"644\":1}}],[\"容器\",{\"1\":{\"591\":1,\"592\":1,\"593\":1}}],[\"触发bfc\",{\"1\":{\"626\":1}}],[\"触发方式\",{\"1\":{\"589\":1}}],[\"触发后只要无报错就\",{\"1\":{\"334\":1}}],[\"弹性元素和网格元素会创建\",{\"1\":{\"589\":1}}],[\"弹性元素\",{\"1\":{\"589\":1}}],[\"伪协议\",{\"1\":{\"666\":1}}],[\"伪元素为行内非替换元素\",{\"1\":{\"630\":1}}],[\"伪元素选择器\",{\"1\":{\"623\":1,\"640\":1}}],[\"伪元素\",{\"0\":{\"616\":1},\"1\":{\"639\":1}}],[\"伪类选择器\",{\"1\":{\"623\":1,\"640\":1}}],[\"伪类\",{\"1\":{\"586\":1,\"639\":1}}],[\"伪泛型\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"激活\",{\"1\":{\"586\":1}}],[\"英文\",{\"1\":{\"586\":1}}],[\"尺寸\",{\"1\":{\"586\":1}}],[\"谈谈我对服务端渲染\",{\"1\":{\"583\":1}}],[\"爬虫爬不到页面数据\",{\"1\":{\"583\":1}}],[\"爬虫可直接爬取返回的\",{\"1\":{\"583\":1}}],[\"耗费服务器性能\",{\"1\":{\"583\":1}}],[\"节省服务器性能\",{\"1\":{\"583\":1}}],[\"节流\",{\"1\":{\"223\":1}}],[\"节流防抖\",{\"1\":{\"223\":1}}],[\"友好\",{\"1\":{\"583\":1}}],[\"搜索引擎的爬虫依赖于标签来确定上下文和各个关键字的权重\",{\"1\":{\"658\":1}}],[\"搜索引擎爬虫会爬取服务器返回的\",{\"1\":{\"582\":1}}],[\"搜索引擎优化\",{\"1\":{\"582\":1,\"658\":1}}],[\"搜索功能\",{\"1\":{\"46\":1}}],[\"片段并进行事件绑定等操作\",{\"1\":{\"582\":1}}],[\"片段插入到该容器中\",{\"1\":{\"582\":1}}],[\"客户端会再次重发\",{\"1\":{\"713\":1}}],[\"客户端接收到服务端的\",{\"1\":{\"712\":1}}],[\"客户端发送\",{\"1\":{\"714\":1}}],[\"客户端发送的\",{\"1\":{\"713\":1}}],[\"客户端发送公钥给客户端加密第3随机数\",{\"1\":{\"698\":1}}],[\"客户端发送携带\",{\"1\":{\"689\":1}}],[\"客户端和服务端都会为本次的连接随机初始化一个序号\",{\"1\":{\"711\":1}}],[\"客户端和服务端都持有相同的会话秘钥\",{\"1\":{\"698\":1}}],[\"客户端和服务端都通过第1随机数\",{\"1\":{\"698\":1}}],[\"客户端和服务端使用相同的秘钥进行加密解密\",{\"1\":{\"697\":1}}],[\"客户端再生成第3随机数\",{\"1\":{\"698\":1}}],[\"客户端比对服务端发放的公钥是否通过证书颁发机构\",{\"1\":{\"698\":2}}],[\"客户端向服务端发送\",{\"1\":{\"712\":1}}],[\"客户端向服务端发送第1随机数\",{\"1\":{\"698\":1}}],[\"客户端向服务端发送首次请求时\",{\"1\":{\"689\":1}}],[\"客户端向服务端发送首次请求\",{\"1\":{\"676\":1,\"677\":1,\"686\":2}}],[\"客户端用公钥加密数据后\",{\"1\":{\"697\":1}}],[\"客户端访问服务器某个防火墙没有开放的接口\",{\"1\":{\"694\":1}}],[\"客户端请求的数据还是最新的\",{\"1\":{\"694\":1}}],[\"客户端请求页面\",{\"1\":{\"582\":2}}],[\"客户端应继续其请求\",{\"1\":{\"694\":1}}],[\"客户端错误\",{\"1\":{\"694\":1}}],[\"客户端携带资源标识向服务端发送请求\",{\"1\":{\"689\":1}}],[\"客户端携带用户的登录凭证\",{\"1\":{\"682\":1}}],[\"客户端都在请求头的\",{\"1\":{\"682\":1}}],[\"客户端收到服务端的\",{\"1\":{\"714\":1}}],[\"客户端收到\",{\"1\":{\"682\":1}}],[\"客户端收到后\",{\"1\":{\"677\":1}}],[\"客户端\",{\"1\":{\"678\":1,\"681\":3,\"707\":1}}],[\"客户端每次都在请求头携带记录有\",{\"1\":{\"677\":1}}],[\"客户端每次都在请求头携带上\",{\"1\":{\"676\":1}}],[\"客户端等待\",{\"1\":{\"583\":1}}],[\"客户端直接解析服务端返回的\",{\"1\":{\"583\":1}}],[\"客户端只需要解析html\",{\"1\":{\"582\":1}}],[\"客户端渲染\",{\"1\":{\"582\":1}}],[\"客户端浏览器的网址是不会发生变化的\",{\"1\":{\"24\":1}}],[\"地址栏输入\",{\"1\":{\"691\":1}}],[\"地址所在的服务器发起\",{\"1\":{\"580\":1}}],[\"地址\",{\"1\":{\"580\":1}}],[\"地理位置等\",{\"1\":{\"544\":1}}],[\"星标了的香蕉文章\",{\"1\":{\"574\":1}}],[\"长时间未收到服务端的\",{\"1\":{\"713\":1}}],[\"长\",{\"2\":{\"573\":1,\"578\":1}}],[\"长久持有\",{\"1\":{\"224\":1}}],[\"弯曲的\",{\"2\":{\"573\":1,\"578\":1}}],[\"黄\",{\"2\":{\"573\":1,\"578\":1}}],[\"核心概念\",{\"0\":{\"547\":1}}],[\"核心类\",{\"1\":{\"31\":1,\"32\":2}}],[\"挂载vue实例\",{\"1\":{\"545\":1}}],[\"挂载到vue实例上\",{\"1\":{\"505\":1}}],[\"挂载到\",{\"1\":{\"195\":1,\"373\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1}}],[\"购物车\",{\"1\":{\"544\":1}}],[\"商品收藏\",{\"1\":{\"544\":1}}],[\"头部的响应通知客户端保存\",{\"1\":{\"676\":1}}],[\"头像\",{\"1\":{\"544\":1}}],[\"头等函数\",{\"1\":{\"226\":1}}],[\"头等函数即函数是第一公民\",{\"1\":{\"216\":1}}],[\"次~~~<\",{\"1\":{\"538\":1}}],[\"次<\",{\"1\":{\"538\":2}}],[\"库存超出限制\",{\"1\":{\"536\":1}}],[\"价格\",{\"1\":{\"536\":2}}],[\"某些结果是基于之前数据实时计算出来的\",{\"1\":{\"536\":1}}],[\"某个资源文件在服务器最后被修改时间\",{\"1\":{\"690\":1}}],[\"某个变量或常量存放了基本类型的字面量\",{\"1\":{\"227\":1}}],[\"某个变量或常量存放了指向引用类型\",{\"1\":{\"227\":1,\"228\":1}}],[\"某个值不一致\",{\"1\":{\"165\":1}}],[\"顾名思义\",{\"1\":{\"534\":1}}],[\"古力娜扎\",{\"1\":{\"533\":1}}],[\"刘亦菲\",{\"1\":{\"533\":1}}],[\"范冰冰\",{\"1\":{\"533\":1}}],[\"柳岩\",{\"1\":{\"533\":1}}],[\"选中了\",{\"1\":{\"531\":1}}],[\"选择不符合选择器的元素\",{\"1\":{\"623\":1}}],[\"选择文档的根元素\",{\"1\":{\"623\":1}}],[\"选择没有子元素的元素\",{\"1\":{\"623\":1}}],[\"选择父元素的唯一同类型子元素\",{\"1\":{\"623\":1}}],[\"选择父元素的唯一子元素\",{\"1\":{\"623\":1}}],[\"选择父元素的最后一个同类型子元素\",{\"1\":{\"623\":1}}],[\"选择父元素的最后一个子元素\",{\"1\":{\"623\":1}}],[\"选择父元素的第一个同类型子元素\",{\"1\":{\"623\":1}}],[\"选择父元素的第一个子元素\",{\"1\":{\"623\":1}}],[\"选择父元素的第n个同类型子元素\",{\"1\":{\"623\":1}}],[\"选择父元素的第n个子元素\",{\"1\":{\"623\":1}}],[\"选择父元素的倒数第n个同类型子元素\",{\"1\":{\"623\":1}}],[\"选择父元素的倒数第n个子元素\",{\"1\":{\"623\":1}}],[\"选择所有子元素\",{\"1\":{\"623\":1}}],[\"选择lang属性值为指定值\",{\"1\":{\"623\":1}}],[\"选择器层叠\",{\"1\":{\"648\":1}}],[\"选择器类型优先级\",{\"0\":{\"639\":1}}],[\"选择器\",{\"1\":{\"623\":1,\"639\":3,\"640\":1}}],[\"选择器2\",{\"1\":{\"623\":2}}],[\"选择器1和选择器2的交集\",{\"1\":{\"623\":1}}],[\"选择器1和选择器2的并集\",{\"1\":{\"623\":1}}],[\"选择器1后面所有的兄弟选择器2\",{\"1\":{\"623\":1}}],[\"选择器1后面紧跟的兄弟选择器2\",{\"1\":{\"623\":1}}],[\"选择器1选择器2\",{\"1\":{\"623\":2}}],[\"选择器1+选择器2\",{\"1\":{\"623\":1}}],[\"选择器1直接子代中的选择器2\",{\"1\":{\"623\":1}}],[\"选择器1>选择器2\",{\"1\":{\"623\":1}}],[\"选择器1所有后代中的选择器2\",{\"1\":{\"623\":1}}],[\"选择器1\",{\"1\":{\"623\":2}}],[\"选择器监听\",{\"1\":{\"39\":1}}],[\"选择具有attr1和attr2属性的元素\",{\"1\":{\"623\":1}}],[\"选择具有attr属性且值包含val的元素\",{\"1\":{\"623\":1}}],[\"选择具有attr属性且值以val结尾的元素\",{\"1\":{\"623\":1}}],[\"选择具有attr属性且值以val开头的元素\",{\"1\":{\"623\":1}}],[\"选择具有attr属性且值为val或以val\",{\"1\":{\"623\":1}}],[\"选择具有attr属性且值为val的元素\",{\"1\":{\"623\":2}}],[\"选择具有attr属性的元素\",{\"1\":{\"623\":1}}],[\"选择元素的第一个字母\",{\"1\":{\"623\":1}}],[\"选择元素的第一行\",{\"1\":{\"623\":1}}],[\"选择元素\",{\"1\":{\"623\":1}}],[\"选择多个\",{\"1\":{\"521\":1}}],[\"选择一个\",{\"1\":{\"521\":1}}],[\"选择runtime\",{\"1\":{\"499\":1}}],[\"花括号\",{\"1\":{\"529\":1}}],[\"翻转数组中的元素\",{\"1\":{\"525\":1}}],[\"根元素\",{\"1\":{\"589\":1,\"663\":1}}],[\"根本就不会存在dom中\",{\"1\":{\"523\":1}}],[\"根据登录凭证再去数据库中对相应的用户数据进行操作\",{\"1\":{\"682\":1}}],[\"根据\",{\"1\":{\"580\":2}}],[\"根据语法规则组合成\",{\"1\":{\"263\":1}}],[\"根据角色转发到相应的模块\",{\"1\":{\"24\":1}}],[\"输入框必须是数字类型\",{\"1\":{\"521\":1}}],[\"输入框点击回车后加载\",{\"1\":{\"521\":1}}],[\"输出不同\",{\"1\":{\"377\":1}}],[\"葡萄\",{\"1\":{\"521\":2}}],[\"榴莲\",{\"1\":{\"521\":2}}],[\"台球\",{\"1\":{\"521\":1}}],[\"羽毛球\",{\"1\":{\"521\":2}}],[\"乒乓球\",{\"1\":{\"521\":2}}],[\"足球\",{\"1\":{\"521\":2}}],[\"篮球\",{\"1\":{\"521\":2}}],[\"女~~~\",{\"1\":{\"537\":1}}],[\"女\",{\"1\":{\"521\":1,\"533\":5,\"537\":2}}],[\"男~~~\",{\"1\":{\"537\":1}}],[\"男\",{\"1\":{\"521\":2,\"533\":1,\"537\":2}}],[\"生命周期\",{\"1\":{\"517\":1,\"678\":1,\"681\":1}}],[\"生命周期钩子函数\",{\"0\":{\"539\":1}}],[\"生命周期钩子\",{\"0\":{\"517\":1}}],[\"生成html文档\",{\"1\":{\"632\":1}}],[\"生成vue对象\",{\"1\":{\"528\":1}}],[\"生成器实现\",{\"1\":{\"306\":1}}],[\"生成器替代迭代器\",{\"0\":{\"306\":1}}],[\"生成器上的next方法可以传递参数\",{\"1\":{\"303\":1}}],[\"生成器是特殊的迭代器\",{\"1\":{\"302\":1}}],[\"生成器\",{\"0\":{\"302\":1},\"1\":{\"307\":1,\"331\":1}}],[\"生成\",{\"1\":{\"264\":1}}],[\"生成类的对象时自动执行\",{\"1\":{\"11\":1}}],[\"守卫\",{\"1\":{\"514\":1}}],[\"守护着一个\",{\"1\":{\"52\":1,\"71\":1}}],[\"钩子=回调\",{\"1\":{\"513\":1}}],[\"首屏加载速度慢\",{\"1\":{\"583\":1}}],[\"首屏加载速度快\",{\"1\":{\"583\":1}}],[\"首页\",{\"1\":{\"513\":1}}],[\"首先发\",{\"1\":{\"700\":1}}],[\"首先获取\",{\"1\":{\"660\":1}}],[\"首先在本地查找变量或混入\",{\"1\":{\"654\":1}}],[\"首先\",{\"1\":{\"488\":1}}],[\"首先将数据分为一段一段的存储\",{\"1\":{\"52\":1,\"71\":1}}],[\"跳转链接\",{\"1\":{\"691\":1}}],[\"跳转到邮箱或电话\",{\"1\":{\"665\":1}}],[\"跳转到登录页面\",{\"1\":{\"513\":1}}],[\"跳转内部锚点\",{\"1\":{\"665\":1,\"666\":1}}],[\"跳转外部页面\",{\"1\":{\"665\":1}}],[\"跳过前n个\",{\"1\":{\"90\":1}}],[\"⇒\",{\"1\":{\"511\":1}}],[\"懒加载\",{\"1\":{\"511\":1,\"521\":1}}],[\"想要导航到不同url\",{\"1\":{\"510\":1}}],[\"获得参数\",{\"1\":{\"508\":1}}],[\"获取客户端状态\",{\"1\":{\"677\":1}}],[\"获取视口高度与宽度相比的最大\",{\"1\":{\"655\":1}}],[\"获取\",{\"1\":{\"546\":1,\"660\":1}}],[\"获取数组下标\",{\"1\":{\"533\":1}}],[\"获取数组流\",{\"1\":{\"90\":1}}],[\"获取url传过来的参数this\",{\"1\":{\"510\":1}}],[\"获取实例的属性或方法时\",{\"1\":{\"353\":1}}],[\"获取到源码并且进行编码转换\",{\"1\":{\"264\":1}}],[\"获取到1个元素的stream\",{\"1\":{\"91\":1}}],[\"获取参数列表\",{\"1\":{\"196\":1}}],[\"获取对象的原型\",{\"1\":{\"355\":1}}],[\"获取对象的所有属性描述符\",{\"1\":{\"186\":1}}],[\"获取对象的属性值\",{\"1\":{\"181\":1}}],[\"获取对象的属性\",{\"1\":{\"181\":1}}],[\"获取单个属性的属性描述符\",{\"1\":{\"186\":1}}],[\"获取属性描述符\",{\"0\":{\"186\":1}}],[\"获取属性值\",{\"1\":{\"179\":1}}],[\"细节处理\",{\"0\":{\"507\":1}}],[\"底层执行插件的install方法\",{\"1\":{\"505\":1}}],[\"底层采用\",{\"1\":{\"44\":1}}],[\"号\",{\"1\":{\"503\":2}}],[\"号隔开\",{\"1\":{\"91\":1}}],[\"路径\",{\"1\":{\"666\":1}}],[\"路径导航\",{\"1\":{\"107\":1,\"146\":1}}],[\"路由配置上定义beforeenter\",{\"1\":{\"514\":1}}],[\"路由独享守卫\",{\"0\":{\"514\":1}}],[\"路由懒加载\",{\"0\":{\"511\":1}}],[\"路由模式\",{\"1\":{\"507\":1}}],[\"路由2种模式\",{\"0\":{\"503\":1}}],[\"真实dom\",{\"1\":{\"500\":1}}],[\"真实的查找路径是沿着作用域链来查找\",{\"1\":{\"272\":1}}],[\"缩放\",{\"1\":{\"631\":1}}],[\"缩放背景图片\",{\"1\":{\"627\":1}}],[\"缩进2个文字\",{\"1\":{\"621\":1}}],[\"缩写为\",{\"1\":{\"648\":1}}],[\"缩写\",{\"1\":{\"493\":1,\"521\":1}}],[\"缩小\",{\"1\":{\"412\":1}}],[\"甚至还可能会发生变化\",{\"1\":{\"488\":1}}],[\"甚至函数等等\",{\"1\":{\"179\":1}}],[\"往往不能确定它的索引值\",{\"1\":{\"488\":1}}],[\"电脑办公\",{\"1\":{\"487\":1}}],[\"家用家电\",{\"1\":{\"487\":1}}],[\"热门推荐\",{\"1\":{\"487\":1}}],[\"海尔兄弟\",{\"1\":{\"487\":1}}],[\"海贼王\",{\"1\":{\"487\":1}}],[\"海王\",{\"1\":{\"487\":1}}],[\"名称\",{\"1\":{\"544\":1}}],[\"名缩写\",{\"1\":{\"521\":1}}],[\"名\",{\"1\":{\"521\":1}}],[\"名全部强制转为小写\",{\"1\":{\"487\":1}}],[\"名字与类名相同\",{\"1\":{\"11\":1}}],[\"互不影响\",{\"1\":{\"486\":1}}],[\"互斥\",{\"1\":{\"182\":2}}],[\"意味着可以在多个vue的实例下面使用\",{\"1\":{\"484\":1}}],[\"具备rem之前所有的优点\",{\"1\":{\"655\":1}}],[\"具体数值\",{\"1\":{\"627\":2}}],[\"具体实现见\",{\"1\":{\"234\":1}}],[\"具名插槽\",{\"0\":{\"493\":1},\"1\":{\"472\":1}}],[\"阴影\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"479\":1}}],[\"置于页面最低端\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"479\":1}}],[\"老师\",{\"1\":{\"467\":1}}],[\"程序员\",{\"1\":{\"467\":1}}],[\"十进制\",{\"1\":{\"461\":1}}],[\"十六进制\",{\"1\":{\"384\":1,\"461\":1}}],[\"推荐\",{\"1\":{\"464\":1}}],[\"推荐阅读\",{\"1\":{\"217\":1}}],[\"推断\",{\"1\":{\"460\":1}}],[\"枚举类型的值\",{\"0\":{\"457\":1}}],[\"枚举类型的使用\",{\"0\":{\"456\":1}}],[\"穷举所有类型完后才会\",{\"1\":{\"456\":1}}],[\"广州市\",{\"1\":{\"455\":4}}],[\"广义\",{\"0\":{\"214\":1},\"1\":{\"213\":1,\"214\":1,\"225\":1}}],[\"交替反向\",{\"1\":{\"631\":1}}],[\"交替\",{\"1\":{\"631\":1}}],[\"交集选择器\",{\"1\":{\"623\":1}}],[\"交叉类型\",{\"0\":{\"452\":1},\"1\":{\"452\":1}}],[\"交互演示\",{\"0\":{\"137\":1,\"138\":1}}],[\"别名来声明对象类型\",{\"1\":{\"448\":1}}],[\"明确的传入类型\",{\"1\":{\"440\":1}}],[\"认识泛型\",{\"0\":{\"440\":1}}],[\"认为这两个对象相等\",{\"1\":{\"10\":1}}],[\"嘿嘿嘿\",{\"1\":{\"436\":1}}],[\"呵呵呵<\",{\"1\":{\"484\":1}}],[\"呵呵呵呵<\",{\"1\":{\"484\":1}}],[\"呵呵呵\",{\"1\":{\"436\":1}}],[\"哈哈哈哈<\",{\"1\":{\"484\":2}}],[\"哈哈哈\",{\"1\":{\"436\":1}}],[\"哈希表\",{\"1\":{\"44\":1}}],[\"哈希碰撞\",{\"1\":{\"9\":1}}],[\"叫做字面量类型\",{\"1\":{\"422\":1}}],[\"李银河\",{\"1\":{\"420\":2,\"428\":1}}],[\"联合类型\",{\"0\":{\"412\":1},\"1\":{\"412\":1,\"452\":1}}],[\"匿名函数的参数类型\",{\"0\":{\"409\":1}}],[\"匿名立即执行函数\",{\"1\":{\"218\":2}}],[\"元标签\",{\"1\":{\"663\":1}}],[\"元组的特点\",{\"1\":{\"406\":1}}],[\"元素保持动画第一帧的状态\",{\"1\":{\"631\":1}}],[\"元素保持动画最后一帧的状态\",{\"1\":{\"631\":1}}],[\"元素恢复到初始状态\",{\"1\":{\"631\":1}}],[\"元素停留在动画的哪个位置\",{\"1\":{\"631\":1}}],[\"元素在文档流中正常显示\",{\"1\":{\"629\":1}}],[\"元素隐藏技巧\",{\"1\":{\"624\":1}}],[\"元素获得焦点\",{\"1\":{\"623\":1}}],[\"元素选择器\",{\"1\":{\"623\":1}}],[\"元素的样式\",{\"1\":{\"587\":1}}],[\"元素的内容\",{\"1\":{\"586\":1}}],[\"元素内容变化\",{\"1\":{\"586\":1}}],[\"元素尺寸\",{\"1\":{\"586\":1}}],[\"元素\",{\"1\":{\"234\":1,\"371\":1,\"489\":2,\"521\":1,\"586\":1,\"587\":1,\"663\":2}}],[\"|\",{\"1\":{\"405\":2,\"414\":2,\"416\":1,\"422\":2,\"423\":1,\"424\":7,\"432\":1,\"452\":4,\"456\":3,\"457\":3,\"537\":2,\"645\":1}}],[\"||\",{\"1\":{\"240\":2,\"309\":1,\"319\":1,\"639\":1}}],[\"死循环\",{\"1\":{\"405\":1}}],[\"静态成员变量\",{\"0\":{\"397\":1}}],[\"静态方法名\",{\"1\":{\"88\":1}}],[\"永久重定向\",{\"1\":{\"694\":1}}],[\"永久区被取代为元空间\",{\"1\":{\"75\":1}}],[\"永远执行不到\",{\"1\":{\"428\":1}}],[\"永远指向\",{\"1\":{\"385\":2}}],[\"八进制\",{\"1\":{\"384\":1,\"461\":1}}],[\"显示屏高度\",{\"1\":{\"655\":1}}],[\"显示的斜体\",{\"1\":{\"622\":1}}],[\"显示user信息\",{\"1\":{\"533\":1}}],[\"显示原始\",{\"1\":{\"521\":1}}],[\"显示绑定\",{\"1\":{\"436\":1}}],[\"显示绑定优先级大于隐式绑定\",{\"1\":{\"376\":1,\"377\":1}}],[\"显式地指定被哪个调用者调用\",{\"1\":{\"362\":1}}],[\"显式绑定高于隐式绑定\",{\"0\":{\"366\":1}}],[\"显式绑定\",{\"0\":{\"362\":1,\"372\":1}}],[\"显式指定\",{\"1\":{\"195\":1,\"364\":1}}],[\"监听某个域名的\",{\"1\":{\"708\":1}}],[\"监听某个按键的事件\",{\"1\":{\"521\":1}}],[\"监听组件根元素的原生事件\",{\"1\":{\"521\":1}}],[\"监听点击\",{\"1\":{\"371\":1}}],[\"监听事件\",{\"1\":{\"249\":1}}],[\"理应后面覆盖前面\",{\"1\":{\"369\":1}}],[\"理论\",{\"1\":{\"213\":1,\"225\":1}}],[\"规则\",{\"1\":{\"622\":1}}],[\"规则优先级\",{\"0\":{\"365\":1}}],[\"规范\",{\"1\":{\"663\":1}}],[\"规范中\",{\"1\":{\"589\":1}}],[\"规范定义的\",{\"1\":{\"589\":1}}],[\"规范异步请求\",{\"1\":{\"332\":1}}],[\"公钥和证书\",{\"1\":{\"698\":1}}],[\"公有属性\",{\"1\":{\"363\":2}}],[\"公共参数\",{\"1\":{\"291\":1}}],[\"刁钻\",{\"1\":{\"361\":1}}],[\"间接函数引用\",{\"0\":{\"373\":1},\"1\":{\"361\":1}}],[\"案例补充\",{\"0\":{\"527\":1}}],[\"案例六\",{\"1\":{\"360\":1}}],[\"案例五\",{\"1\":{\"360\":1}}],[\"案例四\",{\"1\":{\"360\":1,\"361\":1}}],[\"案例三\",{\"1\":{\"360\":1,\"361\":1}}],[\"案例二\",{\"1\":{\"360\":1,\"361\":1}}],[\"案例一\",{\"1\":{\"360\":1,\"361\":1}}],[\"严格模式常见语法限制\",{\"0\":{\"384\":1}}],[\"严格模式\",{\"0\":{\"380\":1,\"383\":1,\"385\":1}}],[\"严格模式下无法使用\",{\"1\":{\"381\":1,\"382\":1}}],[\"严格模式下\",{\"1\":{\"360\":1,\"385\":1}}],[\"严格来讲\",{\"1\":{\"209\":1}}],[\"环境\",{\"1\":{\"360\":1}}],[\"环境下的微任务与宏任务分类\",{\"1\":{\"249\":1}}],[\"环境下\",{\"1\":{\"184\":1}}],[\"位置发生改变\",{\"1\":{\"586\":2}}],[\"位带符号整数\",{\"1\":{\"357\":1}}],[\"位\",{\"1\":{\"357\":1}}],[\"位存储的\",{\"1\":{\"357\":1}}],[\"位数\",{\"1\":{\"15\":1}}],[\"几种特殊情况\",{\"1\":{\"357\":1}}],[\"几乎不会被垃圾回收机制回收\",{\"1\":{\"74\":1}}],[\"指令来简化对dom的一些操作\",{\"1\":{\"528\":1}}],[\"指令\",{\"1\":{\"528\":1}}],[\"指定网页数据信息\",{\"1\":{\"663\":1}}],[\"指定网页语言\",{\"1\":{\"663\":1}}],[\"指定浏览器文档使用何种规范\",{\"1\":{\"663\":1}}],[\"指定音视频源\",{\"1\":{\"659\":1}}],[\"指定视频封面\",{\"1\":{\"659\":1}}],[\"指定一个元素是否必须移动\",{\"1\":{\"630\":1}}],[\"指定<router\",{\"1\":{\"507\":1}}],[\"指定私有属性\",{\"1\":{\"353\":1}}],[\"指向上层作用域\",{\"1\":{\"378\":1}}],[\"指向创建的实例对象\",{\"1\":{\"377\":1}}],[\"指向目标\",{\"1\":{\"371\":1}}],[\"指向全局对象\",{\"1\":{\"371\":1}}],[\"指向全局作用域\",{\"1\":{\"195\":1,\"364\":1}}],[\"指向字面量数组\",{\"1\":{\"361\":1}}],[\"指向函数的调用者\",{\"1\":{\"359\":1}}],[\"指向函数定义时所在的最近一层非箭头函数的\",{\"1\":{\"195\":1,\"364\":1}}],[\"指向错误问题\",{\"1\":{\"309\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":1,\"319\":1}}],[\"指向与调用位置无关\",{\"1\":{\"195\":1,\"364\":1}}],[\"指向\",{\"0\":{\"197\":1,\"359\":1},\"1\":{\"195\":3,\"197\":1,\"299\":2,\"312\":1,\"359\":1,\"360\":2,\"364\":2,\"371\":1}}],[\"指向定义时的上层作用域\",{\"0\":{\"195\":1}}],[\"指向构造函数显式原型\",{\"1\":{\"192\":1,\"363\":1}}],[\"箭头\",{\"1\":{\"351\":2}}],[\"箭头函数无法通过\",{\"1\":{\"376\":1,\"377\":1}}],[\"箭头函数场景应用\",{\"1\":{\"364\":1}}],[\"箭头函数不绑定this\",{\"1\":{\"364\":1}}],[\"箭头函数不能作为构造函数使用\",{\"1\":{\"198\":1}}],[\"箭头函数没有显式原型\",{\"1\":{\"351\":2}}],[\"箭头函数转化为普通函数\",{\"1\":{\"293\":1}}],[\"箭头函数转换成普通函数\",{\"1\":{\"292\":1}}],[\"箭头函数this不能使用\",{\"1\":{\"241\":1}}],[\"箭头函数+解构\",{\"1\":{\"240\":1}}],[\"箭头函数形式的柯里化\",{\"1\":{\"223\":1}}],[\"箭头函数会抛出错误\",{\"1\":{\"199\":1}}],[\"箭头函数外层没有普通函数\",{\"1\":{\"195\":1}}],[\"箭头函数外层有普通函数\",{\"1\":{\"195\":1}}],[\"箭头函数就是要打破这一规则\",{\"1\":{\"195\":1}}],[\"箭头函数的函数体是一层作用域\",{\"1\":{\"195\":1,\"364\":1}}],[\"箭头函数\",{\"0\":{\"193\":1,\"364\":1},\"1\":{\"195\":2,\"240\":1,\"364\":3,\"376\":1,\"378\":1}}],[\"题目三\",{\"1\":{\"349\":1}}],[\"题目二\",{\"1\":{\"349\":1}}],[\"题目一\",{\"1\":{\"349\":1}}],[\"题外话\",{\"1\":{\"263\":1}}],[\"取得所有失败结果\",{\"1\":{\"347\":1}}],[\"谁先有结果\",{\"1\":{\"346\":1}}],[\"称为\",{\"1\":{\"341\":1}}],[\"含有某个\",{\"1\":{\"341\":1}}],[\"早期是使用回调函数的方式\",{\"1\":{\"332\":1}}],[\"早期的\",{\"1\":{\"248\":1}}],[\"经常用于获取\",{\"1\":{\"332\":1}}],[\"经过\",{\"1\":{\"264\":1}}],[\"才生效\",{\"1\":{\"646\":1}}],[\"才能随意前后端联调\",{\"1\":{\"703\":1}}],[\"才能进入下一个钩子\",{\"1\":{\"513\":1}}],[\"才能被回收\",{\"1\":{\"234\":1}}],[\"才加载\",{\"1\":{\"511\":1}}],[\"才执行下一个任务\",{\"1\":{\"331\":1}}],[\"网关超时\",{\"1\":{\"694\":1}}],[\"网址\",{\"1\":{\"666\":1}}],[\"网络工作者等\",{\"1\":{\"656\":1}}],[\"网格元素\",{\"1\":{\"589\":1}}],[\"网页浏览等\",{\"1\":{\"710\":1}}],[\"网页标题图标\",{\"1\":{\"663\":1}}],[\"网页语言\",{\"1\":{\"663\":1}}],[\"网页页脚或\",{\"1\":{\"657\":1}}],[\"网页页眉或\",{\"1\":{\"657\":1}}],[\"网页文档\",{\"1\":{\"655\":1}}],[\"网页改造为\",{\"1\":{\"582\":1}}],[\"网页\",{\"1\":{\"582\":1}}],[\"网页内容能被搜索到\",{\"1\":{\"582\":1}}],[\"网页加载需要等待\",{\"1\":{\"331\":1}}],[\"网上常见的\",{\"1\":{\"322\":1}}],[\"教程\",{\"1\":{\"329\":1}}],[\"吗\",{\"1\":{\"329\":1}}],[\"官方文档\",{\"1\":{\"504\":1}}],[\"官方872个测试用例\",{\"1\":{\"329\":1}}],[\"官方测试工具\",{\"1\":{\"320\":1}}],[\"手动刷新\",{\"1\":{\"691\":2}}],[\"手动执行生成器\",{\"1\":{\"307\":1}}],[\"手机号\",{\"1\":{\"666\":1}}],[\"手机横竖旋转视口宽高会对调\",{\"1\":{\"655\":1}}],[\"手机数码\",{\"1\":{\"487\":1}}],[\"手写\",{\"0\":{\"379\":1},\"1\":{\"329\":1,\"379\":1}}],[\"手写一个promise\",{\"1\":{\"329\":1}}],[\"手写promise核心代码\",{\"1\":{\"329\":1}}],[\"手写promise\",{\"1\":{\"329\":1}}],[\"手写promise原理\",{\"1\":{\"329\":1}}],[\"手把手一行一行代码教你\",{\"1\":{\"329\":1}}],[\"看到我啦\",{\"1\":{\"535\":4}}],[\"看了就会\",{\"1\":{\"329\":2}}],[\"看电视\",{\"1\":{\"39\":1}}],[\"到在它之前的浮动元素下面\",{\"1\":{\"630\":1}}],[\"到页面渲染的过程\",{\"0\":{\"580\":1}}],[\"到\",{\"1\":{\"328\":1}}],[\"到这个临时对象上\",{\"1\":{\"192\":2,\"363\":2}}],[\"拿不到所有结果\",{\"1\":{\"325\":1}}],[\"拿到\",{\"1\":{\"266\":1}}],[\"安全套接字协议\",{\"1\":{\"697\":1}}],[\"安全传输层协议\",{\"1\":{\"697\":1}}],[\"安全层\",{\"1\":{\"697\":1}}],[\"安全性\",{\"1\":{\"678\":1}}],[\"安全的在\",{\"1\":{\"119\":1}}],[\"安装npm\",{\"1\":{\"650\":1}}],[\"安装插件\",{\"1\":{\"505\":1,\"545\":1}}],[\"安装\",{\"0\":{\"504\":1},\"1\":{\"320\":1}}],[\"完整版\",{\"1\":{\"709\":1}}],[\"完整代码存放于\",{\"1\":{\"328\":1}}],[\"完整代码如下\",{\"1\":{\"319\":1}}],[\"完全不会阻断\",{\"1\":{\"581\":1}}],[\"完美通过官方872个测试用例\",{\"1\":{\"329\":1}}],[\"完美通过\",{\"1\":{\"329\":1}}],[\"完成握手\",{\"1\":{\"712\":1}}],[\"完成\",{\"1\":{\"203\":3,\"326\":1}}],[\"另一种组件类型的方式\",{\"1\":{\"452\":1}}],[\"另一个是失败回调\",{\"1\":{\"316\":1,\"336\":1}}],[\"另见\",{\"1\":{\"361\":1}}],[\"另外一种方式声明对象类型\",{\"1\":{\"448\":1}}],[\"另外一个文件中\",{\"1\":{\"417\":1}}],[\"另外案例\",{\"1\":{\"415\":1}}],[\"另外\",{\"1\":{\"46\":1,\"318\":1,\"703\":1}}],[\"状态码\",{\"1\":{\"686\":1,\"689\":2}}],[\"状态管理模式\",{\"1\":{\"542\":1}}],[\"状态\",{\"1\":{\"334\":1}}],[\"状态由\",{\"1\":{\"334\":2}}],[\"状态只以首先\",{\"1\":{\"313\":1}}],[\"状态不可变\",{\"0\":{\"313\":1}}],[\"三次握手\",{\"0\":{\"712\":1}}],[\"三次握手与四次挥手\",{\"0\":{\"710\":1}}],[\"三种刷新操作对缓存的影响\",{\"0\":{\"691\":1}}],[\"三种状态\",{\"1\":{\"312\":1}}],[\"三角形\",{\"0\":{\"641\":1}}],[\"三行代码实现\",{\"1\":{\"294\":1}}],[\"初步实现\",{\"0\":{\"312\":1,\"316\":1}}],[\"初始缩放比例\",{\"1\":{\"663\":1}}],[\"初始化项目\",{\"1\":{\"498\":1,\"499\":1}}],[\"初始化全局对象\",{\"0\":{\"270\":1}}],[\"初始化\",{\"1\":{\"252\":1}}],[\"初始时创建对象并放入\",{\"1\":{\"20\":1}}],[\"干扰\",{\"1\":{\"309\":1,\"319\":1}}],[\"情况3\",{\"1\":{\"309\":1,\"319\":1}}],[\"情况2\",{\"1\":{\"309\":1,\"319\":1}}],[\"情况1\",{\"1\":{\"309\":1,\"319\":1}}],[\"抛出异常\",{\"0\":{\"314\":1},\"1\":{\"321\":2}}],[\"抛出异常相当于执行\",{\"1\":{\"309\":1,\"314\":1,\"316\":1,\"318\":1,\"319\":1}}],[\"抛出的异常范围⼩于等于⽗类\",{\"1\":{\"12\":1}}],[\"写入\",{\"1\":{\"677\":1}}],[\"写方法时省略了小括号\",{\"1\":{\"521\":1}}],[\"写的\",{\"1\":{\"307\":1}}],[\"写作日期为\",{\"1\":{\"144\":1}}],[\"迭代个数\",{\"1\":{\"632\":1}}],[\"迭代指定范围的函数\",{\"1\":{\"306\":1}}],[\"迭代器提前终止\",{\"1\":{\"301\":1,\"306\":1}}],[\"迭代器的中断\",{\"1\":{\"301\":1}}],[\"迭代器返回的属性值\",{\"1\":{\"298\":1}}],[\"迭代器协议要求实现\",{\"1\":{\"298\":1}}],[\"迭代器协议规定了产生一系列值的标准方式\",{\"1\":{\"298\":1}}],[\"迭代器是一个符合迭代器协议的对象\",{\"1\":{\"298\":1}}],[\"迭代器\",{\"0\":{\"298\":1}}],[\"迭代器与生成器\",{\"0\":{\"297\":1}}],[\"错误网关\",{\"1\":{\"694\":1}}],[\"错误\",{\"1\":{\"305\":2,\"332\":4}}],[\"终止\",{\"1\":{\"304\":2}}],[\"终止函数的执行\",{\"1\":{\"304\":1}}],[\"终止操作\",{\"1\":{\"90\":1}}],[\"遍历渲染树\",{\"1\":{\"580\":1}}],[\"遍历的时候都加上\",{\"1\":{\"533\":1}}],[\"遍历的是可迭代对象的可迭代元素\",{\"1\":{\"300\":1}}],[\"遍历的是普通对象的可枚举属性\",{\"1\":{\"300\":1}}],[\"遍历对象\",{\"1\":{\"533\":1}}],[\"遍历失败回调数组\",{\"1\":{\"309\":1,\"318\":1,\"319\":1}}],[\"遍历成功回调数组\",{\"1\":{\"309\":1,\"318\":1,\"319\":1}}],[\"遍历键值\",{\"1\":{\"300\":1}}],[\"遍历键名\",{\"1\":{\"300\":1}}],[\"大\",{\"2\":{\"563\":1,\"568\":1}}],[\"大div\",{\"1\":{\"532\":1}}],[\"大数\",{\"1\":{\"296\":1}}],[\"大大减少检索的数据量\",{\"1\":{\"175\":1}}],[\"符号\",{\"1\":{\"296\":1}}],[\"未找到\",{\"1\":{\"694\":1}}],[\"未访问的链接\",{\"1\":{\"623\":1}}],[\"未定义\",{\"1\":{\"296\":1}}],[\"未使用lambda表达式\",{\"1\":{\"87\":1}}],[\"空隙\",{\"1\":{\"617\":1}}],[\"空\",{\"1\":{\"296\":1}}],[\"空的闭包被释放回收\",{\"1\":{\"217\":1}}],[\"布局\",{\"0\":{\"644\":1},\"1\":{\"647\":1}}],[\"布局方式\",{\"1\":{\"586\":1}}],[\"布局与功能禁用\",{\"0\":{\"107\":1}}],[\"布尔型\",{\"1\":{\"357\":1}}],[\"布尔\",{\"1\":{\"296\":1}}],[\"概念\",{\"0\":{\"520\":1,\"542\":1},\"1\":{\"516\":1}}],[\"概述\",{\"0\":{\"295\":1,\"334\":1,\"648\":1,\"662\":1}}],[\"概括\",{\"1\":{\"174\":1}}],[\"验证器\",{\"1\":{\"673\":1}}],[\"验证\",{\"1\":{\"292\":1,\"293\":1}}],[\"添加了很多新元素及功能\",{\"1\":{\"656\":1}}],[\"添加i的个数是列数\",{\"1\":{\"633\":1}}],[\"添加或者删除可见的\",{\"1\":{\"586\":1}}],[\"添加某功能\",{\"1\":{\"291\":3}}],[\"添加键值对\",{\"1\":{\"217\":1}}],[\"让viewport的宽度等于物理设备上的真实分辨率\",{\"1\":{\"674\":1}}],[\"让用户输入内容\",{\"1\":{\"673\":1}}],[\"让\",{\"1\":{\"663\":1}}],[\"让页面具有良好的语义和结构\",{\"1\":{\"657\":1}}],[\"让line\",{\"1\":{\"622\":1}}],[\"让一个参数本身是可选的\",{\"1\":{\"413\":1}}],[\"让它返回一个函数去处理剩下的参数\",{\"1\":{\"289\":1}}],[\"让他们办好后\",{\"1\":{\"24\":1}}],[\"柯里化函数\",{\"1\":{\"292\":2}}],[\"柯里化函数的实现\",{\"0\":{\"292\":1}}],[\"柯里化实现了参数的复用\",{\"1\":{\"291\":1}}],[\"柯里化返回一个预置参数的新函数\",{\"1\":{\"291\":1}}],[\"柯里化的作用\",{\"0\":{\"291\":1}}],[\"柯里化例子\",{\"0\":{\"290\":1}}],[\"柯里化\",{\"0\":{\"289\":1},\"1\":{\"289\":1}}],[\"拼接非纯函数\",{\"1\":{\"287\":1}}],[\"截取纯函数\",{\"1\":{\"287\":1}}],[\"截获属性的访问和赋值过程\",{\"1\":{\"184\":1}}],[\"纯函数判断\",{\"0\":{\"288\":1}}],[\"纯函数\",{\"1\":{\"287\":2,\"288\":1}}],[\"少用语句\",{\"1\":{\"287\":1}}],[\"运算符两边必须要有空白字符\",{\"1\":{\"633\":1}}],[\"运算符\",{\"0\":{\"418\":1,\"419\":1,\"420\":1}}],[\"运算过程\",{\"1\":{\"287\":1}}],[\"运行\",{\"1\":{\"631\":1}}],[\"运行原理\",{\"0\":{\"257\":1}}],[\"运行期\",{\"1\":{\"12\":1}}],[\"赋值之后就不可以修改\",{\"1\":{\"395\":1}}],[\"赋值表达式\",{\"1\":{\"373\":1,\"375\":1}}],[\"赋值对象\",{\"1\":{\"284\":1}}],[\"赋值给中间变量\",{\"1\":{\"218\":1}}],[\"增添激活样式\",{\"1\":{\"474\":1}}],[\"增强\",{\"1\":{\"319\":1}}],[\"增强对象\",{\"1\":{\"284\":1}}],[\"增加了一条双向链表\",{\"1\":{\"46\":1}}],[\"寄生组合式继承解决了这个缺点\",{\"1\":{\"284\":1}}],[\"寄生组合式继承\",{\"0\":{\"284\":1}}],[\"寄生式继承\",{\"0\":{\"283\":1}}],[\"借用构造函数继承\",{\"0\":{\"280\":1}}],[\"父级\",{\"1\":{\"632\":1}}],[\"父元素\",{\"1\":{\"629\":2}}],[\"父元素高度不再由子元素撑开\",{\"1\":{\"629\":1}}],[\"父元素设置border\",{\"1\":{\"626\":1}}],[\"父元素设置padding\",{\"1\":{\"626\":1}}],[\"父methods\",{\"1\":{\"488\":1}}],[\"父访问子\",{\"1\":{\"488\":1}}],[\"父子组件访问\",{\"0\":{\"488\":1}}],[\"父子组件通信\",{\"0\":{\"487\":1}}],[\"父组件替换插槽的标签\",{\"1\":{\"495\":1}}],[\"父组件\",{\"1\":{\"487\":1,\"495\":1}}],[\"父组件cpnclick方法接收子组件发射过来的item\",{\"1\":{\"487\":1}}],[\"父组件模板的所有东西都会在父级作用域内编译\",{\"1\":{\"494\":1}}],[\"父组件模板\",{\"1\":{\"487\":1}}],[\"父传子\",{\"1\":{\"473\":1,\"474\":1,\"475\":1,\"480\":1,\"487\":1}}],[\"父类引用指向子类对象\",{\"1\":{\"392\":1}}],[\"父类引用类型属性被所有子类共享\",{\"1\":{\"282\":1}}],[\"父类\",{\"1\":{\"352\":1}}],[\"父类方法可复用\",{\"1\":{\"282\":1}}],[\"父类方法可以复用\",{\"1\":{\"279\":1,\"284\":1}}],[\"父类的引用属性会被所有子类实例共享\",{\"1\":{\"279\":2,\"282\":1,\"283\":2}}],[\"父函数的闭包对象\",{\"1\":{\"224\":1}}],[\"父函数调用子函数\",{\"1\":{\"218\":1}}],[\"父函数返回子函数\",{\"1\":{\"218\":2}}],[\"父函数嵌套包裹多个子函数\",{\"1\":{\"218\":1}}],[\"父函数嵌套包裹子函数\",{\"1\":{\"218\":1}}],[\"父函数嵌套\",{\"1\":{\"212\":2}}],[\"找不到再往上找\",{\"1\":{\"353\":1}}],[\"找不到再去隐式原型所指向的地址找\",{\"1\":{\"353\":1}}],[\"找所有从根开始有引用到的对象\",{\"1\":{\"276\":1}}],[\"找到立即执行函数的形参\",{\"1\":{\"218\":1}}],[\"面向接口编程\",{\"1\":{\"453\":1}}],[\"面向对象编程\",{\"0\":{\"179\":1}}],[\"面试系列\",{\"1\":{\"663\":1}}],[\"面试官\",{\"1\":{\"329\":1}}],[\"面试题四\",{\"0\":{\"378\":1}}],[\"面试题三\",{\"0\":{\"377\":1}}],[\"面试题二\",{\"0\":{\"376\":1}}],[\"面试题一\",{\"0\":{\"375\":1}}],[\"面试题\",{\"0\":{\"374\":1},\"1\":{\"486\":1}}],[\"面试题5\",{\"1\":{\"275\":1}}],[\"面试题4\",{\"1\":{\"275\":1}}],[\"面试题3\",{\"1\":{\"275\":1}}],[\"面试题2\",{\"1\":{\"275\":1}}],[\"面试题1\",{\"1\":{\"275\":1}}],[\"该项目将缩小\",{\"1\":{\"646\":1}}],[\"该箭头函数的上层作用域被显式绑定了\",{\"1\":{\"378\":1}}],[\"该函数在内部以某种方式来增强对象\",{\"1\":{\"283\":1}}],[\"该对象所有的作用域都可以访问\",{\"1\":{\"270\":1}}],[\"该闭包是必须存在\",{\"1\":{\"215\":1}}],[\"走进\",{\"1\":{\"267\":1}}],[\"汇编经过转译最终也会成为机器码\",{\"1\":{\"266\":1}}],[\"汇编语言可以简单理解为机器语言的助记\",{\"1\":{\"266\":1}}],[\"汇编语言\",{\"1\":{\"266\":1}}],[\"汇编语言区别\",{\"1\":{\"266\":1}}],[\"组件及其所有的子节点将被视为静态内容并跳过\",{\"1\":{\"521\":1}}],[\"组件内守卫\",{\"0\":{\"515\":1}}],[\"组件被使用的时候\",{\"1\":{\"511\":1}}],[\"组件和路径映射关系\",{\"1\":{\"506\":1}}],[\"组件data不能是一个对象\",{\"1\":{\"486\":1}}],[\"组件中的data必须是一个函数\",{\"1\":{\"486\":1}}],[\"组件变量访问不到vue实例的数据\",{\"1\":{\"486\":1}}],[\"组件数据存放\",{\"0\":{\"486\":1}}],[\"组件模板分离写法\",{\"0\":{\"485\":1}}],[\"组件化\",{\"0\":{\"483\":1,\"538\":1}}],[\"组合函数\",{\"0\":{\"293\":1},\"1\":{\"293\":2}}],[\"组合继承最大的缺点在于执行两次父类构造函数\",{\"1\":{\"284\":1}}],[\"组合继承会调用两次父类构造函数\",{\"1\":{\"281\":1}}],[\"组合继承\",{\"0\":{\"281\":1}}],[\"组合起来解析函数变量的机制\",{\"1\":{\"209\":1}}],[\"组成的二进制文件\",{\"1\":{\"266\":1}}],[\"二\",{\"1\":{\"663\":1}}],[\"二进制\",{\"1\":{\"384\":1,\"461\":1}}],[\"二进制序列\",{\"1\":{\"266\":1}}],[\"二级索引\",{\"1\":{\"173\":1}}],[\"机器语言指令\",{\"1\":{\"266\":1}}],[\"机器码\",{\"1\":{\"266\":2}}],[\"课\",{\"1\":{\"266\":1}}],[\"课程成绩查询成功~~~\",{\"1\":{\"243\":1}}],[\"课程查询成功~~~\",{\"1\":{\"243\":1}}],[\"拓展阅读\",{\"1\":{\"266\":1}}],[\"约束变量类型可以提高编译效率的原因\",{\"1\":{\"265\":1}}],[\"必传参数\",{\"1\":{\"433\":1}}],[\"必然会影响网页的运行效率\",{\"1\":{\"264\":1}}],[\"必须至少握手三次\",{\"1\":{\"713\":1}}],[\"必须都写\",{\"1\":{\"616\":1}}],[\"必须是vue实例中定义的函数\",{\"1\":{\"532\":1}}],[\"必须是一个函数且返回一个对象\",{\"1\":{\"486\":1}}],[\"必须有返回值\",{\"1\":{\"529\":1}}],[\"必须有一个键为\",{\"1\":{\"299\":1}}],[\"必须在\",{\"1\":{\"521\":1}}],[\"必须放在\",{\"1\":{\"206\":1}}],[\"必须首先获得对应的\",{\"1\":{\"52\":1,\"71\":1}}],[\"必须修改\",{\"1\":{\"12\":1}}],[\"惰性解析\",{\"1\":{\"264\":2}}],[\"惰性求值\",{\"1\":{\"90\":1}}],[\"延迟低\",{\"1\":{\"696\":1}}],[\"延迟执行\",{\"1\":{\"291\":1}}],[\"延迟\",{\"1\":{\"264\":1}}],[\"延迟加载\",{\"1\":{\"90\":1}}],[\"扫描器会进行词法分析\",{\"1\":{\"264\":1}}],[\"扫描器的词法分析\",{\"1\":{\"264\":1}}],[\"过期后必须向服务器验证\",{\"1\":{\"687\":1}}],[\"过期时间\",{\"1\":{\"687\":1}}],[\"过渡延迟时间\",{\"1\":{\"631\":1}}],[\"过渡函数\",{\"1\":{\"631\":1}}],[\"过渡时间\",{\"1\":{\"631\":1}}],[\"过渡属性\",{\"1\":{\"631\":1}}],[\"过程\",{\"1\":{\"686\":1,\"689\":1,\"706\":1}}],[\"过程中\",{\"1\":{\"581\":1}}],[\"过程图及描述如下\",{\"1\":{\"264\":1}}],[\"过滤器可以用在两个地方\",{\"1\":{\"537\":1}}],[\"过滤器常用来处理文本格式化的操作\",{\"1\":{\"537\":1}}],[\"过滤器\",{\"0\":{\"537\":1}}],[\"过滤\",{\"1\":{\"90\":1}}],[\"虚拟机执行的一种指令格式\",{\"1\":{\"263\":1}}],[\"极客时间\",{\"1\":{\"263\":1}}],[\"垃圾回收器会定期从这个根开始\",{\"1\":{\"276\":1}}],[\"垃圾回收器\",{\"1\":{\"262\":1}}],[\"技术就是博两者之长\",{\"1\":{\"262\":1}}],[\"缸发动机\",{\"1\":{\"262\":1}}],[\"型\",{\"1\":{\"262\":1}}],[\"谷歌开发的性能强大的\",{\"1\":{\"260\":1}}],[\"谷歌基于\",{\"1\":{\"258\":1}}],[\"专门处理\",{\"1\":{\"260\":1}}],[\"优缺点\",{\"1\":{\"706\":1}}],[\"优先级高于\",{\"1\":{\"646\":1}}],[\"优先级递减顺序\",{\"1\":{\"638\":1,\"639\":1}}],[\"优先级\",{\"0\":{\"637\":1},\"1\":{\"687\":1,\"690\":1}}],[\"优先使用这个\",{\"1\":{\"584\":1}}],[\"优先渲染页面\",{\"1\":{\"580\":1}}],[\"优先执行\",{\"1\":{\"580\":1}}],[\"优先捕获顶层\",{\"1\":{\"337\":2}}],[\"优先加载\",{\"1\":{\"259\":1}}],[\"优化编译器所需的信息\",{\"1\":{\"265\":1}}],[\"优化编译器\",{\"0\":{\"266\":1},\"1\":{\"262\":1,\"263\":1}}],[\"优点是简化编程模型\",{\"1\":{\"331\":1}}],[\"优点是简化编程\",{\"1\":{\"248\":1}}],[\"优点\",{\"1\":{\"175\":1,\"189\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"284\":1,\"583\":1,\"633\":1,\"697\":1,\"706\":1}}],[\"遇到\",{\"1\":{\"259\":1}}],[\"遇到其内部子函数声明\",{\"1\":{\"217\":1}}],[\"目前广泛使用的版本\",{\"1\":{\"648\":1}}],[\"目前应用于\",{\"1\":{\"258\":1}}],[\"目标伪类\",{\"1\":{\"623\":1}}],[\"目的是获取子组件中的planguages数据内容\",{\"1\":{\"495\":1}}],[\"目录\",{\"0\":{\"102\":1,\"105\":1,\"148\":1}}],[\"轮询阶段\",{\"1\":{\"254\":1}}],[\"仅客户端可以缓存数据\",{\"1\":{\"687\":1}}],[\"仅在当前网页会话下有效\",{\"1\":{\"681\":1}}],[\"仅\",{\"1\":{\"254\":1}}],[\"闲置阶段\",{\"1\":{\"254\":1}}],[\"待定回调阶段\",{\"1\":{\"254\":1}}],[\"定位参照对象的高度\",{\"1\":{\"629\":1}}],[\"定位参照对象的宽度\",{\"1\":{\"629\":1}}],[\"定位总结\",{\"1\":{\"629\":1}}],[\"定位\",{\"0\":{\"629\":1}}],[\"定时器内有\",{\"1\":{\"318\":1}}],[\"定时器\",{\"0\":{\"318\":1}}],[\"定时器阶段\",{\"1\":{\"254\":1}}],[\"定义与过程\",{\"0\":{\"686\":1,\"689\":1}}],[\"定义斜体的文本\",{\"1\":{\"657\":1}}],[\"定义粗体的文本\",{\"1\":{\"657\":1}}],[\"定义每一帧的属性\",{\"1\":{\"631\":1}}],[\"定义局部过滤器\",{\"1\":{\"537\":1}}],[\"定义常量时\",{\"1\":{\"431\":1}}],[\"定义变量\",{\"1\":{\"428\":1}}],[\"定义为静态方法\",{\"1\":{\"335\":1}}],[\"定义生成器函数\",{\"1\":{\"302\":1}}],[\"定义的变量\",{\"1\":{\"272\":1}}],[\"定义类的私有成员\",{\"1\":{\"222\":1}}],[\"定义\",{\"0\":{\"213\":1,\"390\":1},\"1\":{\"218\":1,\"225\":1,\"351\":1,\"363\":1,\"686\":1,\"689\":1}}],[\"定义外层函数为父函数\",{\"1\":{\"212\":1}}],[\"定义时所在的\",{\"1\":{\"195\":1,\"364\":1}}],[\"定义时所在\",{\"1\":{\"195\":1,\"364\":1}}],[\"定义多个属性\",{\"0\":{\"185\":1}}],[\"定义单个属性\",{\"0\":{\"182\":1}}],[\"定义一个班级类\",{\"1\":{\"301\":1,\"306\":1}}],[\"定义一个类\",{\"1\":{\"32\":1}}],[\"定义一个接口及其实现类\",{\"1\":{\"32\":1}}],[\"98\",{\"1\":{\"536\":2}}],[\"99\",{\"1\":{\"536\":1}}],[\"9\",{\"1\":{\"253\":1,\"256\":1}}],[\"微软开发\",{\"1\":{\"258\":1,\"260\":1}}],[\"微3\",{\"1\":{\"253\":1}}],[\"微2\",{\"1\":{\"252\":1,\"253\":1}}],[\"微1\",{\"1\":{\"252\":1,\"253\":1}}],[\"微任务队列\",{\"1\":{\"255\":1}}],[\"微任务结束再执行\",{\"1\":{\"253\":1}}],[\"微任务会阻塞页面的渲染\",{\"1\":{\"250\":1}}],[\"微任务与宏任务分类\",{\"0\":{\"249\":1}}],[\"微任务执行完毕后\",{\"1\":{\"250\":1}}],[\"微任务执行完毕\",{\"1\":{\"205\":1,\"252\":1}}],[\"微任务\",{\"0\":{\"317\":1},\"1\":{\"205\":1,\"249\":1,\"251\":1}}],[\"放在请求体中\",{\"1\":{\"700\":1}}],[\"放在\",{\"1\":{\"580\":2}}],[\"放在实例上\",{\"1\":{\"363\":1}}],[\"放入实例挂载\",{\"1\":{\"484\":1}}],[\"放入第三轮微任务队列中\",{\"1\":{\"253\":1}}],[\"放入第二轮的微任务队列中\",{\"1\":{\"253\":1}}],[\"放入第二轮微任务\",{\"1\":{\"251\":1}}],[\"放最后\",{\"1\":{\"259\":1}}],[\"放最前\",{\"1\":{\"259\":1}}],[\"放到任务队列\",{\"1\":{\"218\":2}}],[\"产生两个或以上\",{\"1\":{\"700\":1}}],[\"产生一个\",{\"1\":{\"700\":1}}],[\"产生相互影响\",{\"1\":{\"486\":1}}],[\"产生了新的微任务\",{\"1\":{\"251\":1}}],[\"产生指定个数的整数放入集合中\",{\"1\":{\"87\":1}}],[\"宏2\",{\"1\":{\"251\":1,\"253\":1}}],[\"宏1\",{\"1\":{\"251\":1,\"252\":1,\"253\":2}}],[\"宏任务队列\",{\"1\":{\"255\":1}}],[\"宏任务不会\",{\"1\":{\"250\":1}}],[\"宏任务\",{\"1\":{\"249\":1}}],[\"渲染完成就执行\",{\"1\":{\"584\":1}}],[\"渲染页面\",{\"1\":{\"583\":1}}],[\"渲染阻塞\",{\"1\":{\"580\":1}}],[\"渲染过程\",{\"1\":{\"580\":1}}],[\"渲染到关联的模板\",{\"1\":{\"528\":1}}],[\"渲染界面成千上万行的javascript代码需要执行\",{\"1\":{\"428\":1}}],[\"渲染引擎将源码交给\",{\"1\":{\"264\":1}}],[\"渲染引擎和\",{\"0\":{\"261\":1}}],[\"渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息\",{\"1\":{\"259\":1}}],[\"渲染引擎\",{\"0\":{\"259\":1},\"1\":{\"261\":1}}],[\"渲染\",{\"1\":{\"250\":1}}],[\"渲染冲突的问题\",{\"1\":{\"248\":1}}],[\"新增的存储对象\",{\"1\":{\"679\":1,\"680\":1}}],[\"新增的特性\",{\"1\":{\"338\":1}}],[\"新增\",{\"1\":{\"345\":1,\"347\":1}}],[\"新的\",{\"1\":{\"322\":2,\"326\":1,\"345\":1}}],[\"新标准\",{\"1\":{\"248\":1}}],[\"新特性\",{\"1\":{\"66\":1,\"249\":1}}],[\"脚本创建多个线程\",{\"1\":{\"248\":1}}],[\"脚注\",{\"0\":{\"124\":1}}],[\"进制\",{\"1\":{\"640\":1}}],[\"进入\",{\"1\":{\"337\":2}}],[\"进行跨域\",{\"1\":{\"706\":1}}],[\"进行定位\",{\"1\":{\"629\":1}}],[\"进行布局与绘制\",{\"1\":{\"580\":1}}],[\"进行下一个钩子函数\",{\"1\":{\"513\":1}}],[\"进行增强\",{\"1\":{\"309\":1,\"319\":1}}],[\"进行\",{\"1\":{\"263\":1}}],[\"进行引用\",{\"1\":{\"145\":2}}],[\"进程是车间\",{\"1\":{\"248\":1}}],[\"进程是线程的容器\",{\"1\":{\"248\":1}}],[\"浏览器需要预先检查下服务器是否允许该请求\",{\"1\":{\"707\":1}}],[\"浏览器加载\",{\"1\":{\"706\":1}}],[\"浏览器的安全策略\",{\"1\":{\"703\":1}}],[\"浏览器信息\",{\"1\":{\"695\":1}}],[\"浏览器可接收的语言\",{\"1\":{\"695\":1}}],[\"浏览器可接收的压缩算法\",{\"1\":{\"695\":1}}],[\"浏览器可接收的数据格式\",{\"1\":{\"695\":1}}],[\"浏览器只能的等比的缩小整个页面\",{\"1\":{\"663\":1}}],[\"浏览器渲染流程\",{\"1\":{\"648\":2}}],[\"浏览器渲染机制\",{\"0\":{\"579\":1}}],[\"浏览器首次引入\",{\"1\":{\"636\":1}}],[\"浏览器默认开启了同源策略\",{\"1\":{\"703\":1}}],[\"浏览器默认使用\",{\"1\":{\"635\":1}}],[\"浏览器默认的\",{\"1\":{\"586\":1}}],[\"浏览器兼容性\",{\"1\":{\"630\":1}}],[\"浏览器重新绘制该\",{\"1\":{\"587\":1}}],[\"浏览器重新渲染部分或全部文档\",{\"1\":{\"586\":1}}],[\"浏览器窗口大小发生改变\",{\"1\":{\"586\":1}}],[\"浏览器向\",{\"1\":{\"580\":1}}],[\"浏览器环境\",{\"1\":{\"360\":1}}],[\"浏览器环境下\",{\"1\":{\"184\":1}}],[\"浏览器已经转向\",{\"1\":{\"258\":1}}],[\"浏览器使用\",{\"1\":{\"258\":1,\"261\":2}}],[\"浏览器内核\",{\"0\":{\"258\":1,\"261\":1}}],[\"浏览器\",{\"1\":{\"249\":1,\"260\":1}}],[\"浏览器事件循环\",{\"0\":{\"248\":1}}],[\"事件修饰符\",{\"1\":{\"532\":1}}],[\"事件指定一个回调函数\",{\"1\":{\"532\":1}}],[\"事件中直接写js片段\",{\"1\":{\"532\":1}}],[\"事件绑定v\",{\"0\":{\"532\":1}}],[\"事件处理\",{\"1\":{\"528\":1}}],[\"事件定义时\",{\"1\":{\"521\":1}}],[\"事件调用的方法没有参数→普通按钮\",{\"1\":{\"521\":1}}],[\"事件监听参数问题\",{\"1\":{\"521\":1}}],[\"事件监听\",{\"1\":{\"331\":1}}],[\"事件\",{\"1\":{\"249\":1,\"254\":1,\"255\":2,\"671\":1,\"672\":1,\"673\":1,\"674\":1}}],[\"事件循环机制分为\",{\"1\":{\"254\":1}}],[\"事件循环\",{\"0\":{\"247\":1,\"254\":1}}],[\"事务在每次查询开始时都会生成并设置新的\",{\"1\":{\"171\":1}}],[\"事务隔离级别\",{\"1\":{\"166\":1}}],[\"事务有哪些隔离级别\",{\"0\":{\"166\":1}}],[\"事务的原子性确保动作要么全部完成\",{\"1\":{\"163\":1}}],[\"事务的特性\",{\"0\":{\"163\":1}}],[\"事务是最小的执行单位\",{\"1\":{\"163\":1}}],[\"出来的\",{\"1\":{\"379\":1}}],[\"出现异常~~~\",{\"1\":{\"243\":1}}],[\"出现异常了\",{\"1\":{\"243\":3}}],[\"出栈\",{\"1\":{\"216\":1}}],[\"嵌套\",{\"0\":{\"653\":1}}],[\"嵌套路由\",{\"0\":{\"512\":1}}],[\"嵌套函数代码执行过程\",{\"0\":{\"273\":1},\"1\":{\"273\":1}}],[\"嵌套ajax\",{\"1\":{\"243\":1}}],[\"嵌套调用\",{\"1\":{\"212\":1}}],[\"按键修饰符\",{\"1\":{\"532\":1}}],[\"按照当前课程id查出分数\",{\"1\":{\"243\":1}}],[\"按照当前用户的id查出他的课程\",{\"1\":{\"243\":1}}],[\"按特定的排队规则来确定先后顺序\",{\"1\":{\"47\":1}}],[\"橘子\",{\"1\":{\"241\":1}}],[\"苹果开发\",{\"1\":{\"260\":1}}],[\"苹果基于\",{\"1\":{\"258\":1}}],[\"苹果\",{\"0\":{\"559\":1,\"564\":1},\"1\":{\"241\":1,\"521\":2},\"2\":{\"562\":1,\"567\":1}}],[\"香蕉\",{\"0\":{\"569\":1,\"574\":1},\"1\":{\"241\":1,\"521\":3},\"2\":{\"572\":1,\"577\":1}}],[\"张三\",{\"1\":{\"241\":1,\"405\":1,\"528\":1,\"533\":1,\"539\":1}}],[\"代理服务器\",{\"1\":{\"687\":1}}],[\"代表取出该对象所有属性拷贝到当前对象\",{\"1\":{\"241\":1}}],[\"代码把需要加载的\",{\"1\":{\"582\":1}}],[\"代码时暂停渲染\",{\"1\":{\"580\":1}}],[\"代码生成\",{\"1\":{\"580\":2}}],[\"代码会报错\",{\"1\":{\"455\":1}}],[\"代码示例\",{\"1\":{\"351\":1}}],[\"代码执行\",{\"1\":{\"338\":2,\"382\":1}}],[\"代码执行过程\",{\"0\":{\"268\":1}}],[\"代码执行顺序\",{\"1\":{\"255\":1}}],[\"代码进行解析\",{\"1\":{\"264\":2}}],[\"代码拆分成一个个词法单元\",{\"1\":{\"263\":1}}],[\"代码的虚拟机\",{\"1\":{\"260\":1}}],[\"代码和\",{\"1\":{\"259\":1}}],[\"代码演示\",{\"0\":{\"135\":1}}],[\"代码块\",{\"0\":{\"120\":1}}],[\"代码\",{\"0\":{\"600\":1},\"1\":{\"119\":1,\"259\":1,\"260\":1,\"264\":1,\"266\":1,\"580\":1,\"598\":1,\"666\":1}}],[\"合并单元格边框\",{\"1\":{\"633\":1}}],[\"合并空白\",{\"1\":{\"633\":1}}],[\"合并成渲染树\",{\"1\":{\"580\":1}}],[\"合并对象\",{\"1\":{\"241\":1}}],[\"合并函数\",{\"1\":{\"241\":1}}],[\"合并流\",{\"1\":{\"91\":1}}],[\"没用\",{\"1\":{\"645\":1}}],[\"没函数体\",{\"1\":{\"437\":1}}],[\"没报错就算成功\",{\"1\":{\"334\":1}}],[\"没传就会自动使用默认值\",{\"1\":{\"240\":1}}],[\"没有兼容性问题\",{\"1\":{\"706\":1}}],[\"没有使用同源策略\",{\"1\":{\"703\":1}}],[\"没有限制\",{\"1\":{\"700\":1}}],[\"没有就是盒子的底部\",{\"1\":{\"633\":1}}],[\"没有高度\",{\"1\":{\"630\":1}}],[\"没有对是否传入参数进行校验\",{\"1\":{\"428\":1}}],[\"没有对类型进行校验\",{\"1\":{\"428\":1}}],[\"没有做任何的参数校验\",{\"1\":{\"428\":1}}],[\"没有结果\",{\"1\":{\"332\":1}}],[\"没有改变包括输入在内的外部环境\",{\"1\":{\"287\":1}}],[\"没有依赖除了输入的外部环境\",{\"1\":{\"287\":1}}],[\"没有拷贝\",{\"1\":{\"234\":1}}],[\"没有用标识符封装起来的数据原始值\",{\"1\":{\"228\":1}}],[\"没有及时释放或被回收\",{\"1\":{\"224\":1}}],[\"没有子函数引用\",{\"1\":{\"217\":1}}],[\"没有被使用到的闭包会被回收\",{\"1\":{\"214\":1}}],[\"没有\",{\"1\":{\"196\":1,\"355\":1,\"363\":1}}],[\"没有prototype\",{\"1\":{\"194\":1}}],[\"没有原型\",{\"0\":{\"194\":1}}],[\"没有参数列表\",{\"0\":{\"196\":1}}],[\"没有参数\",{\"1\":{\"88\":1}}],[\"没有返回值等价于\",{\"1\":{\"336\":1}}],[\"没有返回值\",{\"1\":{\"11\":1,\"287\":1}}],[\"现在是必须的\",{\"1\":{\"521\":1}}],[\"现在称\",{\"1\":{\"261\":1}}],[\"现在习惯直接称渲染引擎为内核\",{\"1\":{\"261\":1}}],[\"现在可以这么写\",{\"1\":{\"240\":1}}],[\"现在可以直接写了function\",{\"1\":{\"240\":1}}],[\"现在的\",{\"1\":{\"209\":1}}],[\"了解\",{\"0\":{\"381\":1,\"382\":1},\"1\":{\"267\":1,\"415\":1}}],[\"了解下\",{\"1\":{\"266\":1}}],[\"了\",{\"1\":{\"239\":1}}],[\"冒号代表改名\",{\"1\":{\"239\":1}}],[\"结束状态\",{\"1\":{\"631\":2}}],[\"结束\",{\"1\":{\"322\":2}}],[\"结束则\",{\"1\":{\"302\":1}}],[\"结合原型类继承和工厂模式\",{\"1\":{\"283\":1}}],[\"结构伪类\",{\"1\":{\"623\":1}}],[\"结构\",{\"0\":{\"663\":1},\"1\":{\"586\":1}}],[\"结构传入对象的成员\",{\"1\":{\"240\":1}}],[\"结构化拷贝\",{\"1\":{\"235\":1}}],[\"结构化拷贝可以实现深拷贝\",{\"1\":{\"235\":1}}],[\"结果也是相同的\",{\"1\":{\"700\":1}}],[\"结果为\",{\"1\":{\"35\":1}}],[\"结果才为\",{\"1\":{\"4\":1}}],[\"循环遍历v\",{\"0\":{\"533\":1}}],[\"循环遍历对象自身的和原型链上的可枚举属性\",{\"1\":{\"355\":1}}],[\"循环引用\",{\"1\":{\"234\":1,\"309\":1,\"319\":1}}],[\"循环赋值\",{\"1\":{\"218\":1}}],[\"弱引用则由垃圾回收机制判断是否回收\",{\"1\":{\"234\":1}}],[\"弱引用映射与\",{\"1\":{\"234\":1}}],[\"避免\",{\"1\":{\"703\":1}}],[\"避免样式优先级内卷\",{\"1\":{\"640\":1}}],[\"避免执行\",{\"1\":{\"580\":1}}],[\"避免页面结构渲染完成\",{\"1\":{\"580\":1}}],[\"避免页面重绘\",{\"1\":{\"259\":1}}],[\"避免父类的引用属性被所有子类实例共享\",{\"1\":{\"285\":1}}],[\"避免父类的引用类型属性被所有子类实例共享\",{\"1\":{\"281\":1,\"284\":1}}],[\"避免父类引用类型属性被所有子类实例共享\",{\"1\":{\"284\":1}}],[\"避免父类引用类型属性被所有实例共享\",{\"1\":{\"280\":1}}],[\"避免白屏等待过久\",{\"1\":{\"259\":1}}],[\"避免自身引用导致栈溢出\",{\"1\":{\"234\":1}}],[\"避免内存泄漏\",{\"1\":{\"218\":1}}],[\"轻松拿下\",{\"1\":{\"234\":1,\"236\":1}}],[\"正常操作\",{\"1\":{\"691\":2}}],[\"正常方向\",{\"1\":{\"631\":1}}],[\"正常\",{\"1\":{\"622\":2}}],[\"正常流\",{\"1\":{\"586\":1}}],[\"正常返回\",{\"1\":{\"334\":2}}],[\"正因为data是函数\",{\"1\":{\"486\":1}}],[\"正则对象\",{\"1\":{\"234\":1}}],[\"正则的深拷贝\",{\"1\":{\"234\":1}}],[\"正确使用闭包不会造成内存泄漏\",{\"1\":{\"224\":1}}],[\"正确吗\",{\"0\":{\"7\":2}}],[\"功能\",{\"1\":{\"234\":1}}],[\"递归深拷贝每层\",{\"1\":{\"234\":1}}],[\"递归循环\",{\"0\":{\"234\":1}}],[\"递归操作\",{\"1\":{\"90\":1}}],[\"弊端\",{\"1\":{\"233\":1}}],[\"解密取得用户登录凭证\",{\"1\":{\"682\":1}}],[\"解构赋值\",{\"1\":{\"299\":1}}],[\"解构表达式\",{\"0\":{\"239\":1}}],[\"解释器转成字节码并执行\",{\"1\":{\"264\":1}}],[\"解释器转化为\",{\"1\":{\"263\":1}}],[\"解释器\",{\"0\":{\"265\":1},\"1\":{\"260\":1,\"262\":1,\"263\":1}}],[\"解决网络包丢失的问题\",{\"1\":{\"711\":1}}],[\"解决网络包乱序的问题\",{\"1\":{\"711\":1}}],[\"解决方案\",{\"1\":{\"633\":1}}],[\"解决方法\",{\"1\":{\"488\":1}}],[\"解决浮动产生的高度塌陷问题\",{\"1\":{\"630\":1}}],[\"解决父容器高度塌陷\",{\"0\":{\"592\":1}}],[\"解决外边距重叠\",{\"0\":{\"591\":1}}],[\"解决了上面案例三的问题\",{\"1\":{\"362\":1}}],[\"解决了回调地狱的问题\",{\"1\":{\"333\":1}}],[\"解决了命名空间污染的问题\",{\"1\":{\"221\":1}}],[\"解决循环引用\",{\"1\":{\"234\":2}}],[\"解析完成后再执行脚本\",{\"1\":{\"581\":1}}],[\"解析域名成\",{\"1\":{\"580\":1}}],[\"解析器和\",{\"1\":{\"264\":1}}],[\"解析器将源码转化为\",{\"1\":{\"264\":1}}],[\"解析器负责将源代码转换成\",{\"1\":{\"264\":1}}],[\"解析器\",{\"0\":{\"264\":1},\"1\":{\"262\":1,\"263\":1}}],[\"解析\",{\"1\":{\"233\":1,\"259\":1,\"581\":2}}],[\"展开运算符\",{\"1\":{\"230\":1,\"299\":1}}],[\"展示图片\",{\"1\":{\"671\":1}}],[\"展示多媒体控制面板\",{\"1\":{\"659\":1}}],[\"展示\",{\"0\":{\"113\":1},\"1\":{\"102\":1,\"105\":1,\"134\":1,\"148\":1}}],[\"两行文字基线之间的距离\",{\"1\":{\"622\":1}}],[\"两端对齐\",{\"1\":{\"621\":1}}],[\"两者循环引用\",{\"1\":{\"351\":2}}],[\"两者不影响\",{\"1\":{\"228\":1}}],[\"两者等价\",{\"1\":{\"202\":1}}],[\"两个变量指向不同的字面量\",{\"1\":{\"228\":1}}],[\"两个变量指向同一个字面量\",{\"1\":{\"228\":1}}],[\"深入\",{\"1\":{\"267\":1}}],[\"深入浅出第\",{\"1\":{\"266\":1}}],[\"深浅拷贝\",{\"0\":{\"227\":1}}],[\"深拷贝开辟新的地址\",{\"1\":{\"241\":1}}],[\"深拷贝函数意义不大\",{\"1\":{\"234\":1}}],[\"深拷贝会完全复制整个对象\",{\"1\":{\"21\":1}}],[\"深拷贝\",{\"0\":{\"232\":1},\"1\":{\"21\":1,\"227\":2,\"234\":1,\"235\":1,\"236\":1,\"241\":1}}],[\"深拷贝和浅拷贝区别\",{\"0\":{\"21\":1}}],[\"维基百科\",{\"1\":{\"226\":1,\"228\":1}}],[\"防止继承\",{\"1\":{\"655\":1}}],[\"防止传递问题\",{\"1\":{\"626\":1}}],[\"防止乱用\",{\"1\":{\"403\":1}}],[\"防止空指针异常\",{\"1\":{\"93\":1}}],[\"防抖节流\",{\"1\":{\"225\":1}}],[\"私有属性\",{\"1\":{\"225\":1}}],[\"滥用闭包才会造成内存泄漏\",{\"1\":{\"224\":1,\"225\":1}}],[\"业务代码\",{\"1\":{\"223\":1}}],[\"被全局对象\",{\"1\":{\"360\":1}}],[\"被设计为单线程语言\",{\"1\":{\"248\":1}}],[\"被所有子函数的作用域链引用\",{\"1\":{\"224\":1}}],[\"被内层函数使用到的闭包对象不会被垃圾回收机制回收\",{\"1\":{\"219\":1}}],[\"被内层函数使用到的闭包对象不是空的\",{\"1\":{\"219\":1}}],[\"被引用到的闭包不会被回收\",{\"1\":{\"217\":1}}],[\"立即执行\",{\"1\":{\"254\":1}}],[\"立即执行函数\",{\"1\":{\"218\":1,\"362\":1}}],[\"立即执行匿名函数\",{\"1\":{\"206\":1}}],[\"接下来\",{\"1\":{\"264\":1}}],[\"接着执行微任务\",{\"1\":{\"252\":1}}],[\"接着执行宏任务\",{\"1\":{\"252\":1}}],[\"接收端\",{\"1\":{\"711\":1}}],[\"接收state作为第一个参数\",{\"1\":{\"549\":1}}],[\"接收父组件传入的activecolor\",{\"1\":{\"475\":1}}],[\"接收的是\",{\"1\":{\"322\":1}}],[\"接收两个回调函数作为参数\",{\"1\":{\"316\":1,\"336\":1}}],[\"接收一个函数\",{\"1\":{\"242\":1}}],[\"接收实参\",{\"1\":{\"218\":1}}],[\"接口interface\",{\"1\":{\"448\":1}}],[\"接口的实现\",{\"0\":{\"453\":1}}],[\"接口的继承\",{\"0\":{\"451\":1}}],[\"接口的使用\",{\"0\":{\"447\":1}}],[\"接口的默认实现方法和静态方法\",{\"0\":{\"98\":1}}],[\"接口名等\",{\"1\":{\"228\":1}}],[\"接口冲突\",{\"1\":{\"98\":1}}],[\"接口中只有一个抽象方法\",{\"1\":{\"84\":1}}],[\"接口中的方法都是抽象方法\",{\"1\":{\"8\":1}}],[\"接口实际上是出自java\",{\"1\":{\"54\":1}}],[\"接口并重写invoke\",{\"1\":{\"32\":1}}],[\"接口和proxy类\",{\"1\":{\"32\":1}}],[\"接口\",{\"0\":{\"81\":1,\"82\":1,\"83\":1},\"1\":{\"8\":1,\"45\":1}}],[\"依然是由全局对象调用\",{\"1\":{\"360\":2}}],[\"依然会出现回调地狱的问题\",{\"1\":{\"307\":1}}],[\"依然存在\",{\"1\":{\"215\":1}}],[\"依赖注入provide\",{\"1\":{\"488\":1}}],[\"依赖\",{\"1\":{\"288\":1}}],[\"依次执行任务队列\",{\"1\":{\"218\":1}}],[\"个赞<\",{\"1\":{\"532\":1}}],[\"个人点赞<\",{\"1\":{\"539\":1}}],[\"个人为他点赞\",{\"1\":{\"528\":1}}],[\"个人习惯\",{\"1\":{\"463\":1}}],[\"个要求\",{\"1\":{\"379\":1}}],[\"个阶段\",{\"1\":{\"254\":1}}],[\"个互不干扰的块级作用域\",{\"1\":{\"218\":1}}],[\"个互不干扰的闭包\",{\"1\":{\"218\":1}}],[\"个\",{\"1\":{\"218\":2}}],[\"个数不同\",{\"1\":{\"12\":1}}],[\"→\",{\"1\":{\"217\":3,\"218\":3,\"221\":3,\"331\":3,\"334\":4,\"376\":2,\"377\":3,\"378\":3,\"493\":1,\"500\":4,\"521\":1}}],[\"令闭包对象\",{\"1\":{\"217\":2}}],[\"zh\",{\"1\":{\"663\":2,\"695\":1,\"706\":1}}],[\"zhangsan\",{\"1\":{\"241\":1}}],[\"z\",{\"1\":{\"217\":5,\"223\":6,\"290\":8,\"292\":2,\"411\":5,\"414\":1,\"443\":3,\"629\":1}}],[\"zoom\",{\"1\":{\"630\":1}}],[\"zoo\",{\"1\":{\"93\":7}}],[\"引自\",{\"1\":{\"586\":1}}],[\"引入cdn\",{\"1\":{\"650\":1}}],[\"引入\",{\"1\":{\"638\":1}}],[\"引入第三方包\",{\"1\":{\"307\":1}}],[\"引入了新的微任务\",{\"1\":{\"253\":1}}],[\"引擎优化\",{\"1\":{\"382\":1}}],[\"引擎是如何工作的\",{\"1\":{\"267\":1}}],[\"引擎就实现了\",{\"1\":{\"264\":1}}],[\"引擎本质是\",{\"1\":{\"263\":1}}],[\"引擎主要流程\",{\"0\":{\"263\":1}}],[\"引擎主要模块有\",{\"1\":{\"262\":1}}],[\"引擎属于\",{\"1\":{\"262\":1}}],[\"引擎的历史\",{\"1\":{\"266\":1}}],[\"引擎的命名是\",{\"1\":{\"262\":1}}],[\"引擎的原理\",{\"0\":{\"262\":1}}],[\"引擎的关系\",{\"0\":{\"261\":1}}],[\"引擎独立\",{\"1\":{\"261\":1}}],[\"引擎\",{\"0\":{\"260\":1},\"1\":{\"260\":3,\"261\":3,\"262\":2,\"264\":1,\"267\":1}}],[\"引擎预编译函数时\",{\"1\":{\"217\":1}}],[\"引擎在每个函数执行前都会进行预编译\",{\"1\":{\"217\":1}}],[\"引用计数法\",{\"1\":{\"276\":2}}],[\"引用类型的地址值存在栈中\",{\"1\":{\"296\":1}}],[\"引用类型字面量引用赋值给某个变量后\",{\"1\":{\"228\":2}}],[\"引用类型数据互不影响\",{\"1\":{\"227\":1}}],[\"引用自\",{\"1\":{\"228\":2,\"663\":1}}],[\"引用赋值\",{\"0\":{\"227\":1,\"228\":1},\"1\":{\"227\":2,\"228\":1}}],[\"引用的内容多了\",{\"1\":{\"224\":1,\"225\":1}}],[\"引用父函数的变量\",{\"1\":{\"218\":1}}],[\"引用\",{\"1\":{\"218\":2}}],[\"引用了父函数的变量\",{\"1\":{\"217\":2}}],[\"引用了外层函数作用域的变量\",{\"1\":{\"215\":1}}],[\"引用了外层全局作用域的变量\",{\"1\":{\"214\":1}}],[\"引用这个闭包对象\",{\"1\":{\"217\":1}}],[\"引用到的变量沿着作用域链逐级向上查找\",{\"1\":{\"212\":1}}],[\"栈上保存的数据也就不存在了\",{\"1\":{\"216\":1}}],[\"保障用户隐私\",{\"1\":{\"703\":1}}],[\"保持图片的宽高比不变\",{\"1\":{\"627\":1}}],[\"保存在客户端\",{\"1\":{\"678\":1}}],[\"保存在服务端\",{\"1\":{\"678\":1}}],[\"保存客户端信息\",{\"1\":{\"677\":1}}],[\"保存\",{\"1\":{\"361\":1}}],[\"保存失败状态\",{\"1\":{\"328\":1}}],[\"保存局部变量等数据\",{\"1\":{\"216\":1}}],[\"保证服务端能够收到\",{\"1\":{\"716\":1}}],[\"保证该属性数据唯一性\",{\"1\":{\"172\":1}}],[\"保证了事务的持久性\",{\"1\":{\"164\":1}}],[\"保证事务的持久性\",{\"1\":{\"164\":1}}],[\"外联样式\",{\"1\":{\"638\":1}}],[\"外轮廓线\",{\"1\":{\"633\":1}}],[\"外\",{\"1\":{\"363\":1}}],[\"外界无法访问\",{\"1\":{\"218\":1,\"222\":1}}],[\"外层函数\",{\"1\":{\"215\":1}}],[\"外部通过\",{\"1\":{\"184\":1}}],[\"外部样⼦不能改变\",{\"1\":{\"12\":1}}],[\"角度\",{\"1\":{\"214\":1,\"215\":1}}],[\"角度来说\",{\"1\":{\"32\":1}}],[\"狭义\",{\"0\":{\"215\":1},\"1\":{\"213\":1,\"215\":1,\"225\":1}}],[\"高度\",{\"1\":{\"655\":1}}],[\"高度的一半\",{\"1\":{\"615\":1}}],[\"高\",{\"1\":{\"598\":1,\"678\":1,\"687\":1}}],[\"高尔夫球\",{\"1\":{\"521\":1}}],[\"高于\",{\"0\":{\"369\":1}}],[\"高级语法\",{\"1\":{\"267\":1}}],[\"高级程序设计\",{\"1\":{\"209\":1}}],[\"高阶函数\",{\"1\":{\"212\":1,\"360\":1}}],[\"高阶函数与嵌套调用\",{\"0\":{\"212\":1}}],[\"直至渲染完成\",{\"1\":{\"580\":1}}],[\"直至\",{\"1\":{\"353\":1}}],[\"直到找到\",{\"1\":{\"353\":1}}],[\"直到传递所有参数为止\",{\"1\":{\"289\":1}}],[\"直到查到最近的一个\",{\"1\":{\"211\":1}}],[\"直接从浏览器本地缓存中获取资源\",{\"1\":{\"686\":1}}],[\"直接读取客户端本地缓存\",{\"1\":{\"686\":1}}],[\"直接构建\",{\"1\":{\"582\":1}}],[\"直接在一个\",{\"1\":{\"487\":1}}],[\"直接在栈空间进行分配\",{\"1\":{\"276\":1}}],[\"直接注册组件\",{\"1\":{\"484\":1}}],[\"直接调用\",{\"1\":{\"373\":1}}],[\"直接执行下一个任务\",{\"1\":{\"331\":1}}],[\"直接给参数写上默认值\",{\"1\":{\"240\":1}}],[\"直接返回\",{\"1\":{\"234\":2}}],[\"直接返回一个值\",{\"1\":{\"202\":1}}],[\"直接赋值整个\",{\"1\":{\"191\":1}}],[\"直接将表都删除掉\",{\"1\":{\"168\":1}}],[\"词法分析会将代码转换成\",{\"1\":{\"264\":1}}],[\"词法分析\",{\"1\":{\"264\":1}}],[\"词法作用域\",{\"0\":{\"211\":1}}],[\"词法环境\",{\"1\":{\"209\":1}}],[\"局部声明一个组件\",{\"1\":{\"538\":1}}],[\"局部组件写法\",{\"1\":{\"485\":1}}],[\"局部变量被别的作用域引用\",{\"1\":{\"210\":1}}],[\"局部变量必须定义成\",{\"1\":{\"13\":1}}],[\"局部\",{\"1\":{\"210\":1}}],[\"码\",{\"1\":{\"209\":1}}],[\"通俗的讲\",{\"1\":{\"654\":1}}],[\"通用兄弟\",{\"1\":{\"639\":1}}],[\"通配符\",{\"1\":{\"639\":1,\"640\":1}}],[\"通配符选择器\",{\"1\":{\"623\":1}}],[\"通常只是暂时的\",{\"1\":{\"694\":1}}],[\"通常\",{\"1\":{\"694\":1}}],[\"通常用来实现背景图片响应式\",{\"1\":{\"627\":1}}],[\"通常情况下\",{\"1\":{\"409\":1}}],[\"通常情况下可以不写返回值的类型\",{\"1\":{\"408\":1}}],[\"通常是在嵌套函数中实现的\",{\"1\":{\"209\":1}}],[\"通过向服务端不停发送\",{\"1\":{\"710\":1}}],[\"通过公钥加密发送\",{\"1\":{\"698\":1}}],[\"通过vscode插件easy\",{\"1\":{\"650\":1}}],[\"通过vue\",{\"1\":{\"505\":1}}],[\"通过webpack编译\",{\"1\":{\"650\":1}}],[\"通过改变页面的url\",{\"1\":{\"582\":1}}],[\"通过dispatch分发到action\",{\"1\":{\"555\":1}}],[\"通过mutation更新\",{\"1\":{\"551\":1}}],[\"通过让\",{\"1\":{\"549\":1}}],[\"通过返回函数来实现getter传参\",{\"1\":{\"549\":1}}],[\"通过提交mutation的方式\",{\"1\":{\"546\":1}}],[\"通过索引值修改数组中的元素不是响应式的如\",{\"1\":{\"525\":1}}],[\"通过使用保留的\",{\"1\":{\"489\":1}}],[\"通过this\",{\"1\":{\"488\":1}}],[\"通过$children访问子组件时\",{\"1\":{\"488\":1}}],[\"通过interface来定义索引类型\",{\"1\":{\"449\":1}}],[\"通过类型\",{\"1\":{\"448\":1}}],[\"通过方法来访问name\",{\"1\":{\"393\":1}}],[\"通过原型链实现继承\",{\"1\":{\"353\":1}}],[\"通过函数\",{\"1\":{\"319\":1}}],[\"通过事件循环解决了单线程会阻塞的问题\",{\"1\":{\"248\":1}}],[\"通过同步语法的方式解决回调函数不直观的问题\",{\"1\":{\"201\":1,\"334\":1}}],[\"通过链式调用解决回调地狱的问题\",{\"1\":{\"201\":1}}],[\"通过字面量定义的对象\",{\"1\":{\"183\":1}}],[\"通过字面量定义对象\",{\"1\":{\"181\":2}}],[\"通过创建唯一性索引\",{\"1\":{\"175\":1}}],[\"通过简单的链式编程\",{\"1\":{\"92\":1}}],[\"通过equal比较后不同时\",{\"1\":{\"50\":1,\"69\":1}}],[\"通过equal判定hash值和key值是否相同\",{\"1\":{\"49\":1,\"68\":1}}],[\"通过equals\",{\"1\":{\"10\":1}}],[\"通过\",{\"1\":{\"32\":1,\"49\":1,\"68\":1,\"115\":1,\"118\":1,\"263\":1,\"285\":1,\"302\":1,\"306\":1,\"334\":2,\"353\":1,\"521\":2,\"583\":1,\"704\":1}}],[\"通过proxy\",{\"1\":{\"32\":1}}],[\"版\",{\"1\":{\"209\":2}}],[\"闭包经典使用场景和含闭包必刷题\",{\"1\":{\"226\":1}}],[\"闭包中的变量也无法销毁\",{\"1\":{\"224\":1}}],[\"闭包中被隐藏的数据\",{\"1\":{\"218\":1,\"222\":1}}],[\"闭包与立即执行函数实现模块\",{\"1\":{\"221\":1}}],[\"闭包最大的作用是可以在其他的执行上下文中\",{\"1\":{\"220\":1}}],[\"闭包最大的作用是可以在内层函数中访问到其外层函数的作用域\",{\"1\":{\"213\":1,\"225\":1}}],[\"闭包的缺点\",{\"0\":{\"224\":1}}],[\"闭包的应用\",{\"0\":{\"220\":1}}],[\"闭包的特性\",{\"0\":{\"219\":1}}],[\"闭包创建场景\",{\"0\":{\"218\":1}}],[\"闭包创建过程\",{\"0\":{\"217\":1}}],[\"闭包不会销毁\",{\"1\":{\"217\":1}}],[\"闭包会被内层函数的作用域链引用\",{\"1\":{\"213\":1,\"225\":1}}],[\"闭包是什么\",{\"1\":{\"226\":1}}],[\"闭包是一种可以让函数内部访问到外部自由变量的技术或语法特性\",{\"1\":{\"216\":1}}],[\"闭包是有访问外层函数作用域中的自由变量的函数与这个自由变量组成的词法环境\",{\"1\":{\"213\":1}}],[\"闭包是能够访问外层作用域中的自由变量的函数与这个自由变量组成的词法环境\",{\"1\":{\"213\":1,\"225\":1}}],[\"闭包是能够访问外层函数作用域中的自由变量的函数与这个自由变量组成的词法环境\",{\"1\":{\"225\":1}}],[\"闭包是能够访问外层函数作用域中的自由变量的函数\",{\"1\":{\"213\":1,\"225\":1}}],[\"闭包是指那些能够访问自由变量的函数\",{\"1\":{\"209\":1}}],[\"闭包真正值得关注的时候\",{\"1\":{\"209\":1}}],[\"闭包指的是那些引用了另一个函数作用域中变量的函数\",{\"1\":{\"209\":1}}],[\"闭包就会在函数创建的同时被创建出来\",{\"1\":{\"209\":1}}],[\"闭包让你可以在一个内层函数中访问到其外层函数的作用域\",{\"1\":{\"209\":1}}],[\"闭包\",{\"0\":{\"207\":1},\"1\":{\"212\":1,\"215\":1,\"217\":1,\"218\":8,\"221\":1,\"226\":1}}],[\"$store\",{\"1\":{\"546\":5,\"551\":1,\"552\":2,\"553\":2,\"555\":2,\"556\":2}}],[\"$event\",{\"1\":{\"521\":1}}],[\"$emit\",{\"1\":{\"487\":2}}],[\"$props\",{\"1\":{\"521\":2}}],[\"$parent\",{\"1\":{\"488\":2}}],[\"$parent$root\",{\"1\":{\"488\":1}}],[\"$root\",{\"1\":{\"488\":2}}],[\"$route是处于活跃状态的路由对象\",{\"1\":{\"510\":1}}],[\"$route\",{\"1\":{\"474\":2,\"475\":2,\"480\":2,\"508\":2,\"510\":1}}],[\"$router是\",{\"1\":{\"510\":1}}],[\"$router\",{\"1\":{\"473\":1,\"474\":1,\"475\":1,\"480\":1,\"505\":1,\"509\":1,\"510\":2}}],[\"$refs\",{\"1\":{\"488\":2}}],[\"$refs和ref指令通常是一起使用的\",{\"1\":{\"488\":1}}],[\"$children\",{\"1\":{\"488\":1}}],[\"$children的缺陷\",{\"1\":{\"488\":1}}],[\"$children$refs\",{\"1\":{\"488\":1}}],[\"$\",{\"1\":{\"206\":1,\"239\":4,\"243\":13,\"291\":4,\"348\":1,\"352\":2,\"463\":3,\"632\":1}}],[\"`<button\",{\"1\":{\"538\":2}}],[\"`<div>\",{\"1\":{\"239\":1,\"484\":1}}],[\"``$refs的使用\",{\"1\":{\"488\":1}}],[\"`name\",{\"1\":{\"463\":1}}],[\"`i\",{\"1\":{\"352\":1}}],[\"`$\",{\"1\":{\"352\":1,\"706\":1}}],[\"`export`不仅可以导出对象\",{\"1\":{\"244\":1}}],[\"`mock\",{\"1\":{\"243\":6}}],[\"`\",{\"1\":{\"239\":1,\"291\":2,\"352\":1,\"463\":1,\"484\":5,\"706\":1}}],[\"`我是$\",{\"1\":{\"239\":1}}],[\"`加载地址为\",{\"1\":{\"206\":1,\"348\":1}}],[\"`可以`修改现有属性\",{\"1\":{\"187\":1}}],[\"加密原理和证书\",{\"1\":{\"701\":1}}],[\"加密展示\",{\"1\":{\"102\":1,\"105\":1,\"134\":1,\"148\":1}}],[\"加粗等\",{\"1\":{\"672\":1}}],[\"加跟item宽度相等的空标签填充\",{\"1\":{\"633\":1}}],[\"加速\",{\"1\":{\"631\":1}}],[\"加载自定义字体\",{\"1\":{\"622\":1}}],[\"加载完成才能渲染页面2\",{\"1\":{\"583\":1}}],[\"加载过程\",{\"1\":{\"580\":1}}],[\"加载图片\",{\"0\":{\"206\":1,\"348\":1}}],[\"加上\",{\"1\":{\"530\":1}}],[\"加入\",{\"1\":{\"224\":1}}],[\"里面包含了用户的认证信息和登录状态等信息\",{\"1\":{\"678\":1}}],[\"里面包含date\",{\"1\":{\"270\":1}}],[\"里面有报错则返回\",{\"1\":{\"334\":2}}],[\"里\",{\"1\":{\"205\":1,\"234\":1,\"252\":1,\"580\":1,\"700\":1}}],[\"例题\",{\"0\":{\"256\":1}}],[\"例题三\",{\"0\":{\"253\":1}}],[\"例题二\",{\"0\":{\"252\":1}}],[\"例题一\",{\"0\":{\"251\":1}}],[\"例二\",{\"1\":{\"205\":1}}],[\"例一\",{\"1\":{\"205\":1}}],[\"例如转账业务中\",{\"1\":{\"163\":1}}],[\"例如\",{\"1\":{\"38\":1,\"586\":1,\"693\":1}}],[\"例如关闭文件等\",{\"1\":{\"13\":1}}],[\"紧跟着\",{\"1\":{\"205\":1,\"252\":1}}],[\"练习\",{\"0\":{\"349\":1},\"1\":{\"202\":1}}],[\"处理轮询队列的事件\",{\"1\":{\"254\":1}}],[\"处理\",{\"1\":{\"202\":2}}],[\"处理过后得到\",{\"1\":{\"49\":1,\"68\":1}}],[\"封装方法\",{\"1\":{\"528\":1}}],[\"封装数据\",{\"1\":{\"528\":1}}],[\"封装tabbar组件\",{\"0\":{\"471\":1}}],[\"封装一个核心函数\",{\"1\":{\"405\":1}}],[\"封装一个自动执行的生成器\",{\"1\":{\"307\":1}}],[\"封装了两个方法\",{\"1\":{\"393\":1}}],[\"封装\",{\"1\":{\"202\":1}}],[\"成功则进入\",{\"1\":{\"349\":1}}],[\"成功进入\",{\"1\":{\"349\":2}}],[\"成功态\",{\"1\":{\"334\":1}}],[\"成功结果\",{\"1\":{\"332\":3}}],[\"成功状态\",{\"1\":{\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"334\":1}}],[\"成功以后干什么\",{\"1\":{\"243\":1}}],[\"成功以后做什么\",{\"1\":{\"243\":1}}],[\"成功\",{\"1\":{\"202\":5,\"312\":2,\"313\":2,\"316\":2,\"317\":4,\"318\":4,\"321\":2,\"322\":4,\"323\":2,\"328\":1,\"332\":1,\"334\":1,\"694\":2}}],[\"成员变量都是静态常量\",{\"1\":{\"8\":1}}],[\"成员变量类型默认是public\",{\"1\":{\"8\":1}}],[\"成员可以是private\",{\"1\":{\"8\":1}}],[\"得到预主密钥\",{\"1\":{\"698\":1}}],[\"得到箭头函数无法通过\",{\"1\":{\"376\":1,\"377\":1,\"378\":1}}],[\"得到普通函数\",{\"1\":{\"376\":2,\"377\":2,\"378\":2}}],[\"得到结果\",{\"1\":{\"331\":1}}],[\"得到该值\",{\"1\":{\"202\":1}}],[\"得到属性组成的数组\",{\"1\":{\"181\":1}}],[\"捕获异常和拒绝状态\",{\"1\":{\"337\":1}}],[\"捕获错误\",{\"1\":{\"305\":2}}],[\"捕获\",{\"1\":{\"205\":1,\"322\":2,\"343\":1,\"344\":1}}],[\"捕获成功状态对象的结果\",{\"1\":{\"202\":2}}],[\"捕获成功状态\",{\"1\":{\"202\":1}}],[\"捕获到的异常\",{\"1\":{\"35\":1}}],[\"系统进程不再用到的内存\",{\"1\":{\"224\":1}}],[\"系统不知道是哪个用户操作的\",{\"1\":{\"25\":1}}],[\"系列之箭头函数\",{\"1\":{\"200\":1}}],[\"改写\",{\"1\":{\"205\":1}}],[\"改变角色的方向向下\",{\"1\":{\"456\":1,\"457\":1}}],[\"改变角色的方向向上\",{\"1\":{\"456\":1,\"457\":1}}],[\"改变角色的方向向右\",{\"1\":{\"456\":1,\"457\":1}}],[\"改变角色的方向向左\",{\"1\":{\"456\":1,\"457\":1}}],[\"改变上下文\",{\"1\":{\"381\":1}}],[\"改变\",{\"1\":{\"197\":1,\"349\":1}}],[\"改为不可写\",{\"1\":{\"183\":1}}],[\"全部\",{\"1\":{\"329\":1}}],[\"全局声明注册一个组件\",{\"1\":{\"538\":1}}],[\"全局导航守卫\",{\"0\":{\"513\":1}}],[\"全局组件写法\",{\"1\":{\"485\":1}}],[\"全局组件\",{\"1\":{\"484\":1}}],[\"全局函数赋值给对象的方法\",{\"1\":{\"360\":1}}],[\"全局函数\",{\"1\":{\"360\":1}}],[\"全局代码需要被执行时才会创建\",{\"1\":{\"271\":1}}],[\"全局代码执行过程2\",{\"1\":{\"271\":1}}],[\"全局代码执行过程\",{\"0\":{\"269\":1}}],[\"全局执行上下文\",{\"1\":{\"271\":1,\"277\":1}}],[\"全局变量\",{\"1\":{\"210\":2}}],[\"全局\",{\"1\":{\"195\":1,\"212\":1,\"218\":2,\"277\":1,\"376\":1,\"377\":1,\"378\":1}}],[\"全文索引\",{\"1\":{\"172\":1}}],[\"传输控制协议\",{\"1\":{\"710\":1}}],[\"传递一个对象参数的payload\",{\"1\":{\"555\":1}}],[\"传递对象参数\",{\"1\":{\"552\":1}}],[\"传递普通参数\",{\"1\":{\"552\":1}}],[\"传递的额外参数也称为mutation的载荷\",{\"1\":{\"552\":1}}],[\"传递参数\",{\"1\":{\"508\":1}}],[\"传参\",{\"1\":{\"549\":1}}],[\"传路径\",{\"1\":{\"473\":1,\"474\":1,\"475\":1,\"480\":1}}],[\"传回异步结果\",{\"1\":{\"332\":1}}],[\"传一个参数\",{\"1\":{\"240\":1}}],[\"传值赋值\",{\"1\":{\"227\":1}}],[\"传入0\",{\"1\":{\"525\":1}}],[\"传入error\",{\"1\":{\"513\":1}}],[\"传入含有\",{\"1\":{\"341\":1}}],[\"传入值或普通对象\",{\"1\":{\"341\":1}}],[\"传入立即执行\",{\"1\":{\"312\":1}}],[\"传入\",{\"1\":{\"309\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":1,\"319\":1,\"341\":1,\"372\":1,\"385\":3}}],[\"传入的字符串可能在执行过程中被恶意篡改\",{\"1\":{\"382\":1}}],[\"传入的是正确的\",{\"1\":{\"332\":1}}],[\"传入的函数同步执行\",{\"1\":{\"252\":1}}],[\"传入的值\",{\"1\":{\"218\":1}}],[\"传入成功解析\",{\"1\":{\"243\":1}}],[\"传入普通函数\",{\"1\":{\"195\":1}}],[\"传统防止空指针异常方法\",{\"1\":{\"93\":1}}],[\"传统foreach\",{\"1\":{\"85\":1}}],[\"普通的\",{\"1\":{\"582\":1}}],[\"普通方式\",{\"1\":{\"553\":1}}],[\"普通\",{\"1\":{\"351\":2}}],[\"普通对象\",{\"1\":{\"348\":1}}],[\"普通值或普通对象\",{\"1\":{\"323\":1}}],[\"普通值\",{\"1\":{\"202\":1}}],[\"普通函数返回的箭头函数被\",{\"1\":{\"377\":1}}],[\"普通函数返回的箭头函数被字面量对象\",{\"1\":{\"376\":1}}],[\"普通函数形式的柯里化\",{\"1\":{\"223\":1}}],[\"普通函数如果通过new调用\",{\"1\":{\"198\":1}}],[\"普通函数\",{\"1\":{\"196\":1,\"351\":2,\"376\":1}}],[\"普通函数的函数参数支持重命名\",{\"1\":{\"199\":1}}],[\"普通函数的\",{\"1\":{\"195\":1}}],[\"普通索引等\",{\"1\":{\"174\":1}}],[\"普通索引\",{\"1\":{\"172\":1,\"173\":1}}],[\"又送达到服务端\",{\"1\":{\"713\":1}}],[\"又称跨域资源共享\",{\"1\":{\"707\":1}}],[\"又称标准流\",{\"1\":{\"586\":1}}],[\"又称\",{\"1\":{\"264\":1}}],[\"又称引用传址\",{\"1\":{\"227\":1,\"228\":1}}],[\"又称静态作用域\",{\"1\":{\"211\":1}}],[\"又因为词法作用域\",{\"1\":{\"211\":1}}],[\"又通过\",{\"1\":{\"195\":1,\"364\":1}}],[\"又从\",{\"1\":{\"168\":1}}],[\"调用getter本身\",{\"1\":{\"549\":1}}],[\"调用该方法后\",{\"1\":{\"513\":1}}],[\"调用vue\",{\"1\":{\"484\":2}}],[\"调用方式二\",{\"1\":{\"440\":1}}],[\"调用方式一\",{\"1\":{\"440\":1}}],[\"调用了这个地址上的函数\",{\"1\":{\"361\":1}}],[\"调用父类构造函数\",{\"1\":{\"285\":1}}],[\"调用者都是全局对象\",{\"1\":{\"360\":1}}],[\"调用者\",{\"1\":{\"195\":1,\"364\":1}}],[\"调用\",{\"0\":{\"198\":1},\"1\":{\"195\":2,\"198\":1,\"242\":1,\"360\":1,\"364\":2,\"377\":1}}],[\"声明方法来做更复杂的操作\",{\"1\":{\"528\":1}}],[\"声明对象类型\",{\"0\":{\"448\":1}}],[\"声明对象简写\",{\"1\":{\"241\":3}}],[\"声明的变量有严格局部作用域\",{\"1\":{\"238\":1}}],[\"声明的变量往往会越域\",{\"1\":{\"238\":1}}],[\"声明一个匿名函数\",{\"1\":{\"218\":1}}],[\"声明全局变量\",{\"1\":{\"195\":1,\"364\":1}}],[\"声明构造函数\",{\"1\":{\"11\":1}}],[\"它会固定在目标位置\",{\"1\":{\"629\":1}}],[\"它们将形成一个外边距\",{\"1\":{\"591\":1}}],[\"它是有缓存的\",{\"1\":{\"522\":1}}],[\"它是在运行的时候先编译再执行\",{\"1\":{\"262\":1}}],[\"它自身不会渲染一个\",{\"1\":{\"489\":1}}],[\"它其实类似于是这个参数是\",{\"1\":{\"413\":1}}],[\"它只接受一部分参数\",{\"1\":{\"289\":1}}],[\"它比机器码更抽象\",{\"1\":{\"266\":1}}],[\"它的表现就像\",{\"1\":{\"629\":1}}],[\"它的行为就像\",{\"1\":{\"629\":1}}],[\"它的作用是将不必要的函数进行预解析\",{\"1\":{\"264\":1}}],[\"它的上层作用域即箭头函数定义所在的作用域\",{\"1\":{\"195\":1,\"364\":1}}],[\"它用于\",{\"1\":{\"262\":1}}],[\"它对数据库中数据的改变是持久的\",{\"1\":{\"163\":1}}],[\"最大报文寿命\",{\"1\":{\"716\":1}}],[\"最大缓存时间\",{\"1\":{\"687\":1}}],[\"最大缩放比例\",{\"1\":{\"663\":1}}],[\"最早由\",{\"1\":{\"663\":1}}],[\"最小缩放比例\",{\"1\":{\"663\":1}}],[\"最小值\",{\"1\":{\"655\":1}}],[\"最高优先级\",{\"1\":{\"640\":1}}],[\"最新\",{\"1\":{\"629\":1}}],[\"最好存放的数据类型是固定的\",{\"1\":{\"464\":1}}],[\"最好不要使用any\",{\"1\":{\"403\":1}}],[\"最通俗易懂的版本\",{\"1\":{\"329\":1}}],[\"最后修改时间\",{\"1\":{\"690\":1}}],[\"最后运行\",{\"1\":{\"320\":1}}],[\"最后返回\",{\"1\":{\"309\":1,\"319\":1}}],[\"最后输出\",{\"1\":{\"218\":1}}],[\"最终导致双方状态不一致\",{\"1\":{\"713\":1}}],[\"最终版本\",{\"0\":{\"476\":1}}],[\"最终实现\",{\"0\":{\"309\":1}}],[\"最终这个闭包对象将作为这些内部子函数作用域链中的一员\",{\"1\":{\"217\":1}}],[\"最优方式\",{\"1\":{\"307\":1}}],[\"最简洁写法\",{\"1\":{\"306\":1}}],[\"最常见的情形就是一个函数返回了在它内部定义的嵌套函数\",{\"1\":{\"209\":1}}],[\"最近一层非箭头函数的\",{\"1\":{\"195\":1,\"364\":1}}],[\"最关键的是这个\",{\"1\":{\"14\":1}}],[\"给客户端\",{\"1\":{\"714\":1}}],[\"给父元素增加\",{\"1\":{\"630\":1}}],[\"给末尾添加一个看不见的块元素来清除浮动\",{\"1\":{\"594\":1}}],[\"给html标签的属性绑定\",{\"1\":{\"530\":1}}],[\"给数组中的元素排序\",{\"1\":{\"525\":1}}],[\"给路径起别名\",{\"1\":{\"478\":1}}],[\"给返回值加上类型注释\",{\"1\":{\"408\":1}}],[\"给参数加上类型注解\",{\"1\":{\"408\":1}}],[\"给\",{\"1\":{\"372\":1}}],[\"给新对象添加属性\",{\"1\":{\"192\":2,\"363\":2}}],[\"给行记录加\",{\"1\":{\"169\":1}}],[\"绑定元素\",{\"1\":{\"528\":1}}],[\"绑定一个全是\",{\"1\":{\"521\":1}}],[\"绑定一个\",{\"1\":{\"521\":1}}],[\"绑定后立即执行\",{\"1\":{\"379\":1}}],[\"绑定后执行返回\",{\"1\":{\"369\":1}}],[\"绑定优先级高于显式绑定\",{\"1\":{\"379\":1}}],[\"绑定的参数\",{\"1\":{\"379\":1}}],[\"绑定参数\",{\"1\":{\"379\":1}}],[\"绑定成全局对象\",{\"1\":{\"372\":1}}],[\"绑定高于\",{\"0\":{\"368\":1}}],[\"绑定高于隐式绑定\",{\"0\":{\"367\":1}}],[\"绑定\",{\"0\":{\"363\":1,\"368\":1},\"1\":{\"192\":2,\"362\":3,\"363\":2,\"376\":2,\"377\":2,\"378\":1,\"379\":2,\"521\":3}}],[\"难以管理\",{\"1\":{\"190\":1}}],[\"浪费内存\",{\"1\":{\"190\":1}}],[\"每次都向服务器请求最新的资源\",{\"1\":{\"687\":1}}],[\"每次请求都会携带\",{\"1\":{\"681\":1}}],[\"每次函数return的都是一个新的对象\",{\"1\":{\"486\":1}}],[\"每次调用函数时\",{\"1\":{\"289\":1}}],[\"每次拷贝当前对象前\",{\"1\":{\"234\":1}}],[\"每次循环过程中i\",{\"1\":{\"218\":1}}],[\"每次创建一个实例对象\",{\"1\":{\"190\":1}}],[\"每当\",{\"1\":{\"217\":1}}],[\"每当外部函数被调用时\",{\"1\":{\"212\":1}}],[\"每当创建一个函数\",{\"1\":{\"209\":1}}],[\"每个单词所有字符变为小写\",{\"1\":{\"621\":1}}],[\"每个单词所有字符变为大写\",{\"1\":{\"621\":1}}],[\"每个单词首字符变为大写\",{\"1\":{\"621\":1}}],[\"每个元素的左外边距\",{\"1\":{\"588\":1}}],[\"每个组件必须只有一个根元素\",{\"1\":{\"487\":1}}],[\"每个函数的处理逻辑单一\",{\"1\":{\"289\":1}}],[\"每个函数在预编译阶段都会生成一个空的闭包对象\",{\"1\":{\"213\":1,\"225\":1}}],[\"每个子类实例都含有父类函数副本\",{\"1\":{\"280\":1}}],[\"每个\",{\"1\":{\"52\":2,\"71\":2}}],[\"每个键最多映射到一个值\",{\"1\":{\"47\":1}}],[\"快捷键shift+\",{\"1\":{\"238\":1}}],[\"快速创建大量相似对象\",{\"1\":{\"189\":1}}],[\"快照读操作时生产的读视图\",{\"1\":{\"170\":1}}],[\"快照读\",{\"1\":{\"169\":1}}],[\"工程实践中的区别\",{\"1\":{\"700\":1}}],[\"工作原理\",{\"1\":{\"582\":1}}],[\"工厂函数\",{\"1\":{\"189\":1,\"283\":1}}],[\"工厂模式\",{\"0\":{\"189\":1}}],[\"工具类\",{\"1\":{\"58\":1}}],[\"详细区别\",{\"1\":{\"700\":1}}],[\"详细图解作用域链与闭包\",{\"1\":{\"226\":1}}],[\"详情\",{\"1\":{\"228\":1}}],[\"详情容器\",{\"1\":{\"119\":1}}],[\"详解箭头函数和普通函数的区别以及箭头函数的注意事项\",{\"1\":{\"200\":1}}],[\"详见mdn\",{\"1\":{\"235\":1}}],[\"详见\",{\"1\":{\"188\":1}}],[\"冻结\",{\"1\":{\"187\":1}}],[\"密码\",{\"1\":{\"628\":1}}],[\"密码加密的文章\",{\"0\":{\"110\":1}}],[\"密封\",{\"1\":{\"187\":1}}],[\"禁止\",{\"1\":{\"694\":1}}],[\"禁止使用缓存\",{\"1\":{\"687\":1}}],[\"禁止用户缩放\",{\"1\":{\"663\":1}}],[\"禁止冒泡\",{\"1\":{\"521\":1}}],[\"禁止意外创建全局变量\",{\"1\":{\"384\":1}}],[\"禁止添加属性\",{\"1\":{\"187\":2}}],[\"禁止对象添加属性\",{\"1\":{\"187\":1}}],[\"禁用\",{\"2\":{\"109\":1}}],[\"禁用了如下功能\",{\"1\":{\"107\":1}}],[\"禁用展示\",{\"1\":{\"102\":1,\"105\":1,\"134\":1,\"148\":1}}],[\"限制对象\",{\"0\":{\"187\":1}}],[\"ƒ\",{\"1\":{\"186\":4,\"189\":2,\"190\":2,\"191\":4,\"196\":2,\"217\":1,\"280\":2,\"281\":2,\"283\":1,\"284\":1,\"352\":4,\"360\":1,\"361\":4,\"362\":3,\"363\":4,\"376\":8,\"378\":2}}],[\"检查阶段\",{\"1\":{\"254\":1}}],[\"检测到\",{\"1\":{\"184\":4}}],[\"检索新的\",{\"1\":{\"254\":1}}],[\"检索就结束了\",{\"1\":{\"176\":1}}],[\"检索大文本数据中的关键字\",{\"1\":{\"172\":1}}],[\"拦截\",{\"1\":{\"184\":2}}],[\"开头的元素\",{\"1\":{\"623\":1}}],[\"开头表示私有属性\",{\"1\":{\"184\":1}}],[\"开源高性能\",{\"1\":{\"262\":1}}],[\"开发人员控制视口的大小和比例\",{\"1\":{\"663\":1}}],[\"开发\",{\"1\":{\"258\":2}}],[\"开发约定使用\",{\"1\":{\"184\":1}}],[\"开始绘制\",{\"1\":{\"660\":1}}],[\"开始网络请求\",{\"1\":{\"332\":2}}],[\"开始执行微任务\",{\"1\":{\"205\":1}}],[\"开始\",{\"1\":{\"168\":1}}],[\"开始烧水\",{\"1\":{\"39\":3}}],[\"失败则进入\",{\"1\":{\"349\":2}}],[\"失败状态\",{\"1\":{\"334\":1}}],[\"失败状态分别执行\",{\"1\":{\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1}}],[\"失败态\",{\"1\":{\"334\":1}}],[\"失败的话catch\",{\"1\":{\"243\":1}}],[\"失败拒绝\",{\"1\":{\"243\":1}}],[\"失败\",{\"1\":{\"183\":1,\"202\":1,\"312\":2,\"313\":1,\"314\":2,\"317\":1,\"318\":1,\"322\":2,\"334\":1}}],[\"测试效果\",{\"1\":{\"321\":1,\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"346\":1}}],[\"测试用例均通过\",{\"1\":{\"320\":1}}],[\"测试代码\",{\"1\":{\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":1}}],[\"测试\",{\"0\":{\"320\":1},\"1\":{\"183\":1,\"184\":2,\"234\":1}}],[\"均是可迭代对象\",{\"1\":{\"299\":1}}],[\"均为成功状态\",{\"1\":{\"202\":1}}],[\"均为\",{\"1\":{\"183\":1}}],[\"均不会被序列化\",{\"1\":{\"38\":1}}],[\"修复某某\",{\"1\":{\"291\":1}}],[\"修复某\",{\"1\":{\"291\":3}}],[\"修改一处可能导致多处修改\",{\"1\":{\"648\":1}}],[\"修改了输入\",{\"1\":{\"288\":1}}],[\"修改某个子类实例继承的的引用类型属性\",{\"1\":{\"279\":1,\"280\":1}}],[\"修改原对象\",{\"1\":{\"235\":1}}],[\"修改该变量的属性\",{\"1\":{\"228\":1}}],[\"修改该变量或常量的属性\",{\"1\":{\"228\":1}}],[\"修改私有属性\",{\"1\":{\"184\":1}}],[\"修改\",{\"1\":{\"183\":1,\"546\":1}}],[\"修改属性\",{\"1\":{\"182\":1}}],[\"修饰符绑定\",{\"1\":{\"521\":1}}],[\"修饰的变量\",{\"1\":{\"38\":1}}],[\"修饰\",{\"1\":{\"12\":1}}],[\"❌\",{\"1\":{\"182\":4,\"227\":5,\"691\":3}}],[\"✅\",{\"1\":{\"182\":8,\"227\":4,\"691\":3}}],[\"访问变成了通过移动端进行的\",{\"1\":{\"663\":1}}],[\"访问不到子组件的planguages数据\",{\"1\":{\"495\":1}}],[\"访问根组件$root\",{\"1\":{\"488\":1}}],[\"访问父组件$parent\",{\"1\":{\"488\":1}}],[\"访问其中的子组件必须通过索引值\",{\"1\":{\"488\":1}}],[\"访问其属性\",{\"1\":{\"179\":1}}],[\"访问器setter\",{\"1\":{\"396\":1}}],[\"访问该属性\",{\"1\":{\"299\":1}}],[\"访问到函数内部的变量\",{\"1\":{\"220\":1}}],[\"访问到属性\",{\"1\":{\"182\":1}}],[\"访问修饰符\",{\"1\":{\"12\":1}}],[\"访问修饰符范围\",{\"1\":{\"12\":1}}],[\"故可以对它们使用\",{\"1\":{\"179\":1}}],[\"除非用户手动清除\",{\"1\":{\"681\":1}}],[\"除非手动设置\",{\"1\":{\"23\":1}}],[\"除去浏览器导航栏等浏览器自带功能键的高度\",{\"1\":{\"655\":1}}],[\"除外\",{\"1\":{\"234\":1}}],[\"除了使用\",{\"1\":{\"351\":2}}],[\"除了\",{\"1\":{\"179\":1}}],[\"叶子节点的顺序检索很明显\",{\"1\":{\"176\":1}}],[\"任何匹配的组件都不会被缓存\",{\"1\":{\"516\":1}}],[\"任何查找都是从根节点到叶子节点的过程\",{\"1\":{\"176\":1}}],[\"任意一个失败\",{\"1\":{\"325\":1}}],[\"任务完成后\",{\"1\":{\"331\":1}}],[\"任务队列中有\",{\"1\":{\"218\":1}}],[\"任务列表\",{\"0\":{\"126\":1}}],[\"执行机制是先微后宏\",{\"1\":{\"318\":1}}],[\"执行失败回调\",{\"1\":{\"316\":1,\"336\":1}}],[\"执行成功回调\",{\"1\":{\"316\":1,\"321\":2,\"336\":1}}],[\"执行回调\",{\"1\":{\"309\":2,\"318\":2,\"319\":2}}],[\"执行第三段代码\",{\"1\":{\"302\":1}}],[\"执行第二段代码\",{\"1\":{\"302\":1}}],[\"执行第一段代码\",{\"1\":{\"302\":1}}],[\"执行生成器对象的\",{\"1\":{\"302\":1}}],[\"执行生成器函数会返回一个生成器对象\",{\"1\":{\"302\":2}}],[\"执行操作\",{\"1\":{\"287\":1}}],[\"执行函数代码\",{\"1\":{\"277\":1}}],[\"执行全局代码\",{\"1\":{\"277\":1}}],[\"执行上下文栈\",{\"0\":{\"271\":1}}],[\"执行流程概述\",{\"1\":{\"267\":1}}],[\"执行速度慢\",{\"1\":{\"262\":1}}],[\"执行速度快\",{\"1\":{\"262\":1}}],[\"执行它的回调函数\",{\"1\":{\"254\":1}}],[\"执行关闭事件的回调\",{\"1\":{\"254\":1}}],[\"执行系统操作的回调\",{\"1\":{\"254\":1}}],[\"执行延迟到下一个循环迭代的\",{\"1\":{\"254\":1}}],[\"执行宏1\",{\"1\":{\"253\":1}}],[\"执行宏任务\",{\"1\":{\"250\":1}}],[\"执行微任务\",{\"1\":{\"250\":1}}],[\"执行父函数得到的返回值作为同级函数的参数\",{\"1\":{\"218\":1}}],[\"执行父函数得到的返回值\",{\"1\":{\"218\":1}}],[\"执行子函数时\",{\"1\":{\"217\":1}}],[\"执行完毕\",{\"1\":{\"217\":1,\"322\":1}}],[\"执行完\",{\"1\":{\"205\":1}}],[\"执行顺序\",{\"0\":{\"205\":1,\"250\":1,\"255\":1}}],[\"执行\",{\"1\":{\"202\":1,\"252\":1,\"254\":3,\"267\":1}}],[\"执行构造函数内部的代码\",{\"1\":{\"192\":2,\"363\":2}}],[\"执行效率\",{\"1\":{\"175\":1}}],[\"执行事务前后\",{\"1\":{\"163\":1}}],[\"缺点在于精度只到秒级\",{\"1\":{\"690\":1}}],[\"缺点在于该日期依赖的是用户的系统时间\",{\"1\":{\"687\":1}}],[\"缺点3\",{\"1\":{\"279\":1}}],[\"缺点2\",{\"1\":{\"279\":1,\"282\":1}}],[\"缺点1\",{\"1\":{\"279\":1,\"282\":1}}],[\"缺点是无法发挥\",{\"1\":{\"248\":1,\"331\":1}}],[\"缺点\",{\"1\":{\"175\":1,\"189\":1,\"225\":1,\"279\":1,\"280\":2,\"281\":1,\"282\":1,\"283\":1,\"583\":1,\"633\":1,\"676\":1,\"677\":1,\"697\":2,\"706\":1}}],[\"插值表达式\",{\"1\":{\"529\":1}}],[\"插入元素\",{\"1\":{\"525\":2}}],[\"插入数据速度慢\",{\"1\":{\"173\":1}}],[\"插件\",{\"1\":{\"505\":1}}],[\"插件来实现\",{\"1\":{\"116\":1}}],[\"插槽默认带按钮\",{\"1\":{\"492\":1}}],[\"树与\",{\"1\":{\"580\":1}}],[\"树后\",{\"1\":{\"264\":1}}],[\"树的检索的过程相当于对范围内的每个节点的关键字做二分查找\",{\"1\":{\"176\":1}}],[\"树的叶子节点都是独立的\",{\"1\":{\"176\":1}}],[\"树的所有节点既存放键\",{\"1\":{\"176\":1}}],[\"树\",{\"1\":{\"173\":1,\"264\":1,\"580\":1,\"582\":1}}],[\"属于同一个bfc的两个相邻盒子的margin会发生重叠\",{\"1\":{\"588\":1}}],[\"属于对象\",{\"1\":{\"296\":1}}],[\"属于非聚集索引\",{\"1\":{\"173\":1}}],[\"属性可以请求外部的\",{\"1\":{\"706\":1}}],[\"属性选择器\",{\"1\":{\"623\":1}}],[\"属性上\",{\"1\":{\"521\":1}}],[\"属性本身不能进行修改\",{\"1\":{\"395\":1}}],[\"属性和方法的执行规则\",{\"0\":{\"353\":1}}],[\"属性的对象\",{\"1\":{\"298\":1}}],[\"属性\",{\"0\":{\"666\":1,\"667\":1,\"668\":1},\"1\":{\"241\":1,\"355\":1,\"632\":1,\"639\":1,\"640\":1,\"659\":1,\"665\":1,\"669\":1,\"671\":1,\"672\":1,\"673\":1}}],[\"属性不可枚举\",{\"1\":{\"355\":1}}],[\"属性不可改\",{\"1\":{\"228\":1}}],[\"属性不可再分\",{\"1\":{\"167\":1}}],[\"属性就是需要记忆的信息\",{\"1\":{\"228\":1}}],[\"属性值\",{\"1\":{\"182\":1}}],[\"属性描述符分为两种\",{\"1\":{\"182\":1}}],[\"属性描述符\",{\"1\":{\"182\":1}}],[\"属性名\",{\"1\":{\"181\":1}}],[\"索引类型\",{\"0\":{\"449\":1}}],[\"索引需要使用物理文件存储\",{\"1\":{\"175\":1}}],[\"索引的优缺点\",{\"0\":{\"175\":1}}],[\"索引放一块\",{\"1\":{\"173\":1}}],[\"索引结构和数据一起存放的索引\",{\"1\":{\"173\":1}}],[\"索引列的值必须唯一\",{\"1\":{\"172\":1}}],[\"聚集索引查询数据速度快\",{\"1\":{\"173\":1}}],[\"聚集索引存储记录是物理上连续存在\",{\"1\":{\"173\":1}}],[\"聚集索引一个表只能有一个\",{\"1\":{\"173\":1}}],[\"聚集索引的叶子节点存放是一整行数据\",{\"1\":{\"173\":1}}],[\"聚集索引\",{\"1\":{\"173\":1}}],[\"聚集索引和非聚集索引区别\",{\"0\":{\"173\":1}}],[\"前身是\",{\"1\":{\"697\":1}}],[\"前进后退等\",{\"1\":{\"691\":1}}],[\"前后端耦合2\",{\"1\":{\"583\":1}}],[\"前后端分离2\",{\"1\":{\"583\":1}}],[\"前置守卫\",{\"1\":{\"513\":1}}],[\"前言\",{\"0\":{\"208\":1}}],[\"前缀索引等\",{\"1\":{\"173\":1}}],[\"前缀索引\",{\"1\":{\"172\":1}}],[\"前端利用\",{\"1\":{\"706\":1}}],[\"前端进阶\",{\"1\":{\"294\":1}}],[\"前端基础进阶\",{\"1\":{\"226\":1}}],[\"前端\",{\"0\":{\"147\":1},\"1\":{\"706\":1},\"2\":{\"245\":1,\"387\":1}}],[\"唯一作用就是为了快速查询数据\",{\"1\":{\"172\":1}}],[\"唯一索引\",{\"1\":{\"172\":1,\"173\":1,\"174\":1}}],[\"记录上一个版本数据记录的回滚指针\",{\"1\":{\"170\":1}}],[\"记录事务id\",{\"1\":{\"170\":1}}],[\"记住一点long的范围是小于float的\",{\"1\":{\"5\":1}}],[\"隐式调用\",{\"1\":{\"361\":1,\"375\":2}}],[\"隐式地被对象调用\",{\"1\":{\"361\":1}}],[\"隐式绑定调用\",{\"1\":{\"376\":1}}],[\"隐式绑定\",{\"0\":{\"361\":1},\"1\":{\"376\":1,\"377\":1,\"436\":1}}],[\"隐式原型\",{\"1\":{\"351\":1}}],[\"隐式转换\",{\"1\":{\"5\":1}}],[\"隐式转换问题\",{\"0\":{\"5\":1}}],[\"隐藏外轮廓线\",{\"1\":{\"633\":1}}],[\"隐藏元素\",{\"1\":{\"624\":3}}],[\"隐藏数据\",{\"1\":{\"222\":1}}],[\"隐藏私有属性\",{\"1\":{\"184\":1}}],[\"隐藏字段\",{\"1\":{\"170\":1}}],[\"隐含的自增id\",{\"1\":{\"170\":1}}],[\"参考资料\",{\"0\":{\"200\":1,\"226\":1,\"236\":1,\"267\":1,\"286\":1,\"294\":1,\"329\":1,\"595\":1,\"619\":1,\"647\":1,\"683\":1,\"692\":1,\"701\":1,\"709\":1,\"717\":1},\"1\":{\"583\":1}}],[\"参考\",{\"1\":{\"169\":1,\"172\":1}}],[\"参数\",{\"1\":{\"704\":1}}],[\"参数传递\",{\"0\":{\"509\":1}}],[\"参数的默认值\",{\"0\":{\"433\":1}}],[\"参数为参数列表伪数组\",{\"1\":{\"362\":1}}],[\"参数为一个个值\",{\"1\":{\"362\":1}}],[\"参数不受影响\",{\"0\":{\"343\":1}}],[\"参数校验\",{\"1\":{\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"326\":1,\"327\":1,\"328\":1}}],[\"参数复用例子\",{\"1\":{\"291\":1}}],[\"参数复用\",{\"1\":{\"291\":1}}],[\"参数列表\",{\"1\":{\"12\":1}}],[\"参数列表必须相同\",{\"1\":{\"12\":1}}],[\"参数类型不同\",{\"1\":{\"12\":1}}],[\"且这个最终状态始终为成功状态\",{\"1\":{\"326\":1,\"345\":1}}],[\"且可枚举\",{\"1\":{\"280\":1,\"281\":1}}],[\"且不得操作\",{\"1\":{\"248\":1}}],[\"且子函数引用父函数的变量\",{\"1\":{\"218\":3}}],[\"且会使用栈内存\",{\"1\":{\"216\":1}}],[\"且其它事务不能加任何锁\",{\"1\":{\"169\":1}}],[\"且lambda体中有多条语句\",{\"1\":{\"78\":1}}],[\"共有的方法都在全局作用可以域\",{\"1\":{\"190\":1}}],[\"共享锁\",{\"1\":{\"169\":1}}],[\"共同点\",{\"1\":{\"4\":1}}],[\"排列越靠前\",{\"1\":{\"646\":1}}],[\"排除的属性为组件中定义的name\",{\"1\":{\"516\":1}}],[\"排它锁\",{\"1\":{\"169\":1}}],[\"排序并打印\",{\"1\":{\"91\":1}}],[\"排序\",{\"1\":{\"90\":1}}],[\"排序以及线程安全化\",{\"1\":{\"58\":1}}],[\"子域名不同\",{\"1\":{\"704\":1}}],[\"子代\",{\"1\":{\"632\":1}}],[\"子元素在父级元素里面水平垂直居中\",{\"1\":{\"629\":1}}],[\"子元素\",{\"1\":{\"629\":2}}],[\"子元素设置为绝对定位后\",{\"1\":{\"629\":1}}],[\"子元素设置浮动\",{\"1\":{\"592\":1}}],[\"子绝父相\",{\"1\":{\"629\":1}}],[\"子访问父\",{\"1\":{\"488\":1}}],[\"子组件\",{\"1\":{\"487\":1}}],[\"子组件模板的所有东西都会在子级作用域内编译\",{\"1\":{\"494\":1}}],[\"子组件模板\",{\"1\":{\"487\":1}}],[\"子组件不能直接访问父组件\",{\"1\":{\"486\":1}}],[\"子传父\",{\"1\":{\"487\":1}}],[\"子函数\",{\"1\":{\"212\":2}}],[\"子句和truncate\",{\"1\":{\"168\":1}}],[\"子类可以向父类构造函数传参\",{\"1\":{\"280\":1}}],[\"子类实例的构造函数是它本身\",{\"1\":{\"284\":1,\"285\":1}}],[\"子类实例可以继承父类构造函数\",{\"1\":{\"279\":1}}],[\"子类实例继承到父类构造函数\",{\"1\":{\"279\":1}}],[\"子类\",{\"1\":{\"12\":1,\"19\":1,\"352\":1,\"639\":1,\"640\":1}}],[\"删除线\",{\"1\":{\"621\":1}}],[\"删除元素\",{\"1\":{\"525\":2}}],[\"删除数组中的第一个元素\",{\"1\":{\"525\":1}}],[\"删除数组中的最后一个元素\",{\"1\":{\"525\":1}}],[\"删除数据\",{\"1\":{\"168\":1}}],[\"删除\",{\"1\":{\"182\":1}}],[\"删除某一列的数据\",{\"1\":{\"168\":1}}],[\"列合并选择器+\",{\"1\":{\"639\":1}}],[\"列名=值\",{\"1\":{\"168\":1}}],[\"列表中最小的数\",{\"1\":{\"91\":1}}],[\"列表中最大的数\",{\"1\":{\"91\":1}}],[\"丢弃数据\",{\"1\":{\"168\":1}}],[\"丢失更新\",{\"1\":{\"165\":1}}],[\"消除两边的空格\",{\"1\":{\"521\":1}}],[\"消除静默错误\",{\"1\":{\"384\":1}}],[\"消除了非主属性对于码的传递函数依赖\",{\"1\":{\"167\":1}}],[\"消除了非主属性对于码的部分函数依赖\",{\"1\":{\"167\":1}}],[\"消费型接口\",{\"1\":{\"87\":2}}],[\"性能更好\",{\"1\":{\"522\":1}}],[\"性能最低\",{\"1\":{\"166\":1}}],[\"性能会稍差\",{\"0\":{\"49\":1,\"68\":1}}],[\"级别最高\",{\"1\":{\"166\":1}}],[\"级别最低\",{\"1\":{\"166\":1}}],[\"串行化\",{\"1\":{\"166\":1}}],[\"读视图\",{\"1\":{\"170\":1}}],[\"读已提交和可重复读隔离级别下\",{\"0\":{\"171\":1}}],[\"读已提交\",{\"1\":{\"166\":1,\"171\":1}}],[\"读未提交\",{\"1\":{\"166\":1}}],[\"幻读\",{\"1\":{\"165\":2}}],[\"幻灯片\",{\"0\":{\"139\":1}}],[\"幻灯片页\",{\"0\":{\"1\":1}}],[\"脏读\",{\"1\":{\"165\":2}}],[\"锁则会被阻塞\",{\"1\":{\"169\":1}}],[\"锁\",{\"1\":{\"169\":2}}],[\"锁机制\",{\"1\":{\"164\":1}}],[\"锁住整张表\",{\"1\":{\"162\":1}}],[\"回应\",{\"1\":{\"714\":1}}],[\"回复\",{\"1\":{\"714\":1}}],[\"回流\",{\"0\":{\"586\":1},\"1\":{\"586\":1}}],[\"回流一定引起重绘\",{\"1\":{\"585\":1}}],[\"回流比重绘的性能代价高\",{\"1\":{\"585\":1}}],[\"回流与重绘\",{\"0\":{\"585\":1}}],[\"回到自定义的方法\",{\"1\":{\"528\":1}}],[\"回表\",{\"1\":{\"173\":1}}],[\"回滚日志\",{\"1\":{\"164\":1,\"170\":1}}],[\"回调地狱\",{\"1\":{\"243\":1}}],[\"回调函数时\",{\"1\":{\"334\":2}}],[\"回调函数成功结果\",{\"1\":{\"332\":2}}],[\"回调函数能传回异步结果\",{\"1\":{\"332\":1}}],[\"回调函数\",{\"1\":{\"218\":1,\"331\":1}}],[\"回调函数内部使用了外部立即执行函数作用域的形参\",{\"1\":{\"218\":1}}],[\"回调函数引用了自由变量\",{\"1\":{\"218\":1}}],[\"回调\",{\"1\":{\"39\":1,\"254\":1,\"255\":1,\"332\":1}}],[\"持久性\",{\"1\":{\"163\":1}}],[\"各权威资料对闭包的定义\",{\"0\":{\"209\":1}}],[\"各并发事务之间数据库是独立的\",{\"1\":{\"163\":1}}],[\"各元素用\",{\"1\":{\"91\":1}}],[\"隔离性之后\",{\"1\":{\"164\":1}}],[\"隔离性\",{\"1\":{\"163\":1}}],[\"原样显示\",{\"1\":{\"529\":1}}],[\"原来\",{\"1\":{\"511\":1}}],[\"原来想要函数默认值得这么写b\",{\"1\":{\"240\":1}}],[\"原生的javascript代码是一样\",{\"1\":{\"402\":1}}],[\"原生\",{\"1\":{\"317\":1,\"318\":1,\"322\":1}}],[\"原始类型\",{\"1\":{\"296\":1}}],[\"原数组字面量包含嵌套对象会被改变\",{\"1\":{\"231\":1}}],[\"原数组字面量第一层为基本类型不会被改变\",{\"1\":{\"231\":1}}],[\"原数组不会改变\",{\"1\":{\"231\":2}}],[\"原对象字面量包含嵌套对象会被改变\",{\"1\":{\"230\":1}}],[\"原对象字面量包含嵌套对象\",{\"1\":{\"229\":1}}],[\"原对象字面量包含子对象是否相互影响\",{\"1\":{\"227\":1}}],[\"原对象字面量第一层为基本类型不会被改变\",{\"1\":{\"230\":1}}],[\"原对象字面量第一层为基本类型\",{\"1\":{\"229\":1}}],[\"原对象字面量第一层为基本类型是否相互影响\",{\"1\":{\"227\":1}}],[\"原型常用\",{\"0\":{\"355\":1}}],[\"原型对象\",{\"1\":{\"354\":1}}],[\"原型的六个规则\",{\"0\":{\"351\":1}}],[\"原型与原型链\",{\"0\":{\"350\":1}}],[\"原型式继承的缺点与原型链继承是相同的\",{\"1\":{\"282\":1}}],[\"原型式继承\",{\"0\":{\"282\":1}}],[\"原型链上的\",{\"1\":{\"355\":1}}],[\"原型链上的属性和方法\",{\"1\":{\"279\":1}}],[\"原型链图解\",{\"1\":{\"352\":1}}],[\"原型链的属性和方法\",{\"1\":{\"279\":2}}],[\"原型链继承\",{\"0\":{\"279\":1}}],[\"原型\",{\"0\":{\"191\":1},\"1\":{\"194\":1,\"350\":1}}],[\"原型模式\",{\"0\":{\"191\":1}}],[\"原子性\",{\"1\":{\"163\":1,\"164\":1}}],[\"原因\",{\"1\":{\"11\":1,\"224\":1,\"357\":1,\"716\":1}}],[\"呢\",{\"0\":{\"163\":1}}],[\"特殊规则\",{\"0\":{\"370\":1},\"1\":{\"361\":1}}],[\"特性\",{\"0\":{\"163\":1},\"1\":{\"225\":1,\"489\":1}}],[\"特点\",{\"0\":{\"92\":1},\"1\":{\"75\":1}}],[\"何为\",{\"0\":{\"163\":1}}],[\"何时用\",{\"1\":{\"8\":1}}],[\"圆\",{\"2\":{\"159\":1,\"563\":1,\"568\":1}}],[\"蔬菜\",{\"2\":{\"158\":1}}],[\"番茄\",{\"0\":{\"155\":1}}],[\"小型大写字母\",{\"1\":{\"622\":1}}],[\"小div\",{\"1\":{\"532\":1}}],[\"小刚\",{\"1\":{\"301\":1,\"306\":1}}],[\"小王\",{\"1\":{\"301\":2,\"306\":1}}],[\"小红\",{\"1\":{\"301\":1,\"306\":1}}],[\"小明\",{\"1\":{\"301\":1,\"306\":1}}],[\"小\",{\"2\":{\"154\":1}}],[\"红\",{\"2\":{\"154\":1,\"159\":1,\"563\":1,\"568\":1}}],[\"红黑二叉树\",{\"1\":{\"53\":1,\"72\":1}}],[\"红黑树\",{\"1\":{\"44\":1,\"46\":1}}],[\"草莓\",{\"0\":{\"150\":1},\"2\":{\"153\":1}}],[\"此时成功建立连接\",{\"1\":{\"713\":1}}],[\"此时payload\",{\"1\":{\"553\":1}}],[\"此题通过构造函数创建实例对象\",{\"1\":{\"377\":1}}],[\"此题通过字面量定义字面量对象\",{\"1\":{\"376\":1}}],[\"此题作用域链\",{\"1\":{\"376\":1,\"377\":1,\"378\":1}}],[\"此版本不支持\",{\"1\":{\"234\":1}}],[\"此属性主要\",{\"1\":{\"198\":1}}],[\"此页面应当包含\",{\"1\":{\"146\":1}}],[\"此文字有脚注\",{\"1\":{\"124\":1}}],[\"徽章\",{\"1\":{\"145\":1}}],[\"徽章文字\",{\"1\":{\"145\":1}}],[\"标志位\",{\"1\":{\"711\":1}}],[\"标签的\",{\"1\":{\"706\":1}}],[\"标签不受浏览器同源策略的限制\",{\"1\":{\"706\":1}}],[\"标签中必须有type\",{\"1\":{\"674\":1}}],[\"标签中的\",{\"0\":{\"581\":1},\"1\":{\"674\":1}}],[\"标签自带\",{\"1\":{\"617\":1}}],[\"标签直到实例准备完毕\",{\"1\":{\"521\":1}}],[\"标签\",{\"0\":{\"617\":1,\"660\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"673\":1},\"1\":{\"521\":1,\"589\":1,\"639\":1,\"640\":1,\"657\":1,\"663\":1,\"706\":1}}],[\"标签为\",{\"1\":{\"144\":1}}],[\"标识符有其命名规则\",{\"1\":{\"228\":1}}],[\"标识符\",{\"1\":{\"228\":1}}],[\"标准\",{\"1\":{\"190\":1,\"248\":1,\"351\":1}}],[\"标题组\",{\"1\":{\"657\":1}}],[\"标题\",{\"0\":{\"151\":1,\"152\":1,\"156\":1,\"157\":1,\"560\":1,\"561\":1,\"565\":1,\"566\":1,\"570\":1,\"571\":1,\"575\":1,\"576\":1},\"1\":{\"657\":1}}],[\"标题和页面信息\",{\"1\":{\"146\":1}}],[\"标记语言\",{\"1\":{\"648\":1}}],[\"标记清除法\",{\"1\":{\"276\":2}}],[\"标记的热点代码后\",{\"1\":{\"266\":1}}],[\"标记热点代码\",{\"1\":{\"262\":1}}],[\"标记\",{\"0\":{\"125\":1}}],[\"日期对象\",{\"1\":{\"234\":1}}],[\"日期\",{\"1\":{\"179\":1,\"234\":1}}],[\"日\",{\"1\":{\"144\":1}}],[\"月\",{\"1\":{\"144\":1}}],[\"年以后\",{\"1\":{\"656\":1}}],[\"年\",{\"1\":{\"144\":1}}],[\"作为第二个参数\",{\"1\":{\"549\":1}}],[\"作为前面标识符的类型\",{\"1\":{\"460\":1}}],[\"作为类创建的实例对象方法被调用\",{\"1\":{\"363\":1}}],[\"作为字面量对象的方法\",{\"1\":{\"361\":1}}],[\"作为独立函数\",{\"1\":{\"360\":1}}],[\"作为这一段代码的\",{\"1\":{\"303\":1}}],[\"作为浏览器脚本语言\",{\"1\":{\"248\":1}}],[\"作为键名\",{\"1\":{\"234\":1}}],[\"作为键名的情况\",{\"1\":{\"234\":1}}],[\"作者设置为\",{\"1\":{\"144\":1}}],[\"作用\",{\"1\":{\"27\":1,\"31\":1,\"184\":1,\"218\":1,\"225\":1,\"381\":1,\"382\":1,\"665\":1,\"669\":1,\"671\":1,\"672\":1,\"673\":1}}],[\"作用域插槽\",{\"0\":{\"495\":1}}],[\"作用域提升面试题\",{\"0\":{\"275\":1}}],[\"作用域的变量\",{\"1\":{\"218\":1}}],[\"作用域的\",{\"1\":{\"218\":1}}],[\"作用域下生成一级\",{\"1\":{\"211\":1}}],[\"作用域中找到\",{\"1\":{\"211\":1}}],[\"作用域链\",{\"1\":{\"211\":1,\"212\":1,\"217\":1,\"218\":3,\"272\":1,\"381\":2}}],[\"作用域有\",{\"1\":{\"195\":1}}],[\"作用域\",{\"0\":{\"19\":1},\"1\":{\"19\":1,\"195\":1,\"211\":2,\"215\":1,\"654\":1}}],[\"↩︎\",{\"1\":{\"139\":1}}],[\"捐赠一杯咖啡\",{\"1\":{\"136\":1}}],[\"向服务端发送\",{\"1\":{\"712\":1}}],[\"向服务端发送首次请求\",{\"1\":{\"682\":1}}],[\"向客户端发送\",{\"1\":{\"712\":1}}],[\"向后端发送\",{\"1\":{\"706\":1}}],[\"向其他源发出的请求可以发出\",{\"1\":{\"703\":1}}],[\"向根节点容器插入\",{\"1\":{\"582\":1}}],[\"向用户展示它是一款强力并且高速的\",{\"1\":{\"262\":1}}],[\"向上查找\",{\"1\":{\"218\":1}}],[\"向\",{\"1\":{\"136\":1}}],[\"非简单请求\",{\"1\":{\"707\":1}}],[\"非幂等\",{\"1\":{\"700\":1}}],[\"非对称加密\",{\"1\":{\"697\":2,\"698\":2}}],[\"非常安全\",{\"1\":{\"699\":1}}],[\"非常帅\",{\"1\":{\"528\":1}}],[\"非常强大\",{\"1\":{\"135\":1}}],[\"非空判断运算符\",{\"0\":{\"445\":1}}],[\"非空类型断言\",{\"0\":{\"416\":1}}],[\"非严格模式下\",{\"1\":{\"360\":1}}],[\"非\",{\"1\":{\"309\":1,\"319\":1}}],[\"非纯函数\",{\"1\":{\"287\":1,\"288\":2}}],[\"非阻塞的\",{\"1\":{\"248\":1}}],[\"非聚集索引一定回表查询吗\",{\"0\":{\"174\":1}}],[\"非聚集索引一个表可以存在多个\",{\"1\":{\"173\":1}}],[\"非聚集索引反之\",{\"1\":{\"173\":1}}],[\"非聚集索引是逻辑上的连续\",{\"1\":{\"173\":1}}],[\"非聚集索引的叶子节点存储主键的值\",{\"1\":{\"173\":1}}],[\"非聚集索引\",{\"1\":{\"173\":1}}],[\"非一致性读不会因此去等待行上锁的释放\",{\"1\":{\"171\":1}}],[\"非抽象方法\",{\"1\":{\"8\":1}}],[\"query\",{\"1\":{\"509\":3,\"510\":1,\"706\":2}}],[\"queryselector\",{\"1\":{\"135\":1,\"371\":1}}],[\"queuemicrotask\",{\"1\":{\"249\":1,\"253\":3,\"255\":1,\"309\":6,\"317\":3,\"318\":7,\"319\":6}}],[\"queue\",{\"0\":{\"45\":1,\"47\":1},\"1\":{\"47\":1,\"58\":1,\"255\":12}}],[\"导致页面的字体\",{\"1\":{\"663\":1}}],[\"导致页面尺寸混乱\",{\"1\":{\"655\":1}}],[\"导致其不具有正交性\",{\"1\":{\"648\":1}}],[\"导致容易出现内存泄漏\",{\"1\":{\"224\":1}}],[\"导出store独享\",{\"1\":{\"545\":1}}],[\"导入依赖\",{\"1\":{\"528\":1}}],[\"导入文件\",{\"0\":{\"134\":1}}],[\"导航\",{\"1\":{\"657\":1}}],[\"导航被终止并将该错误传递给router\",{\"1\":{\"513\":1}}],[\"导航栏\",{\"1\":{\"107\":1,\"146\":1}}],[\"−1\",{\"1\":{\"133\":1}}],[\"ωyω​\",{\"1\":{\"133\":2}}],[\"∂ωr∂r​\",{\"1\":{\"133\":1}}],[\"图形的绘制\",{\"1\":{\"656\":1}}],[\"图片加载失败时替换文本\",{\"1\":{\"671\":1}}],[\"图片等等都显得非常小\",{\"1\":{\"663\":1}}],[\"图片等\",{\"1\":{\"621\":1}}],[\"图片大小等\",{\"1\":{\"586\":1}}],[\"图片视频可能还没加载完\",{\"1\":{\"584\":1}}],[\"图片增强\",{\"0\":{\"127\":1}}],[\"图源\",{\"1\":{\"263\":1}}],[\"图解\",{\"1\":{\"253\":1,\"256\":1,\"263\":1,\"267\":1}}],[\"图表\",{\"0\":{\"129\":1}}],[\"卡片\",{\"0\":{\"128\":1}}],[\"支持服务器推送\",{\"1\":{\"696\":1}}],[\"支持头部压缩\",{\"1\":{\"696\":1}}],[\"支持多路复用\",{\"1\":{\"696\":1}}],[\"支持多种编程范式\",{\"1\":{\"179\":1}}],[\"支持箭头函数\",{\"1\":{\"240\":1}}],[\"支持一个字符串为多行\",{\"1\":{\"239\":1}}],[\"支持let\",{\"1\":{\"239\":1}}],[\"支持对象解析\",{\"1\":{\"239\":1}}],[\"支持对象\",{\"1\":{\"234\":1}}],[\"支持数据库异常崩溃后的安全恢复\",{\"1\":{\"162\":1}}],[\"支持外键\",{\"1\":{\"162\":1}}],[\"支持行级锁和表级锁\",{\"1\":{\"162\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"127\":1}}],[\"支持存储\",{\"1\":{\"43\":1}}],[\"计数器案例\",{\"1\":{\"546\":1}}],[\"计划\",{\"1\":{\"126\":2}}],[\"计算\",{\"1\":{\"633\":1}}],[\"计算属性computed和监听器watch\",{\"0\":{\"536\":1}}],[\"计算属性在多次使用时\",{\"1\":{\"522\":1}}],[\"计算属性一般默认只有\",{\"1\":{\"522\":1}}],[\"计算流符合条件的流的数量\",{\"1\":{\"91\":1}}],[\"计算工资总和\",{\"1\":{\"90\":1}}],[\"我知道了\",{\"1\":{\"714\":1}}],[\"我发完了\",{\"1\":{\"714\":1}}],[\"我还有东西要发给你\",{\"1\":{\"714\":1}}],[\"我要跟你断开通信\",{\"1\":{\"714\":1}}],[\"我要跟你通信\",{\"1\":{\"712\":1}}],[\"我可以听到\",{\"1\":{\"712\":1}}],[\"我是cpn组件的name\",{\"1\":{\"488\":1}}],[\"我是子组件的name\",{\"1\":{\"488\":1}}],[\"我是居中的\",{\"1\":{\"122\":1}}],[\"我这里的函数参数应该是什么类型\",{\"1\":{\"440\":1}}],[\"我不决定这些参数的类型\",{\"1\":{\"440\":1}}],[\"我想说\",{\"1\":{\"239\":1}}],[\"我在右对齐\",{\"1\":{\"122\":1}}],[\"我们可以利用计算属性\",{\"1\":{\"536\":1}}],[\"我们需要event对象\",{\"1\":{\"521\":1}}],[\"我们需要拿到其中一个时\",{\"1\":{\"488\":1}}],[\"我们通过ref给某一个子组件绑定一个特定的id\",{\"1\":{\"488\":1}}],[\"我们无法给一个函数参数设置默认值\",{\"1\":{\"240\":1}}],[\"我们只关注\",{\"1\":{\"215\":1}}],[\"我们就可以直接认为这两个对象不相等\",{\"1\":{\"9\":1}}],[\"我们才认为这两个对象相等\",{\"1\":{\"9\":1}}],[\"查看\",{\"1\":{\"335\":1}}],[\"查看详情\",{\"1\":{\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1}}],[\"查找时会一层层查找\",{\"1\":{\"272\":1}}],[\"查找与匹配\",{\"1\":{\"90\":1}}],[\"查询\",{\"1\":{\"704\":1}}],[\"查询课程得分成功\",{\"1\":{\"243\":1}}],[\"查询到分数\",{\"1\":{\"243\":1}}],[\"查询到课程\",{\"1\":{\"243\":1}}],[\"查询用户课程成功\",{\"1\":{\"243\":1}}],[\"查询用户成功\",{\"1\":{\"243\":1}}],[\"查询用户\",{\"1\":{\"243\":1}}],[\"查询的正好是索引\",{\"1\":{\"174\":1}}],[\"查出当前用户信息\",{\"1\":{\"243\":1}}],[\"危险容器\",{\"1\":{\"119\":1}}],[\"警告容器\",{\"1\":{\"119\":1}}],[\"主域名不同\",{\"1\":{\"704\":1}}],[\"主轴的方向\",{\"1\":{\"645\":1}}],[\"主线程代码\",{\"1\":{\"249\":1}}],[\"主键索引属于聚集索引\",{\"1\":{\"173\":1}}],[\"主键索引\",{\"1\":{\"172\":1,\"174\":1}}],[\"主题包含了一个自定义徽章可以使用\",{\"1\":{\"145\":1}}],[\"主题扩展了更多\",{\"1\":{\"118\":1}}],[\"主题扩展\",{\"0\":{\"118\":1}}],[\"主要内容\",{\"1\":{\"657\":1}}],[\"主要用于文字的排版\",{\"1\":{\"610\":1}}],[\"主要流程\",{\"1\":{\"263\":1}}],[\"主要是\",{\"1\":{\"224\":1}}],[\"主要从\",{\"1\":{\"113\":1}}],[\"主要功能与配置演示\",{\"0\":{\"104\":1}}],[\"主要的api\",{\"1\":{\"93\":1}}],[\"请求需要设置xhr\",{\"1\":{\"707\":1}}],[\"请求又分简单请求与复杂请求\",{\"1\":{\"707\":1}}],[\"请求会把请求报文一次性发出去\",{\"1\":{\"700\":1}}],[\"请求会被浏览器主动缓存下来\",{\"1\":{\"700\":1}}],[\"请求参数一般放在请求体中\",{\"1\":{\"700\":1}}],[\"请求参数一般放在\",{\"1\":{\"700\":1}}],[\"请求头\",{\"1\":{\"695\":1}}],[\"请求的资源不存在\",{\"1\":{\"694\":1}}],[\"请求的资源被禁止\",{\"1\":{\"694\":1}}],[\"请求的响应\",{\"1\":{\"694\":1}}],[\"请求的网页已永久移动到新位置\",{\"1\":{\"694\":1}}],[\"请求成功并且服务器创建了新的资源\",{\"1\":{\"694\":1}}],[\"请求\",{\"1\":{\"249\":1,\"580\":2,\"582\":1,\"671\":1,\"672\":1,\"706\":4,\"710\":1}}],[\"请使用绝对链接\",{\"1\":{\"145\":1}}],[\"请阅读\",{\"1\":{\"117\":1}}],[\"请先阅读\",{\"1\":{\"114\":1}}],[\"关闭页面或浏览器后会被清除\",{\"1\":{\"681\":1}}],[\"关闭页面或浏览器失效\",{\"1\":{\"678\":1}}],[\"关闭浏览器后被清除有过期时间\",{\"1\":{\"678\":1,\"681\":1}}],[\"关闭事件回调阶段\",{\"1\":{\"254\":1}}],[\"关系选择器\",{\"1\":{\"639\":1}}],[\"关联页面的模板\",{\"1\":{\"528\":1}}],[\"关于这些扩展\",{\"1\":{\"117\":1}}],[\"关键字创建\",{\"1\":{\"363\":1}}],[\"关键字定义\",{\"1\":{\"363\":1}}],[\"关键字\",{\"1\":{\"38\":1}}],[\"关键字修饰\",{\"1\":{\"14\":1,\"38\":1}}],[\"关键字修饰字符数组来保存字符串\",{\"1\":{\"14\":1}}],[\"来测试和监控媒体状态\",{\"1\":{\"633\":1}}],[\"来实现给\",{\"1\":{\"549\":1}}],[\"来完成\",{\"1\":{\"536\":1}}],[\"来解析\",{\"1\":{\"116\":1}}],[\"来保证事务的原子性\",{\"1\":{\"164\":1}}],[\"来保证线程安全\",{\"0\":{\"56\":1}}],[\"来保证并发安全\",{\"1\":{\"53\":1,\"72\":1}}],[\"会分为两个\",{\"1\":{\"700\":1}}],[\"会自动将请求者转到新位置\",{\"1\":{\"694\":1}}],[\"会自动给当前元素设置一个router\",{\"1\":{\"507\":1}}],[\"会创建各自的\",{\"1\":{\"680\":1}}],[\"会创建一个activation\",{\"1\":{\"272\":1}}],[\"会让文本斜体\",{\"1\":{\"657\":1}}],[\"会让文本变粗\",{\"1\":{\"657\":1}}],[\"会呈现在元素框之外\",{\"1\":{\"625\":1}}],[\"会触碰到包含块的左边界\",{\"1\":{\"588\":1}}],[\"会触发后续\",{\"1\":{\"334\":2}}],[\"会导致回流的操作\",{\"1\":{\"586\":1}}],[\"会阻断\",{\"1\":{\"581\":1}}],[\"会缓存不活动的组件实例\",{\"1\":{\"489\":1}}],[\"会将赋值的值的类型\",{\"1\":{\"460\":1}}],[\"会将全局定义的变量\",{\"1\":{\"271\":1}}],[\"会指向\",{\"1\":{\"385\":1}}],[\"会执行如下的操作\",{\"1\":{\"363\":1}}],[\"会执行该对象的\",{\"1\":{\"341\":1}}],[\"会执行\",{\"1\":{\"334\":2}}],[\"会有阻塞\",{\"1\":{\"331\":1}}],[\"会出现异步元素为空白的情况\",{\"1\":{\"325\":1}}],[\"会出现数组提前输出\",{\"1\":{\"325\":1}}],[\"会采用上一次的结果\",{\"1\":{\"322\":1}}],[\"会等待这个\",{\"1\":{\"322\":1}}],[\"会附带执行一次next方法\",{\"1\":{\"305\":1}}],[\"会依次执行生成器函数里被\",{\"1\":{\"302\":1}}],[\"会修改原数组\",{\"1\":{\"287\":1}}],[\"会影响到所有的子类实例\",{\"1\":{\"279\":1}}],[\"会在所有的\",{\"1\":{\"345\":1}}],[\"会在堆内存创建一个全局对象\",{\"1\":{\"270\":1}}],[\"会在global\",{\"1\":{\"211\":1}}],[\"会进行去优化的过程\",{\"1\":{\"266\":1}}],[\"会直接执行相应的机器码\",{\"1\":{\"266\":1}}],[\"会先进行优化处理\",{\"1\":{\"266\":1}}],[\"会抛出语法错误\",{\"1\":{\"263\":1}}],[\"会停止解析\",{\"1\":{\"259\":1}}],[\"会变量提升\",{\"1\":{\"238\":1}}],[\"会被渲染成<a>标签\",{\"1\":{\"506\":1}}],[\"会被立即执行\",{\"1\":{\"334\":1}}],[\"会被\",{\"1\":{\"264\":1,\"322\":1}}],[\"会被转换成\",{\"1\":{\"264\":1}}],[\"会被序列化为\",{\"1\":{\"233\":1}}],[\"会被所有子函数的作用域链\",{\"1\":{\"218\":1}}],[\"会被释放回收\",{\"1\":{\"213\":1,\"225\":1}}],[\"会快速地扫描内部函数使用了当前父函数中的哪些自由变量\",{\"1\":{\"217\":1}}],[\"会作为\",{\"1\":{\"204\":1}}],[\"会降低\",{\"1\":{\"175\":1}}],[\"会使用\",{\"1\":{\"116\":1}}],[\"会报错\",{\"1\":{\"92\":1,\"205\":2}}],[\"相等\",{\"1\":{\"689\":1}}],[\"相对于视口宽度百分比\",{\"1\":{\"655\":1}}],[\"相对于视口高度的百分比\",{\"1\":{\"655\":1}}],[\"相对于根元素\",{\"1\":{\"655\":1}}],[\"相对于自己的\",{\"1\":{\"655\":1}}],[\"相对于自己原来的位置进行定位\",{\"1\":{\"629\":1}}],[\"相对于浏览器窗口\",{\"1\":{\"629\":1}}],[\"相对于浏览器窗口固定\",{\"1\":{\"627\":1}}],[\"相对于最邻近的一个非static定位的祖先元素进行定位\",{\"1\":{\"629\":1}}],[\"相对于元素的内容固定\",{\"1\":{\"627\":1}}],[\"相对于元素本身固定\",{\"1\":{\"627\":1}}],[\"相邻盒子垂直外边距相遇时\",{\"1\":{\"591\":1}}],[\"相比于面试题二\",{\"1\":{\"377\":1}}],[\"相互影响\",{\"1\":{\"227\":1}}],[\"相当于封装函数\",{\"0\":{\"538\":1}}],[\"相当于独立函数调用\",{\"1\":{\"371\":1}}],[\"相当于状态的交接\",{\"1\":{\"341\":1}}],[\"相当于执行以下操作\",{\"1\":{\"192\":1,\"363\":1}}],[\"相当于\",{\"1\":{\"187\":2,\"202\":2,\"337\":1,\"340\":1,\"342\":1}}],[\"相关信息\",{\"1\":{\"115\":1}}],[\"相同输入产生相同输出\",{\"1\":{\"287\":1}}],[\"相同则覆盖\",{\"1\":{\"49\":1,\"68\":1}}],[\"相同点\",{\"1\":{\"8\":1,\"173\":1}}],[\"配置vue\",{\"0\":{\"506\":1}}],[\"配置history模式\",{\"1\":{\"505\":1,\"507\":1}}],[\"配置路由和组件之间的应用关系\",{\"1\":{\"505\":1}}],[\"配置路由映射\",{\"1\":{\"473\":1}}],[\"配置\",{\"0\":{\"115\":1}}],[\"演示\",{\"1\":{\"114\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1}}],[\"介绍\",{\"0\":{\"114\":1},\"1\":{\"114\":1,\"115\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"文本的baseline是字母x的下方\",{\"1\":{\"633\":1}}],[\"文本进行倾斜\",{\"1\":{\"622\":1}}],[\"文本\",{\"1\":{\"621\":1}}],[\"文档类型\",{\"1\":{\"663\":1}}],[\"文档的样貌\",{\"1\":{\"648\":1}}],[\"文档流\",{\"1\":{\"586\":1}}],[\"文档\",{\"1\":{\"582\":1}}],[\"文章\",{\"1\":{\"657\":1}}],[\"文章标题列表\",{\"1\":{\"146\":1}}],[\"文章加密\",{\"2\":{\"112\":1}}],[\"文件的特性\",{\"1\":{\"706\":1}}],[\"文件层叠\",{\"1\":{\"648\":1}}],[\"文件里撰写模板\",{\"1\":{\"487\":1}}],[\"文件中\",{\"1\":{\"320\":1}}],[\"文件夹的图片\",{\"1\":{\"145\":1}}],[\"文件放置在一起\",{\"1\":{\"145\":1}}],[\"文件\",{\"1\":{\"113\":1}}],[\"文件生成页面\",{\"1\":{\"113\":1}}],[\"文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字\",{\"1\":{\"617\":1}}],[\"文字颜色等\",{\"1\":{\"587\":1}}],[\"文字数量\",{\"1\":{\"586\":1}}],[\"文字大小\",{\"1\":{\"586\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"145\":1}}],[\"文字\",{\"1\":{\"110\":2}}],[\"文字段落\",{\"1\":{\"110\":24}}],[\"段落\",{\"1\":{\"110\":2,\"657\":1}}],[\"页脚\",{\"1\":{\"107\":1,\"146\":1}}],[\"页面嵌套\",{\"1\":{\"669\":1}}],[\"页面的全部资源加载完才执行\",{\"1\":{\"584\":1}}],[\"页面局部改变\",{\"1\":{\"583\":2}}],[\"页面数据\",{\"1\":{\"583\":1}}],[\"页面中有一个根节点容器\",{\"1\":{\"582\":1}}],[\"页面渲染结果\",{\"1\":{\"520\":1}}],[\"页面渲染占位\",{\"1\":{\"506\":1}}],[\"页面渲染\",{\"1\":{\"249\":1}}],[\"页面结构\",{\"0\":{\"146\":1}}],[\"页面内容\",{\"0\":{\"145\":1}}],[\"页面配置\",{\"1\":{\"142\":2,\"144\":1}}],[\"页面引入配置\",{\"1\":{\"115\":1}}],[\"页面信息\",{\"0\":{\"144\":1},\"1\":{\"107\":1}}],[\"页面展示\",{\"1\":{\"102\":1,\"105\":1,\"134\":1,\"148\":1}}],[\"评论\",{\"1\":{\"107\":1,\"146\":1}}],[\"链式调用解决回调地狱\",{\"1\":{\"334\":1}}],[\"链式调用\",{\"0\":{\"319\":1}}],[\"链接\",{\"1\":{\"107\":1,\"119\":1}}],[\"链表散列\",{\"1\":{\"49\":1,\"68\":1}}],[\"链表\",{\"1\":{\"49\":1,\"50\":1,\"57\":1,\"68\":1,\"69\":1}}],[\"链表则是主要为了解决哈希冲突而存在的\",{\"1\":{\"46\":1}}],[\"下载页面\",{\"1\":{\"668\":1}}],[\"下载指定字体导入本地\",{\"1\":{\"622\":1}}],[\"下载成功立马执行\",{\"1\":{\"581\":1}}],[\"下划线\",{\"1\":{\"621\":1}}],[\"下列\",{\"1\":{\"589\":1}}],[\"下添加\",{\"1\":{\"320\":1}}],[\"下实现\",{\"1\":{\"320\":1}}],[\"下面所有行放到微任务里\",{\"1\":{\"205\":1}}],[\"下一行及之后的语句相当于放在于\",{\"1\":{\"252\":1}}],[\"下一行及之后的代码相当于放在于\",{\"1\":{\"205\":1}}],[\"下一篇\",{\"1\":{\"107\":1}}],[\"下表展示了它们可拥有的键值\",{\"1\":{\"182\":1}}],[\"下次再次执行相同代码时\",{\"1\":{\"266\":1}}],[\"下次登录的时候只需要根据\",{\"1\":{\"25\":1}}],[\"下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了\",{\"1\":{\"25\":1}}],[\"更适合传输敏感信息\",{\"1\":{\"700\":1}}],[\"更加语义化\",{\"1\":{\"655\":1}}],[\"更改\",{\"1\":{\"376\":2,\"377\":2,\"378\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"146\":1}}],[\"更新时间\",{\"1\":{\"107\":1}}],[\"更好解决冲突\",{\"1\":{\"50\":1,\"69\":1}}],[\"编码\",{\"1\":{\"700\":1}}],[\"编写一些公共的api\",{\"1\":{\"453\":1}}],[\"编写函数的类型\",{\"1\":{\"431\":1}}],[\"编写的\",{\"1\":{\"262\":1}}],[\"编辑此页链接\",{\"1\":{\"107\":1}}],[\"编译作用域\",{\"0\":{\"494\":1}}],[\"编译器拿到解释器标记的热点代码后\",{\"1\":{\"263\":1}}],[\"编译器处理\",{\"1\":{\"263\":1}}],[\"编译器\",{\"1\":{\"262\":1}}],[\"编译器会对它进行特殊处理\",{\"1\":{\"7\":1}}],[\"编译时\",{\"1\":{\"12\":1}}],[\"编译错误\",{\"1\":{\"7\":1}}],[\"贡献者\",{\"1\":{\"107\":1,\"146\":1}}],[\"侧边栏\",{\"1\":{\"107\":1,\"146\":1}}],[\"本身的值存在堆中\",{\"1\":{\"296\":1}}],[\"本地\",{\"1\":{\"210\":1}}],[\"本页面就是一个示例\",{\"1\":{\"107\":1}}],[\"本质是加了一个隐藏样式\",{\"1\":{\"534\":1}}],[\"本质是参数化类型\",{\"1\":{\"27\":1}}],[\"本质上是改变window\",{\"1\":{\"503\":1}}],[\"本质上仍是通过单线程模拟多线程\",{\"1\":{\"248\":1}}],[\"本质\",{\"1\":{\"24\":1,\"243\":1}}],[\"后\",{\"1\":{\"712\":2,\"714\":1}}],[\"后代\",{\"1\":{\"639\":1}}],[\"后代选择器\",{\"1\":{\"623\":1}}],[\"后置钩子\",{\"1\":{\"513\":1}}],[\"后退键返回不能返回到上一个页面中\",{\"1\":{\"507\":1}}],[\"后退刷新\",{\"1\":{\"23\":1}}],[\"后备内容\",{\"1\":{\"492\":1}}],[\"后就不能再更改绑定了\",{\"1\":{\"369\":1}}],[\"后边代码不执行\",{\"1\":{\"337\":2}}],[\"后边代码会执行\",{\"1\":{\"337\":2}}],[\"后边不再执行\",{\"1\":{\"205\":2}}],[\"后来为了规范\",{\"1\":{\"332\":1}}],[\"后续就使用会话秘钥进行加密通信\",{\"1\":{\"698\":1}}],[\"后续请求时\",{\"1\":{\"686\":2,\"689\":1}}],[\"后续请求中\",{\"1\":{\"682\":1}}],[\"后续状态不可变\",{\"1\":{\"313\":2}}],[\"后续代码不执行\",{\"1\":{\"204\":1}}],[\"后续代码仍会执行\",{\"1\":{\"204\":1}}],[\"后面覆盖前面\",{\"1\":{\"640\":1}}],[\"后面是用于替换前面的元素\",{\"1\":{\"525\":1}}],[\"后面的语句相当于放在了\",{\"1\":{\"252\":1}}],[\"后面的代码都相当于放在\",{\"1\":{\"205\":1}}],[\"后面出现的会覆盖前面的\",{\"1\":{\"199\":1}}],[\"后接\",{\"1\":{\"202\":3,\"205\":2}}],[\"后端将数据传入回调函数\",{\"1\":{\"706\":1}}],[\"后端\",{\"0\":{\"101\":1},\"1\":{\"706\":1}}],[\"wrap\",{\"1\":{\"645\":4}}],[\"writable\",{\"1\":{\"182\":4,\"183\":3,\"185\":1,\"186\":4,\"187\":1,\"384\":1}}],[\"writer\",{\"1\":{\"37\":2}}],[\"w3c\",{\"1\":{\"635\":2}}],[\"w100\",{\"1\":{\"632\":1}}],[\"watch可以让我们监控一个值的变化\",{\"1\":{\"536\":1}}],[\"watch\",{\"0\":{\"526\":1},\"1\":{\"536\":1}}],[\"walk\",{\"1\":{\"424\":2}}],[\"wtype\",{\"1\":{\"452\":1}}],[\"white\",{\"1\":{\"633\":1,\"654\":1}}],[\"while\",{\"1\":{\"306\":1,\"405\":1}}],[\"whytype\",{\"1\":{\"452\":1}}],[\"why\",{\"1\":{\"390\":1,\"391\":1,\"393\":1,\"395\":1,\"396\":1,\"399\":1,\"406\":4,\"415\":2,\"417\":1,\"423\":1,\"435\":1,\"436\":1,\"437\":1,\"440\":1,\"442\":1,\"448\":1,\"454\":1,\"455\":4,\"460\":1,\"463\":1,\"465\":1,\"549\":1}}],[\"where在数据分组前进行过滤\",{\"1\":{\"161\":1}}],[\"where子句作用于表和视图\",{\"1\":{\"161\":1}}],[\"where\",{\"1\":{\"128\":1,\"168\":2,\"174\":1}}],[\"work\",{\"1\":{\"424\":2}}],[\"worker实现多线程\",{\"1\":{\"248\":1}}],[\"worker\",{\"1\":{\"248\":2}}],[\"world\",{\"0\":{\"427\":1},\"1\":{\"382\":1,\"402\":1,\"415\":1,\"416\":1,\"419\":1,\"420\":1,\"422\":3,\"428\":1,\"460\":1,\"463\":2,\"529\":1}}],[\"world<span>\",{\"1\":{\"239\":1}}],[\"week\",{\"1\":{\"628\":1}}],[\"weight的顺序可以任意\",{\"1\":{\"622\":1}}],[\"weight\",{\"1\":{\"622\":2,\"646\":1}}],[\"were\",{\"1\":{\"328\":3,\"347\":1}}],[\"weakset\",{\"1\":{\"299\":1}}],[\"weakmap\",{\"1\":{\"234\":4,\"299\":1}}],[\"webp\",{\"1\":{\"594\":1}}],[\"webpack\",{\"1\":{\"498\":1,\"655\":1}}],[\"webassembly\",{\"1\":{\"262\":1}}],[\"webkit\",{\"1\":{\"258\":2,\"260\":1}}],[\"web\",{\"1\":{\"235\":1,\"248\":3,\"663\":2,\"682\":1,\"683\":1}}],[\"wink\",{\"1\":{\"594\":1}}],[\"window\",{\"0\":{\"584\":1},\"1\":{\"195\":5,\"211\":1,\"223\":1,\"224\":1,\"360\":9,\"361\":1,\"362\":4,\"371\":1,\"372\":2,\"373\":4,\"375\":4,\"376\":6,\"377\":4,\"378\":4,\"381\":2,\"384\":2,\"385\":4,\"454\":4,\"584\":1,\"655\":2,\"667\":1,\"704\":1}}],[\"withcredentials\",{\"1\":{\"707\":1}}],[\"with\",{\"0\":{\"380\":1,\"381\":1},\"1\":{\"381\":2,\"706\":1}}],[\"withnano\",{\"1\":{\"95\":1}}],[\"width包含内容\",{\"1\":{\"629\":1}}],[\"width包含块的宽度\",{\"1\":{\"629\":1}}],[\"width包裹内容\",{\"1\":{\"629\":1}}],[\"width\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"348\":1,\"398\":5,\"470\":1,\"471\":1,\"472\":1,\"474\":1,\"475\":1,\"480\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"591\":1,\"592\":1,\"593\":2,\"598\":2,\"599\":1,\"611\":1,\"617\":1,\"629\":1,\"632\":1,\"633\":9,\"635\":3,\"642\":2,\"643\":1,\"653\":1,\"654\":5,\"655\":2,\"663\":1,\"671\":2,\"674\":2,\"706\":1}}],[\"width=device\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":1,\"674\":1,\"706\":1}}],[\"www\",{\"1\":{\"169\":1,\"423\":2,\"529\":1,\"530\":1,\"532\":1,\"704\":2,\"707\":1}}],[\"格式化\",{\"0\":{\"95\":1}}],[\"或避免重新污染\",{\"1\":{\"516\":1}}],[\"或等待任意一个失败则为失败状态\",{\"1\":{\"325\":1,\"344\":1}}],[\"或者\",{\"1\":{\"636\":1}}],[\"或者它原型链上的某个对象\",{\"1\":{\"299\":1}}],[\"或者执行其他的函数\",{\"1\":{\"271\":1}}],[\"或者是提供的初始值\",{\"1\":{\"242\":1}}],[\"或者说函数被引用包围\",{\"1\":{\"209\":1}}],[\"或删去中间变量\",{\"1\":{\"218\":1}}],[\"或修改该对象的现有属性\",{\"1\":{\"182\":1}}],[\"或\",{\"1\":{\"94\":1,\"169\":1,\"182\":2,\"309\":2,\"313\":1,\"319\":2,\"353\":1,\"358\":1,\"360\":1,\"589\":3,\"638\":1,\"648\":1,\"686\":2,\"689\":3,\"694\":1,\"704\":1,\"707\":1}}],[\"需排除\",{\"1\":{\"309\":1,\"319\":1}}],[\"需通过threadlocal解决\",{\"1\":{\"94\":1}}],[\"需要向服务器验证缓存是否是最新的\",{\"1\":{\"687\":1}}],[\"需要提前知道\",{\"1\":{\"607\":1,\"615\":1}}],[\"需要请求完整页面3\",{\"1\":{\"583\":1}}],[\"需要管理的状态\",{\"0\":{\"544\":1}}],[\"需要特别的小心\",{\"1\":{\"412\":1}}],[\"需要传入一个回调函数称为\",{\"1\":{\"334\":1}}],[\"需要加\",{\"1\":{\"306\":1}}],[\"需要创建\",{\"1\":{\"271\":1}}],[\"需要直译器转译后才能成为机器码的中间代码\",{\"1\":{\"266\":1}}],[\"需要马上执行的\",{\"1\":{\"264\":1}}],[\"需要进行编译\",{\"1\":{\"262\":1}}],[\"需要查询的字段正好是索引的字段\",{\"1\":{\"174\":1}}],[\"需要重写hashcode\",{\"1\":{\"90\":1}}],[\"需要调用的构造器的参数列表要与函数式接口中抽象方法的参数列表保持一致\",{\"1\":{\"88\":1}}],[\"转义html标签\",{\"1\":{\"529\":1}}],[\"转变不可逆\",{\"1\":{\"334\":1}}],[\"转化为成功状态\",{\"1\":{\"205\":1}}],[\"转账者和收款人的总额应该是不变的\",{\"1\":{\"163\":1}}],[\"转换都需要借助\",{\"1\":{\"94\":1}}],[\"转发是服务器行为\",{\"1\":{\"24\":1}}],[\"转发\",{\"0\":{\"24\":1},\"1\":{\"24\":1}}],[\"总之\",{\"1\":{\"334\":1}}],[\"总是有返回值\",{\"1\":{\"287\":1}}],[\"总是读取事务开始时的行数据版本read\",{\"1\":{\"171\":1}}],[\"总是读取行的最新版本read\",{\"1\":{\"171\":1}}],[\"总结\",{\"0\":{\"225\":1,\"277\":1,\"618\":1},\"1\":{\"94\":1,\"202\":1,\"248\":1}}],[\"总容量>64\",{\"1\":{\"50\":1,\"69\":1}}],[\"要有\",{\"1\":{\"674\":1}}],[\"要成为可迭代对象\",{\"1\":{\"299\":1}}],[\"要么完全不起作用\",{\"1\":{\"163\":1}}],[\"要求返回值必须是optional\",{\"1\":{\"93\":1}}],[\"要与函数式接口中抽象方法的函数列表与返回值类型保持一致\",{\"1\":{\"88\":1}}],[\"继续\",{\"1\":{\"694\":1}}],[\"继续使用这个\",{\"1\":{\"92\":1}}],[\"继承的样式没有权值\",{\"1\":{\"640\":1}}],[\"继承图解\",{\"0\":{\"352\":1}}],[\"继承原型链上的属性和方法\",{\"1\":{\"281\":1}}],[\"继承父类构造函数的属性和方法\",{\"1\":{\"281\":1,\"284\":1}}],[\"继承\",{\"0\":{\"278\":1,\"285\":1,\"391\":1},\"1\":{\"453\":1,\"654\":1}}],[\"继承它的接口主要有list\",{\"1\":{\"58\":1}}],[\"继承自\",{\"1\":{\"46\":1}}],[\"第3随机数\",{\"1\":{\"698\":1}}],[\"第3步\",{\"0\":{\"472\":1}}],[\"第1随机数\",{\"1\":{\"698\":1}}],[\"第1步\",{\"0\":{\"470\":1}}],[\"第2随机数\",{\"1\":{\"698\":1}}],[\"第2随机数和预主密钥计算出会话秘钥\",{\"1\":{\"698\":1}}],[\"第2步\",{\"0\":{\"471\":1}}],[\"第7步\",{\"0\":{\"476\":1}}],[\"第6步\",{\"0\":{\"475\":1}}],[\"第5步\",{\"0\":{\"474\":1}}],[\"第4步\",{\"0\":{\"473\":1}}],[\"第4版\",{\"1\":{\"286\":1}}],[\"第四阶段草案的\",{\"1\":{\"329\":1}}],[\"第三步\",{\"1\":{\"506\":1}}],[\"第三段\",{\"1\":{\"305\":2}}],[\"第三段代码\",{\"1\":{\"302\":1}}],[\"第三部分\",{\"1\":{\"272\":1}}],[\"第\",{\"1\":{\"209\":2}}],[\"第二个参数\",{\"1\":{\"525\":2,\"549\":1}}],[\"第二个参数传入你要删除几个元素\",{\"1\":{\"525\":1}}],[\"第二个回调\",{\"1\":{\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1}}],[\"第二步\",{\"1\":{\"506\":1}}],[\"第二种写法\",{\"1\":{\"306\":1}}],[\"第二段\",{\"1\":{\"305\":2}}],[\"第二段代码\",{\"1\":{\"302\":3}}],[\"第二部分\",{\"1\":{\"271\":1,\"272\":1}}],[\"第二类丢失更新\",{\"1\":{\"165\":1}}],[\"第二次使用\",{\"1\":{\"91\":1}}],[\"第一个参数\",{\"1\":{\"549\":1}}],[\"第一步\",{\"1\":{\"506\":1}}],[\"第一种写法\",{\"1\":{\"306\":1}}],[\"第一段\",{\"1\":{\"305\":2}}],[\"第一段代码\",{\"1\":{\"302\":3}}],[\"第一部分\",{\"1\":{\"271\":1,\"272\":1}}],[\"第一款\",{\"1\":{\"260\":1}}],[\"第一轮微任务执行完毕\",{\"1\":{\"253\":1}}],[\"第一轮\",{\"1\":{\"251\":1}}],[\"第一类丢失更新\",{\"1\":{\"165\":1}}],[\"第一次使用\",{\"1\":{\"91\":1}}],[\"把文本定义为斜体强调的内容\",{\"1\":{\"657\":1}}],[\"把文本定义为粗体语气更强的强调的内容\",{\"1\":{\"657\":1}}],[\"把其他方向上的\",{\"1\":{\"642\":1}}],[\"把行内级盒子的底端与行盒的底端对齐\",{\"1\":{\"633\":1}}],[\"把行内级盒子的顶端与行盒的顶端对齐\",{\"1\":{\"633\":1}}],[\"把宽\",{\"1\":{\"598\":1}}],[\"把元素放到不同bfc中\",{\"1\":{\"591\":1}}],[\"把它编译为更高效的机器码储存起来\",{\"1\":{\"263\":1}}],[\"把ajax封装到promise\",{\"1\":{\"243\":1}}],[\"把abc放入容器中\",{\"1\":{\"91\":1}}],[\"把list转为string\",{\"1\":{\"91\":1}}],[\"把里面的东西读取出来\",{\"1\":{\"24\":1}}],[\"常⽤的内联元素\",{\"1\":{\"674\":2}}],[\"常⽤的块级元素\",{\"1\":{\"674\":1}}],[\"常用于语音通话\",{\"1\":{\"710\":1}}],[\"常用于文件传输\",{\"1\":{\"710\":1}}],[\"常用全局属性\",{\"1\":{\"674\":1}}],[\"常用标签\",{\"0\":{\"664\":1}}],[\"常用的属性有\",{\"1\":{\"687\":1}}],[\"常用的有\",{\"1\":{\"663\":2}}],[\"常用的立即执行函数不再需要了\",{\"1\":{\"218\":1}}],[\"常用上述第\",{\"1\":{\"590\":1}}],[\"常用\",{\"1\":{\"488\":1,\"629\":1,\"631\":3,\"633\":1,\"645\":1,\"655\":1}}],[\"常见于\",{\"1\":{\"694\":1}}],[\"常见状态码\",{\"1\":{\"694\":1}}],[\"常见字符实体\",{\"1\":{\"661\":1}}],[\"常见\",{\"1\":{\"589\":1}}],[\"常见的gc算法\",{\"1\":{\"276\":1}}],[\"常见streamapi\",{\"0\":{\"91\":1}}],[\"常量名\",{\"1\":{\"228\":1}}],[\"常和map连接\",{\"1\":{\"90\":1}}],[\"等一下\",{\"1\":{\"714\":1}}],[\"等服务端确认自己已经没有数据需要发送给客户端之后\",{\"1\":{\"714\":1}}],[\"等www\",{\"1\":{\"704\":1}}],[\"等网络攻击\",{\"1\":{\"703\":1}}],[\"等缓存\",{\"1\":{\"687\":1}}],[\"等于700\",{\"1\":{\"622\":1}}],[\"等于400\",{\"1\":{\"622\":1}}],[\"等待第一个成功状态\",{\"1\":{\"347\":1}}],[\"等待第一个成功状态的\",{\"1\":{\"328\":1}}],[\"等待状态的\",{\"1\":{\"345\":1}}],[\"等待状态\",{\"1\":{\"334\":1}}],[\"等待状态时保存成功回调和失败回调数组\",{\"1\":{\"309\":1,\"318\":1,\"319\":1}}],[\"等待\",{\"1\":{\"334\":2}}],[\"等待态\",{\"1\":{\"334\":1}}],[\"等待所有\",{\"1\":{\"325\":1,\"326\":1,\"344\":1}}],[\"等定时器到时之后再遍历执行数组里的函数\",{\"1\":{\"318\":1}}],[\"等到下次再执行到这段代码时\",{\"1\":{\"263\":1}}],[\"等到同步任务执行完毕再执行任务队列\",{\"1\":{\"218\":1}}],[\"等程序之前\",{\"1\":{\"262\":1}}],[\"等不会产生作用域\",{\"1\":{\"195\":1}}],[\"等手段来保证事务的隔离性\",{\"1\":{\"164\":1}}],[\"等\",{\"1\":{\"90\":1,\"258\":1,\"262\":1,\"654\":1,\"663\":1}}],[\"等价于上行\",{\"1\":{\"375\":1}}],[\"等价于\",{\"1\":{\"18\":2,\"184\":1,\"190\":1,\"202\":4,\"205\":1,\"212\":2,\"252\":1,\"336\":1,\"351\":3,\"362\":2}}],[\"等价于通过\",{\"1\":{\"10\":1}}],[\"收集\",{\"1\":{\"90\":1}}],[\"累加数组\",{\"1\":{\"90\":1}}],[\"归约\",{\"1\":{\"90\":1}}],[\"字段的资源\",{\"1\":{\"686\":1}}],[\"字段控制资源过期时间的响应\",{\"1\":{\"686\":1}}],[\"字段写上token信息\",{\"1\":{\"682\":1}}],[\"字符\",{\"1\":{\"700\":1}}],[\"字符集\",{\"1\":{\"663\":1}}],[\"字符实体\",{\"0\":{\"661\":1}}],[\"字符串\",{\"1\":{\"296\":1,\"357\":1}}],[\"字符串插入变量和表达式\",{\"1\":{\"239\":1}}],[\"字符串模板\",{\"1\":{\"239\":1}}],[\"字符串扩展\",{\"1\":{\"239\":1}}],[\"字符串函数\",{\"1\":{\"239\":1}}],[\"字符串化\",{\"1\":{\"233\":1}}],[\"字符串转日期格式\",{\"0\":{\"96\":1}}],[\"字体本身支持斜体时\",{\"1\":{\"622\":1}}],[\"字面量赋值\",{\"0\":{\"455\":1}}],[\"字面量推理\",{\"0\":{\"423\":1}}],[\"字面量类型的意义\",{\"1\":{\"422\":1}}],[\"字面量类型\",{\"0\":{\"422\":1}}],[\"字面量\",{\"0\":{\"421\":1},\"1\":{\"228\":1,\"424\":1}}],[\"字面量的地址\",{\"1\":{\"227\":1,\"228\":1}}],[\"字面量对象的方法指向该对象\",{\"1\":{\"373\":1}}],[\"字面量对象是可以直接定义\",{\"1\":{\"363\":1}}],[\"字面量对象\",{\"1\":{\"195\":1}}],[\"字面量形式\",{\"1\":{\"180\":1}}],[\"字典排序\",{\"1\":{\"90\":1}}],[\"字节码\",{\"1\":{\"263\":1,\"266\":2}}],[\"字节码并执行\",{\"1\":{\"263\":1}}],[\"字节\",{\"1\":{\"15\":1,\"695\":1}}],[\"带你用最简单的方式理解最全面的bfc\",{\"1\":{\"595\":1}}],[\"带\",{\"1\":{\"503\":1}}],[\"带1个参数\",{\"1\":{\"90\":2}}],[\"带缓冲的buffered\",{\"1\":{\"37\":1}}],[\"映射\",{\"1\":{\"90\":1}}],[\"判断构造函数的显式原型\",{\"1\":{\"358\":1}}],[\"判断数据类型\",{\"1\":{\"357\":1}}],[\"判断对象是否是另一个对象的原型\",{\"1\":{\"355\":1}}],[\"判断属性是否在对象及其原型链上\",{\"1\":{\"355\":1}}],[\"判断属性是否是对象自身的属性\",{\"1\":{\"355\":1}}],[\"判断是否处于等待状态\",{\"1\":{\"309\":2,\"313\":2,\"314\":2,\"316\":2,\"318\":2,\"319\":2}}],[\"判断是否含值\",{\"1\":{\"93\":1}}],[\"判断当前传入函数的实参个数\",{\"1\":{\"292\":1}}],[\"判断b是否为空\",{\"1\":{\"240\":1}}],[\"判断\",{\"1\":{\"90\":1,\"704\":1}}],[\"筛选和切片\",{\"1\":{\"90\":1}}],[\"实质\",{\"1\":{\"505\":1,\"622\":1}}],[\"实际上是函数\",{\"1\":{\"350\":1}}],[\"实际的文章内容\",{\"1\":{\"110\":1}}],[\"实例不能调用类方法\",{\"1\":{\"363\":1}}],[\"实例特有属性\",{\"1\":{\"363\":2}}],[\"实例对象是通过类创建而来的\",{\"1\":{\"363\":1}}],[\"实例对象与字面量对象不同\",{\"1\":{\"363\":1}}],[\"实例对象方法通过\",{\"1\":{\"363\":1}}],[\"实例对象\",{\"1\":{\"358\":1,\"424\":1}}],[\"实例对象共有的方法放到原型上\",{\"1\":{\"335\":1}}],[\"实例\",{\"1\":{\"348\":1}}],[\"实例中会存在两份属性\",{\"1\":{\"281\":1}}],[\"实例方法名\",{\"1\":{\"88\":3}}],[\"实践\",{\"1\":{\"213\":1,\"225\":1}}],[\"实现跨域有三种常用方式\",{\"1\":{\"705\":1}}],[\"实现三角形\",{\"1\":{\"641\":1}}],[\"实现自适应两列布局\",{\"0\":{\"593\":1}}],[\"实现自增\",{\"1\":{\"528\":1}}],[\"实现局部更新页面视图\",{\"1\":{\"582\":1}}],[\"实现响应式\",{\"1\":{\"525\":1}}],[\"实现激活颜色变化功能\",{\"0\":{\"474\":1}}],[\"实现路由功能\",{\"0\":{\"473\":1}}],[\"实现接口\",{\"1\":{\"453\":1}}],[\"实现函数是不能直接被调用的\",{\"1\":{\"437\":1}}],[\"实现函数\",{\"1\":{\"437\":1}}],[\"实现继承\",{\"1\":{\"353\":1}}],[\"实现过程\",{\"0\":{\"310\":1}}],[\"实现异步的核心就是事件循环\",{\"1\":{\"248\":1}}],[\"实现高阶函数\",{\"1\":{\"223\":1,\"225\":1}}],[\"实现私有属性成员\",{\"1\":{\"222\":1}}],[\"实现可重入锁reentrantlocks\",{\"1\":{\"57\":1}}],[\"实现了\",{\"1\":{\"52\":1,\"71\":1}}],[\"实现了navigablemap\",{\"1\":{\"46\":1}}],[\"实现了访问顺序相关逻辑\",{\"1\":{\"46\":1}}],[\"实现\",{\"0\":{\"308\":1},\"1\":{\"32\":1,\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"321\":2,\"322\":2,\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"453\":1}}],[\"断开连接\",{\"1\":{\"711\":1}}],[\"断定型接口\",{\"1\":{\"87\":1}}],[\"断言型接口\",{\"1\":{\"87\":1}}],[\"<q>\",{\"1\":{\"674\":1}}],[\"<dl>\",{\"1\":{\"674\":1}}],[\"<div>我是div元素<\",{\"1\":{\"492\":1}}],[\"<div>我的<\",{\"1\":{\"470\":1,\"471\":1}}],[\"<div>\",{\"1\":{\"484\":3,\"485\":2,\"487\":2,\"492\":1,\"493\":1,\"494\":1,\"495\":1,\"506\":1,\"512\":1,\"674\":1}}],[\"<div>购物车<\",{\"1\":{\"470\":1,\"471\":1}}],[\"<div>分类<\",{\"1\":{\"470\":1,\"471\":1}}],[\"<div>主页<\",{\"1\":{\"470\":1,\"471\":1,\"472\":1}}],[\"<div><\",{\"1\":{\"464\":1}}],[\"<div\",{\"1\":{\"371\":2,\"470\":6,\"471\":6,\"472\":7,\"473\":6,\"474\":9,\"475\":9,\"477\":1,\"478\":4,\"479\":1,\"480\":4,\"484\":1,\"487\":2,\"492\":1,\"493\":1,\"494\":1,\"521\":14,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":3,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"546\":1,\"591\":4,\"592\":2,\"593\":2,\"594\":1,\"598\":2,\"599\":1,\"611\":1,\"633\":5,\"663\":1}}],[\"<ol>\",{\"1\":{\"674\":1}}],[\"<option\",{\"1\":{\"521\":8}}],[\"<video\",{\"1\":{\"659\":1}}],[\"<em>\",{\"1\":{\"657\":3,\"674\":1}}],[\"<form>\",{\"1\":{\"674\":1}}],[\"<footer>\",{\"1\":{\"657\":1}}],[\"<fulfilled>\",{\"1\":{\"202\":1,\"336\":1,\"343\":1}}],[\"<nav>\",{\"1\":{\"657\":1}}],[\"<a>\",{\"1\":{\"674\":1}}],[\"<audio\",{\"1\":{\"659\":1}}],[\"<aside>\",{\"1\":{\"657\":1}}],[\"<article>\",{\"1\":{\"657\":1}}],[\"<a\",{\"1\":{\"530\":1,\"532\":1}}],[\"<app>\",{\"1\":{\"499\":1}}],[\"<label>\",{\"1\":{\"674\":1}}],[\"<label\",{\"1\":{\"521\":4,\"628\":4}}],[\"<link>\",{\"1\":{\"638\":1,\"663\":1}}],[\"<link\",{\"1\":{\"633\":1,\"650\":1,\"663\":2}}],[\"<li>总价\",{\"1\":{\"536\":1}}],[\"<li>水浒传\",{\"1\":{\"536\":1}}],[\"<li>西游记\",{\"1\":{\"536\":1}}],[\"<li\",{\"1\":{\"487\":1,\"495\":1,\"524\":1,\"533\":2,\"537\":1}}],[\"<route\",{\"1\":{\"512\":2}}],[\"<router\",{\"1\":{\"506\":4,\"509\":2,\"512\":1,\"516\":1}}],[\"<ul>\",{\"1\":{\"495\":1,\"533\":2,\"536\":1,\"537\":1,\"674\":1}}],[\"<i>\",{\"1\":{\"657\":3,\"674\":1}}],[\"<i><\",{\"1\":{\"633\":2}}],[\"<i>呵呵呵<\",{\"1\":{\"492\":1}}],[\"<input>\",{\"1\":{\"674\":1}}],[\"<input\",{\"1\":{\"521\":13,\"528\":1,\"531\":3,\"532\":1,\"536\":2,\"628\":4,\"672\":1}}],[\"<img>\",{\"1\":{\"674\":1}}],[\"<img\",{\"1\":{\"415\":1,\"470\":4,\"471\":4,\"472\":5,\"473\":4,\"474\":8,\"475\":8,\"478\":8,\"521\":3,\"594\":1}}],[\"<keep\",{\"1\":{\"489\":2,\"516\":1}}],[\"<code>\",{\"1\":{\"674\":1}}],[\"<counter><\",{\"1\":{\"538\":5}}],[\"<component>\",{\"1\":{\"489\":1}}],[\"<child\",{\"1\":{\"488\":3,\"521\":1}}],[\"<cpn>\",{\"1\":{\"492\":1,\"495\":1}}],[\"<cpn><span>标题<\",{\"1\":{\"493\":1}}],[\"<cpn><span\",{\"1\":{\"493\":1}}],[\"<cpn><\",{\"1\":{\"492\":1}}],[\"<cpn><p>带有p标签的cpn个性化组件<\",{\"1\":{\"492\":1}}],[\"<cpn><button>具有按钮功能的cpn个性化组件<\",{\"1\":{\"492\":1}}],[\"<cpn\",{\"1\":{\"487\":2,\"494\":2}}],[\"<blockquote>\",{\"1\":{\"674\":1}}],[\"<b>\",{\"1\":{\"657\":3}}],[\"<br>\",{\"1\":{\"533\":1,\"674\":1}}],[\"<br\",{\"1\":{\"529\":2,\"532\":1}}],[\"<button\",{\"1\":{\"487\":1,\"494\":1,\"521\":7,\"528\":2,\"532\":2,\"534\":1,\"535\":1,\"538\":2,\"539\":1,\"546\":2,\"672\":1}}],[\"<body>\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"580\":1,\"663\":1,\"706\":1}}],[\"<p>right\",{\"1\":{\"594\":1}}],[\"<p>\",{\"1\":{\"546\":1,\"657\":1,\"674\":1}}],[\"<p>slot的基本使用<\",{\"1\":{\"492\":1}}],[\"<p>我是p元素<\",{\"1\":{\"492\":1}}],[\"<p>我是内容\",{\"1\":{\"484\":4}}],[\"<p><span\",{\"1\":{\"135\":1}}],[\"<my\",{\"1\":{\"484\":4,\"521\":1}}],[\"<main>\",{\"1\":{\"657\":1}}],[\"<main\",{\"1\":{\"477\":1}}],[\"<meta>\",{\"1\":{\"663\":2}}],[\"<meta\",{\"1\":{\"238\":3,\"239\":3,\"240\":3,\"241\":3,\"242\":3,\"243\":3,\"528\":3,\"529\":3,\"530\":3,\"531\":3,\"532\":3,\"533\":3,\"534\":3,\"535\":3,\"536\":3,\"537\":3,\"538\":3,\"539\":3,\"663\":5,\"674\":1,\"706\":3}}],[\"<textarea>\",{\"1\":{\"674\":1}}],[\"<template\",{\"1\":{\"485\":1,\"487\":2,\"492\":1,\"493\":2,\"494\":1,\"495\":2}}],[\"<template>\",{\"1\":{\"470\":1,\"471\":2,\"472\":3,\"473\":2,\"474\":2,\"475\":2,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"506\":1,\"512\":1,\"546\":1}}],[\"<tfoot><\",{\"1\":{\"670\":1}}],[\"<tbody>\",{\"1\":{\"670\":1}}],[\"<th>语文<\",{\"1\":{\"670\":1}}],[\"<th>数学<\",{\"1\":{\"670\":1}}],[\"<th>小红<\",{\"1\":{\"670\":1}}],[\"<th>小明<\",{\"1\":{\"670\":1}}],[\"<th><\",{\"1\":{\"670\":1}}],[\"<thead>\",{\"1\":{\"670\":1}}],[\"<title>网页标题<\",{\"1\":{\"663\":1}}],[\"<title>document<\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1}}],[\"<time\",{\"1\":{\"657\":1}}],[\"<time><time>9\",{\"1\":{\"657\":1}}],[\"<td>\",{\"1\":{\"674\":1}}],[\"<td>99<\",{\"1\":{\"670\":2}}],[\"<td>100<\",{\"1\":{\"670\":2}}],[\"<td\",{\"1\":{\"617\":1}}],[\"<tr>\",{\"1\":{\"617\":1,\"670\":3}}],[\"<table>\",{\"1\":{\"670\":1,\"674\":1}}],[\"<table\",{\"1\":{\"617\":1}}],[\"<tab\",{\"1\":{\"471\":1,\"472\":5,\"473\":5,\"474\":5,\"475\":5,\"478\":5}}],[\"<t\",{\"1\":{\"444\":1}}],[\"<>\",{\"1\":{\"443\":1}}],[\"<source\",{\"1\":{\"659\":2}}],[\"<strong>\",{\"1\":{\"657\":3,\"674\":1}}],[\"<style\",{\"1\":{\"471\":1,\"472\":2,\"474\":1,\"475\":1,\"479\":1,\"480\":1}}],[\"<style><\",{\"1\":{\"638\":1,\"663\":1}}],[\"<style>\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"477\":1,\"580\":1,\"663\":1}}],[\"<section>\",{\"1\":{\"657\":3}}],[\"<select>\",{\"1\":{\"674\":1}}],[\"<select\",{\"1\":{\"521\":2}}],[\"<svg><a\",{\"1\":{\"521\":1}}],[\"<span\",{\"1\":{\"495\":1,\"529\":2,\"530\":1,\"533\":1,\"539\":1,\"599\":1,\"611\":1}}],[\"<span>\",{\"1\":{\"535\":1,\"674\":1}}],[\"<span>我是cpn组件<\",{\"1\":{\"492\":1}}],[\"<span>hello\",{\"1\":{\"239\":1}}],[\"<slot><button>按钮<\",{\"1\":{\"492\":1}}],[\"<slot><\",{\"1\":{\"472\":1,\"479\":1,\"492\":1}}],[\"<slot\",{\"1\":{\"472\":2,\"473\":2,\"493\":3,\"495\":1}}],[\"<script\",{\"1\":{\"243\":1,\"485\":1,\"494\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"581\":2,\"650\":1,\"663\":1,\"706\":1}}],[\"<script>\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"470\":1,\"471\":2,\"472\":3,\"473\":2,\"474\":2,\"475\":2,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"494\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"546\":1,\"580\":2,\"581\":1,\"706\":1}}],[\"<hgroup>\",{\"1\":{\"657\":1}}],[\"<header>\",{\"1\":{\"657\":1}}],[\"<head>\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"580\":1,\"663\":1,\"706\":1}}],[\"<h1\",{\"1\":{\"534\":2,\"535\":4}}],[\"<h1>~<h6>\",{\"1\":{\"657\":2,\"674\":1}}],[\"<h1>有\",{\"1\":{\"532\":1}}],[\"<h1>hello<\",{\"1\":{\"529\":1}}],[\"<h1>\",{\"1\":{\"528\":1}}],[\"<h1>vuepress\",{\"1\":{\"135\":1}}],[\"<h2>您的爱好是\",{\"1\":{\"521\":1}}],[\"<h2>您选择的水果是\",{\"1\":{\"521\":2}}],[\"<h2>您选择的是\",{\"1\":{\"521\":1}}],[\"<h2>您选择的性别是\",{\"1\":{\"521\":1}}],[\"<h2>我是子组件<\",{\"1\":{\"494\":1}}],[\"<h2>我是标题2<\",{\"1\":{\"484\":1}}],[\"<h2>我是标题1<\",{\"1\":{\"484\":1}}],[\"<h2>我是标题<\",{\"1\":{\"484\":1}}],[\"<h2>\",{\"1\":{\"487\":1,\"539\":1}}],[\"<html>\",{\"1\":{\"663\":1}}],[\"<html\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":2,\"706\":1}}],[\"<\",{\"1\":{\"87\":1,\"135\":1,\"218\":3,\"238\":6,\"239\":6,\"240\":5,\"241\":5,\"242\":5,\"243\":5,\"298\":1,\"299\":1,\"301\":1,\"306\":3,\"470\":9,\"471\":12,\"472\":17,\"473\":12,\"474\":14,\"475\":14,\"477\":4,\"478\":7,\"479\":4,\"480\":4,\"484\":6,\"485\":4,\"487\":9,\"492\":6,\"493\":7,\"494\":6,\"495\":12,\"506\":2,\"512\":2,\"516\":1,\"521\":30,\"524\":1,\"528\":8,\"529\":7,\"530\":8,\"531\":7,\"532\":13,\"533\":14,\"534\":10,\"535\":11,\"536\":11,\"537\":9,\"538\":6,\"539\":8,\"546\":4,\"591\":2,\"592\":1,\"594\":1,\"598\":1,\"599\":1,\"611\":1,\"617\":3,\"628\":4,\"633\":4,\"659\":2,\"663\":5,\"670\":6,\"706\":6}}],[\"学习什么\",{\"1\":{\"87\":2}}],[\"函数类型\",{\"0\":{\"450\":1}}],[\"函数重载\",{\"0\":{\"437\":1}}],[\"函数有作用域\",{\"1\":{\"377\":1}}],[\"函数被\",{\"1\":{\"373\":1}}],[\"函数后立即执行\",{\"1\":{\"309\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":1,\"319\":1}}],[\"函数开始执行\",{\"1\":{\"302\":2,\"303\":1,\"304\":1}}],[\"函数终止条件是返回值或发生异常\",{\"1\":{\"302\":1}}],[\"函数柯里化\",{\"1\":{\"294\":1}}],[\"函数执行结束\",{\"1\":{\"302\":2,\"303\":1,\"304\":1}}],[\"函数执行上下文\",{\"1\":{\"277\":1}}],[\"函数执行完后\",{\"1\":{\"216\":1}}],[\"函数执行完毕也就被回收了\",{\"1\":{\"214\":1}}],[\"函数执行完毕\",{\"1\":{\"214\":1,\"217\":1}}],[\"函数调用函数执行过程\",{\"0\":{\"274\":1},\"1\":{\"274\":1}}],[\"函数调用栈\",{\"1\":{\"271\":1}}],[\"函数定义和指向函数对象\",{\"1\":{\"272\":1}}],[\"函数代码执行过程\",{\"0\":{\"272\":1}}],[\"函数等加入到globalobject中\",{\"1\":{\"271\":1}}],[\"函数就会进行预解析\",{\"1\":{\"264\":1}}],[\"函数不定参数function\",{\"1\":{\"240\":1}}],[\"函数优化\",{\"0\":{\"240\":1}}],[\"函数无需深拷贝\",{\"1\":{\"234\":3}}],[\"函数会丢失\",{\"1\":{\"233\":1}}],[\"函数式编程多用表达式\",{\"1\":{\"287\":1}}],[\"函数式编程\",{\"0\":{\"223\":1,\"287\":1},\"1\":{\"225\":1}}],[\"函数式接口参数\",{\"1\":{\"84\":1}}],[\"函数式接口\",{\"1\":{\"78\":1,\"80\":1}}],[\"函数赋值给变量再调用\",{\"1\":{\"360\":1}}],[\"函数赋值\",{\"1\":{\"218\":1}}],[\"函数实例销毁\",{\"1\":{\"217\":1}}],[\"函数实例被销毁\",{\"1\":{\"213\":1,\"217\":1,\"225\":1}}],[\"函数可以赋值给变量\",{\"1\":{\"216\":1}}],[\"函数出栈后\",{\"1\":{\"216\":1}}],[\"函数作用域销毁\",{\"1\":{\"216\":1}}],[\"函数作为返回值\",{\"1\":{\"212\":1}}],[\"函数作为参数时\",{\"1\":{\"431\":1}}],[\"函数作为参数传给另一个函数\",{\"1\":{\"332\":1}}],[\"函数作为参数\",{\"1\":{\"212\":1}}],[\"函数在每次执行时都会在栈空间创建新的变量\",{\"1\":{\"486\":1}}],[\"函数在栈内存上\",{\"1\":{\"216\":1}}],[\"函数在栈上运行\",{\"1\":{\"216\":1}}],[\"函数在函数调用栈上的执行流程\",{\"1\":{\"216\":1}}],[\"函数的名称相同\",{\"1\":{\"437\":1}}],[\"函数的重载\",{\"1\":{\"437\":1}}],[\"函数的剩余参数\",{\"0\":{\"434\":1}}],[\"函数的类型及使用\",{\"0\":{\"431\":1}}],[\"函数的使用\",{\"0\":{\"430\":1}}],[\"函数的地址\",{\"1\":{\"361\":2}}],[\"函数的参数和返回值类型\",{\"0\":{\"408\":1}}],[\"函数的参数\",{\"1\":{\"303\":1}}],[\"函数的函数\",{\"1\":{\"292\":1}}],[\"函数的单一职责原则\",{\"1\":{\"289\":1}}],[\"函数的父级作用于跟它定义的位置有关\",{\"1\":{\"272\":1}}],[\"函数的\",{\"1\":{\"228\":1}}],[\"函数的作用链就指定好了\",{\"1\":{\"211\":1}}],[\"函数的作用域是在函数调用的时候才决定的\",{\"1\":{\"211\":1}}],[\"函数的作用域在函数定义的时候就决定了\",{\"1\":{\"211\":1}}],[\"函数的执行结果\",{\"1\":{\"202\":1}}],[\"函数都是闭包\",{\"1\":{\"209\":1}}],[\"函数对象的内部状态不仅要包括函数代\",{\"1\":{\"209\":1}}],[\"函数中\",{\"1\":{\"206\":1}}],[\"函数返回的是\",{\"1\":{\"202\":1}}],[\"函数\",{\"0\":{\"382\":1},\"1\":{\"195\":1,\"227\":1,\"228\":1,\"244\":1,\"277\":1,\"296\":1,\"309\":2,\"319\":2,\"351\":6,\"373\":1,\"376\":1,\"377\":1}}],[\"函数型接口\",{\"1\":{\"87\":2}}],[\"供给型接口\",{\"1\":{\"87\":2}}],[\"四次挥手\",{\"0\":{\"714\":1}}],[\"四行代码实现\",{\"1\":{\"292\":1}}],[\"四\",{\"1\":{\"226\":1}}],[\"四大内置核心函数式接口\",{\"0\":{\"87\":1}}],[\"四者的区别\",{\"0\":{\"47\":1}}],[\"keep\",{\"0\":{\"516\":1},\"1\":{\"516\":1,\"695\":1}}],[\"keyframes\",{\"1\":{\"631\":3}}],[\"keyframes的标识符要对应\",{\"1\":{\"631\":1}}],[\"key来区分不同数据\",{\"1\":{\"533\":1}}],[\"keyup\",{\"1\":{\"532\":2}}],[\"key=\",{\"1\":{\"524\":1,\"533\":2}}],[\"key=$event\",{\"1\":{\"521\":1}}],[\"keyname\",{\"1\":{\"181\":2}}],[\"keys\",{\"1\":{\"181\":2,\"241\":2}}],[\"key是无序的\",{\"1\":{\"47\":1}}],[\"key\",{\"1\":{\"47\":1,\"49\":1,\"68\":1,\"176\":3,\"181\":4,\"218\":4,\"222\":4,\"234\":4,\"355\":2,\"521\":5,\"533\":2}}],[\"kobe\",{\"1\":{\"395\":1,\"399\":1,\"417\":1,\"423\":1,\"436\":1,\"448\":1,\"549\":1}}],[\"khtml\",{\"1\":{\"258\":1}}],[\"kind\",{\"1\":{\"191\":2}}],[\"k\",{\"1\":{\"85\":1,\"533\":2}}],[\"3xx\",{\"1\":{\"694\":1}}],[\"375~414\",{\"1\":{\"633\":1}}],[\"375px\",{\"1\":{\"633\":1,\"655\":1}}],[\"3d形变\",{\"1\":{\"631\":1}}],[\"36px\",{\"1\":{\"530\":1}}],[\"3px\",{\"1\":{\"472\":1,\"474\":1,\"475\":1,\"480\":1}}],[\"33\",{\"1\":{\"443\":3}}],[\"31\",{\"1\":{\"357\":1}}],[\"3秒后输出\",{\"1\":{\"307\":4}}],[\"302\",{\"1\":{\"694\":1}}],[\"301\",{\"1\":{\"694\":1}}],[\"304\",{\"1\":{\"689\":1,\"694\":1}}],[\"30px\",{\"1\":{\"642\":1,\"643\":4}}],[\"300px\",{\"1\":{\"653\":1}}],[\"3000\",{\"1\":{\"328\":1}}],[\"300\",{\"1\":{\"326\":1,\"327\":1,\"344\":1,\"345\":1,\"346\":1,\"347\":2}}],[\"30\",{\"1\":{\"212\":1,\"223\":3,\"290\":4,\"379\":2,\"395\":1,\"398\":1,\"404\":1,\"431\":2,\"432\":1,\"433\":1,\"434\":3,\"437\":1,\"450\":1,\"462\":1,\"549\":1,\"643\":2,\"647\":1}}],[\"39004291\",{\"1\":{\"206\":1,\"348\":1}}],[\"3nf\",{\"1\":{\"167\":2}}],[\"3\",{\"0\":{\"83\":1,\"152\":1,\"157\":1,\"196\":1,\"314\":1,\"318\":1,\"368\":1,\"373\":1,\"561\":1,\"566\":1,\"571\":1,\"576\":1,\"593\":1,\"607\":1,\"615\":1},\"1\":{\"82\":1,\"85\":1,\"87\":1,\"90\":1,\"187\":1,\"192\":1,\"196\":4,\"203\":1,\"205\":8,\"217\":1,\"218\":4,\"230\":3,\"234\":1,\"238\":2,\"239\":2,\"240\":1,\"241\":3,\"242\":2,\"243\":2,\"244\":1,\"251\":1,\"252\":3,\"253\":1,\"256\":1,\"282\":1,\"292\":4,\"293\":2,\"294\":1,\"298\":2,\"299\":5,\"303\":2,\"304\":1,\"306\":4,\"307\":5,\"317\":4,\"318\":4,\"325\":2,\"332\":1,\"336\":1,\"341\":1,\"349\":5,\"351\":1,\"355\":1,\"362\":2,\"363\":1,\"371\":3,\"379\":1,\"384\":2,\"385\":1,\"398\":1,\"415\":1,\"424\":1,\"443\":3,\"449\":1,\"460\":1,\"484\":1,\"505\":1,\"528\":2,\"533\":2,\"536\":1,\"590\":1,\"607\":1,\"615\":1,\"632\":2}}],[\"320~375\",{\"1\":{\"633\":1}}],[\"320px\",{\"1\":{\"633\":1}}],[\"321\",{\"1\":{\"408\":1,\"410\":1,\"411\":2,\"422\":1}}],[\"32\",{\"1\":{\"15\":2,\"357\":1}}],[\"示例\",{\"1\":{\"488\":1}}],[\"示例代码\",{\"1\":{\"273\":1,\"274\":1}}],[\"示例2\",{\"1\":{\"82\":1,\"84\":1}}],[\"示例1\",{\"1\":{\"82\":1,\"84\":1}}],[\"多媒体标签\",{\"0\":{\"659\":1}}],[\"多媒体内容\",{\"1\":{\"656\":1}}],[\"多根轴线的对齐方式\",{\"1\":{\"645\":1}}],[\"多行文字\",{\"0\":{\"603\":1,\"611\":1}}],[\"多选框\",{\"1\":{\"521\":1}}],[\"多种元素的组合\",{\"1\":{\"406\":1}}],[\"多态的目的是为了写出更加具备通用性的代码\",{\"1\":{\"392\":1}}],[\"多态\",{\"0\":{\"392\":1}}],[\"多个组件需要调用经过变化的数据时使用\",{\"1\":{\"549\":1}}],[\"多个界面共享的状态\",{\"1\":{\"544\":1}}],[\"多个函数连环调用\",{\"1\":{\"360\":1}}],[\"多个\",{\"1\":{\"346\":1,\"632\":1}}],[\"多个子函数使用同一个闭包对象\",{\"1\":{\"217\":1}}],[\"多次调用\",{\"1\":{\"336\":1,\"337\":1}}],[\"多次回调\",{\"1\":{\"307\":1}}],[\"多层嵌套ajax\",{\"1\":{\"243\":1}}],[\"多版本并发控制\",{\"0\":{\"170\":1}}],[\"多条语句\",{\"1\":{\"82\":1}}],[\"多线程操作字符串缓冲区下操作大量数据\",{\"1\":{\"14\":1}}],[\"​\",{\"1\":{\"82\":4}}],[\"rules\",{\"1\":{\"650\":1}}],[\"runtime\",{\"1\":{\"499\":2,\"500\":1}}],[\"running\",{\"1\":{\"392\":1,\"424\":2,\"631\":1}}],[\"runnable\",{\"0\":{\"81\":1},\"1\":{\"81\":1}}],[\"runable\",{\"1\":{\"81\":1}}],[\"run\",{\"1\":{\"81\":1,\"320\":1}}],[\"rgb\",{\"1\":{\"633\":1}}],[\"rgba\",{\"1\":{\"128\":1,\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"624\":1,\"633\":2}}],[\"right\",{\"1\":{\"422\":2,\"424\":1,\"452\":1,\"456\":4,\"457\":5,\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"493\":1,\"594\":1,\"607\":2,\"621\":1,\"627\":1,\"629\":5,\"630\":1}}],[\"righturl\",{\"1\":{\"332\":8}}],[\"radio\",{\"1\":{\"521\":2,\"628\":3,\"639\":1,\"673\":1}}],[\"range\",{\"1\":{\"628\":1}}],[\"rangeiterator\",{\"1\":{\"306\":6}}],[\"random>=0\",{\"1\":{\"535\":3}}],[\"random=math\",{\"1\":{\"535\":1}}],[\"random\",{\"1\":{\"87\":1,\"535\":3}}],[\"race\",{\"0\":{\"327\":1,\"346\":1},\"1\":{\"299\":1,\"327\":4,\"346\":2}}],[\"rr\",{\"1\":{\"171\":1}}],[\"rc\",{\"1\":{\"171\":1}}],[\"rotate3d\",{\"1\":{\"631\":1}}],[\"rotate\",{\"1\":{\"631\":1,\"633\":1,\"643\":1}}],[\"route\",{\"1\":{\"512\":2,\"513\":2}}],[\"route和router区别\",{\"0\":{\"510\":1}}],[\"routes\",{\"1\":{\"473\":2,\"481\":2,\"505\":3,\"506\":1,\"507\":2}}],[\"router中内置的组件\",{\"1\":{\"506\":1}}],[\"router映射关系步骤\",{\"0\":{\"506\":1}}],[\"router框架\",{\"0\":{\"505\":1}}],[\"router路由\",{\"0\":{\"502\":1}}],[\"router\",{\"0\":{\"481\":1},\"1\":{\"473\":4,\"481\":4,\"504\":1,\"505\":5,\"506\":3,\"507\":3,\"509\":4,\"512\":1,\"513\":3,\"516\":1}}],[\"rootstate\",{\"1\":{\"556\":3}}],[\"root\",{\"1\":{\"276\":1,\"623\":1}}],[\"row\",{\"1\":{\"170\":1,\"645\":1}}],[\"roll\",{\"1\":{\"170\":1}}],[\"r−i​\",{\"1\":{\"133\":1}}],[\"r−i+1\",{\"1\":{\"133\":1}}],[\"r+i=1∑r​ωi\",{\"1\":{\"133\":1}}],[\"r\",{\"1\":{\"87\":2,\"309\":4,\"319\":4,\"398\":6,\"657\":1}}],[\"r>\",{\"1\":{\"87\":2}}],[\"revalidate\",{\"1\":{\"687\":1}}],[\"reverse\",{\"1\":{\"525\":1,\"631\":2}}],[\"rem\",{\"1\":{\"655\":1}}],[\"rel=\",{\"1\":{\"633\":1,\"650\":1,\"663\":2}}],[\"relative\",{\"1\":{\"607\":3,\"615\":3,\"629\":2}}],[\"render\",{\"1\":{\"499\":1,\"500\":1,\"545\":1,\"580\":1,\"582\":2}}],[\"referrer\",{\"1\":{\"633\":1}}],[\"referrerpolicy\",{\"1\":{\"633\":1}}],[\"referenceerror\",{\"1\":{\"238\":2}}],[\"reflow\",{\"1\":{\"586\":1}}],[\"ref=\",{\"1\":{\"488\":1}}],[\"repeat\",{\"1\":{\"627\":6}}],[\"repeatable\",{\"1\":{\"164\":1,\"166\":1}}],[\"repaint\",{\"1\":{\"587\":1}}],[\"replacestate\",{\"1\":{\"503\":1}}],[\"replace\",{\"1\":{\"473\":1,\"474\":1,\"475\":1,\"480\":1,\"507\":1,\"510\":1}}],[\"rectangle\",{\"1\":{\"398\":4}}],[\"react\",{\"1\":{\"443\":1,\"464\":1,\"582\":1}}],[\"reason\",{\"1\":{\"309\":5,\"312\":2,\"313\":2,\"314\":2,\"316\":4,\"317\":2,\"318\":5,\"319\":5,\"322\":2,\"324\":2,\"326\":3,\"328\":2,\"345\":1}}],[\"readonly\",{\"1\":{\"395\":2,\"448\":1}}],[\"readonly修饰符\",{\"0\":{\"395\":1}}],[\"read\",{\"1\":{\"164\":1,\"166\":3,\"170\":1,\"171\":1}}],[\"reader\",{\"1\":{\"37\":2}}],[\"required\",{\"1\":{\"487\":1,\"673\":1}}],[\"require\",{\"1\":{\"307\":1}}],[\"request\",{\"1\":{\"423\":5,\"695\":1}}],[\"requestdata4\",{\"1\":{\"332\":2}}],[\"requestdata3\",{\"1\":{\"332\":2}}],[\"requestdata2\",{\"1\":{\"332\":2}}],[\"requestdata1\",{\"1\":{\"332\":2}}],[\"requestdata\",{\"1\":{\"307\":13}}],[\"requestanimationframe\",{\"1\":{\"249\":1}}],[\"regexp\",{\"1\":{\"234\":5}}],[\"rejection\",{\"1\":{\"321\":1}}],[\"rejected\",{\"1\":{\"309\":4,\"312\":4,\"313\":3,\"314\":4,\"316\":4,\"317\":1,\"318\":4,\"319\":4,\"326\":2,\"328\":3,\"334\":5,\"337\":3,\"345\":1,\"347\":1}}],[\"reject\",{\"0\":{\"311\":1,\"324\":1,\"342\":1,\"343\":1},\"1\":{\"202\":1,\"203\":2,\"204\":1,\"205\":4,\"206\":2,\"243\":6,\"309\":23,\"312\":5,\"313\":5,\"314\":6,\"316\":5,\"317\":3,\"318\":11,\"319\":24,\"320\":3,\"321\":1,\"322\":3,\"323\":2,\"324\":5,\"325\":7,\"326\":8,\"327\":8,\"328\":13,\"332\":2,\"334\":2,\"336\":6,\"337\":13,\"338\":4,\"340\":1,\"341\":11,\"342\":5,\"343\":3,\"344\":8,\"345\":6,\"346\":5,\"347\":17,\"348\":2}}],[\"resource\",{\"1\":{\"707\":1}}],[\"resolvepromise\",{\"1\":{\"309\":7,\"319\":8}}],[\"resolve\",{\"0\":{\"311\":1,\"323\":1,\"340\":1,\"341\":1},\"1\":{\"202\":4,\"203\":4,\"205\":4,\"206\":2,\"243\":6,\"251\":2,\"252\":4,\"253\":8,\"256\":2,\"307\":2,\"309\":16,\"312\":5,\"313\":5,\"314\":3,\"316\":4,\"317\":4,\"318\":10,\"319\":17,\"320\":3,\"321\":2,\"322\":6,\"323\":9,\"324\":1,\"325\":9,\"326\":14,\"327\":7,\"328\":9,\"332\":2,\"334\":2,\"336\":33,\"337\":6,\"338\":3,\"340\":5,\"341\":9,\"342\":1,\"343\":4,\"344\":12,\"345\":9,\"346\":4,\"347\":11,\"348\":2,\"349\":3,\"555\":2}}],[\"response\",{\"1\":{\"695\":1,\"706\":1}}],[\"reset\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"477\":1,\"628\":1}}],[\"res3\",{\"1\":{\"307\":18,\"336\":4}}],[\"res2\",{\"1\":{\"307\":22,\"336\":4}}],[\"res1\",{\"1\":{\"307\":22,\"336\":4}}],[\"results\",{\"1\":{\"325\":3,\"326\":5}}],[\"result3\",{\"1\":{\"303\":4}}],[\"result2\",{\"1\":{\"303\":5,\"431\":2,\"437\":2}}],[\"result1\",{\"1\":{\"303\":5,\"431\":2}}],[\"result\",{\"1\":{\"242\":2,\"307\":4,\"309\":3,\"312\":2,\"313\":2,\"314\":2,\"316\":2,\"318\":3,\"319\":3,\"320\":5,\"325\":4,\"332\":8,\"364\":4,\"379\":2,\"403\":7,\"437\":2}}],[\"res\",{\"1\":{\"202\":2,\"203\":3,\"307\":4,\"316\":2,\"317\":4,\"318\":4,\"321\":2,\"322\":2,\"323\":2,\"325\":2,\"326\":4,\"327\":3,\"328\":4,\"332\":4,\"336\":22,\"337\":9,\"338\":3,\"341\":10,\"343\":3,\"344\":2,\"345\":4,\"346\":3,\"347\":7,\"555\":1}}],[\"rest参数\",{\"1\":{\"196\":2}}],[\"redo\",{\"1\":{\"164\":1}}],[\"red\",{\"1\":{\"135\":1,\"474\":1,\"475\":2,\"478\":3,\"480\":2,\"521\":1,\"530\":1,\"532\":1,\"591\":1,\"592\":1,\"593\":1,\"598\":1,\"599\":1,\"611\":1,\"617\":1,\"633\":1,\"642\":1,\"643\":1,\"654\":1}}],[\"reduceright\",{\"1\":{\"293\":1}}],[\"reduce\",{\"1\":{\"90\":3,\"242\":4,\"293\":2}}],[\"redirect有两次请求\",{\"1\":{\"24\":1}}],[\"redirect效率低\",{\"1\":{\"24\":1}}],[\"redirect一般用于用户注销登录时返回主页面或者跳转到其他网站\",{\"1\":{\"24\":1}}],[\"redirect不能共享数据\",{\"1\":{\"24\":1}}],[\"redirect是服务器根据逻辑\",{\"1\":{\"24\":1}}],[\"redirect\",{\"0\":{\"24\":1},\"1\":{\"473\":1,\"481\":1,\"506\":1,\"507\":1,\"512\":1}}],[\"reentrantlock\",{\"1\":{\"52\":1,\"71\":1}}],[\"returnedtarget\",{\"1\":{\"230\":2}}],[\"return和大括号都可省略\",{\"1\":{\"78\":1}}],[\"return\",{\"0\":{\"304\":1},\"1\":{\"35\":6,\"78\":1,\"82\":3,\"84\":1,\"87\":1,\"184\":3,\"185\":1,\"186\":1,\"189\":1,\"192\":1,\"202\":6,\"203\":3,\"206\":1,\"212\":4,\"215\":1,\"217\":1,\"218\":5,\"221\":2,\"222\":2,\"223\":6,\"224\":1,\"234\":7,\"239\":1,\"240\":4,\"242\":2,\"243\":4,\"244\":3,\"282\":2,\"283\":2,\"288\":2,\"290\":6,\"292\":4,\"293\":5,\"298\":3,\"299\":4,\"301\":5,\"304\":3,\"306\":9,\"307\":4,\"309\":4,\"319\":4,\"320\":1,\"321\":1,\"322\":5,\"323\":3,\"324\":1,\"325\":4,\"326\":3,\"327\":2,\"328\":3,\"332\":5,\"336\":5,\"337\":4,\"348\":3,\"360\":1,\"363\":1,\"376\":2,\"377\":2,\"378\":2,\"379\":5,\"393\":1,\"394\":1,\"396\":1,\"398\":3,\"403\":2,\"404\":1,\"407\":2,\"408\":1,\"431\":4,\"434\":2,\"437\":2,\"440\":1,\"444\":1,\"450\":2,\"474\":3,\"475\":4,\"480\":4,\"484\":1,\"486\":1,\"487\":2,\"488\":3,\"494\":1,\"495\":1,\"528\":1,\"529\":1,\"536\":1,\"537\":4,\"538\":2,\"539\":1,\"549\":7,\"555\":1,\"556\":3}}],[\"表格单元格\",{\"1\":{\"589\":1}}],[\"表单数据是简单请求\",{\"1\":{\"707\":1}}],[\"表单元素\",{\"0\":{\"628\":1}}],[\"表单项\",{\"1\":{\"531\":1}}],[\"表单中可以取出\",{\"1\":{\"528\":1}}],[\"表现\",{\"1\":{\"333\":1}}],[\"表示释放连接\",{\"1\":{\"714\":1}}],[\"表示\",{\"1\":{\"711\":1}}],[\"表示提供网站服务\",{\"1\":{\"704\":1}}],[\"表示我们要替换几个元素\",{\"1\":{\"525\":1}}],[\"表示无论\",{\"1\":{\"338\":1}}],[\"表示该属性不可遍历输出\",{\"1\":{\"182\":1}}],[\"表示总是执行\",{\"1\":{\"13\":1}}],[\"表名作用类似\",{\"1\":{\"168\":1}}],[\"表名\",{\"1\":{\"168\":3}}],[\"表达式\",{\"0\":{\"80\":1},\"1\":{\"239\":1,\"287\":1,\"537\":1}}],[\"替代\",{\"1\":{\"337\":1}}],[\"替代匿名内部类\",{\"0\":{\"79\":1}}],[\"替换元素\",{\"1\":{\"525\":2}}],[\"替换为\",{\"1\":{\"96\":1}}],[\"替换\",{\"1\":{\"58\":1}}],[\"yield\",{\"1\":{\"299\":1,\"302\":3,\"303\":3,\"304\":4,\"305\":3,\"306\":4,\"307\":3}}],[\"yyyy\",{\"1\":{\"95\":7,\"96\":1}}],[\"y\",{\"1\":{\"78\":6,\"82\":2,\"88\":1,\"90\":2,\"212\":3,\"217\":11,\"223\":6,\"238\":3,\"290\":8,\"292\":2,\"309\":4,\"319\":4,\"362\":2,\"384\":2,\"410\":5,\"411\":6,\"414\":1,\"432\":2,\"433\":2,\"443\":5,\"627\":1,\"712\":3}}],[\"xss\",{\"1\":{\"703\":1}}],[\"xhtml\",{\"1\":{\"663\":1}}],[\"xml\",{\"1\":{\"648\":1}}],[\"xyjnum\",{\"1\":{\"536\":5}}],[\"xyjprice\",{\"1\":{\"536\":3}}],[\"xyz\",{\"1\":{\"91\":1}}],[\"xx\",{\"1\":{\"528\":1}}],[\"xxx\",{\"1\":{\"90\":1,\"505\":4,\"556\":2,\"666\":1}}],[\"xxxclassloader\",{\"1\":{\"31\":1}}],[\"xlink\",{\"1\":{\"521\":2}}],[\"xable\",{\"1\":{\"341\":1}}],[\"x\",{\"1\":{\"78\":10,\"82\":2,\"84\":2,\"90\":2,\"91\":2,\"169\":3,\"212\":3,\"217\":13,\"223\":6,\"238\":3,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"290\":8,\"292\":2,\"293\":22,\"309\":22,\"319\":22,\"341\":1,\"362\":2,\"379\":2,\"384\":4,\"410\":5,\"411\":6,\"414\":1,\"432\":1,\"433\":2,\"443\":4,\"485\":2,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"627\":1,\"663\":2,\"706\":1,\"707\":1,\"712\":3}}],[\"括号可省略\",{\"1\":{\"78\":1,\"521\":1}}],[\"有副作用\",{\"1\":{\"700\":1}}],[\"有效\",{\"1\":{\"674\":5}}],[\"有利于\",{\"1\":{\"658\":1}}],[\"有参混入\",{\"1\":{\"654\":1}}],[\"有关快捷值\",{\"1\":{\"646\":1}}],[\"有下面六种属性可以设置在项目上\",{\"1\":{\"646\":1}}],[\"有下面六种属性可以设置在容器上\",{\"1\":{\"645\":1}}],[\"有相邻兄弟\",{\"1\":{\"639\":1}}],[\"有时候它也可以称为一个元素的物理或图形尺寸\",{\"1\":{\"636\":1}}],[\"有\",{\"1\":{\"528\":1,\"539\":1,\"663\":1}}],[\"有默认值的参数\",{\"1\":{\"433\":1}}],[\"有点像集合\",{\"1\":{\"406\":1}}],[\"有点反常理\",{\"1\":{\"369\":1}}],[\"有四个子函数\",{\"1\":{\"377\":1}}],[\"有四个函数\",{\"1\":{\"376\":1}}],[\"有五种标志位\",{\"1\":{\"357\":1}}],[\"有以下规则\",{\"1\":{\"351\":1}}],[\"有三种状态\",{\"1\":{\"334\":1}}],[\"有三种等价方法\",{\"1\":{\"282\":1}}],[\"有一个\",{\"1\":{\"264\":1}}],[\"有一个参数\",{\"1\":{\"78\":1}}],[\"有返回值\",{\"1\":{\"78\":1}}],[\"有序\",{\"0\":{\"43\":1},\"1\":{\"44\":1,\"46\":1}}],[\"物理内存\",{\"1\":{\"75\":1}}],[\"存入\",{\"1\":{\"677\":1}}],[\"存在安全风险\",{\"1\":{\"382\":1}}],[\"存取描述符\",{\"0\":{\"184\":1},\"1\":{\"182\":1}}],[\"存类加载的一些信息及核心类库\",{\"1\":{\"74\":1}}],[\"存储位置\",{\"1\":{\"678\":1,\"681\":1}}],[\"存储容量\",{\"1\":{\"678\":1,\"681\":1}}],[\"存储量小\",{\"1\":{\"676\":1}}],[\"存储当前对象和拷贝对象的对应关系\",{\"1\":{\"234\":1}}],[\"存储\",{\"1\":{\"47\":1,\"656\":1}}],[\"存储的元素是无序的\",{\"1\":{\"47\":1}}],[\"存储的元素是有序的\",{\"1\":{\"47\":2}}],[\"笔记正在火速编辑中\",{\"1\":{\"63\":1}}],[\"gzip\",{\"1\":{\"695\":2}}],[\"gbk\",{\"1\":{\"663\":1}}],[\"gfilter\",{\"1\":{\"537\":2}}],[\"gt\",{\"1\":{\"535\":3}}],[\"guide\",{\"1\":{\"489\":1}}],[\"gradient\",{\"1\":{\"633\":2}}],[\"grid\",{\"1\":{\"589\":3}}],[\"green\",{\"1\":{\"475\":1}}],[\"groupingby\",{\"1\":{\"90\":1}}],[\"grow属性都为\",{\"1\":{\"646\":1}}],[\"grow\",{\"1\":{\"59\":1,\"646\":2}}],[\"girlfriend\",{\"1\":{\"417\":3}}],[\"github仓库\",{\"1\":{\"328\":1}}],[\"githubusercontent\",{\"1\":{\"206\":1,\"348\":1}}],[\"g\",{\"1\":{\"293\":2,\"589\":1,\"650\":1}}],[\"genderfilter\",{\"1\":{\"537\":2}}],[\"gender\",{\"1\":{\"533\":7,\"537\":5}}],[\"genfn\",{\"1\":{\"307\":2}}],[\"generator\",{\"1\":{\"302\":4,\"303\":5,\"304\":5,\"305\":4,\"307\":7,\"331\":2}}],[\"gec\",{\"1\":{\"277\":1}}],[\"gec开始执行代码\",{\"1\":{\"271\":1}}],[\"gec被放入到ecs中\",{\"1\":{\"271\":1}}],[\"gec被放入到ecs中里面包含两部分内容\",{\"1\":{\"271\":1}}],[\"getlength\",{\"1\":{\"444\":3}}],[\"getlength<t\",{\"1\":{\"444\":1}}],[\"getelementbyid\",{\"1\":{\"415\":1,\"454\":1,\"539\":7,\"660\":1}}],[\"getprototypeof\",{\"1\":{\"355\":2}}],[\"getcontent\",{\"1\":{\"660\":1}}],[\"getc\",{\"1\":{\"333\":2}}],[\"getclass\",{\"1\":{\"31\":1}}],[\"getb\",{\"1\":{\"333\":2}}],[\"getdata\",{\"1\":{\"364\":1}}],[\"getdatabyasync\",{\"1\":{\"307\":2}}],[\"getdatabygenerator\",{\"1\":{\"307\":4}}],[\"getdog\",{\"1\":{\"93\":3}}],[\"gethours\",{\"1\":{\"291\":1}}],[\"getownpropertydescriptors\",{\"1\":{\"186\":2,\"335\":1}}],[\"getownpropertydescriptor\",{\"1\":{\"186\":3}}],[\"getters\",{\"0\":{\"549\":1},\"1\":{\"545\":1,\"549\":3,\"556\":6}}],[\"getter\",{\"0\":{\"396\":1},\"1\":{\"182\":1,\"184\":2,\"218\":2,\"222\":1,\"396\":2,\"522\":1,\"549\":4,\"556\":1}}],[\"getarea\",{\"1\":{\"398\":4}}],[\"geta\",{\"1\":{\"221\":4,\"332\":2,\"333\":2}}],[\"getage\",{\"1\":{\"93\":3}}],[\"getaverage\",{\"1\":{\"91\":1}}],[\"getzoo\",{\"1\":{\"93\":1}}],[\"getsum\",{\"1\":{\"91\":1}}],[\"getsalary\",{\"1\":{\"90\":1}}],[\"getmap\",{\"1\":{\"488\":3}}],[\"getmax\",{\"1\":{\"91\":1}}],[\"getminutes\",{\"1\":{\"291\":1}}],[\"getmin\",{\"1\":{\"91\":1}}],[\"getname\",{\"1\":{\"87\":2,\"393\":2,\"394\":2,\"706\":2}}],[\"getnumlist\",{\"1\":{\"87\":2}}],[\"get\",{\"0\":{\"700\":1},\"1\":{\"87\":3,\"88\":1,\"182\":4,\"184\":4,\"185\":1,\"186\":3,\"218\":2,\"222\":2,\"234\":2,\"243\":4,\"396\":1,\"423\":1,\"671\":1,\"672\":1,\"694\":1,\"700\":6,\"706\":3,\"707\":2}}],[\"getvalue\",{\"1\":{\"84\":2}}],[\"getitem\",{\"1\":{\"83\":2}}],[\"get产生一个tcp数据包\",{\"1\":{\"23\":1}}],[\"get产生的url地址可收藏为书签\",{\"1\":{\"23\":1}}],[\"get参数通过url传递\",{\"1\":{\"23\":1}}],[\"get比post更不安全\",{\"1\":{\"23\":1}}],[\"get只接受ascii字符\",{\"1\":{\"23\":1}}],[\"get请求在url中传送的参数是有长度限制的\",{\"1\":{\"23\":1}}],[\"get请求参数会被完整保留在浏览器历史记录里\",{\"1\":{\"23\":1}}],[\"get请求只能进行url编码\",{\"1\":{\"23\":1}}],[\"get请求会被浏览器主动缓存\",{\"1\":{\"23\":1}}],[\"get在浏览器回退\",{\"1\":{\"23\":1}}],[\"get和post的区别\",{\"0\":{\"23\":1}}],[\"go\",{\"1\":{\"270\":1,\"277\":1,\"381\":2,\"495\":1,\"503\":1}}],[\"google\",{\"1\":{\"262\":2,\"263\":1,\"267\":1,\"666\":3}}],[\"global\",{\"1\":{\"211\":6,\"212\":1,\"217\":4,\"218\":1,\"270\":1,\"271\":1,\"274\":1,\"277\":1,\"360\":2}}],[\"gkh\",{\"1\":{\"91\":1}}],[\"简写属性\",{\"1\":{\"627\":1,\"631\":1}}],[\"简称\",{\"1\":{\"588\":1,\"662\":1}}],[\"简称fec\",{\"1\":{\"272\":1}}],[\"简易实现\",{\"0\":{\"543\":1}}],[\"简单理解\",{\"1\":{\"712\":1,\"714\":1}}],[\"简单请求主要满足以下两大条件\",{\"1\":{\"707\":1}}],[\"简单请求不会触发\",{\"1\":{\"707\":1}}],[\"简单说来\",{\"1\":{\"645\":1}}],[\"简单选择器\",{\"1\":{\"623\":1}}],[\"简单使用\",{\"0\":{\"546\":1}}],[\"简单的讲\",{\"1\":{\"542\":1}}],[\"简单实现\",{\"0\":{\"470\":1}}],[\"简单案例\",{\"0\":{\"428\":1}}],[\"简化柯里化的代码\",{\"1\":{\"290\":1}}],[\"简化编程\",{\"1\":{\"248\":1}}],[\"简洁写法\",{\"1\":{\"184\":2}}],[\"简\",{\"0\":{\"59\":1}}],[\"提交\",{\"1\":{\"672\":1,\"707\":2}}],[\"提交事件不再重载页面\",{\"1\":{\"521\":1}}],[\"提高可访问性\",{\"1\":{\"658\":1}}],[\"提高页面加载速度\",{\"1\":{\"633\":1,\"684\":1}}],[\"提高vue渲染效率\",{\"1\":{\"533\":1}}],[\"提高代码可读性\",{\"1\":{\"293\":1}}],[\"提高代码的复用性\",{\"1\":{\"27\":1}}],[\"提前\",{\"1\":{\"405\":1}}],[\"提前返回\",{\"1\":{\"291\":1}}],[\"提出\",{\"1\":{\"248\":1}}],[\"提示\",{\"1\":{\"145\":1,\"230\":1,\"234\":1,\"532\":1,\"586\":1,\"710\":1}}],[\"提示容器\",{\"1\":{\"119\":1}}],[\"提供一些默认值default\",{\"1\":{\"487\":1}}],[\"提供的\",{\"1\":{\"337\":1}}],[\"提供事务支持\",{\"1\":{\"162\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"118\":1}}],[\"提供对集合的查找\",{\"1\":{\"58\":1}}],[\"提取信息到新的集合中\",{\"1\":{\"90\":1}}],[\"倍\",{\"1\":{\"53\":1,\"72\":1}}],[\"就发送\",{\"1\":{\"714\":1}}],[\"就发生了内存泄漏\",{\"1\":{\"224\":1}}],[\"就能直接解析\",{\"1\":{\"704\":1}}],[\"就删除后面所有的元素\",{\"1\":{\"525\":1}}],[\"就是把一些重复的代码抽离出来\",{\"1\":{\"654\":1}}],[\"就是函数的重载\",{\"1\":{\"437\":1}}],[\"就是必须结合联合类型\",{\"1\":{\"422\":1}}],[\"就\",{\"1\":{\"334\":1}}],[\"就返回\",{\"1\":{\"328\":1}}],[\"就认为是不可用的对象\",{\"1\":{\"276\":1}}],[\"就会有第三个参数为根节点状态rootstate\",{\"1\":{\"556\":1}}],[\"就会嵌套\",{\"1\":{\"333\":1}}],[\"就会根据函数体创建一个函数执行上下文\",{\"1\":{\"272\":1}}],[\"就会用现在的机器码替换原来的字节码进行执行\",{\"1\":{\"263\":1}}],[\"就会造成内存泄漏\",{\"1\":{\"224\":1,\"225\":1}}],[\"就无法销毁\",{\"1\":{\"224\":1}}],[\"就只有一级\",{\"1\":{\"211\":1}}],[\"就同时成为了自由变量\",{\"1\":{\"210\":1}}],[\"就可以查到数据了\",{\"1\":{\"174\":1}}],[\"就不会产生并发\",{\"1\":{\"53\":1,\"72\":1}}],[\"就像完全没有泛型一样\",{\"1\":{\"27\":1}}],[\"只支持\",{\"1\":{\"706\":1}}],[\"只支持表级锁\",{\"1\":{\"162\":1}}],[\"只可以在当前vue实例中使用\",{\"1\":{\"537\":1}}],[\"只会调用一次\",{\"1\":{\"522\":1}}],[\"只读属性\",{\"1\":{\"522\":1}}],[\"只读属性是可以在构造器中赋值\",{\"1\":{\"395\":1}}],[\"只触发一次回调\",{\"1\":{\"521\":1}}],[\"只渲染元素和组件一次\",{\"1\":{\"521\":1}}],[\"只是保存了\",{\"1\":{\"361\":1}}],[\"只接收一部分参数\",{\"1\":{\"291\":1}}],[\"只传递给函数一部分参数来调用它\",{\"1\":{\"289\":1}}],[\"只提供对外的接口\",{\"1\":{\"222\":1}}],[\"只调用一次父类构造函数\",{\"1\":{\"284\":1}}],[\"只调用\",{\"1\":{\"218\":1}}],[\"只有下载好并执行完脚本才会继续解析\",{\"1\":{\"581\":1}}],[\"只有匹配的组件会被缓存\",{\"1\":{\"516\":1}}],[\"只有一个完整的html页面\",{\"1\":{\"582\":1}}],[\"只有一个参数时\",{\"1\":{\"78\":1}}],[\"只有一种例外情况\",{\"1\":{\"493\":1}}],[\"只有\",{\"1\":{\"377\":1}}],[\"只有两种转变\",{\"1\":{\"334\":1}}],[\"只有父类方法不可枚举\",{\"1\":{\"285\":1}}],[\"只有当所有子函数的作用域链都被释放才会释放父函数的闭包对象\",{\"1\":{\"217\":1}}],[\"只要它所处的一级域名已经备案\",{\"1\":{\"704\":1}}],[\"只要不考虑兼容\",{\"1\":{\"613\":1}}],[\"只要有报错\",{\"1\":{\"334\":1}}],[\"只要有一个子函数没有被销毁\",{\"1\":{\"224\":1}}],[\"只要任意一个\",{\"1\":{\"328\":1}}],[\"只要遇到了\",{\"1\":{\"205\":2}}],[\"只要方法的参数是函数式接口都可以用\",{\"0\":{\"80\":1}}],[\"只取文本前几个字符创建索引\",{\"1\":{\"172\":1}}],[\"只适用于字符串类型的数据\",{\"1\":{\"172\":1}}],[\"只删除表中的数据\",{\"1\":{\"168\":1}}],[\"只锁定当前链表或红黑二叉树的首节点\",{\"1\":{\"53\":1,\"72\":1}}],[\"只能接收\",{\"1\":{\"700\":1}}],[\"只能接受对象\",{\"1\":{\"234\":1}}],[\"只能进行\",{\"1\":{\"700\":1}}],[\"只能向左浮动或者向右浮动\",{\"1\":{\"630\":1}}],[\"只能用在a元素\",{\"1\":{\"623\":2}}],[\"只能用extend单继承\",{\"1\":{\"8\":1}}],[\"只能写在标签体内\",{\"1\":{\"529\":1}}],[\"只能实现单继承\",{\"1\":{\"453\":1}}],[\"只能与\",{\"1\":{\"368\":1}}],[\"只能通过类来调用\",{\"1\":{\"335\":1}}],[\"只能继承父类构造函数的属性和方法\",{\"1\":{\"280\":1}}],[\"只能采用变通写法\",{\"1\":{\"240\":1}}],[\"只能声明一次\",{\"1\":{\"238\":2}}],[\"只能在当前作用域及其子作用域访问\",{\"1\":{\"210\":1}}],[\"只能操作一次\",{\"1\":{\"92\":1}}],[\"只能代理实现了接口的类\",{\"1\":{\"32\":1}}],[\"只能引用integer的值\",{\"1\":{\"28\":1}}],[\"只能有抽象方法\",{\"1\":{\"8\":1}}],[\"采用单线程的事件循环方式管理异步任务\",{\"1\":{\"331\":1}}],[\"采用的是词法作用域\",{\"1\":{\"211\":1}}],[\"采用\",{\"1\":{\"53\":1,\"72\":1}}],[\"分布式拒绝服务\",{\"1\":{\"710\":1}}],[\"分成帧来传输\",{\"1\":{\"696\":1}}],[\"分类\",{\"1\":{\"694\":1}}],[\"分类为\",{\"1\":{\"144\":1}}],[\"分钟学会\",{\"1\":{\"647\":1}}],[\"分组\",{\"1\":{\"632\":1}}],[\"分隔\",{\"1\":{\"622\":1,\"623\":1}}],[\"分别生成一个块状或行内的\",{\"1\":{\"645\":1}}],[\"分别将\",{\"1\":{\"582\":1}}],[\"分别表示属性不可变\",{\"1\":{\"13\":1}}],[\"分割的段代码\",{\"1\":{\"302\":1}}],[\"分析过程中如果语法有错\",{\"1\":{\"263\":1}}],[\"分解开\",{\"1\":{\"82\":1}}],[\"分段锁\",{\"1\":{\"53\":1,\"57\":1,\"72\":1}}],[\"扮演锁的角色\",{\"1\":{\"52\":1,\"71\":1}}],[\"7兼容性\",{\"1\":{\"630\":1}}],[\"75\",{\"1\":{\"535\":2}}],[\"7字节\",{\"1\":{\"170\":1}}],[\"7\",{\"0\":{\"52\":1,\"71\":1},\"1\":{\"57\":2,\"209\":1,\"217\":1,\"218\":1,\"252\":1,\"253\":1,\"256\":1,\"296\":1}}],[\"7分段锁\",{\"1\":{\"46\":1}}],[\"默认端口\",{\"1\":{\"704\":1}}],[\"默认端口443http\",{\"1\":{\"704\":1}}],[\"默认不会\",{\"1\":{\"700\":1}}],[\"默认宽高\",{\"1\":{\"674\":1}}],[\"默认样式\",{\"1\":{\"670\":1}}],[\"默认路由\",{\"1\":{\"507\":1}}],[\"默认是hash模式\",{\"1\":{\"505\":1,\"507\":1}}],[\"默认情况下\",{\"1\":{\"463\":1}}],[\"默认情况下进行赋值时\",{\"1\":{\"460\":1}}],[\"默认创建全局变量\",{\"1\":{\"384\":1}}],[\"默认绑定\",{\"0\":{\"360\":1},\"1\":{\"195\":1,\"373\":1,\"385\":1}}],[\"默认\",{\"1\":{\"166\":1,\"645\":4,\"667\":1}}],[\"默认支持的隔离级别是\",{\"1\":{\"164\":1}}],[\"默认为2\",{\"1\":{\"242\":1}}],[\"默认为\",{\"1\":{\"50\":1,\"69\":1}}],[\"默认值是\",{\"1\":{\"646\":1}}],[\"默认值为\",{\"1\":{\"645\":1,\"646\":2}}],[\"默认值必须是一个函数\",{\"1\":{\"487\":1}}],[\"默认值\",{\"1\":{\"15\":1,\"182\":4,\"625\":1,\"627\":3,\"629\":1,\"633\":1,\"646\":2}}],[\"碰撞\",{\"1\":{\"49\":1,\"68\":1}}],[\"若找不到\",{\"1\":{\"654\":1}}],[\"若没有这样的祖先\",{\"1\":{\"629\":1}}],[\"若没有异步任务\",{\"1\":{\"254\":1}}],[\"若遇到\",{\"1\":{\"580\":1}}],[\"若未登录\",{\"1\":{\"513\":1}}],[\"若是对象的话就会返回同一个内存地址\",{\"1\":{\"486\":1}}],[\"若要数据流从右至左\",{\"1\":{\"293\":1}}],[\"若微任务在执行过程中产生了新的微任务\",{\"1\":{\"250\":1}}],[\"若有则渲染\",{\"1\":{\"250\":1}}],[\"若有值对其处理\",{\"1\":{\"93\":1}}],[\"若不设主键\",{\"1\":{\"172\":1}}],[\"若t不为null\",{\"1\":{\"93\":1}}],[\"若调用无参构造器\",{\"1\":{\"88\":1}}],[\"若lambda参数列表中的第一个参数是实例方法的调用者\",{\"1\":{\"88\":1}}],[\"若存在元素\",{\"1\":{\"49\":1,\"68\":1}}],[\"若它们的属性相等\",{\"1\":{\"10\":1}}],[\"队列先进先出\",{\"1\":{\"47\":1}}],[\"去渲染界面\",{\"1\":{\"428\":1}}],[\"去学习~\",{\"1\":{\"397\":1}}],[\"去优化处理还原成字节码\",{\"1\":{\"263\":1}}],[\"去重\",{\"1\":{\"47\":1,\"90\":1}}],[\"去b局\",{\"1\":{\"24\":1}}],[\"顺序不能反\",{\"1\":{\"238\":1}}],[\"顺序不同\",{\"1\":{\"12\":1}}],[\"顺序\",{\"1\":{\"47\":1}}],[\"键名\",{\"1\":{\"181\":1,\"300\":1}}],[\"键\",{\"0\":{\"181\":1},\"1\":{\"181\":1,\"182\":1}}],[\"键值对\",{\"1\":{\"47\":1}}],[\"键值对获取\",{\"0\":{\"46\":1}}],[\"键排序功能\",{\"1\":{\"46\":1}}],[\"由微软\",{\"1\":{\"636\":1}}],[\"由标志位\",{\"1\":{\"357\":1}}],[\"由vo\",{\"1\":{\"272\":1}}],[\"由一序列\",{\"1\":{\"266\":1}}],[\"由\",{\"1\":{\"260\":1,\"341\":1,\"582\":1}}],[\"由mvcc实现\",{\"1\":{\"169\":1}}],[\"由数组和链表或红黑树组成\",{\"1\":{\"46\":1}}],[\"由于一开始的网页主要只是用于在\",{\"1\":{\"663\":1}}],[\"由于老浏览器\",{\"1\":{\"224\":1}}],[\"由于在整个定向的过程中用的同一个request\",{\"1\":{\"24\":1}}],[\"由于+=是\",{\"1\":{\"7\":1}}],[\"由于\",{\"1\":{\"7\":1}}],[\"允许所有源访问\",{\"1\":{\"707\":1}}],[\"允许\",{\"1\":{\"248\":1}}],[\"允许数据重复和\",{\"1\":{\"172\":1}}],[\"允许空key和空value\",{\"1\":{\"46\":1}}],[\"允许有抽象方法\",{\"1\":{\"8\":1}}],[\"以与\",{\"1\":{\"704\":1}}],[\"以后直接复用就可以了\",{\"1\":{\"654\":1}}],[\"以后在解决哈希冲突时有了较大的变化\",{\"1\":{\"46\":1}}],[\"以分隔\",{\"1\":{\"623\":1}}],[\"以+分隔\",{\"1\":{\"623\":1}}],[\"以>分隔\",{\"1\":{\"623\":1}}],[\"以空格分隔\",{\"1\":{\"623\":1}}],[\"以上是\",{\"1\":{\"589\":1}}],[\"以传入的对象为原型\",{\"1\":{\"354\":1,\"355\":1}}],[\"以\",{\"1\":{\"351\":2,\"623\":1}}],[\"以及必传值required\",{\"1\":{\"487\":1}}],[\"以及\",{\"1\":{\"262\":1}}],[\"以下均输出\",{\"1\":{\"372\":1}}],[\"以下为求和\",{\"1\":{\"242\":1}}],[\"以下代码会发生内存泄漏\",{\"1\":{\"224\":1}}],[\"以前称\",{\"1\":{\"261\":1}}],[\"以前内核的概念包括渲染引擎与\",{\"1\":{\"261\":1}}],[\"以前\",{\"1\":{\"241\":2}}],[\"以前声明一个方法\",{\"1\":{\"240\":1}}],[\"以前的写法\",{\"1\":{\"364\":1}}],[\"以前的\",{\"1\":{\"209\":1}}],[\"以便下次访问时重复使用\",{\"1\":{\"684\":1}}],[\"以便\",{\"1\":{\"113\":1}}],[\"以减少搜索时间\",{\"1\":{\"46\":1,\"50\":1,\"69\":1}}],[\"拉链法解决冲突\",{\"1\":{\"46\":1}}],[\"之父开发\",{\"1\":{\"260\":1}}],[\"之外不起作用\",{\"1\":{\"238\":1}}],[\"之外也起作用\",{\"1\":{\"238\":1}}],[\"之外的其他数据是对象\",{\"1\":{\"179\":1}}],[\"之后\",{\"1\":{\"95\":1,\"96\":1,\"714\":1,\"715\":1}}],[\"之后只需要localdate\",{\"1\":{\"94\":1}}],[\"之后就可以标识这个用户并且跟踪这个用户了\",{\"1\":{\"25\":1}}],[\"之前也在使用\",{\"1\":{\"258\":1}}],[\"之前\",{\"1\":{\"94\":1,\"95\":1,\"96\":1,\"264\":1}}],[\"之前由数组+链表组成的\",{\"1\":{\"46\":1}}],[\"双方进入数据传输状态\",{\"1\":{\"713\":1}}],[\"双花括号插值和\",{\"1\":{\"537\":1}}],[\"双向绑定v\",{\"0\":{\"531\":1}}],[\"双向绑定\",{\"1\":{\"521\":1,\"528\":1}}],[\"双向链表\",{\"1\":{\"43\":1}}],[\"双精度浮点型\",{\"1\":{\"357\":1}}],[\"双端队列\",{\"1\":{\"45\":1}}],[\"双指针\",{\"1\":{\"45\":1}}],[\"单个项目在交叉轴的对齐方式\",{\"1\":{\"646\":1}}],[\"单行显示\",{\"1\":{\"633\":1}}],[\"单行显示省略号\",{\"1\":{\"633\":1}}],[\"单行文字\",{\"0\":{\"610\":1}}],[\"单行\",{\"0\":{\"603\":1}}],[\"单页面应用程序\",{\"1\":{\"582\":1}}],[\"单一状态树能够让我们最直接的方式找到某个状态的片段\",{\"1\":{\"548\":1}}],[\"单向绑定v\",{\"0\":{\"530\":1}}],[\"单向绑定+input事件监听\",{\"1\":{\"521\":1}}],[\"单选框\",{\"1\":{\"521\":1}}],[\"单词\",{\"1\":{\"123\":1}}],[\"单端队列\",{\"0\":{\"45\":1}}],[\"单线程操作字符串缓冲区下操作大量数据\",{\"1\":{\"14\":1}}],[\"先加速后减速\",{\"1\":{\"631\":1}}],[\"先在实例自身找\",{\"1\":{\"353\":1}}],[\"先有结果\",{\"1\":{\"327\":1,\"328\":1,\"346\":1}}],[\"先于\",{\"1\":{\"318\":1}}],[\"先把微任务队列执行完后\",{\"1\":{\"253\":1}}],[\"先微后宏\",{\"1\":{\"250\":1,\"251\":1}}],[\"先查看微任务队列是否为空\",{\"1\":{\"250\":1,\"251\":1}}],[\"先去存储空间中找\",{\"1\":{\"234\":1}}],[\"先进先出\",{\"1\":{\"44\":1}}],[\"先来到厨房\",{\"1\":{\"39\":3}}],[\"旧\",{\"1\":{\"43\":1,\"46\":1}}],[\"5xx\",{\"1\":{\"694\":1}}],[\"5mb\",{\"1\":{\"678\":1,\"681\":2}}],[\"5px\",{\"1\":{\"654\":1}}],[\"504\",{\"1\":{\"694\":1}}],[\"503\",{\"1\":{\"694\":1}}],[\"502\",{\"1\":{\"694\":1}}],[\"50px\",{\"1\":{\"607\":1,\"615\":1}}],[\"50\",{\"1\":{\"434\":1,\"440\":1,\"607\":5,\"615\":5,\"631\":1}}],[\"500px\",{\"1\":{\"633\":1}}],[\"5000\",{\"1\":{\"555\":1}}],[\"500\",{\"1\":{\"256\":1,\"332\":1,\"333\":1,\"694\":1}}],[\"5\",{\"0\":{\"85\":1,\"198\":1,\"617\":1},\"1\":{\"86\":1,\"91\":1,\"192\":1,\"196\":2,\"205\":1,\"212\":2,\"217\":1,\"218\":4,\"242\":1,\"251\":1,\"252\":1,\"253\":1,\"256\":1,\"266\":1,\"288\":3,\"306\":1,\"351\":1,\"355\":1,\"359\":1,\"363\":1,\"384\":1,\"535\":2,\"552\":1,\"555\":1,\"633\":1}}],[\"5倍\",{\"1\":{\"43\":1}}],[\"5引入\",{\"1\":{\"27\":1}}],[\"线程是工人\",{\"1\":{\"248\":1}}],[\"线程不安全\",{\"0\":{\"44\":1},\"1\":{\"43\":2,\"94\":1}}],[\"线程安全\",{\"1\":{\"14\":1,\"43\":1,\"46\":2}}],[\"线程安全性\",{\"1\":{\"14\":1}}],[\"集合获取流\",{\"1\":{\"90\":1}}],[\"集合迭代\",{\"0\":{\"85\":1}}],[\"集合类上级接口\",{\"1\":{\"58\":1}}],[\"集合\",{\"1\":{\"42\":1}}],[\"水平\",{\"1\":{\"645\":1}}],[\"水平方向有效\",{\"1\":{\"674\":1}}],[\"水平方向\",{\"1\":{\"627\":1}}],[\"水平居中与垂直居中的16个方法\",{\"1\":{\"619\":1}}],[\"水平居中\",{\"0\":{\"601\":1}}],[\"水平垂直居中\",{\"0\":{\"596\":1}}],[\"水果\",{\"2\":{\"153\":1,\"572\":1,\"577\":1}}],[\"水烧开之后他会通知我\",{\"1\":{\"39\":1}}],[\"水壶上面有个开关\",{\"1\":{\"39\":1}}],[\"也非同源\",{\"1\":{\"704\":1}}],[\"也称为公钥加密\",{\"1\":{\"697\":1}}],[\"也可以省略\",{\"1\":{\"622\":1}}],[\"也可以用于图片元素居中\",{\"1\":{\"610\":1}}],[\"也可以接受其他\",{\"1\":{\"549\":1}}],[\"也可以非常方便的管理和维护\",{\"1\":{\"548\":1}}],[\"也可以使用\",{\"1\":{\"528\":1}}],[\"也可以定义只读属性\",{\"1\":{\"448\":1}}],[\"也是可以作为类型的\",{\"1\":{\"422\":1}}],[\"也是微任务\",{\"1\":{\"318\":1}}],[\"也不需要给html设置font\",{\"1\":{\"655\":1}}],[\"也不放大\",{\"1\":{\"646\":1}}],[\"也不会出现在父组件链中\",{\"1\":{\"489\":1}}],[\"也不会\",{\"1\":{\"384\":1}}],[\"也不隔一段时间去看一下\",{\"1\":{\"39\":1}}],[\"也找不到就报错\",{\"1\":{\"353\":1}}],[\"也就是只解析暂时需要的内容\",{\"1\":{\"264\":1}}],[\"也就是说所操作的数据类型被指定为一个参数\",{\"1\":{\"27\":1}}],[\"也就是说拷贝对象和原对象共用同一个内部对象\",{\"1\":{\"21\":1}}],[\"也就能访问到该函数的自由变量了\",{\"1\":{\"216\":1}}],[\"也存放\",{\"1\":{\"176\":1}}],[\"也会耗费一定空间\",{\"1\":{\"175\":1}}],[\"阻断\",{\"1\":{\"581\":1}}],[\"阻止扩展\",{\"1\":{\"187\":1}}],[\"阻止对象序列化\",{\"1\":{\"38\":1}}],[\"阻塞\",{\"1\":{\"39\":1}}],[\"并回复\",{\"1\":{\"715\":1}}],[\"并保证不被泄露\",{\"1\":{\"697\":1}}],[\"并保存在服务端\",{\"1\":{\"677\":1}}],[\"并集选择器\",{\"1\":{\"623\":1}}],[\"并添加样式\",{\"1\":{\"594\":1}}],[\"并执行得到箭头函数\",{\"1\":{\"376\":1,\"377\":1}}],[\"并执行得到普通函数\",{\"1\":{\"376\":1,\"377\":1,\"378\":1}}],[\"并立即执行函数\",{\"1\":{\"362\":2}}],[\"并立即调用这个函数\",{\"1\":{\"218\":1}}],[\"并由该\",{\"1\":{\"341\":1}}],[\"并导出\",{\"1\":{\"320\":1}}],[\"并在等待状态时保存回调\",{\"1\":{\"318\":1}}],[\"并没有立即执行\",{\"1\":{\"291\":1}}],[\"并不是所有的\",{\"1\":{\"264\":1}}],[\"并创建空的闭包对象\",{\"1\":{\"217\":1}}],[\"并将现有属性改为不可配置\",{\"1\":{\"187\":2}}],[\"并返回最新的资源文件和资源标识\",{\"1\":{\"689\":1}}],[\"并返回给客户端\",{\"1\":{\"682\":1}}],[\"并返回给浏览器\",{\"1\":{\"580\":1}}],[\"并返回\",{\"1\":{\"302\":1}}],[\"并返回一个函数\",{\"1\":{\"289\":1}}],[\"并返回该对象\",{\"1\":{\"182\":1}}],[\"并返回处理后的optional否则返回optional\",{\"1\":{\"93\":1}}],[\"并且其余内容是不可见的\",{\"1\":{\"625\":1}}],[\"并且其内部是通过\",{\"1\":{\"44\":1}}],[\"并且后面跟上要插入的元素\",{\"1\":{\"525\":1}}],[\"并且可以传入另外两个回调函数\",{\"1\":{\"334\":1}}],[\"并且将这块空间的指针返回值变量引用\",{\"1\":{\"276\":1}}],[\"并且压入到ecstack中\",{\"1\":{\"272\":1}}],[\"并且会监听\",{\"1\":{\"262\":1}}],[\"并且主键不能为\",{\"1\":{\"172\":1}}],[\"并发事务带来哪些问题\",{\"0\":{\"165\":1}}],[\"并发访问数据库时\",{\"1\":{\"163\":1}}],[\"并行流\",{\"1\":{\"90\":1}}],[\"并坐在水壶面前一直等着水烧开\",{\"1\":{\"39\":1}}],[\"并加载到\",{\"1\":{\"32\":1}}],[\"形变坐标原点\",{\"1\":{\"631\":1}}],[\"形变动画\",{\"0\":{\"631\":1}}],[\"形成独立的块级格式化上下文\",{\"1\":{\"592\":1}}],[\"形成一个独立的渲染区域\",{\"1\":{\"588\":1}}],[\"形成回调地狱\",{\"1\":{\"333\":1}}],[\"形成\",{\"1\":{\"218\":1}}],[\"形成了\",{\"1\":{\"218\":1}}],[\"形参\",{\"1\":{\"218\":1}}],[\"形参列表相同\",{\"1\":{\"12\":1}}],[\"形象比喻\",{\"1\":{\"39\":1}}],[\"模拟网络请求\",{\"1\":{\"332\":3}}],[\"模拟私有属性\",{\"0\":{\"222\":1}}],[\"模块化\",{\"0\":{\"244\":1}}],[\"模块化发展历程\",{\"1\":{\"221\":1}}],[\"模块\",{\"0\":{\"221\":1},\"1\":{\"225\":1}}],[\"模型变化\",{\"1\":{\"528\":1}}],[\"模型与视图间的双向操作\",{\"1\":{\"520\":1}}],[\"模型\",{\"1\":{\"39\":1}}],[\"模式\",{\"1\":{\"39\":2}}],[\"异\",{\"1\":{\"657\":1}}],[\"异步下载脚本\",{\"1\":{\"581\":1}}],[\"异步\",{\"1\":{\"331\":1}}],[\"异步不会阻塞代码执行\",{\"1\":{\"331\":1}}],[\"异步编程的六种方式\",{\"1\":{\"331\":1}}],[\"异步编程进化史\",{\"1\":{\"331\":1}}],[\"异步编程\",{\"0\":{\"331\":1}}],[\"异步元素为空白的情况\",{\"1\":{\"325\":1}}],[\"异步操作\",{\"1\":{\"243\":1}}],[\"异步任务分为微任务与宏任务\",{\"1\":{\"317\":1}}],[\"异步任务\",{\"1\":{\"218\":1,\"332\":1}}],[\"异步执行\",{\"1\":{\"205\":1}}],[\"异步函数中报错\",{\"1\":{\"204\":1}}],[\"异步函数中的异常\",{\"0\":{\"204\":1},\"1\":{\"204\":1}}],[\"异步函数返回值是一个\",{\"1\":{\"203\":1}}],[\"异步函数的返回值\",{\"0\":{\"203\":1}}],[\"异步非阻塞\",{\"1\":{\"39\":1}}],[\"异常有哪些\",{\"0\":{\"34\":1}}],[\"异常处理语句结构的一部分\",{\"1\":{\"13\":1}}],[\"异常\",{\"0\":{\"33\":1},\"1\":{\"12\":1,\"34\":1}}],[\"同源判断\",{\"1\":{\"704\":1}}],[\"同源\",{\"1\":{\"704\":2}}],[\"同源策略\",{\"0\":{\"703\":1},\"1\":{\"703\":1}}],[\"同源策略与跨域\",{\"0\":{\"702\":1}}],[\"同\",{\"1\":{\"657\":1}}],[\"同样也支持payload\",{\"1\":{\"554\":1}}],[\"同面试题二\",{\"1\":{\"377\":1}}],[\"同上\",{\"1\":{\"230\":1,\"231\":1}}],[\"同时生成一个唯一的\",{\"1\":{\"677\":1}}],[\"同时又需要其他参数\",{\"1\":{\"521\":1}}],[\"同时使用对称加密和非对称加密\",{\"1\":{\"697\":1}}],[\"同时使用\",{\"1\":{\"368\":1}}],[\"同时收集\",{\"1\":{\"265\":1}}],[\"同时避免全局污染\",{\"1\":{\"218\":1}}],[\"同时子函数的作用域链\",{\"1\":{\"217\":1}}],[\"同时通过对链表进行相应的操作\",{\"1\":{\"46\":1}}],[\"同名变量使用最近的值\",{\"1\":{\"212\":1}}],[\"同步成功结果\",{\"1\":{\"332\":2}}],[\"同步\",{\"1\":{\"331\":1}}],[\"同步会阻塞代码执行\",{\"1\":{\"331\":1}}],[\"同步代码只能取得同步结果\",{\"1\":{\"332\":1}}],[\"同步代码无法取得异步结果\",{\"1\":{\"332\":1}}],[\"同步代码先执行\",{\"1\":{\"318\":1}}],[\"同步代码\",{\"1\":{\"318\":2}}],[\"同步代码执行完毕\",{\"1\":{\"252\":1}}],[\"同步代码结束\",{\"1\":{\"205\":1}}],[\"同步任务结束时\",{\"1\":{\"218\":1}}],[\"同步任务\",{\"1\":{\"218\":1}}],[\"同步执行函数\",{\"1\":{\"205\":1}}],[\"同步执行\",{\"1\":{\"205\":1,\"252\":1,\"253\":1}}],[\"同步函数中报错\",{\"1\":{\"204\":1}}],[\"同步非阻塞\",{\"1\":{\"39\":1}}],[\"同步阻塞i\",{\"1\":{\"39\":1}}],[\"同一个\",{\"1\":{\"336\":1}}],[\"同一个类\",{\"1\":{\"12\":1}}],[\"同一行同步执行\",{\"1\":{\"205\":1}}],[\"同一行的代码相当于放在了\",{\"1\":{\"205\":1}}],[\"同一包\",{\"1\":{\"19\":1}}],[\"变成下三角\",{\"1\":{\"643\":1}}],[\"变为\",{\"1\":{\"341\":1}}],[\"变为原始类型object\",{\"1\":{\"28\":1}}],[\"变量的定义格式\",{\"0\":{\"460\":1}}],[\"变量的定义\",{\"0\":{\"459\":1}}],[\"变量的分类\",{\"0\":{\"210\":1}}],[\"变量生命周期长\",{\"1\":{\"225\":1}}],[\"变量私有\",{\"1\":{\"225\":1}}],[\"变量或方法\",{\"1\":{\"222\":1}}],[\"变量值\",{\"1\":{\"217\":1}}],[\"变量值组成一个闭包对象保存在堆内存中\",{\"1\":{\"216\":1}}],[\"变量名写在\",{\"1\":{\"239\":1}}],[\"变量名\",{\"1\":{\"217\":1}}],[\"变量作为属性名\",{\"1\":{\"181\":1}}],[\"变量\",{\"0\":{\"652\":1},\"1\":{\"181\":1,\"210\":1,\"633\":1}}],[\"变量因为不属于任何对象\",{\"1\":{\"38\":1}}],[\"那么该属性将不起作用\",{\"1\":{\"645\":1}}],[\"那么两个radio才能变为一组就会互斥即二选一\",{\"1\":{\"628\":1}}],[\"那么另一个值默认为center\",{\"1\":{\"627\":1}}],[\"那么块级元素的margin\",{\"1\":{\"626\":1}}],[\"那么之后的管理和维护等等都会变得特别困难\",{\"1\":{\"548\":1}}],[\"那么可以选择runtime\",{\"1\":{\"499\":1}}],[\"那么这个值会被新的\",{\"1\":{\"336\":1}}],[\"那么这个对象的引用就+1\",{\"1\":{\"276\":1}}],[\"那么一般就用异步地方式做这件事\",{\"1\":{\"331\":1}}],[\"那么\",{\"1\":{\"264\":1}}],[\"那么对所有的\",{\"1\":{\"264\":1}}],[\"那么索引也需要动态的修改\",{\"1\":{\"175\":1}}],[\"那么直接根据该索引\",{\"1\":{\"174\":1}}],[\"那么就不必再进行回表查询\",{\"1\":{\"174\":1}}],[\"那么必须选择一个覆盖该方法来解决接口的冲突\",{\"1\":{\"98\":1}}],[\"那么接口中具有相同名称和参数的默认实现方法会被忽略\",{\"1\":{\"98\":1}}],[\"那么会选择先进行数组扩容\",{\"1\":{\"50\":1,\"69\":1}}],[\"那么反序列后结果就是\",{\"1\":{\"38\":1}}],[\"那这两个对象的\",{\"1\":{\"9\":1}}],[\"那这两个对象不一定相等\",{\"1\":{\"9\":1}}],[\"扩展作用域链\",{\"1\":{\"381\":1}}],[\"扩展运算符把伪数组变为一个个数值\",{\"1\":{\"379\":1}}],[\"扩展\",{\"0\":{\"116\":1,\"117\":1},\"1\":{\"38\":1,\"117\":1}}],[\"反选伪类\",{\"1\":{\"639\":1}}],[\"反向代理\",{\"1\":{\"708\":1}}],[\"反向\",{\"1\":{\"631\":1}}],[\"反之亦然\",{\"1\":{\"528\":1}}],[\"反序列化\",{\"1\":{\"38\":1}}],[\"反射的核心类有哪些\",{\"0\":{\"31\":1}}],[\"反射\",{\"0\":{\"30\":1},\"1\":{\"31\":1}}],[\"内置名字\",{\"1\":{\"667\":1}}],[\"内置函数\",{\"1\":{\"654\":1}}],[\"内置函数的this\",{\"0\":{\"371\":1}}],[\"内联样式\",{\"1\":{\"638\":1}}],[\"内联样式与外联优先级相同\",{\"1\":{\"638\":1}}],[\"内联字符串拼接\",{\"1\":{\"521\":1}}],[\"内心\",{\"1\":{\"267\":1}}],[\"内核\",{\"1\":{\"261\":2}}],[\"内层函数\",{\"1\":{\"215\":1}}],[\"内层函数为子函数\",{\"1\":{\"212\":1}}],[\"内容盒模型\",{\"1\":{\"635\":2}}],[\"内容盒与边框盒\",{\"0\":{\"635\":1}}],[\"内容会被修剪\",{\"1\":{\"625\":2}}],[\"内容不会被修剪\",{\"1\":{\"625\":1}}],[\"内容溢出处理\",{\"0\":{\"625\":1}}],[\"内容\",{\"1\":{\"116\":1,\"635\":1}}],[\"内存泄漏\",{\"1\":{\"224\":1}}],[\"内存占用大\",{\"1\":{\"224\":1,\"225\":1}}],[\"内存满时回收\",{\"1\":{\"75\":1}}],[\"内存区域\",{\"0\":{\"73\":1}}],[\"内存中\",{\"1\":{\"38\":1}}],[\"内部声明的选择器会影响优先级\",{\"1\":{\"639\":1}}],[\"内部元素的渲染不会影响到外部元素\",{\"1\":{\"588\":1}}],[\"内部定义了另外一个函数\",{\"1\":{\"264\":1}}],[\"内部使用\",{\"1\":{\"254\":1}}],[\"内部函数都会在内存中开辟新的空间\",{\"1\":{\"212\":1}}],[\"内部都是\",{\"1\":{\"173\":1}}],[\"内部类要访问局部变量\",{\"1\":{\"13\":1}}],[\"内部逻辑可以改变\",{\"1\":{\"12\":1}}],[\"将占满整个容器的高度\",{\"1\":{\"645\":1}}],[\"将坐标\",{\"1\":{\"643\":1}}],[\"将position设置为absolute和fixed元素的特点\",{\"1\":{\"629\":1}}],[\"将整个提交的对象作为payload使用\",{\"1\":{\"553\":1}}],[\"将自己的数据\",{\"1\":{\"528\":1}}],[\"将自由变量加入到闭包对象中\",{\"1\":{\"213\":1,\"225\":1}}],[\"将父组件的\",{\"1\":{\"521\":1}}],[\"将数据传入回调函数\",{\"1\":{\"706\":1}}],[\"将数据解析为html代码\",{\"1\":{\"521\":1}}],[\"将数据结构或对象转换成二进制字节流存储到文件系统\",{\"1\":{\"38\":1}}],[\"将router对象传入到vue实例\",{\"1\":{\"505\":1}}],[\"将点击的按钮事件发送给父组件\",{\"1\":{\"487\":1}}],[\"将app\",{\"1\":{\"476\":1}}],[\"将传入的字符串当做\",{\"1\":{\"382\":1}}],[\"将显式调用者赋值给\",{\"1\":{\"379\":1}}],[\"将函数地址赋值给\",{\"1\":{\"373\":1}}],[\"将字面量对象的方法的地址赋值给变量\",{\"1\":{\"360\":1}}],[\"将字符串长度大于3的放入集合\",{\"1\":{\"87\":1}}],[\"将永远处于等待状态\",{\"1\":{\"327\":1}}],[\"将多个组件共享的变量全部存储在一个对象里面\",{\"1\":{\"542\":1}}],[\"将多个\",{\"1\":{\"325\":1,\"344\":1}}],[\"将成功和失败回调保存到数组里\",{\"1\":{\"318\":1}}],[\"将一系列单一责任函数组合成一个复杂函数\",{\"1\":{\"293\":1}}],[\"将普通函数柯里化的一个工具函数\",{\"1\":{\"292\":1}}],[\"将原型链继承与构造函数继承组合使用\",{\"1\":{\"281\":1}}],[\"将原数组中的所有元素用这个函数处理后放入新数组返回\",{\"1\":{\"242\":1}}],[\"将代码的执行权利交还给\",{\"1\":{\"266\":1}}],[\"将优化编译后的机器码还原成字节码\",{\"1\":{\"266\":1}}],[\"将抽象语法树转换为字节码并执行\",{\"1\":{\"265\":1}}],[\"将热点代码交给\",{\"1\":{\"263\":1}}],[\"将词法单元\",{\"1\":{\"263\":1}}],[\"将\",{\"1\":{\"263\":1,\"580\":1,\"677\":1,\"696\":1}}],[\"将以上封装为一个函数\",{\"1\":{\"243\":1}}],[\"将嵌套调用ajax优化为函数递归promise\",{\"1\":{\"243\":1}}],[\"将这些变量加入到父函数的闭包对象中\",{\"1\":{\"217\":1}}],[\"将这个临时对象的隐式原型指向构造函数的显式原型\",{\"1\":{\"192\":1,\"363\":1}}],[\"将这个临时对象的隐式原型\",{\"1\":{\"192\":1,\"363\":1}}],[\"将变量名\",{\"1\":{\"216\":1}}],[\"将共有的属性\",{\"1\":{\"191\":1}}],[\"将满足条件的字符串放入集合中\",{\"1\":{\"87\":1}}],[\"将链表转换成红黑树前会判断\",{\"1\":{\"50\":1,\"69\":1}}],[\"将链表转化为红黑树\",{\"1\":{\"46\":1,\"50\":1,\"69\":1}}],[\"将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程\",{\"1\":{\"38\":1}}],[\"将所有的泛型信息替换为具体的类型\",{\"1\":{\"27\":1}}],[\"划分为节点流和处理流\",{\"1\":{\"37\":1}}],[\"操作系统是工厂\",{\"1\":{\"248\":1}}],[\"操作符执行的操作\",{\"0\":{\"192\":1},\"1\":{\"363\":1}}],[\"操作完就关闭了\",{\"1\":{\"92\":1}}],[\"操作单元\",{\"1\":{\"37\":1}}],[\"操作少量的数据\",{\"1\":{\"14\":1}}],[\"流程图\",{\"0\":{\"131\":1}}],[\"流的角色\",{\"1\":{\"37\":1}}],[\"流向\",{\"1\":{\"37\":1}}],[\"流分为几种\",{\"0\":{\"37\":1}}],[\"mp4\",{\"1\":{\"659\":1}}],[\"mp3\",{\"1\":{\"659\":1}}],[\"m10\",{\"1\":{\"632\":1}}],[\"mvvm思想\",{\"1\":{\"520\":2}}],[\"mvcc\",{\"0\":{\"170\":1,\"171\":1},\"1\":{\"164\":1}}],[\"must\",{\"1\":{\"687\":1}}],[\"mustache\",{\"1\":{\"508\":1,\"521\":2}}],[\"mutation提交风格\",{\"0\":{\"553\":1}}],[\"mutation传递参数\",{\"0\":{\"552\":1}}],[\"mutation的定义方式\",{\"1\":{\"551\":1}}],[\"mutation状态更新\",{\"0\":{\"551\":1}}],[\"mutation\",{\"0\":{\"550\":1},\"1\":{\"552\":2,\"553\":1,\"555\":1}}],[\"mutation中的方法\",{\"1\":{\"546\":1}}],[\"mutations\",{\"1\":{\"545\":1,\"546\":1,\"551\":1,\"556\":2}}],[\"mutationobserver\",{\"1\":{\"249\":1}}],[\"multipart\",{\"1\":{\"707\":1}}],[\"multiple>\",{\"1\":{\"521\":1}}],[\"mul2\",{\"1\":{\"293\":4}}],[\"middle\",{\"1\":{\"611\":3,\"614\":1,\"616\":3,\"633\":1}}],[\"microtask\",{\"1\":{\"249\":1,\"255\":4}}],[\"minimum\",{\"1\":{\"663\":1,\"674\":1}}],[\"min\",{\"1\":{\"90\":1,\"243\":1,\"633\":5,\"655\":1}}],[\"m\",{\"1\":{\"238\":3,\"273\":2,\"352\":1,\"520\":1}}],[\"month\",{\"1\":{\"628\":1}}],[\"mounted\",{\"1\":{\"539\":1}}],[\"movies\",{\"1\":{\"487\":2}}],[\"mock\",{\"1\":{\"243\":3}}],[\"modified\",{\"0\":{\"690\":1},\"1\":{\"689\":5,\"690\":4}}],[\"modify\",{\"1\":{\"288\":2}}],[\"moduleb\",{\"1\":{\"556\":3}}],[\"modules\",{\"1\":{\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"545\":1,\"556\":1}}],[\"module\",{\"0\":{\"556\":1},\"1\":{\"221\":1,\"320\":1,\"650\":1,\"663\":1}}],[\"modulea\",{\"1\":{\"221\":2,\"556\":4}}],[\"model实现双向绑定\",{\"1\":{\"528\":1}}],[\"model修饰符\",{\"1\":{\"521\":1}}],[\"model可以使radio互斥\",{\"1\":{\"521\":1}}],[\"model结合select\",{\"1\":{\"521\":1}}],[\"model结合checkbox\",{\"1\":{\"521\":1}}],[\"model结合radio\",{\"1\":{\"521\":1}}],[\"model结合input\",{\"1\":{\"521\":1}}],[\"model=\",{\"1\":{\"521\":11,\"528\":1,\"531\":3,\"532\":1,\"536\":2}}],[\"model=v\",{\"1\":{\"521\":1}}],[\"model里有变化会自动地通过directives填写到视view中\",{\"1\":{\"520\":1}}],[\"model\",{\"0\":{\"531\":1},\"1\":{\"520\":1,\"521\":3}}],[\"model包括数据和一些基本操作\",{\"1\":{\"520\":1}}],[\"mode\",{\"1\":{\"169\":1,\"473\":1,\"481\":1,\"505\":1,\"507\":1,\"631\":2}}],[\"moreage\",{\"1\":{\"549\":2}}],[\"more20agecount\",{\"1\":{\"549\":1}}],[\"more20age\",{\"1\":{\"549\":2}}],[\"more\",{\"1\":{\"143\":1}}],[\"myfont\",{\"1\":{\"622\":1}}],[\"myfun\",{\"1\":{\"84\":2}}],[\"my\",{\"1\":{\"484\":7,\"498\":1,\"499\":1,\"521\":2}}],[\"mytype2\",{\"1\":{\"452\":2}}],[\"mytype1\",{\"1\":{\"452\":2}}],[\"mybind\",{\"1\":{\"379\":3}}],[\"myadd\",{\"1\":{\"362\":2}}],[\"mypromise\",{\"1\":{\"309\":12,\"312\":8,\"313\":8,\"314\":8,\"316\":9,\"317\":5,\"318\":10,\"319\":12,\"320\":5,\"321\":2,\"322\":1,\"323\":6,\"324\":3,\"325\":8,\"326\":7,\"327\":7,\"328\":8,\"346\":4}}],[\"myisam\",{\"1\":{\"162\":1}}],[\"myisam和innodb区别\",{\"0\":{\"162\":1}}],[\"mysql默认使用b+树\",{\"1\":{\"176\":1}}],[\"mysql中的读有几种\",{\"0\":{\"169\":1}}],[\"mysql\",{\"0\":{\"160\":1,\"173\":1},\"1\":{\"164\":2},\"2\":{\"178\":1}}],[\"msl\",{\"1\":{\"716\":1}}],[\"msg\",{\"1\":{\"382\":2,\"529\":4,\"536\":4}}],[\"ms\",{\"1\":{\"142\":1,\"144\":1}}],[\"mrhope\",{\"1\":{\"128\":2}}],[\"mr\",{\"1\":{\"128\":1,\"136\":1}}],[\"mdn\",{\"1\":{\"209\":2,\"226\":1,\"228\":1,\"236\":1,\"586\":1,\"643\":1,\"692\":1}}],[\"md\",{\"1\":{\"118\":1}}],[\"mm\",{\"1\":{\"95\":15,\"96\":1}}],[\"memory\",{\"1\":{\"686\":1}}],[\"media\",{\"1\":{\"633\":5,\"655\":1}}],[\"media=\",{\"1\":{\"633\":1}}],[\"message3\",{\"1\":{\"463\":2}}],[\"message2\",{\"1\":{\"463\":1}}],[\"message1\",{\"1\":{\"463\":1}}],[\"message\",{\"1\":{\"274\":3,\"291\":2,\"384\":4,\"385\":4,\"402\":7,\"403\":1,\"405\":3,\"409\":1,\"413\":4,\"415\":2,\"416\":5,\"419\":3,\"420\":4,\"422\":1,\"427\":1,\"428\":3,\"436\":2,\"460\":1,\"487\":3,\"488\":2,\"512\":2,\"521\":7}}],[\"mermaid\",{\"0\":{\"132\":1}}],[\"mergedstring\",{\"1\":{\"91\":1}}],[\"meta\",{\"1\":{\"513\":2,\"663\":2,\"674\":1}}],[\"metaspace\",{\"1\":{\"75\":1}}],[\"methods里面可以封装方法\",{\"1\":{\"528\":1}}],[\"methods\",{\"1\":{\"228\":1,\"473\":1,\"474\":1,\"475\":1,\"480\":1,\"484\":1,\"487\":2,\"488\":2,\"521\":1,\"528\":1,\"529\":1,\"532\":1,\"539\":1,\"546\":1,\"555\":2,\"707\":1}}],[\"methodinterceptor接口并重写\",{\"1\":{\"32\":1}}],[\"methodinterceptor接口和enhancer类\",{\"1\":{\"32\":1}}],[\"method\",{\"1\":{\"32\":2,\"423\":10,\"509\":1,\"672\":1}}],[\"method类\",{\"1\":{\"31\":1}}],[\"mf\",{\"1\":{\"84\":2}}],[\"mail\",{\"1\":{\"704\":1}}],[\"mailto\",{\"1\":{\"666\":1}}],[\"mainfontsize\",{\"1\":{\"652\":2,\"653\":1}}],[\"maintabbar\",{\"0\":{\"478\":1},\"1\":{\"477\":4,\"478\":2}}],[\"main\",{\"1\":{\"35\":1,\"244\":1,\"249\":1,\"250\":1,\"545\":1,\"633\":3,\"663\":1}}],[\"male\",{\"1\":{\"521\":2,\"628\":3}}],[\"match优先级比last\",{\"1\":{\"690\":1}}],[\"match\",{\"1\":{\"689\":2,\"690\":1}}],[\"matchmedia\",{\"1\":{\"633\":1}}],[\"matched\",{\"1\":{\"513\":1}}],[\"math\",{\"1\":{\"87\":1}}],[\"makearea\",{\"1\":{\"398\":6}}],[\"makeactions\",{\"1\":{\"392\":2}}],[\"makeadder\",{\"1\":{\"212\":5}}],[\"machine\",{\"1\":{\"266\":1}}],[\"macrotask\",{\"1\":{\"249\":1}}],[\"markup\",{\"1\":{\"662\":1}}],[\"markdown\",{\"0\":{\"113\":1,\"114\":1,\"115\":1,\"116\":1},\"1\":{\"105\":1,\"113\":2,\"114\":3,\"115\":1,\"116\":3,\"117\":2,\"118\":1,\"119\":1,\"134\":1,\"144\":1,\"145\":2,\"148\":1},\"2\":{\"141\":1}}],[\"margin上下传递\",{\"0\":{\"626\":1}}],[\"margin\",{\"0\":{\"606\":1},\"1\":{\"470\":1,\"472\":1,\"474\":1,\"475\":1,\"480\":1,\"588\":1,\"591\":1,\"606\":2,\"607\":4,\"615\":4,\"629\":5,\"632\":1,\"674\":2}}],[\"mary\",{\"1\":{\"189\":2,\"190\":2,\"191\":4}}],[\"maxlength\",{\"1\":{\"673\":1}}],[\"maximum\",{\"1\":{\"663\":1,\"674\":1,\"716\":1}}],[\"max\",{\"1\":{\"90\":1,\"633\":3,\"655\":1,\"671\":1,\"687\":1}}],[\"map和reduce\",{\"0\":{\"242\":1}}],[\"mapper\",{\"1\":{\"93\":1}}],[\"maptoint\",{\"1\":{\"91\":1}}],[\"map<integer\",{\"1\":{\"85\":1}}],[\"map\",{\"0\":{\"46\":1,\"47\":1},\"1\":{\"47\":1,\"85\":3,\"90\":2,\"91\":3,\"93\":4,\"234\":2,\"242\":3,\"299\":2,\"371\":2}}],[\"块级\",{\"1\":{\"629\":1}}],[\"块级元素\",{\"0\":{\"598\":1,\"604\":1,\"612\":1},\"1\":{\"624\":1,\"629\":1,\"674\":1}}],[\"块级格式化上下文\",{\"1\":{\"588\":1}}],[\"块级作用域的引入使得\",{\"1\":{\"218\":1}}],[\"块语句\",{\"1\":{\"195\":1}}],[\"块中遇到\",{\"1\":{\"35\":1}}],[\"块或\",{\"1\":{\"35\":1}}],[\"块里的语句都会被执行\",{\"1\":{\"35\":1}}],[\"块\",{\"1\":{\"35\":3,\"195\":1}}],[\"其它\",{\"0\":{\"633\":1}}],[\"其它事务也可以加s锁\",{\"1\":{\"169\":1}}],[\"其次\",{\"1\":{\"488\":1}}],[\"其构造函数的显式原型\",{\"1\":{\"351\":2}}],[\"其状态由包裹的所有\",{\"1\":{\"325\":1,\"344\":1}}],[\"其中有\",{\"1\":{\"359\":1}}],[\"其中一个执行时间较长\",{\"1\":{\"331\":1}}],[\"其中还有一个window属性指向自己\",{\"1\":{\"270\":1}}],[\"其中的变量不会被销毁\",{\"1\":{\"219\":1}}],[\"其中的变量是私有的\",{\"1\":{\"219\":1}}],[\"其中xxx可为\",{\"1\":{\"90\":1}}],[\"其他输入标签\",{\"0\":{\"674\":1}}],[\"其他\",{\"1\":{\"673\":1}}],[\"其他内节点只存放\",{\"1\":{\"176\":1}}],[\"其他函数式接口\",{\"0\":{\"86\":1}}],[\"其他段的数据也能被其他线程访问\",{\"1\":{\"52\":1,\"71\":1}}],[\"其他包\",{\"1\":{\"19\":1}}],[\"其后可接零个或多个\",{\"1\":{\"35\":1}}],[\"注\",{\"1\":{\"598\":1}}],[\"注册一个全局组件\",{\"1\":{\"486\":1}}],[\"注册组件\",{\"1\":{\"484\":1}}],[\"注册组件基本步骤\",{\"0\":{\"484\":1}}],[\"注释序号为执行顺序\",{\"1\":{\"205\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"143\":1}}],[\"注解\",{\"1\":{\"31\":1}}],[\"注意它不是\",{\"1\":{\"706\":1}}],[\"注意使用了v\",{\"1\":{\"521\":1}}],[\"注意不是\",{\"1\":{\"354\":1}}],[\"注意顺序\",{\"1\":{\"344\":1}}],[\"注意这里不用加\",{\"1\":{\"309\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":1,\"319\":1}}],[\"注意在定时器外\",{\"1\":{\"223\":1}}],[\"注意基本类型是不能作为泛型参数的\",{\"1\":{\"22\":1}}],[\"注意\",{\"1\":{\"5\":1,\"35\":1,\"88\":2,\"91\":1,\"176\":1,\"182\":1,\"195\":1,\"206\":1,\"211\":1,\"228\":1,\"244\":1,\"272\":1,\"296\":1,\"309\":2,\"318\":2,\"319\":2,\"363\":3,\"485\":1,\"486\":1,\"487\":1,\"489\":1,\"493\":1,\"525\":1,\"529\":1}}],[\"框架中的jdk动态代理\",{\"1\":{\"31\":1}}],[\"使右侧元素成为\",{\"1\":{\"593\":1}}],[\"使父元素成为\",{\"1\":{\"592\":1}}],[\"使得外部访问不了内部变量\",{\"1\":{\"218\":1}}],[\"使得它可以方便地对遍历处理后的数据进行再处理\",{\"1\":{\"92\":1}}],[\"使得上面的结构可以保持键值对的插入顺序\",{\"1\":{\"46\":1}}],[\"使元素不超过给定数量\",{\"1\":{\"90\":1}}],[\"使代码更加灵活\",{\"1\":{\"31\":1}}],[\"使用下列方法之一\",{\"1\":{\"707\":1}}],[\"使用简单\",{\"1\":{\"706\":1}}],[\"使用了对称加密\",{\"1\":{\"697\":1,\"698\":1}}],[\"使用二进制传输\",{\"1\":{\"696\":1}}],[\"使用最新的引擎渲染网页\",{\"1\":{\"663\":1}}],[\"使用恰当语义的\",{\"1\":{\"657\":1}}],[\"使用window\",{\"1\":{\"633\":1}}],[\"使用watch\",{\"1\":{\"526\":1}}],[\"使用伪元素\",{\"1\":{\"594\":1}}],[\"使用前端路由\",{\"1\":{\"582\":1}}],[\"使用vuex的count\",{\"1\":{\"546\":1}}],[\"使用v\",{\"1\":{\"534\":2}}],[\"使用name属性也可以互斥\",{\"1\":{\"521\":1}}],[\"使用new关键字来调用函数是\",{\"1\":{\"363\":1}}],[\"使用组件\",{\"1\":{\"484\":1}}],[\"使用插槽封装tabbaritem组件和tabbar组件\",{\"0\":{\"472\":1}}],[\"使用联合类型的值时\",{\"1\":{\"412\":1}}],[\"使用promise\",{\"1\":{\"332\":1}}],[\"使用生成器控制函数的执行与暂停\",{\"1\":{\"302\":1}}],[\"使用箭头函数\",{\"1\":{\"299\":1}}],[\"使用不当\",{\"1\":{\"224\":1,\"225\":1}}],[\"使用回调函数就是在使用闭包\",{\"1\":{\"218\":1}}],[\"使用闭包\",{\"1\":{\"218\":2}}],[\"使用索引可以加快数据的检索速度\",{\"1\":{\"175\":1}}],[\"使用指南\",{\"1\":{\"142\":2,\"144\":2},\"2\":{\"103\":1,\"106\":1,\"108\":1,\"111\":1,\"140\":1,\"149\":1}}],[\"使用方法引用\",{\"1\":{\"87\":1}}],[\"使用lambda表达式\",{\"1\":{\"87\":1}}],[\"使用lambda表达\",{\"1\":{\"87\":1}}],[\"使用\",{\"0\":{\"56\":1},\"1\":{\"84\":1,\"164\":1,\"211\":1,\"218\":1,\"234\":1,\"235\":1,\"265\":1,\"304\":1,\"317\":1,\"318\":1,\"332\":1,\"335\":1,\"353\":1,\"362\":1,\"549\":1,\"641\":1,\"699\":2}}],[\"使用键值对\",{\"1\":{\"47\":1}}],[\"使用字符数组保存字符串\",{\"1\":{\"14\":1}}],[\"使用的默认是\",{\"1\":{\"10\":1}}],[\"应答\",{\"1\":{\"711\":1}}],[\"应返回解释当前问题的页面\",{\"1\":{\"694\":1}}],[\"应使用\",{\"1\":{\"384\":1}}],[\"应用程序缓存\",{\"1\":{\"656\":1}}],[\"应用\",{\"1\":{\"225\":1,\"299\":1}}],[\"应用场景\",{\"0\":{\"31\":1,\"590\":1},\"1\":{\"31\":1}}],[\"应当在函数执行结束后主动清除被引用的自由变量\",{\"1\":{\"224\":1}}],[\"应当使用cookie\",{\"1\":{\"25\":1}}],[\"再转发到另一个域名\",{\"1\":{\"708\":1}}],[\"再拼接为字符串返回\",{\"1\":{\"706\":1}}],[\"再发\",{\"1\":{\"700\":1}}],[\"再发给服务端\",{\"1\":{\"697\":1}}],[\"再返回包含\",{\"1\":{\"677\":1}}],[\"再次请求得到\",{\"1\":{\"582\":1}}],[\"再独立函数调用\",{\"1\":{\"376\":2,\"377\":2,\"378\":2}}],[\"再调用这个地址上的函数\",{\"1\":{\"373\":1}}],[\"再显式绑定\",{\"1\":{\"362\":1,\"376\":1,\"377\":1,\"378\":1}}],[\"再通过私钥解密得到第3随机数\",{\"1\":{\"698\":1}}],[\"再通过context进行commit提交到mutation\",{\"1\":{\"555\":1}}],[\"再通过变量调用\",{\"1\":{\"360\":1}}],[\"再通知程序员任务的结果\",{\"1\":{\"331\":1}}],[\"再执行宏2\",{\"1\":{\"253\":1}}],[\"再回到宏任务中进行下一轮微任务队列\",{\"1\":{\"250\":1}}],[\"再反序列化\",{\"1\":{\"233\":1}}],[\"再将新的字面量引用赋值给该变量\",{\"1\":{\"228\":1}}],[\"再将该变量引用赋值给另一个变量\",{\"1\":{\"228\":2}}],[\"再将其他函数的作用域链引用这个闭包\",{\"1\":{\"216\":1}}],[\"再省略\",{\"1\":{\"223\":1,\"290\":1}}],[\"再\",{\"1\":{\"205\":1}}],[\"再插入数据的时候自增长\",{\"1\":{\"168\":1}}],[\"再进行编译\",{\"1\":{\"29\":1}}],[\"再赋值给short类型\",{\"1\":{\"7\":1}}],[\"所在的元素才会被显示\",{\"1\":{\"534\":1}}],[\"所在的元素才会被渲染\",{\"1\":{\"534\":1}}],[\"所指向的箭头函数\",{\"1\":{\"195\":1,\"364\":1}}],[\"所有实现了接口的类对应的对象\",{\"1\":{\"453\":1}}],[\"所有872\",{\"1\":{\"320\":1}}],[\"所有的路径匹配到的视图组件都会被缓存\",{\"1\":{\"516\":1}}],[\"所有的组件都继承vue的源型\",{\"1\":{\"489\":1,\"543\":1}}],[\"所有的值都被迭代完毕后\",{\"1\":{\"298\":1}}],[\"所有的泛型信息都会被擦掉\",{\"1\":{\"27\":1}}],[\"所有函数在创建时都会创建闭包\",{\"1\":{\"214\":1}}],[\"所有作用域都可以访问\",{\"1\":{\"210\":1}}],[\"所有\",{\"1\":{\"209\":1}}],[\"所有数之和\",{\"1\":{\"91\":1}}],[\"所以一般会搭配使用协商缓存\",{\"1\":{\"686\":1}}],[\"所以用户放大网页之后还会出现横向的滚动条\",{\"1\":{\"663\":1}}],[\"所以开发者们并没有过多考虑关于移动端访问的问题\",{\"1\":{\"663\":1}}],[\"所以兼容性较好\",{\"1\":{\"594\":1}}],[\"所以vuex也使用了单一状态树来管理应用层级的全部状态\",{\"1\":{\"548\":1}}],[\"所以每个组件实例对象都有自己的data数据\",{\"1\":{\"486\":1}}],[\"所以需要判断调用者是不是\",{\"1\":{\"379\":1}}],[\"所以执行\",{\"1\":{\"357\":1}}],[\"所以为了解决上面的问题\",{\"1\":{\"663\":1}}],[\"所以为了解决这个问题\",{\"1\":{\"663\":1}}],[\"所以为空\",{\"1\":{\"351\":1}}],[\"所以为\",{\"1\":{\"351\":1}}],[\"所以遇到等待状态时\",{\"1\":{\"318\":1}}],[\"所以建议\",{\"1\":{\"259\":1,\"580\":1}}],[\"所以想要\",{\"1\":{\"218\":1}}],[\"所以该闭包多此一举\",{\"1\":{\"214\":1}}],[\"所以自由变量\",{\"1\":{\"211\":1}}],[\"所以闭包的存在无关紧要\",{\"1\":{\"209\":1}}],[\"所以也没有\",{\"1\":{\"198\":1}}],[\"所以箭头函数本身没有\",{\"1\":{\"194\":1}}],[\"所以原型的构造函数需要自己手动加上\",{\"1\":{\"191\":1}}],[\"所以原型的构造函数仍保留\",{\"1\":{\"191\":1}}],[\"所以导致不可重复读\",{\"1\":{\"171\":1}}],[\"所以无论有没有\",{\"1\":{\"38\":1}}],[\"所以地址栏显示的是新的地址\",{\"1\":{\"24\":1}}],[\"所以不用担心某些原因html的font\",{\"1\":{\"655\":1}}],[\"所以不能用来传递敏感信息\",{\"1\":{\"23\":1}}],[\"所以不可变\",{\"1\":{\"14\":1}}],[\"所以是非线程安全的\",{\"1\":{\"14\":1}}],[\"所以是线程安全的\",{\"1\":{\"14\":1}}],[\"所以这两种对象都是可变的\",{\"1\":{\"14\":1}}],[\"所以\",{\"1\":{\"11\":1,\"52\":1,\"71\":1,\"195\":1,\"217\":1,\"248\":1,\"264\":1,\"364\":1}}],[\"所以结果是int型\",{\"1\":{\"7\":1}}],[\"什么是三次握手与四次挥手\",{\"1\":{\"717\":1}}],[\"什么是回调地狱\",{\"0\":{\"333\":1}}],[\"什么是回调\",{\"0\":{\"332\":1}}],[\"什么是序列化和反序列化\",{\"0\":{\"38\":1}}],[\"什么是反射\",{\"0\":{\"31\":1}}],[\"什么是泛型\",{\"0\":{\"27\":1}}],[\"什么是引用拷贝\",{\"0\":{\"21\":1}}],[\"泛型类\",{\"0\":{\"443\":1}}],[\"泛型接口\",{\"0\":{\"442\":1}}],[\"泛型接受类型参数\",{\"0\":{\"441\":1}}],[\"泛型的使用\",{\"0\":{\"439\":1}}],[\"泛型\",{\"0\":{\"26\":1},\"1\":{\"27\":1}}],[\"考虑到减轻服务器性能方面\",{\"1\":{\"25\":1}}],[\"服务不可用\",{\"1\":{\"694\":1}}],[\"服务端可能还有数据要发送给客户端\",{\"1\":{\"714\":1}}],[\"服务端收到客户端的\",{\"1\":{\"714\":1}}],[\"服务端收到后通过自己的私钥进行解密\",{\"1\":{\"698\":1}}],[\"服务端收到后再发送第2随机数\",{\"1\":{\"698\":1}}],[\"服务端进入等待数据状态\",{\"1\":{\"713\":1}}],[\"服务端会重发\",{\"1\":{\"716\":1}}],[\"服务端会误认为是客户端又发起了一个新的连接\",{\"1\":{\"713\":1}}],[\"服务端会创建一个session\",{\"1\":{\"677\":1}}],[\"服务端接收到客户端的\",{\"1\":{\"712\":1,\"715\":1}}],[\"服务端响应头需要设置\",{\"1\":{\"707\":1}}],[\"服务端在响应头设置\",{\"1\":{\"707\":2}}],[\"服务端在网络上任意分发公钥\",{\"1\":{\"697\":1}}],[\"服务端拥有一对可以互相加密解密的公钥和私钥\",{\"1\":{\"697\":1}}],[\"服务端需要保存很多个客户端的密钥\",{\"1\":{\"697\":1}}],[\"服务端再对\",{\"1\":{\"682\":1}}],[\"服务端查询数据库验证用户有效性\",{\"1\":{\"682\":1}}],[\"服务端\",{\"1\":{\"678\":1}}],[\"服务端根据资源文件的内容生成的唯一资源标识\",{\"1\":{\"690\":1}}],[\"服务端根据资源标识判断缓存资源与最新资源是否相同\",{\"1\":{\"689\":1}}],[\"服务端根据两者是否相等判断资源是否没有更新\",{\"1\":{\"689\":1}}],[\"服务端根据\",{\"1\":{\"677\":1}}],[\"服务端返回资源文件和资源标识\",{\"1\":{\"689\":1}}],[\"服务端返回包含\",{\"1\":{\"676\":1}}],[\"服务端返回带有\",{\"1\":{\"686\":2}}],[\"服务端返回带有数据的\",{\"1\":{\"582\":1}}],[\"服务端返回带有根节点容器的\",{\"1\":{\"582\":1}}],[\"服务端无法确认当前访问者的身份信息\",{\"1\":{\"675\":1}}],[\"服务端渲染\",{\"1\":{\"582\":1}}],[\"服务端给特定的用户创建特定的\",{\"1\":{\"25\":1}}],[\"服务器代理\",{\"0\":{\"708\":1},\"1\":{\"705\":1}}],[\"服务器因维护或过载而停机\",{\"1\":{\"694\":1}}],[\"服务器作为网关或代理\",{\"1\":{\"694\":2}}],[\"服务器遇到错误\",{\"1\":{\"694\":1}}],[\"服务器内部错误\",{\"1\":{\"694\":1}}],[\"服务器内存消耗大\",{\"1\":{\"677\":1}}],[\"服务器找不到请求的网页\",{\"1\":{\"694\":1}}],[\"服务器拒绝请求\",{\"1\":{\"694\":1}}],[\"服务器不再返回数据\",{\"1\":{\"694\":1}}],[\"服务器目前从不同位置的网页响应请求\",{\"1\":{\"694\":1}}],[\"服务器返回此响应\",{\"1\":{\"694\":1}}],[\"服务器已接受请求\",{\"1\":{\"694\":1}}],[\"服务器已成功处理了请求\",{\"1\":{\"694\":1}}],[\"服务器错误\",{\"1\":{\"694\":1}}],[\"服务器处理\",{\"1\":{\"580\":1}}],[\"服务器直接访问目标地址的\",{\"1\":{\"24\":1}}],[\"href\",{\"0\":{\"666\":1},\"1\":{\"665\":1,\"666\":1}}],[\"href=\",{\"1\":{\"530\":1,\"532\":1,\"633\":1,\"650\":1,\"663\":2}}],[\"hypertext\",{\"1\":{\"662\":1,\"693\":1}}],[\"hypromise\",{\"1\":{\"325\":1}}],[\"h1\",{\"1\":{\"639\":1,\"653\":1}}],[\"h100\",{\"1\":{\"632\":1}}],[\"h1>\",{\"1\":{\"135\":1,\"528\":1,\"529\":1,\"532\":1,\"534\":2,\"535\":4}}],[\"h2>\",{\"1\":{\"484\":3,\"487\":1,\"494\":1,\"521\":5,\"539\":1}}],[\"h2o\",{\"1\":{\"121\":1}}],[\"h5新增\",{\"1\":{\"673\":1}}],[\"h5\",{\"1\":{\"249\":1}}],[\"head\",{\"1\":{\"663\":1,\"694\":1,\"707\":2}}],[\"headers\",{\"1\":{\"695\":2,\"707\":1}}],[\"header\",{\"0\":{\"695\":1},\"1\":{\"653\":1,\"696\":1,\"700\":1}}],[\"header>div>p+span\",{\"1\":{\"632\":1}}],[\"head>\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":1,\"706\":1}}],[\"hehehehe\",{\"1\":{\"422\":1}}],[\"hello2\",{\"1\":{\"240\":2}}],[\"hello1\",{\"1\":{\"240\":2}}],[\"hello\",{\"0\":{\"427\":1},\"1\":{\"239\":3,\"240\":5,\"244\":2,\"274\":2,\"300\":1,\"382\":1,\"384\":6,\"385\":3,\"402\":1,\"415\":1,\"416\":1,\"419\":1,\"420\":1,\"422\":3,\"427\":1,\"428\":1,\"460\":1,\"463\":2,\"528\":2,\"529\":2,\"532\":4}}],[\"height可省略且必须跟在font\",{\"1\":{\"622\":1}}],[\"height之间用\",{\"1\":{\"622\":1}}],[\"height的值等于div的高heght\",{\"1\":{\"622\":1}}],[\"height\",{\"1\":{\"190\":1,\"398\":5,\"406\":1,\"455\":5,\"460\":1,\"463\":3,\"470\":2,\"471\":2,\"472\":2,\"474\":2,\"475\":2,\"480\":2,\"591\":1,\"592\":1,\"593\":2,\"598\":2,\"599\":1,\"610\":3,\"611\":1,\"616\":2,\"617\":1,\"622\":1,\"630\":1,\"632\":1,\"642\":1,\"643\":1,\"646\":1,\"653\":1,\"654\":1,\"655\":1,\"671\":1,\"674\":1}}],[\"hight\",{\"1\":{\"622\":1}}],[\"hidden\",{\"1\":{\"591\":1,\"592\":1,\"593\":1,\"624\":1,\"625\":1,\"626\":1,\"628\":1,\"630\":1,\"633\":1,\"654\":1,\"673\":1}}],[\"history\",{\"1\":{\"473\":1,\"481\":1,\"503\":5,\"505\":1,\"507\":1}}],[\"hi\",{\"1\":{\"223\":1}}],[\"human\",{\"1\":{\"191\":2}}],[\"hugecapacity\",{\"1\":{\"59\":1}}],[\"handlemessage\",{\"1\":{\"405\":4}}],[\"having在数据分组后进行过滤\",{\"1\":{\"161\":1}}],[\"having作用于组\",{\"1\":{\"161\":1}}],[\"having和where区别\",{\"0\":{\"161\":1}}],[\"haserror\",{\"1\":{\"530\":2}}],[\"hasownproperty\",{\"1\":{\"234\":1,\"355\":3}}],[\"has\",{\"1\":{\"91\":1,\"238\":1}}],[\"hash\",{\"1\":{\"53\":1,\"72\":1,\"234\":6}}],[\"hashentry是一个链表结构的元素\",{\"1\":{\"52\":1,\"71\":1}}],[\"hashentry数组的数据进行修改时\",{\"1\":{\"52\":1,\"71\":1}}],[\"hashentry数组里的元素\",{\"1\":{\"52\":1,\"71\":1}}],[\"hashentry数组\",{\"1\":{\"52\":1,\"57\":1,\"71\":1}}],[\"hashentry数组结构组成\",{\"1\":{\"52\":1,\"71\":1}}],[\"hashentry\",{\"1\":{\"52\":1,\"71\":1}}],[\"hash值和key值\",{\"1\":{\"50\":1,\"69\":1}}],[\"hash值再经过哈希算法获得数组索引位置\",{\"1\":{\"49\":1,\"68\":1}}],[\"hashtable线程安全\",{\"0\":{\"56\":1}}],[\"hashtable\",{\"1\":{\"46\":1,\"56\":1}}],[\"hashmap<>\",{\"1\":{\"85\":1}}],[\"hashmap1\",{\"1\":{\"53\":1,\"72\":1}}],[\"hashmap类似\",{\"1\":{\"52\":1,\"71\":1}}],[\"hashmap的原理\",{\"0\":{\"48\":1}}],[\"hashmap的主体\",{\"1\":{\"46\":1}}],[\"hashmap\",{\"0\":{\"67\":1},\"1\":{\"46\":2,\"50\":1}}],[\"hashmap实现一样\",{\"1\":{\"44\":1}}],[\"hashmap实现的哈希表\",{\"1\":{\"44\":1}}],[\"hashmap来保存元素\",{\"1\":{\"44\":1}}],[\"hashmap原理\",{\"1\":{\"9\":1}}],[\"hashset的子类\",{\"1\":{\"44\":1}}],[\"hashset\",{\"1\":{\"44\":1}}],[\"hashcode\",{\"1\":{\"9\":1}}],[\"hashcode与\",{\"0\":{\"9\":1}}],[\"host\",{\"1\":{\"695\":1}}],[\"hover\",{\"1\":{\"586\":1,\"623\":1,\"639\":1,\"653\":1}}],[\"hobbies\",{\"1\":{\"521\":7}}],[\"homemessage\",{\"1\":{\"512\":1}}],[\"homenews\",{\"1\":{\"512\":1}}],[\"home\",{\"1\":{\"470\":1,\"471\":1,\"472\":2,\"473\":8,\"474\":3,\"475\":3,\"478\":3,\"481\":6,\"506\":6,\"507\":1,\"510\":2,\"511\":4,\"512\":5,\"513\":2}}],[\"hook\",{\"1\":{\"407\":2}}],[\"hope<\",{\"1\":{\"135\":1}}],[\"hope\",{\"1\":{\"128\":2,\"136\":1,\"142\":1,\"144\":1}}],[\"hotpot\",{\"0\":{\"74\":1}}],[\"hh\",{\"1\":{\"95\":8}}],[\"html2\",{\"1\":{\"583\":1}}],[\"html模板已更新\",{\"1\":{\"539\":1}}],[\"html模板已渲染\",{\"1\":{\"539\":1}}],[\"html模板已加载\",{\"1\":{\"539\":1}}],[\"html模板未更新\",{\"1\":{\"539\":1}}],[\"html模板未渲染\",{\"1\":{\"539\":2}}],[\"html模板未加载\",{\"1\":{\"539\":1}}],[\"html=\",{\"1\":{\"529\":1}}],[\"html取内容\",{\"1\":{\"529\":1}}],[\"htmldivelement\",{\"1\":{\"454\":1}}],[\"htmlimageelement\",{\"1\":{\"415\":1}}],[\"html5的history模式\",{\"1\":{\"503\":1}}],[\"html5\",{\"0\":{\"656\":1},\"1\":{\"248\":2,\"656\":2,\"679\":1,\"680\":1}}],[\"html>\",{\"1\":{\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":2,\"243\":2,\"528\":2,\"529\":2,\"530\":2,\"531\":2,\"532\":2,\"533\":2,\"534\":2,\"535\":2,\"536\":2,\"537\":2,\"538\":2,\"539\":2,\"663\":2,\"706\":2}}],[\"html\",{\"0\":{\"529\":2,\"663\":1,\"724\":1},\"1\":{\"87\":1,\"169\":1,\"259\":2,\"449\":1,\"487\":1,\"489\":1,\"521\":2,\"580\":1,\"581\":5,\"582\":3,\"583\":1,\"586\":1,\"589\":1,\"633\":1,\"648\":1,\"655\":1,\"656\":2,\"657\":1,\"662\":1,\"663\":1,\"666\":2,\"693\":1}}],[\"http2\",{\"0\":{\"696\":1},\"1\":{\"696\":1}}],[\"http1\",{\"0\":{\"696\":1},\"1\":{\"696\":1}}],[\"http面试必会的\",{\"1\":{\"692\":1}}],[\"http缓存之协商缓存和强制缓存\",{\"1\":{\"692\":1}}],[\"https是什么\",{\"1\":{\"701\":1}}],[\"https\",{\"0\":{\"697\":1,\"699\":1},\"1\":{\"128\":2,\"169\":1,\"172\":1,\"206\":2,\"243\":1,\"348\":2,\"423\":2,\"489\":1,\"650\":1,\"666\":1,\"697\":1,\"699\":4,\"704\":5,\"706\":1,\"707\":2}}],[\"http\",{\"0\":{\"684\":1,\"693\":1,\"695\":1,\"699\":1},\"1\":{\"25\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":2,\"530\":2,\"531\":1,\"532\":2,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"580\":2,\"663\":2,\"666\":1,\"675\":1,\"684\":2,\"686\":2,\"689\":2,\"692\":1,\"693\":2,\"696\":8,\"697\":1,\"699\":4,\"700\":1,\"704\":1,\"706\":1}}],[\"h\",{\"1\":{\"32\":1,\"293\":2,\"499\":2,\"545\":2}}],[\"典型的场景是购物车\",{\"1\":{\"25\":1}}],[\"③登录一次网站后访问网站其他页面不需要重新登录\",{\"1\":{\"25\":1}}],[\"为原型创建的新对象\",{\"1\":{\"351\":2}}],[\"为显式原型\",{\"1\":{\"351\":1}}],[\"为隐式原型\",{\"1\":{\"351\":1}}],[\"为rejected\",{\"1\":{\"316\":1,\"336\":1}}],[\"为数组中的每一个元素依次执行回调函数\",{\"1\":{\"242\":1}}],[\"为空就给默认值1\",{\"1\":{\"240\":1}}],[\"为什么需要超时等待\",{\"0\":{\"716\":1}}],[\"为什么需要四次挥手\",{\"0\":{\"715\":1}}],[\"为什么需要至少三次握手\",{\"0\":{\"713\":1}}],[\"为什么需要闭包\",{\"0\":{\"216\":1}}],[\"为什么是不可变的\",{\"0\":{\"14\":1}}],[\"为\",{\"1\":{\"182\":1,\"218\":1,\"298\":1,\"360\":1,\"379\":1}}],[\"为了在不可靠的信道上建立起可靠连接\",{\"1\":{\"713\":1}}],[\"为了更好地处理今天的互联网应用\",{\"1\":{\"656\":1}}],[\"为了将伪类\",{\"1\":{\"594\":1}}],[\"为了拿到异步结果\",{\"1\":{\"332\":1}}],[\"为了全局代码能够正常的执行\",{\"1\":{\"271\":1}}],[\"为了充分发挥\",{\"1\":{\"248\":1}}],[\"为了防止失效的连接请求报文段被服务端接收\",{\"1\":{\"713\":1}}],[\"为了防止\",{\"1\":{\"248\":1}}],[\"为了保存该函数中被引用的自由变量\",{\"1\":{\"216\":1}}],[\"为了内层函数能够引用外层函数的变量\",{\"1\":{\"215\":1}}],[\"为了丰富文档写作\",{\"1\":{\"117\":1}}],[\"为了安全考虑\",{\"1\":{\"25\":1}}],[\"为每个\",{\"1\":{\"115\":1}}],[\"在初次建立连接的时候\",{\"1\":{\"711\":1}}],[\"在缓存过期前可以使用\",{\"1\":{\"687\":1}}],[\"在请求头和响应头中都可以使用\",{\"1\":{\"687\":1}}],[\"在过期时间内客户端不再重复发送请求\",{\"1\":{\"686\":1}}],[\"在过期时间后失效\",{\"1\":{\"678\":1,\"681\":1}}],[\"在后续的请求中\",{\"1\":{\"676\":1,\"677\":1}}],[\"在当前页面打开\",{\"1\":{\"667\":1}}],[\"在父级内联框架内打开\",{\"1\":{\"667\":1}}],[\"在父函数中定义并调用子函数\",{\"1\":{\"212\":1}}],[\"在父函数定义并返回子函数\",{\"1\":{\"212\":1}}],[\"在最上层内联框架打开\",{\"1\":{\"667\":1}}],[\"在最新的\",{\"1\":{\"589\":1}}],[\"在新页面打开\",{\"1\":{\"667\":1}}],[\"在没有使用协商缓存的情况下会重复首次请求的步骤\",{\"1\":{\"686\":1}}],[\"在没有加载\",{\"1\":{\"658\":1}}],[\"在没有设置主键的情况下使用该id产生一个簇拥索引\",{\"1\":{\"170\":1}}],[\"在行盒中以基线对齐\",{\"1\":{\"633\":1}}],[\"在获取资源\",{\"1\":{\"633\":1}}],[\"在类型为radio的input中\",{\"1\":{\"628\":1}}],[\"在类内部和子类中可以访问\",{\"1\":{\"394\":1}}],[\"在元素之后插入内容\",{\"1\":{\"623\":1}}],[\"在元素之前插入内容\",{\"1\":{\"623\":1}}],[\"在相邻元素外分别包裹\",{\"1\":{\"591\":1}}],[\"在bfc中\",{\"1\":{\"588\":2}}],[\"在不同域之间相互请求资源\",{\"1\":{\"705\":1}}],[\"在不重新请求页面的情况下\",{\"1\":{\"582\":1}}],[\"在不想给某些javascript添加具体的数据类型时\",{\"1\":{\"402\":1}}],[\"在数组最前面添加元素\",{\"1\":{\"525\":1}}],[\"在数组最后增加元素\",{\"1\":{\"525\":1}}],[\"在数组中存放不同的类型是不好的习惯\",{\"1\":{\"464\":1}}],[\"在路由组件内定义beforerouteenter\",{\"1\":{\"515\":1}}],[\"在app\",{\"1\":{\"506\":1}}],[\"在vuerouter对象中配置路由映射\",{\"1\":{\"506\":1}}],[\"在vue实例的作用范围内使用组件<my\",{\"1\":{\"484\":1}}],[\"在中插槽指定位置插入\",{\"1\":{\"493\":1}}],[\"在其中可以定义可选类型\",{\"1\":{\"448\":1}}],[\"在函数的重载中\",{\"1\":{\"437\":1}}],[\"在函数中就是ao对象\",{\"1\":{\"272\":1}}],[\"在参数中如何编写类型\",{\"1\":{\"431\":1}}],[\"在被其他地方调用时\",{\"1\":{\"428\":1}}],[\"在定义这个函数时\",{\"1\":{\"440\":1}}],[\"在定义一个函数时\",{\"1\":{\"409\":1}}],[\"在定时器到时之前状态仍为等待状态\",{\"1\":{\"318\":1}}],[\"在开发中\",{\"1\":{\"408\":1}}],[\"在这个版本\",{\"1\":{\"357\":1}}],[\"在所有对象\",{\"1\":{\"351\":2}}],[\"在未来特定的时间调用\",{\"1\":{\"332\":1}}],[\"在迭代器那节\",{\"1\":{\"306\":1}}],[\"在解析函数成为ast树结构时\",{\"1\":{\"272\":1}}],[\"在代码执行中\",{\"1\":{\"271\":1}}],[\"在代码执行前\",{\"1\":{\"271\":1}}],[\"在parser转成ast的过程中\",{\"1\":{\"271\":1}}],[\"在线示例\",{\"1\":{\"593\":1,\"638\":1}}],[\"在线\",{\"1\":{\"267\":1}}],[\"在线预览\",{\"1\":{\"206\":1,\"348\":1}}],[\"在一个应用中\",{\"1\":{\"582\":1}}],[\"在一个函数\",{\"1\":{\"264\":1}}],[\"在一开始时就会被执行\",{\"1\":{\"264\":1}}],[\"在转换过程中有两个重要的阶段\",{\"1\":{\"264\":1}}],[\"在运行\",{\"1\":{\"262\":1}}],[\"在运行的时候\",{\"1\":{\"31\":1}}],[\"在每一次事件循环的tick中\",{\"1\":{\"255\":1}}],[\"在吃\",{\"1\":{\"241\":4}}],[\"在es6以前\",{\"1\":{\"240\":1}}],[\"在软件系统中\",{\"1\":{\"228\":1}}],[\"在计算机科学中\",{\"1\":{\"228\":1}}],[\"在计算机科学文献中被称作闭包\",{\"1\":{\"209\":1}}],[\"在堆中创建新的内存保存拷贝后的对象\",{\"1\":{\"227\":2}}],[\"在执行的过程中执行到一个函数时\",{\"1\":{\"272\":1}}],[\"在执行过程中\",{\"1\":{\"263\":1}}],[\"在执行宏任务前\",{\"1\":{\"251\":1}}],[\"在执行\",{\"1\":{\"218\":1}}],[\"在支持头等函数的编程语言中都存在\",{\"1\":{\"216\":1}}],[\"在全局下使用\",{\"1\":{\"211\":1}}],[\"在全局作用域定义的变量\",{\"1\":{\"210\":1}}],[\"在预编译阶段\",{\"1\":{\"211\":1}}],[\"在js里\",{\"1\":{\"211\":1}}],[\"在某个作用域外定义但在该作用域内使用的变量\",{\"1\":{\"210\":1}}],[\"在某个对象上定义一个新属性\",{\"1\":{\"182\":1}}],[\"在块级或函数作用域定义的变量\",{\"1\":{\"210\":1}}],[\"在此之前\",{\"1\":{\"250\":1}}],[\"在此上下文中不允许重复参数名称\",{\"1\":{\"199\":1}}],[\"在此结构的基础上\",{\"1\":{\"46\":1}}],[\"在内存中创建一个空的临时对象\",{\"1\":{\"192\":2,\"363\":2}}],[\"在控制台\",{\"1\":{\"182\":1}}],[\"在可重复读和读已提交隔离级别下触发\",{\"1\":{\"169\":1}}],[\"在清空表中数据的时候使用\",{\"1\":{\"168\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"107\":1}}],[\"在链表长度超过一定阈值\",{\"1\":{\"53\":1,\"72\":1}}],[\"在反序列化后变量值将会被置成类型的默认值\",{\"1\":{\"38\":1}}],[\"在编译期间\",{\"1\":{\"27\":1}}],[\"在\",{\"1\":{\"25\":1,\"167\":1,\"179\":1,\"209\":1,\"264\":1,\"309\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":1,\"319\":1,\"320\":2,\"487\":1,\"639\":1,\"656\":1,\"663\":1}}],[\"在gc垃圾收集器执行的时候会调用被回收对象的此方法\",{\"1\":{\"13\":1}}],[\"这表示服务器提供了请求的网页\",{\"1\":{\"694\":1}}],[\"这些元素在\",{\"1\":{\"656\":1}}],[\"这些特性使得css极度灵活\",{\"1\":{\"648\":1}}],[\"这可以用于优化更新性能\",{\"1\":{\"521\":1}}],[\"这一系列都让用户体验相当不好\",{\"1\":{\"663\":1}}],[\"这一点和已经废弃的\",{\"1\":{\"493\":1}}],[\"这一行刚好正在执行删除或更新操作时\",{\"1\":{\"169\":1}}],[\"这里的参数是context上下文\",{\"1\":{\"555\":1}}],[\"这里cpnclick没有参数会默认把item传过去\",{\"1\":{\"487\":1}}],[\"这里是内容\",{\"1\":{\"151\":1,\"152\":1,\"156\":1,\"157\":1,\"560\":1,\"561\":1,\"565\":1,\"566\":1,\"570\":1,\"571\":1,\"575\":1,\"576\":1}}],[\"这另一个函数又依赖另一个函数\",{\"1\":{\"333\":1}}],[\"这意味着对象\",{\"1\":{\"299\":1}}],[\"这种情况不需要\",{\"1\":{\"499\":1}}],[\"这种情况需要编译器\",{\"1\":{\"499\":1}}],[\"这种方式被称为即时编译\",{\"1\":{\"262\":1}}],[\"这种语法\",{\"1\":{\"239\":1}}],[\"这种函数对象与作用域\",{\"1\":{\"209\":1}}],[\"这样也可以实现状态管理功能\",{\"1\":{\"543\":1}}],[\"这样会报错\",{\"1\":{\"455\":1}}],[\"这样无法获得成功状态\",{\"1\":{\"345\":1}}],[\"这样拿不到异步结果\",{\"1\":{\"332\":1}}],[\"这样就在很大程度上提升了代码的执行效率\",{\"1\":{\"266\":1}}],[\"这样大大提升了代码的执行效率\",{\"1\":{\"263\":1}}],[\"这样的组合就是闭包\",{\"1\":{\"209\":1}}],[\"这样只要\",{\"1\":{\"53\":1,\"72\":1}}],[\"这涉及到查询语句所要求的字段是否全部命中了索引\",{\"1\":{\"174\":1}}],[\"这是一个函数\",{\"1\":{\"239\":1}}],[\"这是一条摘要\",{\"1\":{\"150\":1}}],[\"这是测试显示的页脚\",{\"1\":{\"142\":1}}],[\"这是文章的标题\",{\"0\":{\"142\":1}}],[\"这是脚注内容\",{\"1\":{\"139\":1}}],[\"这是因为用户登录的时候我们可以存放了一个\",{\"1\":{\"25\":1}}],[\"这也就是通常所说类型擦除\",{\"1\":{\"27\":1}}],[\"这个时候\",{\"1\":{\"521\":1}}],[\"这个时候可以不添加的类型注解\",{\"1\":{\"409\":1}}],[\"这个过程称之为类型推导\",{\"1\":{\"460\":1}}],[\"这个过程也称之为变量的作用域提升\",{\"1\":{\"271\":1}}],[\"这个\",{\"1\":{\"357\":1}}],[\"这个作为参数的函数就是回调函数\",{\"1\":{\"332\":1}}],[\"这个算法是设置一个根对象\",{\"1\":{\"276\":1}}],[\"这个对象就可以被销毁掉\",{\"1\":{\"276\":1}}],[\"这个对象放在字符串常量池中\",{\"1\":{\"20\":1}}],[\"这个缺点可以通过原型模式解决\",{\"1\":{\"190\":1}}],[\"这个事情不归我们管\",{\"1\":{\"24\":1}}],[\"②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了\",{\"1\":{\"25\":1}}],[\"比移动端大\",{\"1\":{\"663\":1}}],[\"比喻\",{\"1\":{\"248\":1,\"678\":1}}],[\"比如序号\",{\"1\":{\"710\":1}}],[\"比如函数参数的类型\",{\"1\":{\"265\":1}}],[\"比如\",{\"1\":{\"244\":1,\"262\":1,\"656\":1,\"710\":1}}],[\"比如在\",{\"1\":{\"195\":1}}],[\"比如用\",{\"1\":{\"91\":1}}],[\"比如循环\",{\"1\":{\"91\":1}}],[\"比如转换成string\",{\"1\":{\"91\":1}}],[\"比如我们想看这个limitstream里面是什么\",{\"1\":{\"91\":1}}],[\"比如①我们在\",{\"1\":{\"25\":1}}],[\"比较这两个对象\",{\"1\":{\"10\":1}}],[\"比较该类的两个对象时\",{\"1\":{\"10\":1}}],[\"比较的是对象的内存地址\",{\"1\":{\"10\":1}}],[\"比较的是值\",{\"1\":{\"10\":1}}],[\"送了过来\",{\"1\":{\"24\":1}}],[\"自\",{\"1\":{\"656\":1}}],[\"自执行函数\",{\"1\":{\"385\":1}}],[\"自然前三位也是\",{\"1\":{\"357\":1}}],[\"自身引用\",{\"1\":{\"309\":1,\"319\":1}}],[\"自己定义一个方法整合一下\",{\"1\":{\"243\":1}}],[\"自己到后面办公室联系了b的人\",{\"1\":{\"24\":1}}],[\"自增并将\",{\"1\":{\"218\":1}}],[\"自由变量会在其作用域链上查找\",{\"1\":{\"217\":1}}],[\"自由变量的绑定在函数定义时就已经确定\",{\"1\":{\"211\":1}}],[\"自由变量的查找会从本级作用域依次向外部作用域\",{\"1\":{\"211\":1}}],[\"自由变量\",{\"1\":{\"210\":1}}],[\"自动推导\",{\"1\":{\"408\":1}}],[\"自动将\",{\"1\":{\"372\":1}}],[\"自动化执行一系列函数\",{\"1\":{\"293\":1}}],[\"自动返回\",{\"1\":{\"182\":1}}],[\"自动装箱\",{\"0\":{\"18\":1}}],[\"自平衡的排序二叉树\",{\"1\":{\"44\":1,\"46\":1}}],[\"自定义名字\",{\"1\":{\"667\":1}}],[\"自定义组件\",{\"1\":{\"531\":1}}],[\"自定义事件\",{\"1\":{\"487\":1}}],[\"自定义类的迭代\",{\"0\":{\"301\":1},\"1\":{\"306\":1}}],[\"自定义数组迭代器\",{\"1\":{\"299\":1}}],[\"自定义它们\",{\"1\":{\"146\":1}}],[\"自定义对齐\",{\"0\":{\"122\":1}}],[\"自定义标题\",{\"1\":{\"119\":5}}],[\"自定义容器\",{\"0\":{\"119\":1}}],[\"自定义排序\",{\"1\":{\"90\":1}}],[\"自定义函数式接口\",{\"0\":{\"84\":1},\"1\":{\"84\":1}}],[\"自定义\",{\"1\":{\"32\":1}}],[\"白己乘车去了b局\",{\"1\":{\"24\":1}}],[\"你听得到吗\",{\"1\":{\"712\":2}}],[\"你就可以使用\",{\"1\":{\"645\":1}}],[\"你就从a退了出来\",{\"1\":{\"24\":1}}],[\"你好啊\",{\"1\":{\"420\":2,\"428\":1,\"487\":2,\"488\":1,\"521\":3}}],[\"你能手写一个\",{\"1\":{\"329\":1}}],[\"你怎么能还不懂闭包\",{\"1\":{\"226\":1}}],[\"你需要阅读\",{\"1\":{\"115\":1}}],[\"你应该创建和编写\",{\"1\":{\"113\":1}}],[\"你可以使用\",{\"1\":{\"645\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"113\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"146\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"107\":1}}],[\"你可以将图片和\",{\"1\":{\"145\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"145\":1}}],[\"你可以在\",{\"1\":{\"144\":1}}],[\"你可以标记\",{\"1\":{\"125\":1}}],[\"你先去了a局\",{\"1\":{\"24\":2}}],[\"然后刷新页面\",{\"1\":{\"672\":1}}],[\"然后将优化后字节码编译成更高效的机器码存储起来\",{\"1\":{\"266\":1}}],[\"然后返回目标对象\",{\"1\":{\"230\":1}}],[\"然后给每一段数据配一把锁\",{\"1\":{\"52\":1,\"71\":1}}],[\"然后每隔几分钟到厨房看一下水有没有烧开\",{\"1\":{\"39\":1}}],[\"然后在进行类型擦除\",{\"1\":{\"29\":1}}],[\"然后\",{\"1\":{\"24\":1}}],[\"假设两次握手后\",{\"1\":{\"713\":1}}],[\"假设你去办理某个执照\",{\"1\":{\"24\":1}}],[\"假设父类的构造方法如果能够被子类重写则子类类名必须与父类类名一致才行\",{\"1\":{\"11\":1}}],[\"举例说明\",{\"1\":{\"24\":1}}],[\"发送端\",{\"1\":{\"711\":1}}],[\"发送数据的格式\",{\"1\":{\"695\":1}}],[\"发送给服务端\",{\"1\":{\"676\":1,\"677\":1}}],[\"发送一个状态码\",{\"1\":{\"24\":1}}],[\"发出\",{\"1\":{\"671\":1,\"672\":1}}],[\"发生改变\",{\"1\":{\"587\":1}}],[\"发射事件\",{\"1\":{\"487\":1}}],[\"发布订阅者模式\",{\"1\":{\"331\":1}}],[\"发动机主要是美国发展起来\",{\"1\":{\"262\":1}}],[\"发动机\",{\"1\":{\"262\":1}}],[\"发现\",{\"1\":{\"217\":2}}],[\"发现子函数引用到父函数的变量\",{\"1\":{\"217\":1}}],[\"发⽣阶段\",{\"1\":{\"12\":1}}],[\"发⽣范围\",{\"1\":{\"12\":1}}],[\"发⽣在同⼀个类中\",{\"1\":{\"12\":1}}],[\"udp\",{\"1\":{\"710\":3}}],[\"ul>li\",{\"1\":{\"632\":1}}],[\"ul>\",{\"1\":{\"495\":1,\"533\":2,\"536\":1,\"537\":1}}],[\"ui\",{\"1\":{\"249\":1}}],[\"ua\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":2,\"706\":1}}],[\"util\",{\"1\":{\"244\":2}}],[\"util包它有一个compare\",{\"1\":{\"54\":1}}],[\"utf\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":2,\"706\":1}}],[\"u=eb0d02f850acaf334bdb14611a7d6d2e50591c57\",{\"1\":{\"206\":1,\"348\":1}}],[\"u\",{\"1\":{\"206\":1,\"348\":1}}],[\"us\",{\"1\":{\"704\":1}}],[\"usestate\",{\"1\":{\"407\":8}}],[\"use\",{\"1\":{\"384\":2,\"385\":1,\"473\":1,\"481\":1,\"505\":2,\"545\":1,\"546\":1,\"650\":1}}],[\"username\",{\"1\":{\"628\":2}}],[\"userlist\",{\"1\":{\"537\":2}}],[\"users\",{\"1\":{\"533\":2}}],[\"userid\",{\"1\":{\"510\":1}}],[\"user\",{\"1\":{\"206\":1,\"243\":6,\"244\":2,\"348\":1,\"505\":1,\"508\":1,\"516\":1,\"533\":7,\"537\":6,\"674\":1,\"695\":1,\"710\":1}}],[\"using\",{\"1\":{\"81\":1}}],[\"urlencoded\",{\"1\":{\"707\":1}}],[\"url的hash路径\",{\"1\":{\"503\":1}}],[\"url地址\",{\"1\":{\"415\":1}}],[\"url\",{\"0\":{\"580\":1},\"1\":{\"243\":9,\"332\":13,\"423\":6,\"582\":2,\"622\":1,\"627\":1,\"628\":1,\"633\":1,\"677\":1,\"680\":1,\"691\":1,\"700\":3,\"704\":3}}],[\"url2\",{\"1\":{\"206\":2,\"348\":2}}],[\"url1\",{\"1\":{\"206\":2,\"348\":2}}],[\"url网址\",{\"1\":{\"24\":1}}],[\"uppercase\",{\"1\":{\"621\":1}}],[\"up=\",{\"1\":{\"532\":1}}],[\"updated\",{\"1\":{\"539\":1}}],[\"update\",{\"1\":{\"169\":1,\"170\":1}}],[\"upon\",{\"1\":{\"91\":1}}],[\"unshift\",{\"1\":{\"525\":1}}],[\"unknown\",{\"1\":{\"403\":2,\"415\":2}}],[\"unknown类型只能赋值给any和unknown类型\",{\"1\":{\"403\":1}}],[\"unknown类型\",{\"0\":{\"403\":1}}],[\"uncaught\",{\"1\":{\"205\":1,\"233\":1,\"238\":1}}],[\"uncommitted\",{\"1\":{\"166\":1}}],[\"underline\",{\"1\":{\"621\":1}}],[\"undefined\",{\"0\":{\"372\":1},\"1\":{\"179\":1,\"182\":1,\"194\":1,\"222\":1,\"233\":2,\"234\":1,\"238\":1,\"280\":1,\"296\":1,\"298\":3,\"299\":3,\"301\":2,\"302\":1,\"304\":2,\"306\":5,\"309\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":1,\"319\":1,\"321\":2,\"336\":2,\"351\":1,\"360\":1,\"369\":1,\"372\":4,\"385\":4,\"404\":1,\"416\":1,\"432\":1,\"466\":2}}],[\"undo\",{\"1\":{\"164\":1,\"170\":3}}],[\"u0000\",{\"1\":{\"15\":1}}],[\"从\",{\"1\":{\"700\":1}}],[\"从幂等性的角度\",{\"1\":{\"700\":1}}],[\"从参数的角度\",{\"1\":{\"700\":1}}],[\"从编码的角度\",{\"1\":{\"700\":1}}],[\"从缓存的角度\",{\"1\":{\"700\":1}}],[\"从输入\",{\"0\":{\"580\":1}}],[\"从而产生错误\",{\"1\":{\"713\":1}}],[\"从而消耗服务端的资源\",{\"1\":{\"710\":1}}],[\"从而方便人类和机器都能快速理解网页内容\",{\"1\":{\"657\":1}}],[\"从而做出相应的反应\",{\"1\":{\"536\":1}}],[\"从而使用v\",{\"1\":{\"521\":1}}],[\"从而垃圾回收几率低\",{\"1\":{\"75\":1}}],[\"从from跳转到to\",{\"1\":{\"513\":1}}],[\"从<tab\",{\"1\":{\"475\":1}}],[\"从左至右\",{\"1\":{\"293\":1}}],[\"从为什么会有闭包讲起\",{\"1\":{\"226\":1}}],[\"从语言的角度\",{\"1\":{\"216\":1}}],[\"从实践\",{\"1\":{\"215\":1}}],[\"从理论\",{\"1\":{\"214\":1}}],[\"从请求的次数来说\",{\"1\":{\"24\":1}}],[\"从效率来说\",{\"1\":{\"24\":1}}],[\"从运用的地方来说\",{\"1\":{\"24\":1}}],[\"从数据共享来说\",{\"1\":{\"24\":1}}],[\"从地址栏显示来说\",{\"1\":{\"24\":1}}],[\"从小到大可以隐式转换\",{\"1\":{\"5\":1}}],[\"tls握手过程\",{\"1\":{\"701\":1}}],[\"tls1\",{\"0\":{\"698\":1},\"1\":{\"698\":1}}],[\"tls\",{\"1\":{\"697\":3}}],[\"tcp被封装在ip数据报中\",{\"1\":{\"711\":1}}],[\"tcp\",{\"0\":{\"710\":1,\"711\":1},\"1\":{\"695\":1,\"700\":4,\"710\":4}}],[\"tc39\",{\"1\":{\"329\":1}}],[\"td\",{\"1\":{\"670\":1}}],[\"td>\",{\"1\":{\"617\":1,\"670\":4}}],[\"tfoot>\",{\"1\":{\"670\":1}}],[\"tfoot\",{\"1\":{\"670\":1}}],[\"tbody>\",{\"1\":{\"670\":1}}],[\"tbody\",{\"1\":{\"670\":1}}],[\"ttf\",{\"1\":{\"622\":1}}],[\"t1\",{\"1\":{\"442\":1}}],[\"t2\",{\"1\":{\"442\":2}}],[\"turndirection\",{\"1\":{\"456\":5,\"457\":5}}],[\"turbofan\",{\"0\":{\"266\":1},\"1\":{\"262\":1,\"263\":2,\"265\":1,\"266\":2}}],[\"tuple应用场景优化\",{\"1\":{\"407\":1}}],[\"tuple\",{\"1\":{\"407\":4}}],[\"tuple元组\",{\"1\":{\"406\":1}}],[\"tuple类型的应用场景\",{\"0\":{\"407\":1}}],[\"tuple类型\",{\"0\":{\"406\":1}}],[\"tj\",{\"1\":{\"307\":1}}],[\"ts\",{\"1\":{\"265\":1}}],[\"tmp\",{\"1\":{\"215\":2,\"218\":4}}],[\"tabbaritem\",{\"0\":{\"480\":1},\"1\":{\"472\":5,\"473\":5,\"474\":5,\"475\":4,\"478\":3,\"480\":2}}],[\"tabbar\",{\"0\":{\"479\":1},\"1\":{\"470\":4,\"471\":10,\"472\":12,\"473\":9,\"474\":13,\"475\":13,\"478\":13,\"479\":2}}],[\"tab\",{\"1\":{\"470\":8,\"471\":9,\"472\":10,\"473\":6,\"474\":8,\"475\":8,\"477\":1,\"478\":5,\"479\":2,\"480\":3}}],[\"table>\",{\"1\":{\"617\":1,\"670\":1}}],[\"table\",{\"0\":{\"614\":1,\"617\":1,\"670\":1},\"1\":{\"168\":3,\"174\":1,\"589\":1,\"611\":2,\"614\":1,\"617\":1,\"670\":3}}],[\"tarbar组件案例\",{\"0\":{\"469\":1}}],[\"target会返回该函数的引用\",{\"1\":{\"198\":1}}],[\"target是es6新引入的属性\",{\"1\":{\"198\":1}}],[\"target\",{\"0\":{\"667\":1},\"1\":{\"198\":1,\"230\":3,\"241\":4,\"521\":2,\"623\":1,\"665\":1,\"672\":1}}],[\"tag=\",{\"1\":{\"512\":1}}],[\"tag\",{\"1\":{\"142\":1,\"507\":1}}],[\"tel\",{\"1\":{\"628\":1,\"666\":1,\"673\":1}}],[\"template标签\",{\"1\":{\"485\":1}}],[\"template\",{\"1\":{\"484\":4,\"485\":5,\"486\":1,\"487\":2,\"488\":3,\"494\":1,\"495\":1,\"499\":1,\"500\":1,\"538\":2}}],[\"template>\",{\"1\":{\"470\":1,\"471\":2,\"472\":3,\"473\":2,\"474\":2,\"475\":2,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"485\":1,\"487\":2,\"492\":1,\"493\":2,\"494\":1,\"495\":2,\"506\":1,\"512\":1,\"546\":1}}],[\"teaching\",{\"1\":{\"391\":2,\"424\":2}}],[\"teacher\",{\"1\":{\"391\":1,\"424\":2}}],[\"textarea\",{\"1\":{\"674\":1}}],[\"text<\",{\"1\":{\"594\":1}}],[\"text=\",{\"1\":{\"529\":1}}],[\"text\",{\"0\":{\"529\":1},\"1\":{\"470\":1,\"471\":1,\"472\":6,\"473\":5,\"474\":6,\"475\":6,\"478\":4,\"480\":2,\"485\":1,\"521\":8,\"528\":1,\"530\":1,\"532\":1,\"603\":1,\"606\":1,\"616\":1,\"621\":4,\"628\":2,\"633\":1,\"654\":1,\"673\":1,\"706\":2,\"707\":1}}],[\"tex\",{\"0\":{\"133\":1}}],[\"tests\",{\"1\":{\"320\":4}}],[\"test4\",{\"1\":{\"87\":1}}],[\"test3\",{\"1\":{\"87\":1}}],[\"test2\",{\"1\":{\"87\":1}}],[\"test1\",{\"1\":{\"87\":1}}],[\"test\",{\"1\":{\"84\":2,\"87\":7,\"91\":2,\"320\":2,\"650\":1}}],[\"timing\",{\"1\":{\"631\":3}}],[\"time>\",{\"1\":{\"657\":2}}],[\"timers\",{\"1\":{\"254\":2}}],[\"timer\",{\"1\":{\"223\":4,\"254\":1,\"255\":2}}],[\"time\",{\"1\":{\"95\":6,\"96\":1,\"262\":1,\"397\":2,\"424\":4,\"628\":1}}],[\"tick\",{\"1\":{\"255\":2}}],[\"title2\",{\"1\":{\"467\":2}}],[\"title1\",{\"1\":{\"467\":2}}],[\"title>\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":1}}],[\"title\",{\"1\":{\"128\":1,\"142\":1,\"391\":1,\"407\":2,\"467\":2,\"486\":2,\"513\":3,\"674\":1}}],[\"type=\",{\"1\":{\"485\":1,\"521\":13,\"528\":1,\"531\":3,\"532\":1,\"536\":2,\"628\":4,\"639\":1,\"663\":1,\"672\":2,\"706\":2}}],[\"type用于定义类型别名\",{\"1\":{\"414\":1}}],[\"typescript中的字符串类型\",{\"1\":{\"460\":1}}],[\"typescript推导出来\",{\"1\":{\"435\":1}}],[\"typescript案例\",{\"0\":{\"426\":1}}],[\"typescript帮助确定id一定是string类型\",{\"1\":{\"412\":1}}],[\"typescript\",{\"1\":{\"427\":1,\"449\":1},\"2\":{\"400\":1,\"425\":1,\"429\":1,\"438\":1,\"446\":1,\"458\":1,\"468\":1}}],[\"typescript入门\",{\"2\":{\"388\":1}}],[\"typescript基础入门\",{\"0\":{\"386\":1}}],[\"typeof的类型缩小\",{\"1\":{\"424\":1}}],[\"typeof\",{\"0\":{\"356\":1,\"357\":1},\"1\":{\"234\":1,\"309\":6,\"316\":2,\"317\":2,\"318\":2,\"319\":6,\"350\":2,\"357\":7,\"405\":1,\"412\":1,\"424\":1,\"437\":2}}],[\"typeerror\",{\"1\":{\"233\":1,\"238\":1,\"309\":1,\"319\":1,\"325\":2,\"326\":1,\"327\":1,\"328\":1}}],[\"type\",{\"1\":{\"88\":1,\"291\":2,\"309\":3,\"319\":3,\"414\":3,\"417\":1,\"422\":1,\"423\":2,\"424\":4,\"431\":2,\"436\":1,\"440\":2,\"448\":2,\"450\":1,\"452\":5,\"454\":2,\"456\":1,\"457\":1,\"464\":1,\"475\":1,\"480\":1,\"487\":2,\"553\":2,\"623\":5,\"628\":1,\"673\":1,\"695\":2,\"707\":2}}],[\"th>\",{\"1\":{\"670\":5}}],[\"th\",{\"1\":{\"670\":1}}],[\"through\",{\"1\":{\"621\":1}}],[\"throttle\",{\"1\":{\"223\":2}}],[\"throw方法被捕获以后\",{\"1\":{\"305\":1}}],[\"throw\",{\"0\":{\"305\":1},\"1\":{\"204\":2,\"305\":1,\"309\":1,\"314\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"321\":1,\"322\":1,\"334\":1,\"337\":6,\"349\":2,\"405\":1}}],[\"thread\",{\"1\":{\"81\":2}}],[\"thistype\",{\"1\":{\"436\":2}}],[\"this的不明确类型\",{\"0\":{\"436\":1}}],[\"this的默认推导\",{\"0\":{\"435\":1}}],[\"this是可以被推导出来\",{\"1\":{\"435\":1}}],[\"this绑定的值\",{\"1\":{\"272\":1}}],[\"this\",{\"0\":{\"195\":1,\"197\":1,\"359\":1,\"385\":1},\"1\":{\"180\":2,\"184\":6,\"185\":2,\"186\":2,\"189\":1,\"190\":6,\"191\":6,\"192\":4,\"194\":1,\"195\":13,\"197\":1,\"223\":1,\"241\":3,\"279\":6,\"280\":7,\"281\":7,\"282\":1,\"283\":1,\"284\":8,\"285\":4,\"299\":4,\"301\":5,\"306\":6,\"309\":23,\"312\":9,\"313\":10,\"314\":10,\"316\":14,\"317\":4,\"318\":21,\"319\":23,\"321\":1,\"322\":2,\"352\":5,\"359\":2,\"360\":10,\"361\":5,\"362\":5,\"363\":13,\"364\":13,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"371\":8,\"372\":2,\"373\":1,\"375\":1,\"376\":8,\"377\":14,\"378\":8,\"379\":7,\"385\":7,\"390\":3,\"391\":3,\"393\":2,\"394\":1,\"395\":2,\"396\":3,\"398\":7,\"435\":1,\"436\":2,\"443\":3,\"473\":2,\"474\":6,\"475\":8,\"480\":8,\"487\":1,\"488\":7,\"508\":1,\"509\":1,\"510\":2,\"521\":1,\"525\":2,\"528\":1,\"532\":1,\"536\":7,\"539\":10,\"546\":3,\"551\":1,\"552\":2,\"553\":2,\"555\":2}}],[\"thead>\",{\"1\":{\"670\":1}}],[\"thead\",{\"1\":{\"670\":1}}],[\"then2\",{\"1\":{\"253\":2}}],[\"then1\",{\"1\":{\"253\":2,\"336\":3}}],[\"then3\",{\"1\":{\"253\":2}}],[\"then4\",{\"1\":{\"253\":2}}],[\"thenable\",{\"1\":{\"203\":2,\"309\":3,\"319\":3,\"323\":3,\"336\":2,\"341\":1,\"343\":1}}],[\"then\",{\"0\":{\"315\":1,\"317\":1,\"336\":1},\"1\":{\"202\":2,\"203\":2,\"205\":4,\"243\":5,\"249\":1,\"251\":2,\"252\":3,\"253\":4,\"255\":1,\"256\":1,\"307\":11,\"309\":11,\"316\":5,\"317\":7,\"318\":6,\"319\":12,\"321\":8,\"322\":5,\"323\":8,\"325\":3,\"326\":2,\"327\":2,\"328\":2,\"332\":1,\"334\":6,\"336\":15,\"337\":12,\"338\":1,\"341\":8,\"343\":1,\"344\":1,\"345\":1,\"346\":1,\"347\":2,\"348\":3,\"349\":9,\"555\":1}}],[\"themecolor\",{\"1\":{\"652\":2,\"653\":1}}],[\"theme\",{\"1\":{\"135\":1}}],[\"there\",{\"1\":{\"128\":2}}],[\"the\",{\"1\":{\"81\":1}}],[\"tr\",{\"1\":{\"670\":1}}],[\"tr>\",{\"1\":{\"617\":1,\"670\":3}}],[\"transmission\",{\"1\":{\"710\":1}}],[\"transport\",{\"1\":{\"697\":1}}],[\"transparent\",{\"1\":{\"642\":3}}],[\"transfer\",{\"1\":{\"693\":1}}],[\"transform形变\",{\"1\":{\"631\":1}}],[\"transform\",{\"1\":{\"607\":2,\"615\":2,\"621\":1,\"631\":1,\"643\":1}}],[\"transition\",{\"1\":{\"631\":4}}],[\"transition过渡\",{\"1\":{\"631\":1}}],[\"transient只能修饰变量\",{\"1\":{\"38\":1}}],[\"transient\",{\"1\":{\"38\":3}}],[\"translate3d\",{\"1\":{\"631\":1}}],[\"translate\",{\"1\":{\"607\":1,\"615\":1,\"631\":1,\"633\":1}}],[\"triangle\",{\"1\":{\"642\":1,\"643\":1}}],[\"trim=\",{\"1\":{\"521\":1}}],[\"trim\",{\"1\":{\"521\":1}}],[\"trident\",{\"1\":{\"258\":1}}],[\"trx\",{\"1\":{\"170\":1}}],[\"truncate\",{\"0\":{\"168\":1},\"1\":{\"168\":2}}],[\"true\",{\"1\":{\"4\":2,\"9\":1,\"10\":1,\"17\":1,\"142\":2,\"183\":4,\"184\":4,\"185\":5,\"186\":18,\"234\":8,\"239\":4,\"298\":5,\"299\":3,\"301\":2,\"302\":1,\"303\":1,\"304\":3,\"306\":5,\"309\":3,\"319\":3,\"350\":6,\"351\":4,\"354\":2,\"355\":5,\"358\":4,\"384\":1,\"402\":1,\"403\":1,\"405\":2,\"412\":1,\"441\":1,\"445\":1,\"462\":1,\"487\":1,\"494\":2,\"530\":2,\"534\":1,\"659\":1,\"707\":2}}],[\"tree\",{\"1\":{\"262\":1,\"580\":1}}],[\"treemap\",{\"1\":{\"46\":1}}],[\"treeset\",{\"1\":{\"44\":1}}],[\"try块\",{\"1\":{\"35\":1}}],[\"try\",{\"0\":{\"35\":1},\"1\":{\"35\":5,\"202\":3,\"205\":2,\"206\":1,\"305\":1,\"309\":6,\"314\":1,\"316\":1,\"318\":1,\"319\":6}}],[\"to=\",{\"1\":{\"506\":2,\"509\":1,\"512\":2}}],[\"totalprice\",{\"1\":{\"536\":2}}],[\"total\",{\"1\":{\"434\":3}}],[\"toutcstring\",{\"1\":{\"424\":1}}],[\"touppercase\",{\"1\":{\"412\":1,\"424\":1}}],[\"top值会传递给父元素\",{\"1\":{\"626\":1}}],[\"top\",{\"1\":{\"424\":1,\"456\":4,\"457\":5,\"472\":1,\"474\":1,\"475\":1,\"480\":1,\"615\":8,\"626\":1,\"627\":1,\"629\":5,\"633\":1,\"667\":1}}],[\"to\",{\"1\":{\"233\":1,\"238\":1,\"507\":1,\"513\":4,\"521\":1,\"631\":1}}],[\"toc\",{\"1\":{\"146\":1}}],[\"tolist\",{\"1\":{\"91\":1}}],[\"tom\",{\"1\":{\"87\":3,\"189\":2,\"190\":2,\"191\":4,\"352\":2}}],[\"tokens\",{\"1\":{\"264\":2}}],[\"token\",{\"0\":{\"682\":1},\"1\":{\"25\":3,\"263\":2,\"682\":5,\"683\":2}}],[\"toarray\",{\"1\":{\"22\":4,\"91\":2}}],[\"t\",{\"1\":{\"22\":1,\"87\":14,\"93\":6,\"441\":2,\"443\":6,\"444\":1}}],[\"lt\",{\"1\":{\"535\":1}}],[\"less混入\",{\"1\":{\"655\":1}}],[\"less语法\",{\"0\":{\"651\":1}}],[\"lesscss\",{\"1\":{\"650\":1}}],[\"less编译或css在线编译https\",{\"1\":{\"650\":1}}],[\"less$\",{\"1\":{\"650\":1}}],[\"less代码的编译\",{\"0\":{\"650\":1}}],[\"less\",{\"0\":{\"649\":1},\"1\":{\"650\":6}}],[\"left\",{\"1\":{\"422\":2,\"424\":3,\"452\":1,\"456\":4,\"457\":5,\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"493\":1,\"588\":1,\"592\":1,\"593\":1,\"594\":1,\"607\":8,\"621\":1,\"627\":1,\"629\":5,\"630\":1}}],[\"lexical\",{\"1\":{\"264\":1}}],[\"le\",{\"1\":{\"217\":9,\"218\":1}}],[\"letter\",{\"1\":{\"623\":1}}],[\"letters\",{\"1\":{\"524\":1,\"525\":3}}],[\"let多次声明会报错\",{\"1\":{\"238\":1}}],[\"let在\",{\"1\":{\"238\":1}}],[\"let\",{\"0\":{\"238\":1},\"1\":{\"181\":5,\"182\":1,\"183\":1,\"184\":3,\"185\":1,\"186\":1,\"187\":3,\"189\":3,\"190\":2,\"191\":4,\"192\":1,\"194\":1,\"195\":4,\"196\":1,\"199\":1,\"211\":3,\"212\":7,\"215\":2,\"217\":5,\"218\":13,\"222\":2,\"223\":1,\"224\":1,\"228\":12,\"230\":4,\"231\":4,\"234\":2,\"238\":8,\"239\":9,\"241\":7,\"242\":2,\"243\":1,\"279\":2,\"280\":2,\"281\":2,\"282\":5,\"283\":4,\"284\":3,\"285\":2,\"288\":2,\"291\":3,\"298\":1,\"299\":1,\"300\":3,\"301\":1,\"306\":3,\"309\":7,\"319\":7,\"320\":1,\"323\":1,\"325\":2,\"326\":2,\"328\":2,\"332\":8,\"351\":2,\"352\":1,\"354\":3,\"355\":3,\"360\":6,\"361\":6,\"363\":3,\"364\":3,\"366\":1,\"367\":2,\"368\":2,\"371\":2,\"373\":2,\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"384\":4,\"402\":1,\"403\":5,\"407\":2,\"420\":1,\"422\":2,\"427\":1,\"428\":1,\"434\":1,\"457\":2,\"460\":3,\"461\":5,\"462\":1,\"463\":3,\"466\":2,\"528\":1,\"530\":1,\"531\":1,\"533\":1,\"534\":1,\"535\":1,\"537\":1,\"539\":1}}],[\"learn\",{\"1\":{\"87\":3}}],[\"length\",{\"1\":{\"22\":1,\"87\":1,\"240\":1,\"292\":6,\"298\":1,\"299\":1,\"301\":1,\"306\":2,\"325\":4,\"326\":3,\"327\":1,\"328\":2,\"406\":3,\"416\":2,\"427\":1,\"428\":2,\"437\":2,\"444\":3,\"549\":2,\"695\":1}}],[\"layer\",{\"1\":{\"697\":2}}],[\"layout\",{\"1\":{\"670\":1}}],[\"label\",{\"1\":{\"674\":1}}],[\"label可以跟某个input绑定\",{\"1\":{\"628\":1}}],[\"label>\",{\"1\":{\"521\":4,\"628\":4}}],[\"last\",{\"0\":{\"690\":1},\"1\":{\"623\":4,\"689\":3,\"690\":1}}],[\"lazy=\",{\"1\":{\"521\":1}}],[\"lazy\",{\"1\":{\"264\":1,\"521\":1}}],[\"languange\",{\"1\":{\"695\":1}}],[\"languageyear\",{\"1\":{\"449\":1}}],[\"language\",{\"1\":{\"239\":6,\"240\":1,\"241\":3,\"531\":5,\"662\":1}}],[\"lang=\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":2,\"706\":1}}],[\"lang\",{\"1\":{\"91\":1,\"623\":1}}],[\"lang包它有一个compareto\",{\"1\":{\"54\":1}}],[\"lamndafor\",{\"1\":{\"85\":1}}],[\"lambda体中调用方法的参数列表与返回值类型\",{\"1\":{\"88\":1}}],[\"lambda体中只有1条语句\",{\"1\":{\"78\":1}}],[\"lambdaclass\",{\"1\":{\"84\":1}}],[\"lambdainterfacedemo\",{\"1\":{\"84\":2}}],[\"lambdainterface\",{\"1\":{\"84\":2}}],[\"lambda\",{\"0\":{\"80\":1},\"1\":{\"78\":1,\"81\":1,\"82\":4,\"83\":1,\"85\":1}}],[\"lambda表达式的参数列表的数据类型可以省略\",{\"1\":{\"78\":1}}],[\"lambda表达式\",{\"0\":{\"76\":1},\"1\":{\"240\":1}}],[\"lifetime\",{\"1\":{\"716\":1}}],[\"linear\",{\"1\":{\"631\":1,\"633\":1}}],[\"line\",{\"1\":{\"610\":2,\"621\":1,\"622\":3,\"623\":1}}],[\"linkactiveclass\",{\"1\":{\"507\":1}}],[\"link属性\",{\"1\":{\"507\":1}}],[\"link>传递参数\",{\"1\":{\"509\":1}}],[\"link>对应的路由匹配成功时\",{\"1\":{\"507\":1}}],[\"link>之后渲染成什么组件\",{\"1\":{\"507\":1}}],[\"link>\",{\"1\":{\"506\":3,\"512\":2}}],[\"link>和<router\",{\"1\":{\"506\":1}}],[\"link\",{\"1\":{\"128\":1,\"506\":2,\"507\":1,\"509\":1,\"512\":2,\"529\":1,\"530\":2,\"623\":1,\"653\":1}}],[\"linkedhashmap\",{\"1\":{\"46\":1}}],[\"linkedhashmap其内部是基于\",{\"1\":{\"44\":1}}],[\"linkedhashmap来实现的链表+\",{\"1\":{\"44\":1}}],[\"linkedhashset是\",{\"1\":{\"44\":1}}],[\"linkedhashset\",{\"1\":{\"44\":1}}],[\"linkedlist\",{\"1\":{\"43\":1}}],[\"li>\",{\"1\":{\"487\":1,\"495\":1,\"524\":1,\"533\":2,\"536\":3,\"537\":1}}],[\"lily\",{\"1\":{\"417\":1}}],[\"light\",{\"1\":{\"128\":1}}],[\"limit\",{\"1\":{\"90\":1,\"91\":6}}],[\"listfilterstr\",{\"1\":{\"87\":1}}],[\"listeners保存到模型中\",{\"1\":{\"520\":1}}],[\"listener\",{\"0\":{\"83\":1}}],[\"list<integer>\",{\"1\":{\"82\":1,\"87\":3,\"90\":1,\"91\":1}}],[\"list<string>\",{\"1\":{\"22\":4,\"85\":1,\"87\":5,\"91\":3}}],[\"list\",{\"0\":{\"43\":1,\"47\":1},\"1\":{\"22\":15,\"47\":1,\"87\":9,\"90\":2}}],[\"list转换成数组\",{\"1\":{\"22\":1}}],[\"loop\",{\"1\":{\"659\":1}}],[\"loop=\",{\"1\":{\"659\":1}}],[\"lowecase\",{\"1\":{\"621\":1}}],[\"location\",{\"1\":{\"704\":1}}],[\"location的href属性\",{\"1\":{\"503\":1}}],[\"localstorage\",{\"0\":{\"675\":1,\"679\":1,\"681\":1},\"1\":{\"679\":1,\"681\":1,\"682\":1}}],[\"local\",{\"1\":{\"217\":1,\"218\":1,\"627\":1,\"628\":1}}],[\"localdatetime\",{\"1\":{\"95\":2,\"96\":3}}],[\"localdatetime的\",{\"1\":{\"94\":1}}],[\"localdate\",{\"1\":{\"95\":2,\"96\":3}}],[\"localtime\",{\"1\":{\"94\":1,\"95\":2,\"96\":3}}],[\"lock\",{\"1\":{\"169\":1}}],[\"log\",{\"1\":{\"164\":2,\"170\":3,\"180\":2,\"181\":5,\"183\":3,\"184\":6,\"185\":1,\"186\":3,\"187\":3,\"189\":2,\"190\":2,\"191\":6,\"194\":1,\"195\":4,\"196\":2,\"199\":2,\"202\":8,\"203\":1,\"204\":3,\"205\":21,\"211\":1,\"212\":4,\"214\":1,\"215\":1,\"217\":2,\"218\":13,\"222\":2,\"223\":4,\"224\":1,\"228\":9,\"230\":3,\"231\":1,\"233\":1,\"234\":13,\"235\":3,\"238\":6,\"239\":8,\"240\":10,\"241\":11,\"242\":4,\"243\":14,\"244\":1,\"251\":5,\"252\":13,\"253\":10,\"256\":13,\"273\":2,\"274\":1,\"279\":4,\"280\":7,\"281\":7,\"282\":6,\"283\":5,\"284\":7,\"285\":6,\"288\":3,\"290\":4,\"291\":8,\"292\":4,\"298\":5,\"299\":9,\"300\":2,\"301\":2,\"302\":4,\"303\":5,\"304\":6,\"305\":4,\"306\":12,\"307\":12,\"312\":2,\"313\":1,\"314\":1,\"316\":2,\"317\":10,\"318\":12,\"321\":4,\"322\":3,\"323\":3,\"324\":1,\"325\":3,\"326\":1,\"327\":2,\"328\":3,\"332\":6,\"333\":3,\"335\":1,\"336\":9,\"337\":10,\"338\":3,\"341\":6,\"343\":2,\"344\":2,\"345\":2,\"346\":2,\"347\":5,\"348\":1,\"349\":9,\"352\":5,\"354\":2,\"355\":10,\"360\":7,\"361\":4,\"362\":2,\"363\":4,\"364\":1,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"371\":5,\"372\":1,\"373\":1,\"375\":1,\"376\":5,\"377\":6,\"378\":4,\"379\":4,\"381\":2,\"382\":1,\"384\":7,\"385\":5,\"390\":3,\"391\":11,\"392\":3,\"393\":1,\"394\":1,\"395\":2,\"396\":1,\"397\":2,\"398\":2,\"399\":1,\"402\":1,\"403\":1,\"404\":2,\"405\":3,\"406\":3,\"409\":1,\"410\":2,\"411\":3,\"412\":2,\"413\":2,\"416\":2,\"417\":7,\"419\":2,\"420\":1,\"424\":8,\"427\":1,\"428\":2,\"431\":2,\"433\":1,\"434\":3,\"435\":1,\"436\":1,\"437\":2,\"445\":1,\"448\":2,\"453\":3,\"454\":1,\"455\":3,\"456\":4,\"457\":5,\"461\":1,\"463\":1,\"465\":1,\"487\":1,\"488\":6,\"513\":1,\"539\":19,\"555\":1,\"706\":1}}],[\"logy\",{\"1\":{\"133\":2}}],[\"logo\",{\"1\":{\"128\":2,\"653\":1}}],[\"load\",{\"1\":{\"206\":2,\"584\":1}}],[\"loadimg\",{\"1\":{\"206\":3,\"348\":3}}],[\"loader\",{\"1\":{\"32\":1,\"650\":6}}],[\"loadclass\",{\"1\":{\"31\":1}}],[\"long\",{\"0\":{\"6\":1},\"1\":{\"6\":1,\"15\":3,\"17\":1,\"91\":1}}],[\"数值越小\",{\"1\":{\"646\":1}}],[\"数值是以\",{\"1\":{\"357\":1}}],[\"数量\",{\"1\":{\"536\":2}}],[\"数字\",{\"1\":{\"296\":1}}],[\"数据安全\",{\"1\":{\"703\":1}}],[\"数据包\",{\"1\":{\"700\":3}}],[\"数据模型已更新\",{\"1\":{\"539\":2}}],[\"数据模型已加载\",{\"1\":{\"539\":1}}],[\"数据模型未加载\",{\"1\":{\"539\":1}}],[\"数据变化时\",{\"1\":{\"526\":1}}],[\"数据是复杂请求\",{\"1\":{\"707\":1}}],[\"数据是\",{\"1\":{\"357\":1}}],[\"数据流从左至右称为管道\",{\"1\":{\"293\":1}}],[\"数据流从右至左\",{\"1\":{\"293\":1}}],[\"数据对\",{\"1\":{\"266\":1}}],[\"数据类型\",{\"0\":{\"296\":1,\"401\":1}}],[\"数据类型和数据结构\",{\"1\":{\"228\":1}}],[\"数据类型将自动提升\",{\"1\":{\"5\":1}}],[\"数据描述符\",{\"0\":{\"183\":1},\"1\":{\"182\":1}}],[\"数据定义语言\",{\"1\":{\"168\":2}}],[\"数据保持一致\",{\"1\":{\"163\":1}}],[\"数据结构跟\",{\"1\":{\"53\":1,\"72\":1}}],[\"数据\",{\"1\":{\"43\":1,\"173\":1,\"176\":1}}],[\"数据库索引类型有哪些\",{\"0\":{\"172\":1}}],[\"数据库操作语言增删改查\",{\"1\":{\"168\":1}}],[\"数据库范式有哪些\",{\"0\":{\"167\":1}}],[\"数据库事务的实现原理呢\",{\"0\":{\"164\":1}}],[\"数据库\",{\"1\":{\"38\":1},\"2\":{\"177\":1}}],[\"数组原生迭代器\",{\"1\":{\"299\":1}}],[\"数组的几个响应式方法\",{\"0\":{\"525\":1}}],[\"数组的弊端\",{\"1\":{\"406\":1}}],[\"数组的方法foreach\",{\"1\":{\"371\":1}}],[\"数组的方法\",{\"1\":{\"287\":1}}],[\"数组的浅拷贝\",{\"0\":{\"231\":1}}],[\"数组中当前被处理的元素\",{\"1\":{\"242\":1}}],[\"数组中新增了map和reduce方法\",{\"1\":{\"242\":1}}],[\"数组解构\",{\"1\":{\"239\":1}}],[\"数组需要深拷贝\",{\"1\":{\"234\":2}}],[\"数组引用\",{\"1\":{\"88\":1}}],[\"数组+链表+红黑树\",{\"1\":{\"57\":1}}],[\"数组+链表\",{\"1\":{\"53\":1,\"72\":1}}],[\"数组+链表组成的\",{\"1\":{\"46\":1}}],[\"数组结构和\",{\"1\":{\"52\":1,\"71\":1}}],[\"数组是\",{\"1\":{\"46\":1}}],[\"数组来实现二叉堆\",{\"1\":{\"45\":1}}],[\"数组不够用时在原来的基础上扩展1倍\",{\"1\":{\"43\":1}}],[\"数组不够用时在原来的基础上扩展0\",{\"1\":{\"43\":1}}],[\"数组\",{\"1\":{\"43\":2,\"49\":1,\"52\":1,\"68\":1,\"71\":1,\"179\":1,\"217\":1,\"227\":1,\"228\":1,\"234\":1,\"244\":1,\"296\":1,\"328\":1}}],[\"数组转换成list\",{\"1\":{\"22\":1}}],[\"数组和list如何相互转化\",{\"0\":{\"22\":1}}],[\"拷贝对象\",{\"1\":{\"241\":1}}],[\"拷贝对象与原对象相互影响\",{\"1\":{\"229\":1}}],[\"拷贝对象与原对象不相互影响\",{\"1\":{\"229\":1,\"232\":1}}],[\"拷贝前\",{\"1\":{\"234\":1}}],[\"拷贝前后对象的基本类型\",{\"1\":{\"227\":1}}],[\"拷贝前后对象的基本类型数据互不影响\",{\"1\":{\"227\":1}}],[\"拷贝\",{\"1\":{\"21\":1}}],[\"包住多个\",{\"1\":{\"657\":1}}],[\"包裹动态组件时\",{\"1\":{\"489\":1}}],[\"包裹多个\",{\"1\":{\"326\":1}}],[\"包裹成功回调和失败回调\",{\"1\":{\"317\":1}}],[\"包裹\",{\"1\":{\"212\":2,\"309\":2,\"318\":3,\"319\":2,\"336\":1}}],[\"包括协商缓存\",{\"1\":{\"687\":1}}],[\"包括\",{\"1\":{\"663\":1}}],[\"包括图片视频\",{\"1\":{\"584\":1}}],[\"包括数组\",{\"1\":{\"351\":4}}],[\"包括处于\",{\"1\":{\"329\":1}}],[\"包括函数式编程和面向对象编程\",{\"1\":{\"179\":1}}],[\"包括这个对象所包含的内部对象\",{\"1\":{\"21\":1}}],[\"包含了可见的页面内容\",{\"1\":{\"663\":1}}],[\"包含了vue\",{\"1\":{\"484\":1}}],[\"包含v\",{\"1\":{\"523\":1}}],[\"包含tarbaritem组件\",{\"0\":{\"471\":1}}],[\"包含\",{\"1\":{\"119\":1}}],[\"包含一个\",{\"1\":{\"52\":1,\"71\":1}}],[\"包装类型的常量池\",{\"0\":{\"17\":1}}],[\"包装类型不赋值就是\",{\"1\":{\"16\":1}}],[\"包装类分别为\",{\"1\":{\"15\":1}}],[\"浅拷贝复制引用地址\",{\"1\":{\"241\":1}}],[\"浅拷贝与深拷贝\",{\"1\":{\"236\":1}}],[\"浅拷贝会直接复制内部对象的引用地址\",{\"1\":{\"21\":1}}],[\"浅拷贝会在堆上创建一个新的对象\",{\"1\":{\"21\":1}}],[\"浅拷贝\",{\"0\":{\"229\":1},\"1\":{\"21\":1,\"227\":2,\"234\":1,\"236\":1}}],[\"创建store文件下的index\",{\"1\":{\"546\":1}}],[\"创建stream\",{\"1\":{\"90\":1,\"91\":1}}],[\"创建vue实例\",{\"1\":{\"528\":1}}],[\"创建vuerouter对象\",{\"1\":{\"505\":2}}],[\"创建路由组件\",{\"1\":{\"506\":1}}],[\"创建组件构造器对象\",{\"1\":{\"484\":1}}],[\"创建组件\",{\"1\":{\"473\":1}}],[\"创建新对象\",{\"1\":{\"354\":1,\"355\":1}}],[\"创建新的克隆对象或数组\",{\"1\":{\"234\":1}}],[\"创建多个promise\",{\"1\":{\"344\":1,\"345\":1,\"347\":2}}],[\"创建多个对象的方式\",{\"0\":{\"188\":1}}],[\"创建\",{\"0\":{\"589\":1},\"1\":{\"334\":1}}],[\"创建出来的对象是可迭代对象\",{\"1\":{\"301\":1,\"306\":1}}],[\"创建数组迭代器的函数\",{\"1\":{\"298\":1,\"306\":1}}],[\"创建对象\",{\"1\":{\"284\":1,\"545\":1}}],[\"创建对象章节\",{\"1\":{\"188\":1}}],[\"创建的闭包对象被\",{\"1\":{\"218\":1}}],[\"创建的实例对象属于\",{\"1\":{\"189\":1}}],[\"创建过程\",{\"1\":{\"217\":1,\"225\":1}}],[\"创建了闭包\",{\"1\":{\"214\":1,\"215\":1}}],[\"创建了几个\",{\"0\":{\"20\":1}}],[\"创建单个对象的两种方式\",{\"0\":{\"180\":1}}],[\"创建索引和维护索引需要耗费许多时间\",{\"1\":{\"175\":1}}],[\"创建optional实例\",{\"1\":{\"93\":1}}],[\"创建一个新的\",{\"1\":{\"309\":1,\"319\":1}}],[\"创建一个新的对象\",{\"1\":{\"20\":1}}],[\"创建一个迭代指定范围的函数\",{\"1\":{\"306\":1}}],[\"创建一个封装继承过程的函数\",{\"1\":{\"283\":1}}],[\"创建一个独立作用域\",{\"1\":{\"218\":1}}],[\"创建一个空的optional实例\",{\"1\":{\"93\":1}}],[\"创建一个optional实例\",{\"1\":{\"93\":1}}],[\"创建代理类\",{\"1\":{\"32\":1}}],[\"对方的序号\",{\"1\":{\"712\":1}}],[\"对上一个数据包已经成功接收\",{\"1\":{\"711\":1}}],[\"对称加密\",{\"1\":{\"697\":1,\"698\":1}}],[\"对机器\",{\"1\":{\"658\":1}}],[\"对人\",{\"1\":{\"658\":1}}],[\"对齐\",{\"1\":{\"621\":1}}],[\"对比缓存\",{\"0\":{\"688\":1}}],[\"对比\",{\"0\":{\"583\":1}}],[\"对resolve\",{\"1\":{\"309\":1,\"319\":1}}],[\"对对象的浅拷贝\",{\"1\":{\"282\":1}}],[\"对变量赋值\",{\"1\":{\"271\":1}}],[\"对记录加\",{\"1\":{\"169\":2}}],[\"对\",{\"1\":{\"117\":1,\"694\":1}}],[\"对数组的统计\",{\"1\":{\"91\":1}}],[\"对每个元素进行操作返回新流\",{\"1\":{\"91\":1}}],[\"对一个数进行运算\",{\"1\":{\"84\":1}}],[\"对参数的数据类型\",{\"1\":{\"23\":1}}],[\"对应一个对象\",{\"1\":{\"20\":1}}],[\"对象模型中的属性\",{\"1\":{\"636\":1}}],[\"对象风格方式\",{\"1\":{\"553\":1}}],[\"对象信息\",{\"1\":{\"533\":1}}],[\"对象类型\",{\"0\":{\"410\":1},\"1\":{\"410\":1,\"411\":1}}],[\"对象中的属性是可以修改\",{\"1\":{\"395\":1}}],[\"对象无作用域\",{\"1\":{\"376\":1,\"377\":1}}],[\"对象均为失败状态\",{\"1\":{\"347\":1}}],[\"对象进行比赛\",{\"1\":{\"346\":1}}],[\"对象都有结果\",{\"1\":{\"345\":1}}],[\"对象都完成则为成功状态\",{\"1\":{\"325\":1,\"344\":1}}],[\"对象为失败状态\",{\"1\":{\"345\":1}}],[\"对象为失败状态时\",{\"1\":{\"345\":1}}],[\"对象为成功状态才捕获\",{\"1\":{\"337\":2}}],[\"对象拒绝或抛出异常\",{\"1\":{\"337\":1}}],[\"对象可以多次调用\",{\"1\":{\"336\":1}}],[\"对象方法\",{\"0\":{\"335\":1},\"1\":{\"335\":1}}],[\"对象时\",{\"1\":{\"334\":1}}],[\"对象才会有最终的状态\",{\"1\":{\"326\":1,\"345\":1}}],[\"对象共同决定\",{\"1\":{\"325\":1,\"344\":1}}],[\"对象包裹在一起形成一个新的\",{\"1\":{\"325\":1,\"344\":1}}],[\"对象包括属性\",{\"1\":{\"228\":1}}],[\"对象或函数\",{\"1\":{\"309\":1,\"319\":1}}],[\"对象拓展运算符\",{\"1\":{\"241\":1}}],[\"对象优化\",{\"0\":{\"241\":1}}],[\"对象解构\",{\"1\":{\"239\":1}}],[\"对象某个属性引用自身\",{\"1\":{\"234\":1}}],[\"对象具有唯一的标识符\",{\"1\":{\"228\":1}}],[\"对象是指内存中的可以被标识符引用的一块区域\",{\"1\":{\"228\":1}}],[\"对象是拥有属性和方法的数据\",{\"1\":{\"179\":1}}],[\"对象里的值\",{\"1\":{\"217\":1}}],[\"对象的内容由构造函数构造\",{\"1\":{\"363\":1}}],[\"对象的内容就是字面上的代码\",{\"1\":{\"363\":1}}],[\"对象的显式原型是原型链的最顶层\",{\"1\":{\"351\":2}}],[\"对象的显式原型是原型链的根\",{\"1\":{\"351\":2}}],[\"对象的影响\",{\"1\":{\"343\":1}}],[\"对象的状态决定\",{\"1\":{\"341\":1}}],[\"对象的状态由传入\",{\"1\":{\"341\":1}}],[\"对象的状态\",{\"1\":{\"338\":1}}],[\"对象的拒绝或异常\",{\"1\":{\"337\":1}}],[\"对象的\",{\"1\":{\"334\":2,\"336\":1}}],[\"对象的函数属性简写\",{\"1\":{\"241\":1}}],[\"对象的浅拷贝\",{\"0\":{\"230\":1}}],[\"对象的结果\",{\"1\":{\"202\":1,\"345\":1}}],[\"对象的属性\",{\"0\":{\"181\":1}}],[\"对象\",{\"0\":{\"20\":1},\"1\":{\"88\":1,\"191\":1,\"202\":2,\"203\":2,\"227\":1,\"228\":1,\"234\":2,\"241\":1,\"244\":1,\"296\":1,\"309\":6,\"319\":7,\"321\":1,\"322\":1,\"323\":2,\"325\":1,\"326\":1,\"336\":2,\"337\":1,\"338\":1,\"341\":2,\"344\":1,\"351\":2,\"357\":1,\"360\":2}}],[\"对于复杂请求\",{\"1\":{\"707\":1}}],[\"对于简单请求\",{\"1\":{\"707\":1}}],[\"对于从左往右的格式化\",{\"1\":{\"588\":1}}],[\"对于模块内部的\",{\"1\":{\"556\":1}}],[\"对于失败回调是函数则执行\",{\"1\":{\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1}}],[\"对于成功回调是函数则执行\",{\"1\":{\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1}}],[\"对于哪些没有引用到的对象\",{\"1\":{\"276\":1}}],[\"对于\",{\"1\":{\"145\":1}}],[\"对于三者使用的总结\",{\"1\":{\"14\":1}}],[\"对于引用数据类型来说\",{\"1\":{\"10\":1}}],[\"对于基本数据类型来说\",{\"1\":{\"10\":1}}],[\"×\",{\"1\":{\"19\":6}}],[\"√\",{\"1\":{\"19\":10}}],[\"当flex\",{\"1\":{\"646\":1}}],[\"当画面滚动时\",{\"1\":{\"629\":1}}],[\"当为n时\",{\"1\":{\"623\":1}}],[\"当得到结果为true时\",{\"1\":{\"534\":2}}],[\"当条件为false时\",{\"1\":{\"523\":2}}],[\"当<router\",{\"1\":{\"507\":1}}],[\"当进行一些类型断言\",{\"1\":{\"402\":1}}],[\"当其中一个\",{\"1\":{\"345\":1}}],[\"当调用\",{\"1\":{\"334\":2}}],[\"当promise状态为fulfilled\",{\"1\":{\"316\":1,\"336\":1}}],[\"当值为有限个时\",{\"1\":{\"298\":1}}],[\"当我们查找一个变量时\",{\"1\":{\"272\":1}}],[\"当一个对象的引用为0时\",{\"1\":{\"276\":1}}],[\"当一个对象有一个引用指向它时\",{\"1\":{\"276\":1}}],[\"当一个线程占用锁访问其中一个段数据时\",{\"1\":{\"52\":1,\"71\":1}}],[\"当一段代码不再是热点代码后\",{\"1\":{\"263\":1,\"266\":1}}],[\"当有已超时的\",{\"1\":{\"254\":1}}],[\"当函数执行完毕\",{\"1\":{\"213\":1,\"225\":1}}],[\"当前活动的目标元素\",{\"1\":{\"623\":1}}],[\"当前索引\",{\"1\":{\"533\":1}}],[\"当前导航即将要离开的路由对象\",{\"1\":{\"513\":1}}],[\"当前foo函数\",{\"1\":{\"428\":1}}],[\"当前\",{\"1\":{\"341\":1}}],[\"当前正在处理\",{\"1\":{\"242\":1}}],[\"当前元素在数组中的索引\",{\"1\":{\"242\":1}}],[\"当前读\",{\"1\":{\"169\":1}}],[\"当前类\",{\"1\":{\"19\":1}}],[\"当读取一行值时\",{\"1\":{\"169\":1}}],[\"当对表中的数据进行增删改的时候\",{\"1\":{\"175\":1}}],[\"当对\",{\"1\":{\"52\":1,\"71\":1}}],[\"当链表长度大于阈值\",{\"1\":{\"50\":1,\"69\":1}}],[\"当链表长度大于阈值时\",{\"1\":{\"46\":1}}],[\"当\",{\"1\":{\"35\":1,\"586\":1,\"587\":1}}],[\"当在组件上使用\",{\"1\":{\"521\":1}}],[\"当在\",{\"1\":{\"35\":1}}],[\"当你要添加商品到购物车的时候\",{\"1\":{\"25\":1}}],[\"当运算符两边的表达式的结果都为\",{\"1\":{\"4\":1}}],[\"dhtml\",{\"1\":{\"636\":1}}],[\"duration\",{\"1\":{\"631\":3}}],[\"dns\",{\"1\":{\"580\":1}}],[\"danger\",{\"1\":{\"530\":1}}],[\"date1\",{\"1\":{\"96\":1}}],[\"datetime=\",{\"1\":{\"657\":1}}],[\"datetimestr\",{\"1\":{\"95\":2}}],[\"datetimeformatter\",{\"1\":{\"95\":4}}],[\"datetime\",{\"1\":{\"95\":6,\"96\":1,\"628\":2}}],[\"date\",{\"1\":{\"95\":8,\"96\":5,\"142\":1,\"234\":6,\"291\":9,\"424\":2,\"628\":1}}],[\"database\",{\"0\":{\"719\":1}}],[\"datagram\",{\"1\":{\"710\":1}}],[\"data=\",{\"1\":{\"495\":1}}],[\"dataa\",{\"1\":{\"221\":6}}],[\"data\",{\"1\":{\"37\":1,\"176\":2,\"218\":3,\"222\":4,\"243\":32,\"332\":2,\"333\":6,\"364\":3,\"474\":1,\"475\":1,\"480\":1,\"484\":1,\"486\":2,\"487\":3,\"488\":3,\"494\":2,\"495\":2,\"521\":4,\"528\":2,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":3,\"539\":1,\"706\":3,\"707\":1}}],[\"dynamic\",{\"1\":{\"489\":1}}],[\"disabled\",{\"1\":{\"673\":1}}],[\"disabled=\",{\"1\":{\"521\":1}}],[\"dispatch\",{\"1\":{\"555\":2}}],[\"display特性\",{\"0\":{\"624\":1}}],[\"display\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"521\":1,\"523\":1,\"589\":4,\"594\":2,\"605\":1,\"611\":2,\"613\":1,\"614\":1,\"616\":3,\"624\":1,\"630\":1,\"645\":1}}],[\"distributed\",{\"1\":{\"710\":1}}],[\"dist\",{\"1\":{\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1}}],[\"distinct\",{\"1\":{\"90\":1}}],[\"direction\",{\"1\":{\"424\":7,\"452\":1,\"456\":14,\"457\":17,\"631\":2,\"645\":2}}],[\"div+div>p>span^h1\",{\"1\":{\"632\":1}}],[\"div\",{\"1\":{\"528\":1,\"632\":1,\"645\":1}}],[\"div>ul>li\",{\"1\":{\"632\":1}}],[\"div>ul>li+li+li\",{\"1\":{\"632\":1}}],[\"div>\",{\"1\":{\"371\":2,\"464\":1,\"470\":10,\"471\":10,\"472\":8,\"473\":6,\"474\":9,\"475\":9,\"477\":1,\"478\":4,\"479\":1,\"480\":4,\"484\":3,\"485\":2,\"487\":4,\"492\":3,\"493\":2,\"494\":2,\"495\":1,\"506\":1,\"512\":1,\"521\":14,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":3,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"546\":1,\"591\":4,\"592\":2,\"593\":2,\"594\":1,\"598\":2,\"599\":1,\"611\":1,\"633\":5,\"663\":1}}],[\"div>`\",{\"1\":{\"239\":1,\"484\":2}}],[\"div4\",{\"1\":{\"293\":4}}],[\"db\",{\"1\":{\"170\":3}}],[\"dml\",{\"1\":{\"168\":1}}],[\"drop\",{\"0\":{\"168\":1},\"1\":{\"168\":2}}],[\"ddos\",{\"1\":{\"710\":1}}],[\"ddd\",{\"1\":{\"487\":1}}],[\"ddl\",{\"1\":{\"168\":2}}],[\"dd\",{\"1\":{\"95\":7,\"96\":1}}],[\"d\",{\"1\":{\"93\":4,\"233\":2,\"320\":1,\"457\":1}}],[\"download\",{\"0\":{\"668\":1},\"1\":{\"665\":1}}],[\"down=\",{\"1\":{\"532\":1}}],[\"done\",{\"1\":{\"298\":10,\"299\":10,\"301\":3,\"302\":2,\"303\":3,\"304\":4,\"306\":15,\"307\":1}}],[\"doctype>\",{\"1\":{\"663\":1}}],[\"doctype\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":1,\"706\":1}}],[\"document\",{\"1\":{\"135\":1,\"206\":3,\"348\":3,\"371\":1,\"415\":1,\"454\":1,\"513\":1,\"539\":7,\"584\":1,\"655\":1,\"660\":1}}],[\"domcontentloaded\",{\"0\":{\"584\":1},\"1\":{\"584\":1}}],[\"dom\",{\"1\":{\"234\":1,\"248\":2,\"249\":1,\"250\":1,\"371\":1,\"487\":1,\"489\":1,\"521\":1,\"580\":2,\"582\":3,\"584\":1,\"586\":2,\"587\":2}}],[\"dog\",{\"1\":{\"93\":7,\"392\":5,\"424\":2}}],[\"double\",{\"1\":{\"15\":3,\"17\":1,\"90\":1}}],[\"denial\",{\"1\":{\"710\":1}}],[\"demo\",{\"1\":{\"591\":1,\"592\":1,\"593\":1,\"594\":2}}],[\"decoration\",{\"1\":{\"621\":1}}],[\"decrement\",{\"1\":{\"546\":2}}],[\"declared\",{\"1\":{\"238\":1}}],[\"devdependencies\",{\"1\":{\"320\":2}}],[\"dep\",{\"1\":{\"288\":4}}],[\"deoptimization\",{\"1\":{\"263\":1}}],[\"deepclone\",{\"1\":{\"234\":3}}],[\"debugger\",{\"1\":{\"212\":1,\"215\":1,\"217\":1,\"218\":8}}],[\"delay\",{\"1\":{\"195\":4,\"223\":2,\"385\":4,\"631\":3}}],[\"delete\",{\"1\":{\"168\":2,\"183\":1,\"187\":2,\"384\":1,\"707\":1}}],[\"delete与\",{\"0\":{\"168\":1}}],[\"descriptor\",{\"1\":{\"182\":2,\"185\":2}}],[\"desc\",{\"1\":{\"128\":1}}],[\"defer>\",{\"1\":{\"581\":1}}],[\"defer\",{\"0\":{\"581\":1}}],[\"deferred\",{\"1\":{\"320\":2}}],[\"defined\",{\"1\":{\"238\":2,\"384\":1}}],[\"defineproperties\",{\"1\":{\"185\":2,\"186\":1}}],[\"defineproperty\",{\"1\":{\"182\":2,\"183\":2,\"184\":2,\"384\":1}}],[\"def\",{\"1\":{\"91\":1}}],[\"default\",{\"1\":{\"19\":1,\"244\":1,\"405\":1,\"456\":1,\"457\":1,\"470\":1,\"471\":2,\"472\":3,\"473\":3,\"474\":2,\"475\":3,\"477\":1,\"478\":1,\"479\":1,\"480\":2,\"481\":1,\"487\":2,\"505\":1,\"545\":1,\"546\":2}}],[\"default的区别\",{\"0\":{\"19\":1}}],[\"dequeue\",{\"1\":{\"45\":1}}],[\"装箱\",{\"1\":{\"18\":1}}],[\"nginx\",{\"1\":{\"708\":1}}],[\"nth\",{\"1\":{\"623\":4}}],[\"n2\",{\"1\":{\"431\":2,\"450\":2,\"466\":1}}],[\"n1\",{\"1\":{\"431\":2,\"450\":2,\"466\":1}}],[\"nba\",{\"1\":{\"409\":1,\"443\":2}}],[\"npm\",{\"1\":{\"320\":2,\"504\":1,\"650\":1}}],[\"native\",{\"1\":{\"521\":1}}],[\"nativearrayiterator\",{\"1\":{\"299\":5}}],[\"narrow\",{\"1\":{\"412\":1}}],[\"nan\",{\"1\":{\"233\":2,\"357\":1,\"384\":1}}],[\"name为根节点中state中的name\",{\"1\":{\"556\":1}}],[\"names是一个数组类型\",{\"1\":{\"464\":1}}],[\"names2\",{\"1\":{\"443\":1,\"464\":1}}],[\"names1\",{\"1\":{\"443\":1,\"464\":1}}],[\"names\",{\"1\":{\"409\":2,\"464\":2,\"494\":1}}],[\"name1\",{\"1\":{\"241\":2}}],[\"name=\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"472\":2,\"473\":2,\"474\":3,\"475\":3,\"480\":3,\"493\":3,\"521\":2,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"628\":2,\"663\":2,\"674\":1,\"706\":1}}],[\"name\",{\"1\":{\"180\":4,\"181\":8,\"182\":2,\"183\":4,\"184\":3,\"185\":2,\"186\":3,\"187\":10,\"189\":6,\"190\":7,\"191\":10,\"192\":2,\"195\":9,\"222\":2,\"228\":7,\"230\":9,\"234\":3,\"235\":4,\"239\":5,\"240\":4,\"241\":17,\"244\":4,\"273\":1,\"279\":1,\"280\":6,\"281\":6,\"282\":3,\"283\":4,\"284\":8,\"285\":8,\"288\":1,\"352\":8,\"355\":6,\"360\":4,\"361\":6,\"362\":8,\"363\":11,\"364\":3,\"366\":1,\"371\":7,\"373\":4,\"375\":3,\"376\":9,\"377\":8,\"378\":8,\"379\":4,\"381\":8,\"384\":5,\"390\":6,\"391\":10,\"393\":3,\"394\":2,\"395\":6,\"396\":10,\"397\":2,\"399\":4,\"406\":5,\"417\":11,\"423\":2,\"435\":2,\"436\":5,\"437\":1,\"440\":2,\"442\":2,\"448\":8,\"449\":1,\"454\":3,\"455\":5,\"457\":1,\"460\":1,\"463\":2,\"465\":2,\"470\":1,\"471\":2,\"472\":3,\"473\":2,\"474\":2,\"475\":2,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"487\":5,\"488\":5,\"509\":2,\"521\":2,\"528\":3,\"533\":7,\"537\":3,\"539\":5,\"549\":4,\"552\":1,\"556\":2,\"631\":4,\"673\":1,\"674\":1,\"706\":1}}],[\"network\",{\"0\":{\"725\":1}}],[\"net\",{\"1\":{\"650\":1}}],[\"next必须调用\",{\"1\":{\"513\":1}}],[\"next\",{\"0\":{\"303\":1},\"1\":{\"255\":2,\"298\":8,\"299\":9,\"301\":1,\"302\":4,\"303\":5,\"304\":3,\"305\":2,\"306\":13,\"307\":5,\"513\":7,\"582\":1}}],[\"nexttick\",{\"1\":{\"249\":1,\"255\":1,\"256\":2}}],[\"never类型\",{\"0\":{\"405\":1}}],[\"nevermore\",{\"1\":{\"187\":3,\"222\":2,\"234\":1,\"288\":1,\"379\":2,\"384\":1,\"509\":2,\"706\":1}}],[\"never\",{\"1\":{\"181\":6,\"182\":2,\"183\":4,\"184\":3,\"185\":2,\"186\":3,\"187\":5,\"192\":1,\"234\":2,\"363\":1,\"384\":1,\"405\":3,\"456\":1,\"457\":1,\"552\":1}}],[\"newval>=3\",{\"1\":{\"536\":1}}],[\"newval\",{\"1\":{\"536\":1}}],[\"news\",{\"1\":{\"512\":3}}],[\"newstate\",{\"1\":{\"407\":6}}],[\"newstudent\",{\"1\":{\"301\":2,\"306\":2}}],[\"newname\",{\"1\":{\"393\":2,\"396\":2}}],[\"newfn\",{\"1\":{\"379\":2}}],[\"newfnargs\",{\"1\":{\"379\":4}}],[\"newformat\",{\"1\":{\"95\":1}}],[\"newpromise\",{\"1\":{\"336\":2,\"343\":2}}],[\"newproxyinstance\",{\"1\":{\"32\":1}}],[\"newobj\",{\"1\":{\"282\":3}}],[\"new\",{\"0\":{\"20\":1,\"192\":1,\"198\":1,\"363\":1,\"367\":1,\"368\":1},\"1\":{\"20\":1,\"22\":4,\"81\":3,\"82\":2,\"83\":2,\"85\":1,\"87\":4,\"88\":2,\"90\":2,\"91\":1,\"95\":4,\"96\":2,\"180\":2,\"190\":3,\"191\":4,\"192\":2,\"198\":4,\"202\":2,\"203\":1,\"204\":2,\"205\":1,\"206\":2,\"234\":5,\"243\":3,\"252\":2,\"253\":4,\"256\":1,\"279\":3,\"280\":2,\"281\":3,\"282\":1,\"283\":1,\"284\":2,\"285\":2,\"291\":6,\"299\":4,\"301\":1,\"306\":1,\"307\":1,\"309\":2,\"312\":2,\"313\":1,\"314\":2,\"316\":1,\"317\":2,\"318\":2,\"319\":2,\"320\":1,\"321\":1,\"322\":2,\"323\":2,\"324\":2,\"325\":4,\"326\":5,\"327\":4,\"328\":7,\"332\":1,\"334\":2,\"336\":7,\"337\":7,\"338\":1,\"340\":1,\"341\":4,\"342\":1,\"343\":1,\"344\":3,\"345\":3,\"346\":2,\"347\":6,\"348\":2,\"349\":2,\"350\":1,\"351\":3,\"352\":1,\"354\":2,\"358\":1,\"363\":5,\"367\":1,\"368\":3,\"377\":2,\"378\":2,\"379\":6,\"390\":1,\"391\":2,\"392\":4,\"393\":1,\"394\":1,\"395\":3,\"396\":1,\"397\":1,\"398\":3,\"399\":2,\"405\":1,\"415\":1,\"424\":1,\"443\":3,\"453\":2,\"473\":1,\"481\":1,\"484\":2,\"485\":1,\"487\":2,\"488\":1,\"494\":1,\"495\":1,\"499\":2,\"505\":2,\"507\":2,\"521\":4,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"545\":2,\"546\":1,\"549\":1,\"555\":1}}],[\"nuxt\",{\"1\":{\"582\":1}}],[\"num=10\",{\"1\":{\"532\":1}}],[\"num+=2\",{\"1\":{\"532\":1}}],[\"num++\",{\"1\":{\"528\":1,\"532\":1,\"539\":2}}],[\"num4\",{\"1\":{\"461\":2}}],[\"num3\",{\"1\":{\"384\":2,\"461\":2}}],[\"nums\",{\"1\":{\"371\":3,\"434\":2,\"533\":2}}],[\"num2\",{\"1\":{\"196\":1,\"212\":6,\"288\":2,\"384\":2,\"403\":1,\"404\":4,\"408\":3,\"431\":2,\"434\":2,\"437\":6,\"450\":4,\"461\":2}}],[\"num1\",{\"1\":{\"196\":1,\"212\":6,\"288\":2,\"384\":2,\"403\":1,\"404\":4,\"408\":3,\"431\":2,\"434\":2,\"437\":6,\"450\":4,\"461\":2}}],[\"number=\",{\"1\":{\"521\":1}}],[\"number类型\",{\"0\":{\"461\":1}}],[\"number>\",{\"1\":{\"442\":1}}],[\"number|string|boolean\",{\"1\":{\"412\":1}}],[\"number|string\",{\"1\":{\"412\":1}}],[\"number处理方式处理message\",{\"1\":{\"405\":1}}],[\"number\",{\"1\":{\"91\":2,\"179\":1,\"234\":3,\"270\":1,\"296\":1,\"357\":2,\"362\":1,\"390\":2,\"391\":7,\"395\":1,\"397\":1,\"398\":7,\"403\":1,\"404\":4,\"405\":2,\"406\":2,\"408\":5,\"410\":4,\"411\":6,\"414\":4,\"415\":2,\"417\":1,\"424\":1,\"431\":10,\"432\":3,\"433\":2,\"434\":4,\"437\":3,\"444\":1,\"448\":2,\"449\":2,\"450\":8,\"452\":2,\"454\":3,\"455\":2,\"460\":2,\"461\":5,\"521\":2,\"536\":2,\"628\":1,\"673\":1}}],[\"num\",{\"1\":{\"84\":4,\"87\":4,\"212\":2,\"273\":1,\"288\":2,\"307\":2,\"415\":1,\"422\":2,\"434\":2,\"440\":2,\"461\":3,\"528\":4,\"532\":5,\"533\":1,\"539\":15}}],[\"null和undefined类型\",{\"0\":{\"466\":1}}],[\"null\",{\"0\":{\"372\":1},\"1\":{\"16\":2,\"43\":1,\"93\":2,\"172\":2,\"179\":1,\"218\":1,\"223\":2,\"233\":4,\"234\":5,\"296\":1,\"309\":2,\"319\":2,\"351\":7,\"357\":3,\"372\":4,\"466\":2}}],[\"noblur\",{\"1\":{\"673\":1}}],[\"none\",{\"1\":{\"521\":1,\"523\":1,\"589\":1,\"621\":2,\"624\":2,\"630\":1,\"631\":1,\"633\":1,\"646\":1,\"689\":2,\"690\":2}}],[\"nonematch\",{\"1\":{\"90\":1}}],[\"not\",{\"1\":{\"238\":2,\"325\":2,\"326\":1,\"327\":1,\"328\":1,\"384\":1,\"623\":1,\"639\":2}}],[\"normal\",{\"1\":{\"135\":1,\"586\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"622\":3,\"631\":1}}],[\"nowrap\",{\"1\":{\"633\":1,\"645\":2,\"654\":4}}],[\"nowfeaturelog\",{\"1\":{\"291\":2}}],[\"nowfixlog\",{\"1\":{\"291\":2}}],[\"nowlog\",{\"1\":{\"291\":3}}],[\"now\",{\"1\":{\"81\":1,\"95\":7}}],[\"nodelist\",{\"1\":{\"299\":1}}],[\"nodejs\",{\"1\":{\"254\":1}}],[\"node\",{\"0\":{\"254\":1},\"1\":{\"57\":1,\"184\":1,\"249\":1,\"254\":1,\"262\":2,\"360\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1}}],[\"no\",{\"1\":{\"39\":1,\"627\":2,\"633\":1,\"687\":2}}],[\"nio\",{\"0\":{\"39\":1},\"1\":{\"39\":2}}],[\"n\",{\"1\":{\"18\":3,\"53\":1,\"72\":1,\"87\":2,\"90\":2,\"211\":11,\"212\":8,\"215\":6,\"217\":5,\"218\":46,\"228\":2,\"238\":4,\"273\":1,\"623\":4}}],[\"拆箱\",{\"0\":{\"18\":1},\"1\":{\"18\":1}}],[\"无过期时间\",{\"1\":{\"678\":1,\"681\":1}}],[\"无效\",{\"1\":{\"674\":1}}],[\"无参混入\",{\"1\":{\"654\":1}}],[\"无参数则置空数组\",{\"1\":{\"379\":1}}],[\"无参数\",{\"1\":{\"78\":1}}],[\"无任何装饰线\",{\"1\":{\"621\":1}}],[\"无误\",{\"1\":{\"379\":1}}],[\"无报错则成功\",{\"1\":{\"349\":2}}],[\"无副作用\",{\"1\":{\"287\":1,\"700\":1}}],[\"无则跳过\",{\"1\":{\"250\":1}}],[\"无需请求完整页面3\",{\"1\":{\"583\":1}}],[\"无需开发人员干涉\",{\"1\":{\"520\":1}}],[\"无需深拷贝\",{\"1\":{\"234\":1}}],[\"无需调用\",{\"1\":{\"11\":1}}],[\"无法完成请求\",{\"1\":{\"694\":1}}],[\"无法记录客户端用户的状态\",{\"1\":{\"693\":1}}],[\"无法记录历史状态\",{\"1\":{\"675\":1}}],[\"无法分辨上一次的请求发送者和这一次的发送者是不是同一个人\",{\"1\":{\"675\":1}}],[\"无法被\",{\"1\":{\"382\":1}}],[\"无法\",{\"1\":{\"369\":1}}],[\"无法实现父类函数复用\",{\"1\":{\"280\":1,\"283\":1}}],[\"无法继承到父类原型上的属性和方法\",{\"1\":{\"280\":1}}],[\"无法解决循环引用的问题\",{\"1\":{\"233\":1}}],[\"无法访问私有属性\",{\"1\":{\"222\":1}}],[\"无法区分实例对象类型\",{\"1\":{\"189\":1}}],[\"无法修改属性\",{\"1\":{\"187\":1}}],[\"无法删除属性\",{\"1\":{\"187\":2}}],[\"无法添加属性\",{\"1\":{\"187\":3}}],[\"无论传入\",{\"1\":{\"343\":1}}],[\"无论\",{\"1\":{\"334\":1}}],[\"无论是否开启严格模式\",{\"1\":{\"385\":1}}],[\"无论是否捕获或处理异常\",{\"1\":{\"35\":1}}],[\"无论是成功状态\",{\"1\":{\"326\":1,\"345\":1}}],[\"无论这个闭包是否被使用\",{\"1\":{\"213\":1,\"214\":1,\"217\":1,\"225\":1}}],[\"无论事务是否成功\",{\"1\":{\"163\":1}}],[\"无版权\",{\"0\":{\"143\":1}}],[\"无限流\",{\"1\":{\"90\":1}}],[\"无返回值\",{\"1\":{\"78\":2}}],[\"无序\",{\"1\":{\"44\":1,\"46\":1}}],[\"无\",{\"1\":{\"17\":1}}],[\"而二级域名不需要单独备案\",{\"1\":{\"704\":1}}],[\"而移动端是竖屏\",{\"1\":{\"663\":1}}],[\"而由于\",{\"1\":{\"663\":2}}],[\"而非编程语言\",{\"1\":{\"662\":1}}],[\"而非直接改变\",{\"1\":{\"546\":1}}],[\"而必须给body再设置一个font\",{\"1\":{\"655\":1}}],[\"而如果你使用行内元素\",{\"1\":{\"645\":1}}],[\"而当页面滚动超出阈值\",{\"1\":{\"629\":1}}],[\"而样式还没开始渲染\",{\"1\":{\"580\":1}}],[\"而且在之后的维护和调试过程中\",{\"1\":{\"548\":1}}],[\"而对函数的全量解析是在函数被调用时才会进行\",{\"1\":{\"264\":1}}],[\"而解释器的启动速度快\",{\"1\":{\"262\":1}}],[\"而编译器启动速度慢\",{\"1\":{\"262\":1}}],[\"而与词法作用域相对的是动态作用域\",{\"1\":{\"211\":1}}],[\"而不是单独写三个分离的属性\",{\"1\":{\"646\":1}}],[\"而不是随着它的内容滚动\",{\"1\":{\"627\":1}}],[\"而不是销毁它们\",{\"1\":{\"489\":1}}],[\"而不是event事件\",{\"1\":{\"487\":1}}],[\"而不是原型链上的属性\",{\"1\":{\"355\":1}}],[\"而不是在函数定义时确定\",{\"1\":{\"195\":1}}],[\"而不是转换为红黑树\",{\"1\":{\"50\":1,\"69\":1}}],[\"而\",{\"1\":{\"176\":2,\"262\":1,\"700\":4}}],[\"而无需回表查询\",{\"1\":{\"174\":1}}],[\"而java\",{\"1\":{\"94\":1}}],[\"而第二个参数是实例方法的参数时\",{\"1\":{\"88\":1}}],[\"而是让调用者以参数的形式告知\",{\"1\":{\"440\":1}}],[\"而是让你坐一会儿\",{\"1\":{\"24\":1}}],[\"而是任何时候任何状态都会执行\",{\"1\":{\"322\":1}}],[\"而是去读取该行版本的最新一个快照\",{\"1\":{\"169\":1,\"171\":1}}],[\"而是在客厅看电视\",{\"1\":{\"39\":1}}],[\"而是回到客厅\",{\"1\":{\"39\":1}}],[\"而post没有限制\",{\"1\":{\"23\":2}}],[\"而post中的参数不会被保留\",{\"1\":{\"23\":1}}],[\"而post支持多种编码方式\",{\"1\":{\"23\":1}}],[\"而post不会\",{\"1\":{\"23\":1}}],[\"而post不可以\",{\"1\":{\"23\":1}}],[\"而post会再次提交请求\",{\"1\":{\"23\":1}}],[\"而基本类型有默认值且不是\",{\"1\":{\"16\":1}}],[\"而类的构造方法名必须与类名一致\",{\"1\":{\"11\":1}}],[\"与以下\",{\"1\":{\"704\":1}}],[\"与iten宽度相等\",{\"1\":{\"633\":1}}],[\"与调用位置没有关系\",{\"1\":{\"272\":1}}],[\"与属性值\",{\"0\":{\"181\":1}}],[\"与不可重复读类似\",{\"1\":{\"165\":1}}],[\"与map类似\",{\"1\":{\"93\":1}}],[\"与\",{\"0\":{\"16\":1,\"202\":1,\"300\":1,\"311\":1,\"356\":1,\"582\":1,\"583\":1,\"584\":1,\"678\":1,\"681\":1,\"687\":1,\"690\":1,\"696\":1,\"699\":1,\"700\":1},\"1\":{\"119\":1,\"182\":2,\"252\":1,\"337\":1,\"594\":1,\"631\":1,\"670\":1,\"696\":1,\"710\":1}}],[\"80\",{\"1\":{\"699\":1,\"704\":1}}],[\"80px\",{\"1\":{\"653\":1}}],[\"800px\",{\"1\":{\"633\":3}}],[\"88\",{\"1\":{\"406\":4,\"455\":4,\"460\":1,\"463\":1}}],[\"8之后\",{\"0\":{\"50\":1,\"69\":1}}],[\"8之前\",{\"0\":{\"49\":1,\"68\":1}}],[\"8\",{\"0\":{\"53\":1,\"72\":1,\"296\":1},\"1\":{\"15\":3,\"46\":3,\"50\":1,\"53\":3,\"57\":2,\"69\":1,\"72\":3,\"94\":2,\"95\":2,\"96\":2,\"188\":1,\"218\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"252\":1,\"253\":1,\"256\":1,\"262\":1,\"307\":4,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":2,\"706\":1}}],[\"2msl\",{\"0\":{\"716\":1}}],[\"2xx\",{\"1\":{\"694\":1}}],[\"2d\",{\"1\":{\"660\":2}}],[\"2d形变\",{\"1\":{\"631\":1}}],[\"2em\",{\"1\":{\"621\":1}}],[\"2px\",{\"1\":{\"617\":1}}],[\"256\",{\"1\":{\"640\":1}}],[\"255\",{\"1\":{\"633\":3}}],[\"25\",{\"1\":{\"533\":1}}],[\"253\",{\"1\":{\"128\":1}}],[\"24\",{\"1\":{\"533\":1,\"549\":1,\"552\":1}}],[\"24px\",{\"1\":{\"470\":2,\"471\":2,\"472\":2,\"474\":2,\"475\":2,\"480\":2,\"633\":1}}],[\"2>\",{\"1\":{\"428\":1}}],[\"2秒后输出\",{\"1\":{\"307\":4}}],[\"21px\",{\"1\":{\"633\":1}}],[\"21\",{\"1\":{\"239\":1,\"240\":1,\"241\":2,\"244\":1,\"533\":1}}],[\"201\",{\"1\":{\"694\":1}}],[\"2014\",{\"1\":{\"449\":1}}],[\"20分钟掌握css\",{\"1\":{\"647\":1}}],[\"20px\",{\"1\":{\"532\":2,\"591\":1,\"633\":1}}],[\"200px\",{\"1\":{\"598\":2,\"599\":2,\"610\":1,\"611\":2,\"617\":2,\"654\":1}}],[\"200\",{\"1\":{\"326\":1,\"344\":1,\"345\":1,\"347\":2,\"686\":1,\"689\":1,\"694\":1}}],[\"2000\",{\"1\":{\"234\":1,\"328\":1,\"364\":1}}],[\"20\",{\"1\":{\"189\":2,\"190\":2,\"191\":3,\"212\":1,\"223\":3,\"238\":1,\"240\":2,\"242\":1,\"273\":1,\"290\":4,\"379\":2,\"397\":1,\"398\":1,\"404\":1,\"431\":2,\"432\":2,\"433\":1,\"434\":3,\"437\":1,\"440\":1,\"448\":1,\"450\":1,\"462\":1,\"549\":3}}],[\"202\",{\"1\":{\"694\":1}}],[\"2020\",{\"1\":{\"142\":1,\"144\":1}}],[\"2021\",{\"1\":{\"96\":6,\"657\":1}}],[\"233\",{\"1\":{\"280\":2,\"281\":2,\"284\":2,\"285\":2}}],[\"2333\",{\"1\":{\"183\":3,\"184\":3,\"186\":2}}],[\"23\",{\"1\":{\"181\":3,\"182\":2,\"183\":1,\"184\":6,\"185\":2,\"186\":1,\"187\":3,\"234\":3,\"241\":1,\"279\":1,\"280\":2,\"281\":2,\"282\":3,\"283\":4,\"284\":3,\"285\":3,\"288\":1,\"379\":2}}],[\"230\",{\"1\":{\"128\":1}}],[\"2nf\",{\"1\":{\"167\":2}}],[\"26\",{\"1\":{\"96\":6}}],[\"2个参数\",{\"1\":{\"90\":1}}],[\"2个及以上参数\",{\"1\":{\"78\":1}}],[\"225deg\",{\"1\":{\"643\":1}}],[\"222\",{\"1\":{\"461\":1}}],[\"22\",{\"1\":{\"90\":2,\"91\":1,\"96\":4,\"218\":2,\"443\":6,\"509\":2}}],[\"2\",{\"0\":{\"75\":1,\"82\":1,\"151\":1,\"156\":1,\"195\":1,\"313\":1,\"317\":1,\"367\":1,\"372\":1,\"560\":1,\"564\":1,\"565\":1,\"570\":1,\"574\":1,\"575\":1,\"592\":1,\"606\":1,\"614\":1,\"698\":1},\"1\":{\"15\":2,\"35\":2,\"72\":1,\"82\":1,\"85\":1,\"90\":1,\"91\":3,\"110\":14,\"126\":1,\"180\":1,\"181\":3,\"184\":1,\"186\":1,\"187\":1,\"188\":1,\"192\":1,\"196\":3,\"199\":4,\"202\":1,\"203\":1,\"205\":7,\"217\":1,\"218\":4,\"230\":1,\"234\":1,\"238\":4,\"239\":3,\"240\":3,\"241\":5,\"242\":4,\"243\":1,\"244\":1,\"251\":1,\"252\":2,\"253\":3,\"256\":1,\"282\":1,\"292\":4,\"293\":4,\"294\":1,\"298\":2,\"299\":5,\"302\":2,\"303\":1,\"304\":1,\"306\":4,\"307\":7,\"317\":4,\"318\":4,\"320\":1,\"325\":2,\"332\":1,\"336\":1,\"341\":1,\"349\":5,\"351\":1,\"355\":1,\"361\":2,\"362\":3,\"363\":1,\"371\":3,\"384\":2,\"385\":1,\"395\":1,\"406\":1,\"415\":1,\"424\":2,\"431\":1,\"440\":1,\"443\":6,\"449\":1,\"460\":1,\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"484\":1,\"485\":2,\"487\":2,\"488\":1,\"493\":2,\"505\":1,\"521\":6,\"528\":2,\"533\":2,\"534\":1,\"535\":3,\"537\":1,\"538\":1,\"590\":1,\"607\":1,\"615\":1,\"622\":1,\"633\":1,\"696\":4,\"698\":1,\"707\":1}}],[\"07\",{\"1\":{\"657\":1}}],[\"0px\",{\"1\":{\"643\":4}}],[\"0+\",{\"1\":{\"521\":3}}],[\"0以上的写法\",{\"1\":{\"493\":1}}],[\"0以下的写法\",{\"1\":{\"493\":1}}],[\"0注册局部组件语法糖\",{\"1\":{\"484\":1}}],[\"0注册全局组件语法糖\",{\"1\":{\"484\":1}}],[\"0x100\",{\"1\":{\"461\":1}}],[\"0x123\",{\"1\":{\"384\":1}}],[\"0o100\",{\"1\":{\"461\":1}}],[\"0o123\",{\"1\":{\"384\":2}}],[\"0b100\",{\"1\":{\"384\":1,\"461\":1}}],[\"00<\",{\"1\":{\"657\":1}}],[\"00f\",{\"1\":{\"653\":1}}],[\"000\",{\"1\":{\"357\":1}}],[\"002\",{\"1\":{\"285\":1}}],[\"001\",{\"1\":{\"285\":2,\"352\":2}}],[\"00\",{\"1\":{\"234\":2,\"397\":1,\"536\":1}}],[\"0123\",{\"1\":{\"384\":1}}],[\"010\",{\"1\":{\"357\":1}}],[\"01\",{\"1\":{\"96\":4,\"142\":2,\"656\":2}}],[\"0d\",{\"1\":{\"15\":1}}],[\"0f0\",{\"1\":{\"654\":1}}],[\"0f\",{\"1\":{\"15\":1}}],[\"0l\",{\"1\":{\"15\":1}}],[\"0\",{\"1\":{\"15\":3,\"17\":1,\"35\":2,\"38\":1,\"87\":1,\"90\":1,\"95\":1,\"128\":1,\"195\":2,\"218\":10,\"228\":1,\"231\":1,\"234\":1,\"238\":1,\"239\":2,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"252\":1,\"256\":1,\"266\":1,\"293\":2,\"298\":1,\"299\":1,\"300\":1,\"301\":1,\"303\":1,\"304\":1,\"306\":2,\"325\":2,\"326\":2,\"327\":1,\"328\":2,\"357\":2,\"361\":2,\"371\":1,\"391\":2,\"406\":2,\"449\":1,\"470\":7,\"471\":5,\"472\":5,\"479\":5,\"484\":1,\"513\":1,\"525\":3,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":5,\"536\":1,\"537\":2,\"538\":1,\"539\":1,\"546\":1,\"607\":4,\"615\":4,\"624\":5,\"629\":4,\"630\":1,\"631\":1,\"633\":1,\"640\":16,\"642\":2,\"643\":4,\"646\":5,\"663\":3,\"670\":1,\"674\":3,\"686\":1,\"689\":1,\"706\":1}}],[\"443\",{\"1\":{\"699\":1,\"704\":1}}],[\"4xx\",{\"1\":{\"694\":1}}],[\"4kb\",{\"1\":{\"678\":1,\"681\":1}}],[\"413px\",{\"1\":{\"655\":1}}],[\"414~480\",{\"1\":{\"633\":1}}],[\"414px\",{\"1\":{\"633\":1}}],[\"4d926f\",{\"1\":{\"652\":1}}],[\"480px\",{\"1\":{\"633\":1}}],[\"49px\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"474\":1,\"475\":1,\"480\":1}}],[\"404\",{\"1\":{\"694\":1}}],[\"403\",{\"1\":{\"694\":1}}],[\"40\",{\"1\":{\"242\":1,\"434\":2}}],[\"45deg\",{\"1\":{\"633\":1}}],[\"45\",{\"1\":{\"87\":1}}],[\"4\",{\"0\":{\"84\":1,\"197\":1,\"319\":1,\"369\":1,\"616\":1},\"1\":{\"15\":2,\"73\":1,\"91\":1,\"192\":1,\"196\":2,\"205\":1,\"209\":1,\"217\":1,\"218\":4,\"230\":3,\"238\":1,\"240\":2,\"242\":1,\"243\":1,\"251\":1,\"252\":1,\"253\":1,\"256\":1,\"293\":2,\"306\":1,\"307\":5,\"318\":4,\"332\":1,\"351\":1,\"355\":1,\"362\":1,\"363\":1,\"384\":1,\"424\":1,\"443\":3,\"460\":1,\"505\":1,\"533\":3,\"590\":1,\"650\":1,\"656\":2}}],[\"基础知识\",{\"0\":{\"620\":1}}],[\"基础语法\",{\"0\":{\"3\":1,\"63\":1,\"77\":1}}],[\"基本代码\",{\"0\":{\"597\":1}}],[\"基本使用\",{\"0\":{\"555\":1}}],[\"基本步骤\",{\"0\":{\"545\":1}}],[\"基本语法及语法糖写法\",{\"0\":{\"521\":1}}],[\"基本用法\",{\"0\":{\"492\":1}}],[\"基本类型变量\",{\"1\":{\"244\":1}}],[\"基本类型无需深拷贝\",{\"1\":{\"234\":1}}],[\"基本类型能不能作为泛型\",{\"0\":{\"28\":1}}],[\"基本类型\",{\"1\":{\"15\":1,\"234\":2}}],[\"基于非连接\",{\"1\":{\"710\":1}}],[\"基于连接\",{\"1\":{\"710\":1}}],[\"基于寄生组合式继承实现\",{\"1\":{\"285\":1}}],[\"基于\",{\"1\":{\"44\":1}}],[\"browser\",{\"0\":{\"722\":1}}],[\"break\",{\"1\":{\"301\":1,\"405\":3,\"424\":1,\"456\":5,\"457\":5}}],[\"bg\",{\"1\":{\"627\":1}}],[\"bfc解决高度塌陷需满足的两个条件\",{\"1\":{\"592\":1}}],[\"bfc\",{\"0\":{\"588\":1,\"589\":1},\"1\":{\"588\":1,\"589\":2,\"590\":1,\"591\":4,\"592\":4,\"593\":3}}],[\"before\",{\"1\":{\"594\":4,\"616\":2,\"623\":1,\"639\":1}}],[\"beforeupdate\",{\"1\":{\"539\":1}}],[\"beforemount\",{\"1\":{\"539\":1}}],[\"beforecreate\",{\"1\":{\"539\":1}}],[\"beforerouteleave守卫\",{\"1\":{\"515\":1}}],[\"beforerouteupdate\",{\"1\":{\"515\":1}}],[\"beforeeach\",{\"1\":{\"513\":2}}],[\"been\",{\"1\":{\"91\":1,\"238\":1}}],[\"btnclick\",{\"1\":{\"487\":2,\"488\":1,\"521\":4}}],[\"btye\",{\"1\":{\"263\":1}}],[\"blank\",{\"1\":{\"667\":1}}],[\"black\",{\"1\":{\"594\":1,\"598\":1,\"599\":1,\"611\":1,\"617\":1}}],[\"blur\",{\"1\":{\"633\":3}}],[\"blue\",{\"1\":{\"475\":1,\"532\":1,\"633\":1,\"654\":1}}],[\"blink\",{\"1\":{\"258\":2,\"261\":2,\"264\":1}}],[\"block有文本时\",{\"1\":{\"633\":1}}],[\"block默认的baseline是margin\",{\"1\":{\"633\":1}}],[\"block\",{\"1\":{\"589\":1,\"594\":2,\"611\":2,\"616\":3,\"624\":2,\"630\":1}}],[\"blocking\",{\"1\":{\"39\":2}}],[\"blog\",{\"1\":{\"135\":2}}],[\"bug\",{\"1\":{\"224\":1,\"291\":4,\"357\":1}}],[\"button标签内可以加其他标签\",{\"1\":{\"672\":1}}],[\"buttoncounter\",{\"1\":{\"538\":2}}],[\"buttonclick\",{\"1\":{\"510\":1}}],[\"button>`\",{\"1\":{\"538\":2}}],[\"button>btn2click\",{\"1\":{\"521\":3}}],[\"button><\",{\"1\":{\"492\":2}}],[\"button>\",{\"1\":{\"487\":1,\"494\":1,\"521\":4,\"528\":2,\"532\":2,\"534\":1,\"535\":1,\"538\":1,\"539\":1,\"546\":2,\"672\":1}}],[\"button\",{\"1\":{\"83\":3,\"512\":1,\"538\":2,\"628\":1,\"673\":1}}],[\"bold\",{\"1\":{\"622\":1}}],[\"both\",{\"1\":{\"594\":2,\"630\":2}}],[\"bottom的底部\",{\"1\":{\"633\":1}}],[\"bottom\",{\"1\":{\"424\":1,\"456\":4,\"457\":6,\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"615\":2,\"626\":1,\"627\":1,\"629\":5,\"633\":1}}],[\"bordercolor\",{\"1\":{\"654\":2}}],[\"borderwith\",{\"1\":{\"654\":2}}],[\"border\",{\"0\":{\"642\":1},\"1\":{\"532\":2,\"594\":1,\"598\":1,\"599\":1,\"600\":1,\"611\":1,\"617\":1,\"633\":1,\"635\":3,\"636\":2,\"642\":4,\"654\":3,\"670\":2}}],[\"box2\",{\"1\":{\"593\":2,\"654\":1}}],[\"box1\",{\"1\":{\"593\":2,\"654\":1}}],[\"box\",{\"1\":{\"371\":3,\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"591\":3,\"592\":2,\"594\":4,\"600\":2,\"633\":5,\"635\":5,\"636\":1,\"654\":3}}],[\"boxdiv\",{\"1\":{\"371\":3}}],[\"bootcss\",{\"1\":{\"243\":1}}],[\"bool\",{\"1\":{\"234\":3}}],[\"boolean类型\",{\"0\":{\"462\":1}}],[\"boolean>\",{\"1\":{\"441\":1}}],[\"boolean处理方式处理message\",{\"1\":{\"405\":1}}],[\"boolean\",{\"1\":{\"15\":3,\"17\":1,\"87\":2,\"179\":1,\"296\":1,\"405\":2,\"414\":1,\"419\":1,\"462\":1}}],[\"body>\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":1,\"706\":1}}],[\"body\",{\"1\":{\"206\":2,\"348\":2,\"652\":1,\"655\":2,\"663\":1,\"696\":1,\"700\":1}}],[\"banana\",{\"0\":{\"721\":1}}],[\"basis的简写\",{\"1\":{\"646\":1}}],[\"basis\",{\"1\":{\"646\":1}}],[\"basic\",{\"1\":{\"102\":1}}],[\"baseline是最后一行文本的x的下方\",{\"1\":{\"633\":1}}],[\"baseline\",{\"1\":{\"633\":1}}],[\"baidu\",{\"1\":{\"529\":1,\"530\":1,\"532\":1}}],[\"backend\",{\"1\":{\"706\":1}}],[\"backdrop\",{\"1\":{\"633\":1}}],[\"backwards\",{\"1\":{\"631\":1}}],[\"back\",{\"1\":{\"503\":1}}],[\"background属性\",{\"0\":{\"627\":1}}],[\"background\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"591\":1,\"592\":2,\"593\":2,\"594\":1,\"598\":1,\"599\":1,\"611\":1,\"617\":1,\"627\":8,\"633\":3,\"643\":1,\"654\":2}}],[\"bar>\",{\"1\":{\"471\":1,\"472\":2,\"473\":2,\"474\":2,\"475\":2,\"478\":2}}],[\"bar><\",{\"1\":{\"471\":1}}],[\"bar\",{\"1\":{\"204\":2,\"211\":4,\"215\":3,\"218\":4,\"273\":2,\"274\":3,\"360\":8,\"361\":7,\"363\":7,\"368\":2,\"373\":4,\"384\":2,\"403\":2,\"405\":1,\"428\":3,\"431\":2,\"470\":8,\"471\":8,\"472\":13,\"473\":9,\"474\":11,\"475\":12,\"477\":1,\"478\":8,\"479\":2,\"480\":3}}],[\"bigint\",{\"1\":{\"296\":1}}],[\"bind解决\",{\"1\":{\"529\":1}}],[\"bind=\",{\"1\":{\"521\":2}}],[\"bind\",{\"0\":{\"368\":1,\"369\":1,\"379\":1,\"530\":1},\"1\":{\"197\":1,\"362\":8,\"366\":1,\"368\":3,\"369\":4,\"372\":3,\"379\":2,\"521\":7,\"530\":2,\"537\":1}}],[\"bio\",{\"0\":{\"39\":1},\"1\":{\"39\":2}}],[\"b树和b+树的区别\",{\"0\":{\"176\":1}}],[\"b+树\",{\"1\":{\"176\":1}}],[\"b+树的检索效率就很稳定了\",{\"1\":{\"176\":1}}],[\"b+树的叶子节点有一条引用链指向与它相邻的叶子节点\",{\"1\":{\"176\":1}}],[\"b+树只有叶子节点存放\",{\"1\":{\"176\":1}}],[\"b+\",{\"1\":{\"173\":1}}],[\"bbb\",{\"1\":{\"487\":1,\"556\":1}}],[\"bb\",{\"1\":{\"90\":3,\"91\":1,\"369\":2}}],[\"b\",{\"1\":{\"22\":3,\"176\":3,\"205\":8,\"230\":4,\"233\":3,\"234\":18,\"238\":3,\"239\":4,\"240\":14,\"241\":2,\"242\":2,\"244\":6,\"300\":2,\"333\":2,\"375\":1,\"379\":2,\"556\":2,\"712\":1,\"714\":2}}],[\"byteacctimg\",{\"1\":{\"206\":1,\"348\":1}}],[\"byte\",{\"0\":{\"6\":1},\"1\":{\"5\":1,\"6\":1,\"15\":3,\"17\":1,\"266\":1}}],[\"种绑定规则\",{\"1\":{\"359\":1}}],[\"种引用类型\",{\"1\":{\"296\":1}}],[\"种值类型\",{\"1\":{\"296\":1}}],[\"种\",{\"0\":{\"296\":1}}],[\"种方式\",{\"1\":{\"181\":1}}],[\"种布尔型\",{\"1\":{\"15\":1}}],[\"种字符类型\",{\"1\":{\"15\":1}}],[\"种数字类型\",{\"1\":{\"15\":1}}],[\"60\",{\"1\":{\"223\":3,\"290\":4}}],[\"6字节\",{\"1\":{\"170\":2}}],[\"64\",{\"1\":{\"15\":2,\"50\":1,\"69\":1}}],[\"6\",{\"0\":{\"199\":1},\"1\":{\"15\":1,\"97\":1,\"212\":1,\"217\":1,\"218\":16,\"242\":1,\"252\":1,\"253\":1,\"254\":1,\"256\":1,\"292\":4,\"303\":1,\"351\":1,\"362\":1,\"384\":1,\"493\":2,\"521\":2}}],[\"适用\",{\"1\":{\"14\":2}}],[\"适用string\",{\"1\":{\"14\":1}}],[\"a标签\",{\"0\":{\"665\":1}}],[\"audio>\",{\"1\":{\"659\":1}}],[\"audio\",{\"1\":{\"659\":1}}],[\"autofocus\",{\"1\":{\"673\":1}}],[\"autocomplete\",{\"1\":{\"672\":1}}],[\"autoplay\",{\"1\":{\"659\":2}}],[\"auto\",{\"0\":{\"606\":1},\"1\":{\"606\":2,\"607\":2,\"615\":2,\"625\":1,\"627\":1,\"629\":2,\"645\":1,\"646\":5,\"670\":1}}],[\"authorization\",{\"1\":{\"682\":1}}],[\"author\",{\"1\":{\"142\":1}}],[\"a99aec34ad154369ecc31954c1b9d036\",{\"1\":{\"657\":1}}],[\"after伪元素\",{\"1\":{\"630\":1}}],[\"after\",{\"1\":{\"594\":6,\"616\":2,\"623\":1,\"630\":1}}],[\"aftereach\",{\"1\":{\"513\":1}}],[\"a>\",{\"1\":{\"530\":1,\"532\":1}}],[\"a><\",{\"1\":{\"521\":1}}],[\"a2\",{\"1\":{\"431\":6}}],[\"a1\",{\"1\":{\"431\":6}}],[\"attachment\",{\"1\":{\"627\":1}}],[\"attr2\",{\"1\":{\"623\":1}}],[\"attr1\",{\"1\":{\"623\":1}}],[\"attr$=val\",{\"1\":{\"623\":1}}],[\"attr^=val\",{\"1\":{\"623\":1}}],[\"attr|=val\",{\"1\":{\"623\":1}}],[\"attr~=val\",{\"1\":{\"623\":1}}],[\"attr=val\",{\"1\":{\"623\":1}}],[\"attr\",{\"1\":{\"521\":1,\"623\":2}}],[\"attribute\",{\"1\":{\"487\":1,\"493\":1,\"521\":5}}],[\"attrs\",{\"0\":{\"123\":1}}],[\"attendclass\",{\"1\":{\"397\":2}}],[\"agree\",{\"1\":{\"521\":2}}],[\"aggregateerror\",{\"1\":{\"328\":3,\"347\":2}}],[\"agent\",{\"1\":{\"695\":1}}],[\"age1\",{\"1\":{\"241\":2}}],[\"age\",{\"1\":{\"93\":7,\"181\":5,\"182\":2,\"183\":9,\"184\":26,\"185\":5,\"186\":8,\"187\":3,\"189\":5,\"190\":5,\"191\":8,\"218\":2,\"234\":3,\"239\":7,\"240\":1,\"241\":11,\"244\":2,\"279\":1,\"280\":6,\"281\":6,\"282\":3,\"283\":4,\"284\":7,\"285\":7,\"288\":2,\"379\":3,\"390\":5,\"391\":10,\"395\":2,\"397\":1,\"406\":3,\"417\":4,\"423\":1,\"437\":1,\"442\":2,\"448\":4,\"454\":6,\"455\":5,\"460\":1,\"463\":3,\"465\":1,\"509\":2,\"521\":1,\"533\":6,\"549\":12,\"552\":1,\"687\":1}}],[\"a+\",{\"0\":{\"309\":1,\"310\":1,\"320\":1},\"1\":{\"319\":1,\"320\":1,\"329\":2}}],[\"ao中包含形参\",{\"1\":{\"272\":1}}],[\"ao\",{\"1\":{\"272\":1,\"277\":1,\"381\":2}}],[\"and\",{\"1\":{\"633\":7,\"655\":2}}],[\"animation\",{\"1\":{\"631\":10}}],[\"animation动画\",{\"1\":{\"631\":1}}],[\"animals\",{\"1\":{\"392\":2}}],[\"animal\",{\"1\":{\"392\":11,\"424\":4,\"453\":2}}],[\"annotation\",{\"1\":{\"464\":1}}],[\"any类型可以赋值给任意类型\",{\"1\":{\"403\":1}}],[\"any类型\",{\"0\":{\"402\":1}}],[\"any\",{\"0\":{\"328\":1,\"347\":1},\"1\":{\"328\":4,\"329\":1,\"347\":3,\"402\":3,\"406\":1,\"407\":8,\"415\":1,\"437\":3}}],[\"anymatch\",{\"1\":{\"90\":1}}],[\"analysis\",{\"1\":{\"264\":2}}],[\"ajax\",{\"1\":{\"243\":7,\"249\":1,\"582\":1,\"706\":1,\"707\":1}}],[\"ajax回调地狱\",{\"1\":{\"243\":1}}],[\"amy\",{\"1\":{\"241\":3}}],[\"amd\",{\"1\":{\"221\":1}}],[\"aplus\",{\"1\":{\"320\":4}}],[\"api\",{\"0\":{\"355\":1},\"1\":{\"235\":1,\"329\":1}}],[\"apple\",{\"0\":{\"720\":1},\"1\":{\"663\":1}}],[\"application\",{\"1\":{\"582\":1,\"695\":2,\"707\":1}}],[\"apply\",{\"1\":{\"87\":4,\"197\":1,\"223\":1,\"362\":7,\"368\":1,\"372\":4,\"379\":1,\"436\":1}}],[\"app>\",{\"1\":{\"492\":1}}],[\"app\",{\"0\":{\"477\":1},\"1\":{\"454\":1,\"470\":3,\"471\":3,\"472\":3,\"473\":3,\"474\":3,\"475\":3,\"477\":3,\"484\":5,\"487\":6,\"488\":1,\"493\":1,\"494\":3,\"499\":4,\"505\":1,\"521\":11,\"528\":3,\"529\":2,\"530\":2,\"531\":2,\"532\":2,\"533\":3,\"534\":3,\"535\":3,\"536\":2,\"537\":2,\"538\":2,\"539\":3,\"545\":2,\"546\":2,\"551\":1,\"552\":2,\"553\":1,\"555\":2,\"663\":1}}],[\"appendchild\",{\"1\":{\"206\":2,\"348\":2}}],[\"append\",{\"1\":{\"14\":1}}],[\"avatars\",{\"1\":{\"206\":1,\"348\":1}}],[\"avatar\",{\"1\":{\"206\":1,\"348\":1}}],[\"averagingdouble\",{\"1\":{\"90\":1}}],[\"await可以说是异步终极解决方案了\",{\"1\":{\"331\":1}}],[\"await\",{\"0\":{\"201\":1,\"206\":1,\"307\":1},\"1\":{\"201\":1,\"202\":10,\"205\":14,\"206\":3,\"249\":1,\"252\":5,\"256\":1,\"307\":5,\"331\":2,\"334\":1}}],[\"ack\",{\"1\":{\"711\":3,\"712\":6,\"713\":3,\"714\":2,\"715\":1,\"716\":1}}],[\"access\",{\"1\":{\"707\":6}}],[\"accept\",{\"1\":{\"87\":4,\"695\":3}}],[\"active的class\",{\"1\":{\"507\":1}}],[\"activecolor\",{\"1\":{\"475\":2,\"480\":2}}],[\"activecolor=\",{\"1\":{\"475\":3,\"478\":3}}],[\"activestyle\",{\"1\":{\"475\":2,\"480\":2}}],[\"active\",{\"1\":{\"474\":11,\"475\":10,\"478\":8,\"480\":2,\"507\":2,\"530\":1,\"623\":1}}],[\"actions\",{\"1\":{\"545\":1,\"555\":2,\"556\":2}}],[\"action\",{\"0\":{\"554\":1},\"1\":{\"392\":5,\"451\":1,\"672\":1}}],[\"acid\",{\"0\":{\"163\":1}}],[\"alt\",{\"1\":{\"671\":1}}],[\"alternate\",{\"1\":{\"631\":2}}],[\"alt=\",{\"1\":{\"470\":4,\"471\":4,\"472\":5,\"473\":4,\"474\":8,\"475\":8,\"478\":8}}],[\"alive\",{\"0\":{\"516\":1},\"1\":{\"516\":1,\"695\":1}}],[\"alive>\",{\"1\":{\"489\":2,\"516\":1}}],[\"align\",{\"1\":{\"422\":4,\"470\":1,\"471\":1,\"472\":2,\"474\":2,\"475\":2,\"480\":2,\"603\":1,\"606\":1,\"611\":3,\"613\":1,\"614\":1,\"616\":4,\"621\":1,\"633\":1,\"645\":4,\"646\":2}}],[\"alignment\",{\"1\":{\"422\":2}}],[\"alias\",{\"1\":{\"414\":1}}],[\"allow\",{\"1\":{\"707\":6}}],[\"allsettled\",{\"0\":{\"326\":1,\"345\":1},\"1\":{\"326\":4,\"345\":2}}],[\"all\",{\"0\":{\"325\":1,\"344\":1},\"1\":{\"299\":1,\"325\":6,\"328\":3,\"344\":1,\"345\":1,\"347\":1}}],[\"allmatch\",{\"1\":{\"90\":1}}],[\"alert\",{\"1\":{\"135\":1,\"532\":1}}],[\"already\",{\"1\":{\"91\":1,\"238\":1}}],[\"aajianhaoti\",{\"1\":{\"622\":1}}],[\"aaa\",{\"1\":{\"427\":1,\"487\":1,\"525\":3,\"556\":1}}],[\"aaaaaaaa\",{\"1\":{\"487\":1}}],[\"aaaa\",{\"1\":{\"416\":1}}],[\"aa\",{\"1\":{\"90\":3,\"91\":1,\"366\":2,\"368\":1,\"369\":3}}],[\"ascii\",{\"1\":{\"700\":1}}],[\"as\",{\"1\":{\"402\":1,\"415\":6,\"423\":3,\"454\":1}}],[\"ast\",{\"1\":{\"262\":2,\"263\":2,\"264\":4,\"267\":2,\"500\":1}}],[\"assgn\",{\"1\":{\"241\":1}}],[\"assignment\",{\"1\":{\"238\":1}}],[\"assign\",{\"1\":{\"230\":4,\"241\":1}}],[\"assets\",{\"1\":{\"142\":1,\"470\":5,\"471\":5,\"472\":6,\"473\":5,\"474\":9,\"475\":9,\"477\":1,\"478\":9}}],[\"async>\",{\"1\":{\"581\":1}}],[\"async2\",{\"1\":{\"205\":8,\"252\":8,\"256\":2}}],[\"async1\",{\"1\":{\"205\":8,\"252\":6,\"256\":2}}],[\"async\",{\"0\":{\"201\":1,\"206\":1,\"307\":1,\"581\":1},\"1\":{\"201\":1,\"202\":12,\"203\":1,\"204\":1,\"205\":6,\"206\":2,\"249\":1,\"252\":4,\"256\":2,\"307\":3,\"331\":3,\"334\":1,\"489\":1}}],[\"asynchronous\",{\"1\":{\"39\":1}}],[\"aslist\",{\"1\":{\"22\":2,\"82\":1,\"85\":1,\"87\":1,\"90\":1,\"91\":3}}],[\"aio\",{\"1\":{\"39\":2}}],[\"aio的区别\",{\"0\":{\"39\":1}}],[\"arg3\",{\"1\":{\"441\":1}}],[\"arg2\",{\"1\":{\"441\":1}}],[\"arg1\",{\"1\":{\"441\":1}}],[\"argument\",{\"1\":{\"325\":2,\"326\":1,\"327\":1,\"328\":1}}],[\"arguments\",{\"1\":{\"196\":2,\"199\":1,\"223\":1,\"272\":1}}],[\"argumetns\",{\"1\":{\"299\":1}}],[\"arg\",{\"1\":{\"293\":4,\"444\":2}}],[\"args\",{\"1\":{\"32\":1,\"35\":1,\"196\":3,\"292\":16,\"379\":6,\"441\":1}}],[\"arrcustom\",{\"1\":{\"300\":3}}],[\"arr2\",{\"1\":{\"228\":4,\"231\":3}}],[\"arr1\",{\"1\":{\"228\":12,\"231\":10}}],[\"arr\",{\"1\":{\"224\":3,\"239\":7,\"242\":8,\"298\":3,\"300\":4,\"306\":3,\"351\":3,\"361\":3,\"402\":1}}],[\"arrow\",{\"1\":{\"194\":2,\"351\":4}}],[\"array类型\",{\"0\":{\"464\":1}}],[\"array<string>\",{\"1\":{\"443\":1,\"464\":1}}],[\"arrayiterator\",{\"1\":{\"298\":6,\"299\":5,\"306\":6}}],[\"array2\",{\"1\":{\"234\":3}}],[\"array1\",{\"1\":{\"234\":3}}],[\"arrayqueue\",{\"1\":{\"45\":1}}],[\"arraylist扩容机制\",{\"0\":{\"59\":1}}],[\"arraylist\",{\"1\":{\"43\":1}}],[\"arraylist<>\",{\"1\":{\"22\":3,\"87\":2,\"90\":1}}],[\"arrays\",{\"1\":{\"22\":2,\"82\":1,\"85\":1,\"87\":1,\"90\":2,\"91\":3}}],[\"array\",{\"1\":{\"22\":8,\"91\":1,\"224\":1,\"241\":4,\"242\":1,\"270\":1,\"296\":1,\"298\":2,\"299\":7,\"300\":1,\"306\":4,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"350\":1,\"351\":5,\"487\":2}}],[\"a局看了以后\",{\"1\":{\"24\":1}}],[\"a局的人说\",{\"1\":{\"24\":1}}],[\"addlistener\",{\"1\":{\"633\":1}}],[\"addition\",{\"1\":{\"546\":2,\"551\":1,\"552\":1}}],[\"additemlistener\",{\"1\":{\"83\":2}}],[\"addfntype\",{\"1\":{\"431\":2}}],[\"addstudent\",{\"1\":{\"301\":2,\"306\":2,\"552\":3}}],[\"add1\",{\"1\":{\"293\":4}}],[\"add10\",{\"1\":{\"212\":2}}],[\"add2\",{\"1\":{\"240\":3}}],[\"add5\",{\"1\":{\"212\":2}}],[\"address\",{\"1\":{\"190\":1,\"279\":1,\"280\":2,\"281\":2,\"282\":2,\"283\":3,\"284\":2,\"285\":2,\"355\":4,\"455\":4}}],[\"addeventlistener\",{\"1\":{\"135\":1,\"371\":1,\"454\":1,\"584\":2}}],[\"addall\",{\"1\":{\"22\":2}}],[\"add\",{\"1\":{\"22\":2,\"59\":1,\"87\":2,\"212\":4,\"240\":2,\"244\":4,\"288\":3,\"294\":1,\"362\":8,\"431\":1,\"437\":6,\"450\":2,\"539\":1}}],[\"a\",{\"1\":{\"22\":4,\"81\":1,\"119\":1,\"172\":1,\"195\":6,\"199\":6,\"205\":8,\"214\":3,\"215\":1,\"230\":3,\"233\":2,\"234\":22,\"238\":4,\"239\":4,\"240\":13,\"241\":2,\"242\":2,\"244\":6,\"300\":2,\"332\":1,\"333\":2,\"364\":6,\"372\":2,\"379\":2,\"556\":2,\"712\":2,\"714\":2}}],[\"absolute\",{\"1\":{\"589\":1,\"607\":3,\"615\":3,\"629\":2}}],[\"abstract可省略\",{\"1\":{\"84\":1}}],[\"abstractstringbuilder类还提供了很多修改字符串的方法比如\",{\"1\":{\"14\":1}}],[\"abstractstringbuilder类\",{\"1\":{\"14\":1}}],[\"abstract\",{\"1\":{\"8\":1,\"262\":1,\"398\":2}}],[\"abstract关键字可省略\",{\"1\":{\"8\":1}}],[\"about\",{\"1\":{\"506\":5}}],[\"abc\",{\"1\":{\"91\":4,\"239\":4,\"244\":2,\"364\":2,\"384\":1,\"403\":1,\"404\":1,\"405\":1,\"407\":2,\"409\":1,\"412\":1,\"423\":2,\"428\":1,\"437\":1,\"440\":2,\"441\":1,\"443\":2,\"444\":2,\"457\":1,\"464\":1,\"486\":2,\"521\":3}}],[\"ab\",{\"0\":{\"20\":1},\"1\":{\"20\":1}}],[\"vw相比于rem的优势\",{\"1\":{\"655\":1}}],[\"vw\",{\"1\":{\"655\":1}}],[\"vh\",{\"1\":{\"655\":1}}],[\"video>\",{\"1\":{\"659\":1}}],[\"video\",{\"1\":{\"659\":1}}],[\"visibility\",{\"1\":{\"624\":1,\"630\":1}}],[\"visible\",{\"1\":{\"589\":1,\"625\":1}}],[\"visited\",{\"1\":{\"623\":1}}],[\"view视图\",{\"1\":{\"520\":1}}],[\"view><\",{\"1\":{\"506\":1,\"512\":1,\"516\":1}}],[\"view>\",{\"1\":{\"506\":2,\"512\":1,\"516\":1}}],[\"views\",{\"1\":{\"473\":4,\"481\":4}}],[\"viewport\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":7,\"674\":1,\"706\":1}}],[\"view\",{\"1\":{\"170\":1,\"171\":3,\"520\":1}}],[\"vmin\",{\"1\":{\"655\":1}}],[\"vmax\",{\"1\":{\"655\":1}}],[\"vm\",{\"1\":{\"520\":1,\"528\":1,\"530\":1,\"531\":1,\"537\":1}}],[\"vdom\",{\"1\":{\"500\":1}}],[\"v2\",{\"1\":{\"489\":2,\"657\":1}}],[\"vo\",{\"1\":{\"277\":2}}],[\"void类型\",{\"0\":{\"404\":1}}],[\"void\",{\"1\":{\"11\":1,\"35\":1,\"81\":1,\"83\":1,\"84\":4,\"85\":1,\"87\":8,\"91\":1,\"95\":2,\"404\":1,\"407\":2,\"424\":2,\"431\":1,\"451\":2,\"452\":2,\"453\":2}}],[\"v8引擎内部会有一个执行上下文栈\",{\"1\":{\"271\":1}}],[\"v8引擎为了执行代码\",{\"1\":{\"271\":1}}],[\"v8\",{\"0\":{\"262\":1,\"263\":1},\"1\":{\"217\":2,\"260\":1,\"261\":2,\"262\":7,\"263\":2,\"264\":2,\"266\":1,\"267\":4}}],[\"v=4\",{\"1\":{\"206\":1,\"348\":1}}],[\"vuex\",{\"1\":{\"545\":2,\"546\":4,\"549\":1}}],[\"vuex原理图解\",{\"1\":{\"542\":1}}],[\"vuex状态管理库\",{\"0\":{\"541\":1}}],[\"vue声明式渲染\",{\"0\":{\"528\":1},\"1\":{\"528\":1}}],[\"vue会默认将浏览器生产的event事件对象作为参数传入到方法\",{\"1\":{\"521\":1}}],[\"vue主页使用路由<router\",{\"1\":{\"506\":1}}],[\"vue实例中挂载router\",{\"1\":{\"505\":1}}],[\"vue程序运行过程\",{\"0\":{\"500\":1},\"1\":{\"500\":1}}],[\"vue文件夹开发\",{\"1\":{\"499\":1}}],[\"vue脚手架\",{\"0\":{\"497\":1}}],[\"vuejs\",{\"1\":{\"489\":1}}],[\"vue1\",{\"1\":{\"484\":1}}],[\"vue2基础\",{\"0\":{\"519\":1}}],[\"vue2\",{\"1\":{\"484\":2},\"2\":{\"482\":1,\"490\":1,\"496\":1,\"501\":1,\"518\":1,\"540\":1,\"558\":1}}],[\"vue中\",{\"1\":{\"476\":1}}],[\"vue中关于tabbar的组件信息全部封装到maintabbar\",{\"1\":{\"476\":1}}],[\"vuerouter的实例对象\",{\"1\":{\"510\":1}}],[\"vuerouter\",{\"1\":{\"473\":3,\"481\":3,\"505\":4,\"507\":2}}],[\"vue3源码\",{\"1\":{\"416\":1}}],[\"vue\",{\"0\":{\"138\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"498\":1,\"499\":1,\"502\":1,\"505\":1},\"1\":{\"239\":2,\"449\":1,\"470\":1,\"471\":3,\"472\":5,\"473\":12,\"474\":4,\"475\":3,\"477\":2,\"478\":3,\"479\":1,\"480\":1,\"481\":8,\"484\":5,\"485\":2,\"486\":1,\"487\":2,\"488\":1,\"494\":2,\"495\":1,\"498\":3,\"499\":5,\"504\":1,\"505\":7,\"506\":1,\"512\":1,\"521\":4,\"525\":1,\"528\":3,\"529\":3,\"530\":3,\"531\":3,\"532\":3,\"533\":3,\"534\":3,\"535\":3,\"536\":3,\"537\":4,\"538\":4,\"539\":3,\"545\":2,\"546\":4,\"551\":1,\"552\":2,\"553\":1,\"555\":2,\"582\":1}}],[\"vuepress\",{\"0\":{\"117\":1},\"1\":{\"113\":2,\"115\":2,\"116\":1,\"117\":2,\"118\":1,\"145\":1}}],[\"vertical\",{\"1\":{\"472\":1,\"474\":1,\"475\":1,\"480\":1,\"611\":3,\"614\":1,\"616\":3,\"633\":1}}],[\"very\",{\"1\":{\"135\":2}}],[\"vector\",{\"1\":{\"43\":1}}],[\"val\",{\"1\":{\"218\":2,\"222\":2,\"309\":2,\"316\":2,\"317\":2,\"318\":2,\"319\":2,\"521\":2,\"537\":4}}],[\"valuechange\",{\"1\":{\"521\":2}}],[\"value=\",{\"1\":{\"521\":17,\"531\":3,\"628\":2,\"672\":1}}],[\"value3\",{\"1\":{\"303\":1,\"304\":1}}],[\"value2\",{\"1\":{\"302\":2,\"303\":2,\"304\":2}}],[\"value1\",{\"1\":{\"302\":2,\"303\":2,\"304\":2}}],[\"values\",{\"1\":{\"240\":3,\"241\":2,\"325\":4}}],[\"valueof\",{\"1\":{\"18\":1}}],[\"value\",{\"1\":{\"14\":1,\"35\":4,\"47\":2,\"182\":5,\"183\":2,\"184\":6,\"185\":3,\"186\":6,\"298\":9,\"299\":10,\"301\":3,\"302\":1,\"303\":6,\"304\":4,\"306\":15,\"307\":5,\"322\":2,\"323\":7,\"326\":4,\"328\":2,\"337\":2,\"345\":2,\"355\":1,\"384\":1,\"521\":4,\"533\":3,\"673\":1}}],[\"variant\",{\"1\":{\"622\":3}}],[\"variable\",{\"1\":{\"119\":1,\"238\":1}}],[\"var会变量提升\",{\"1\":{\"238\":1}}],[\"var多次声明同一变量不会报错\",{\"1\":{\"238\":1}}],[\"var在\",{\"1\":{\"238\":1}}],[\"var\",{\"1\":{\"195\":1,\"211\":1,\"214\":1,\"218\":2,\"221\":2,\"238\":7,\"240\":7,\"244\":2,\"273\":2,\"274\":2,\"364\":4,\"373\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"384\":3,\"460\":2,\"633\":3}}],[\"v\",{\"0\":{\"523\":1,\"524\":1,\"529\":2,\"534\":1,\"535\":1},\"1\":{\"25\":1,\"85\":2,\"262\":1,\"474\":2,\"475\":2,\"480\":2,\"487\":2,\"493\":3,\"494\":3,\"495\":2,\"520\":1,\"521\":41,\"523\":3,\"524\":1,\"528\":6,\"529\":2,\"530\":2,\"531\":3,\"532\":4,\"533\":11,\"534\":5,\"535\":5,\"536\":2,\"537\":2,\"538\":3}}],[\"pc\",{\"1\":{\"663\":3}}],[\"php<br\",{\"1\":{\"531\":1}}],[\"php\",{\"1\":{\"531\":1}}],[\"pxtorem插件\",{\"1\":{\"655\":1}}],[\"px\",{\"1\":{\"521\":1}}],[\"python<br\",{\"1\":{\"531\":1}}],[\"python\",{\"1\":{\"495\":1,\"531\":1}}],[\"plain\",{\"1\":{\"707\":1}}],[\"placeholder\",{\"1\":{\"673\":1}}],[\"play\",{\"1\":{\"631\":2}}],[\"planguages\",{\"1\":{\"495\":3}}],[\"plugin\",{\"1\":{\"118\":1}}],[\"pink\",{\"1\":{\"475\":1}}],[\"p4\",{\"1\":{\"325\":2}}],[\"p3\",{\"1\":{\"325\":2,\"326\":4,\"328\":4,\"344\":4,\"345\":4,\"347\":7,\"443\":1}}],[\"put\",{\"1\":{\"707\":1}}],[\"push方法\",{\"1\":{\"510\":1}}],[\"pushstate\",{\"1\":{\"503\":1}}],[\"push\",{\"1\":{\"301\":1,\"306\":1,\"309\":2,\"318\":2,\"319\":2,\"325\":1,\"328\":1,\"464\":2,\"509\":1,\"510\":1,\"525\":1,\"552\":1}}],[\"public\",{\"0\":{\"19\":1},\"1\":{\"14\":1,\"19\":1,\"35\":2,\"81\":1,\"82\":2,\"83\":1,\"84\":8,\"87\":7,\"91\":1,\"95\":2,\"145\":1,\"687\":1}}],[\"polygon\",{\"1\":{\"643\":1}}],[\"poll\",{\"1\":{\"254\":2,\"255\":2}}],[\"pop\",{\"1\":{\"525\":1}}],[\"position\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"589\":1,\"607\":6,\"615\":6,\"627\":1,\"629\":4}}],[\"posts\",{\"0\":{\"718\":1}}],[\"postman\",{\"1\":{\"703\":1}}],[\"poster\",{\"1\":{\"659\":2}}],[\"poster=\",{\"1\":{\"659\":1}}],[\"post\",{\"0\":{\"700\":1},\"1\":{\"423\":3,\"672\":1,\"700\":6,\"707\":4}}],[\"post产生两个tcp数据包\",{\"1\":{\"23\":1}}],[\"post放在请求体中\",{\"1\":{\"23\":1}}],[\"point<string>\",{\"1\":{\"443\":2}}],[\"point<t>\",{\"1\":{\"443\":1}}],[\"pointtype\",{\"1\":{\"414\":2}}],[\"point\",{\"1\":{\"410\":4,\"411\":5,\"414\":1,\"443\":2}}],[\"pow3\",{\"1\":{\"293\":4}}],[\"peter\",{\"1\":{\"537\":1}}],[\"people\",{\"1\":{\"350\":4,\"358\":3,\"379\":2}}],[\"pending\",{\"1\":{\"254\":1,\"309\":6,\"312\":3,\"313\":5,\"314\":5,\"316\":5,\"318\":6,\"319\":6,\"334\":3,\"341\":1}}],[\"person是student的父类\",{\"1\":{\"415\":1}}],[\"person3\",{\"1\":{\"241\":5}}],[\"person1\",{\"1\":{\"241\":1,\"363\":6,\"376\":18,\"377\":21,\"378\":8}}],[\"person2\",{\"1\":{\"241\":3,\"363\":4,\"376\":13,\"377\":14,\"378\":10}}],[\"person\",{\"1\":{\"190\":5,\"191\":13,\"192\":4,\"239\":6,\"240\":5,\"241\":4,\"288\":3,\"351\":7,\"352\":4,\"363\":4,\"375\":8,\"377\":6,\"378\":5,\"379\":3,\"390\":2,\"391\":5,\"392\":2,\"393\":2,\"394\":2,\"395\":6,\"396\":2,\"397\":2,\"399\":5,\"415\":3,\"417\":2,\"453\":3,\"455\":2}}],[\"patch\",{\"1\":{\"707\":1}}],[\"pattern\",{\"1\":{\"673\":1}}],[\"path=\",{\"1\":{\"473\":4,\"474\":4,\"475\":4,\"478\":4}}],[\"path\",{\"0\":{\"643\":1},\"1\":{\"473\":7,\"474\":6,\"475\":6,\"480\":6,\"481\":5,\"505\":2,\"506\":3,\"507\":1,\"509\":2,\"510\":1,\"512\":4,\"513\":1,\"521\":1,\"643\":2}}],[\"paused\",{\"1\":{\"631\":1}}],[\"password\",{\"1\":{\"628\":4,\"673\":1}}],[\"passport\",{\"1\":{\"206\":1,\"348\":1}}],[\"page\",{\"1\":{\"582\":1}}],[\"padding\",{\"1\":{\"470\":1,\"532\":2,\"626\":1,\"632\":1,\"635\":1,\"636\":1,\"674\":2,\"706\":1}}],[\"payload\",{\"1\":{\"427\":2,\"552\":1,\"553\":2,\"555\":4}}],[\"package\",{\"1\":{\"320\":1}}],[\"parentmethod\",{\"1\":{\"279\":2,\"280\":3,\"281\":3,\"282\":2,\"283\":3,\"284\":3,\"285\":2}}],[\"parentvalue\",{\"1\":{\"279\":4,\"280\":7,\"281\":7,\"282\":4,\"283\":4,\"284\":6,\"285\":6}}],[\"parent\",{\"1\":{\"279\":6,\"280\":4,\"281\":5,\"282\":7,\"283\":5,\"284\":7,\"285\":2,\"351\":2,\"354\":7,\"355\":11,\"598\":1,\"599\":1,\"603\":1,\"605\":1,\"607\":3,\"611\":2,\"613\":1,\"614\":1,\"615\":3,\"616\":3,\"617\":2,\"667\":1}}],[\"parsing\",{\"1\":{\"264\":1}}],[\"parser\",{\"0\":{\"264\":1},\"1\":{\"262\":1,\"263\":1,\"264\":3}}],[\"parse\",{\"1\":{\"94\":1,\"96\":4,\"233\":3}}],[\"params等\",{\"1\":{\"510\":1}}],[\"params类型\",{\"1\":{\"509\":1}}],[\"params\",{\"1\":{\"508\":2,\"510\":1}}],[\"param\",{\"1\":{\"240\":2,\"309\":4,\"319\":4}}],[\"parallel\",{\"1\":{\"90\":1}}],[\"p6\",{\"1\":{\"206\":1,\"348\":1}}],[\"p2\",{\"1\":{\"189\":2,\"190\":1,\"191\":4,\"241\":3,\"312\":2,\"325\":2,\"326\":4,\"327\":5,\"328\":6,\"337\":5,\"340\":2,\"342\":2,\"344\":7,\"345\":4,\"346\":5,\"347\":7,\"363\":5,\"443\":1}}],[\"p10\",{\"1\":{\"632\":1}}],[\"p1\",{\"1\":{\"189\":2,\"190\":1,\"191\":4,\"241\":3,\"312\":2,\"325\":2,\"326\":4,\"327\":3,\"328\":4,\"337\":4,\"340\":2,\"341\":4,\"342\":2,\"344\":4,\"345\":4,\"346\":3,\"347\":8,\"363\":6,\"399\":1,\"443\":1}}],[\"ptr``\",{\"1\":{\"170\":1}}],[\"p\",{\"1\":{\"169\":1,\"189\":5,\"202\":2,\"243\":2,\"313\":2,\"314\":2,\"336\":20,\"337\":8,\"338\":5,\"343\":2,\"390\":4,\"393\":3,\"395\":7,\"396\":3,\"397\":2,\"399\":3,\"415\":2,\"424\":4,\"442\":1,\"455\":3,\"594\":1,\"653\":1}}],[\"p><\",{\"1\":{\"492\":1}}],[\"p>\",{\"1\":{\"135\":1,\"484\":4,\"492\":2,\"546\":1,\"594\":1}}],[\"png\",{\"1\":{\"66\":1,\"72\":2,\"73\":1,\"86\":1,\"97\":1,\"596\":1,\"618\":1}}],[\"pragma\",{\"1\":{\"686\":1}}],[\"preparser\",{\"1\":{\"264\":1}}],[\"prepare\",{\"1\":{\"254\":1}}],[\"preview\",{\"1\":{\"650\":1}}],[\"previousvalue\",{\"1\":{\"242\":1}}],[\"prevent\",{\"1\":{\"521\":1,\"532\":1}}],[\"preventextensions\",{\"1\":{\"187\":3}}],[\"pre\",{\"1\":{\"87\":2,\"521\":1}}],[\"predicate<string>\",{\"1\":{\"87\":1}}],[\"predicate<t>\",{\"1\":{\"87\":2}}],[\"premgen\",{\"1\":{\"74\":1}}],[\"priorityqueue\",{\"1\":{\"45\":1}}],[\"printinfo\",{\"1\":{\"455\":3}}],[\"printid\",{\"1\":{\"412\":4,\"414\":1,\"424\":1}}],[\"printtime\",{\"1\":{\"424\":1}}],[\"printdirection\",{\"1\":{\"424\":1}}],[\"printmessagelength\",{\"1\":{\"416\":3}}],[\"printpoint\",{\"1\":{\"410\":2,\"411\":3,\"414\":1}}],[\"printperson\",{\"1\":{\"399\":3}}],[\"print\",{\"1\":{\"240\":3}}],[\"printxxx\",{\"1\":{\"37\":1}}],[\"println\",{\"1\":{\"35\":1,\"78\":4,\"81\":2,\"82\":1,\"84\":2,\"85\":4,\"87\":8,\"91\":8,\"93\":3,\"95\":6}}],[\"private修饰符\",{\"0\":{\"393\":1}}],[\"private\",{\"0\":{\"19\":1},\"1\":{\"12\":1,\"14\":2,\"19\":1,\"87\":1,\"93\":2,\"393\":1,\"396\":1,\"398\":3,\"687\":1}}],[\"project\",{\"1\":{\"498\":1,\"499\":1}}],[\"provide\",{\"1\":{\"488\":1}}],[\"profile\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"473\":7,\"474\":3,\"475\":3,\"478\":3,\"481\":5,\"516\":1}}],[\"process\",{\"1\":{\"249\":1,\"255\":1,\"256\":2}}],[\"promises\",{\"1\":{\"320\":5,\"325\":9,\"326\":7,\"327\":4,\"328\":8,\"329\":1,\"347\":1}}],[\"promisestate\",{\"1\":{\"309\":8,\"312\":5,\"313\":6,\"314\":6,\"316\":7,\"317\":2,\"318\":8,\"319\":8}}],[\"promiseresult\",{\"1\":{\"309\":7,\"312\":5,\"313\":4,\"314\":4,\"316\":5,\"317\":2,\"318\":5,\"319\":7}}],[\"promise2\",{\"1\":{\"252\":1,\"253\":2,\"309\":13,\"319\":13}}],[\"promise1\",{\"1\":{\"252\":1,\"253\":2,\"309\":2,\"319\":2}}],[\"promise可以封装异步操作\",{\"1\":{\"243\":1}}],[\"promise\",{\"0\":{\"202\":1,\"243\":1,\"308\":1,\"309\":1,\"310\":1,\"320\":1,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"330\":1,\"335\":1,\"339\":1,\"348\":1},\"1\":{\"201\":1,\"202\":17,\"203\":4,\"204\":1,\"205\":8,\"206\":1,\"243\":3,\"249\":1,\"251\":2,\"252\":6,\"253\":4,\"255\":1,\"256\":1,\"299\":2,\"307\":4,\"309\":3,\"313\":1,\"314\":1,\"317\":2,\"318\":2,\"319\":5,\"320\":1,\"321\":2,\"322\":11,\"325\":7,\"326\":4,\"327\":2,\"328\":4,\"329\":3,\"331\":2,\"332\":5,\"333\":1,\"334\":5,\"335\":2,\"336\":12,\"337\":9,\"338\":3,\"340\":2,\"341\":7,\"342\":2,\"343\":3,\"344\":8,\"345\":9,\"346\":1,\"347\":9,\"348\":2,\"349\":4,\"555\":1}}],[\"protocol\",{\"1\":{\"693\":1,\"710\":2}}],[\"protomethod\",{\"1\":{\"279\":2,\"280\":2,\"281\":2,\"284\":2}}],[\"protovalue\",{\"1\":{\"279\":6,\"280\":4,\"281\":6,\"284\":4}}],[\"proto\",{\"1\":{\"190\":1,\"192\":1,\"279\":1,\"351\":18,\"354\":2,\"355\":2,\"363\":1}}],[\"prototype\",{\"0\":{\"321\":1,\"322\":1},\"1\":{\"190\":1,\"191\":5,\"192\":3,\"194\":1,\"279\":5,\"280\":2,\"281\":3,\"282\":1,\"283\":1,\"284\":8,\"300\":2,\"321\":1,\"335\":1,\"350\":2,\"351\":25,\"352\":2,\"353\":1,\"354\":2,\"355\":1,\"358\":1,\"363\":5,\"379\":1,\"489\":1,\"505\":1,\"543\":1}}],[\"protected修饰符\",{\"0\":{\"394\":1}}],[\"protected\",{\"0\":{\"19\":1},\"1\":{\"8\":1,\"19\":1,\"394\":2}}],[\"property\",{\"1\":{\"631\":1}}],[\"properties\",{\"1\":{\"228\":1}}],[\"prop=\",{\"1\":{\"521\":2}}],[\"props\",{\"1\":{\"473\":1,\"474\":1,\"475\":1,\"480\":1,\"487\":3,\"521\":1}}],[\"prop2\",{\"1\":{\"185\":1}}],[\"prop1\",{\"1\":{\"185\":1}}],[\"prop\",{\"1\":{\"182\":1,\"521\":3}}],[\"proxy\",{\"1\":{\"32\":1}}],[\"jwt\",{\"1\":{\"682\":1}}],[\"join\",{\"1\":{\"531\":1}}],[\"joining\",{\"1\":{\"91\":1}}],[\"jit\",{\"1\":{\"262\":3}}],[\"justify\",{\"1\":{\"605\":1,\"621\":1,\"645\":2}}],[\"just\",{\"1\":{\"262\":1}}],[\"jquery\",{\"1\":{\"243\":2}}],[\"jqx\",{\"1\":{\"91\":1}}],[\"james\",{\"1\":{\"395\":1,\"436\":1,\"549\":1}}],[\"jacky\",{\"1\":{\"537\":1}}],[\"jack\",{\"1\":{\"239\":1,\"240\":1,\"241\":3,\"244\":1}}],[\"java<br\",{\"1\":{\"531\":1}}],[\"javascript中使用\",{\"1\":{\"631\":1}}],[\"javascript的字符串包装类的类型\",{\"1\":{\"460\":1}}],[\"javascript前端web工程师\",{\"1\":{\"329\":1}}],[\"javascript高级程序设计\",{\"1\":{\"286\":1}}],[\"javascript高级程序设计第四版\",{\"1\":{\"188\":1}}],[\"javascript进阶之继承\",{\"1\":{\"286\":1}}],[\"javascriptcore\",{\"1\":{\"260\":1}}],[\"javascript深入之闭包\",{\"1\":{\"226\":1}}],[\"javascript深入之词法作用域和动态作用域\",{\"1\":{\"226\":1}}],[\"javascript权威指南\",{\"1\":{\"209\":1}}],[\"javascript\",{\"0\":{\"260\":1},\"1\":{\"179\":2,\"209\":4,\"228\":1,\"239\":1,\"260\":2,\"262\":3,\"263\":1,\"264\":2,\"266\":1,\"267\":2,\"357\":1,\"449\":2,\"495\":1,\"666\":1,\"706\":2}}],[\"java特性\",{\"2\":{\"100\":1}}],[\"java线程\",{\"2\":{\"65\":1}}],[\"java线程面试总结\",{\"0\":{\"62\":1}}],[\"java集合\",{\"2\":{\"61\":1}}],[\"java集合面试总结\",{\"0\":{\"42\":1}}],[\"java面试\",{\"2\":{\"41\":1,\"61\":1,\"65\":1}}],[\"java基础\",{\"2\":{\"41\":1}}],[\"java基础面试总结\",{\"0\":{\"2\":1}}],[\"java编译器是通过先检查代码中泛型类型\",{\"1\":{\"29\":1}}],[\"java只有值传递\",{\"1\":{\"10\":1}}],[\"java8之后\",{\"0\":{\"75\":1}}],[\"java8之后可包含静态方法\",{\"1\":{\"8\":1}}],[\"java8之前\",{\"0\":{\"74\":1}}],[\"java8新特性\",{\"0\":{\"66\":1}}],[\"java8后可以有默认实现方法default修饰\",{\"1\":{\"8\":1}}],[\"java\",{\"0\":{\"15\":1,\"37\":1},\"1\":{\"7\":2,\"11\":1,\"14\":1,\"27\":2,\"53\":1,\"72\":1,\"87\":1,\"91\":1,\"94\":1,\"95\":2,\"96\":2,\"102\":1,\"239\":1,\"240\":1,\"241\":1,\"262\":1,\"263\":2,\"449\":1,\"495\":1,\"531\":1},\"2\":{\"40\":1,\"60\":1,\"64\":1,\"99\":1}}],[\"j|t\",{\"1\":{\"234\":1}}],[\"j\",{\"1\":{\"218\":7}}],[\"js面试题小合集\",{\"1\":{\"692\":1}}],[\"jsdelivr\",{\"1\":{\"650\":1}}],[\"js代码传递参数\",{\"1\":{\"509\":1}}],[\"js代码获得参数\",{\"1\":{\"508\":1}}],[\"jsx中是有冲突\",{\"1\":{\"464\":1}}],[\"jsx\",{\"1\":{\"443\":1}}],[\"js继承\",{\"1\":{\"286\":1}}],[\"js对于复杂数据类型内存的分配会在堆内存中开辟一块空间\",{\"1\":{\"276\":1}}],[\"js对于基本数据类型内存的分配会在执行时\",{\"1\":{\"276\":1}}],[\"js内存管理及垃圾回收\",{\"0\":{\"276\":1}}],[\"js引擎会在执行代码之前\",{\"1\":{\"270\":1}}],[\"jsonp\",{\"0\":{\"706\":1},\"1\":{\"705\":1,\"706\":1}}],[\"json`\",{\"1\":{\"243\":6}}],[\"json\",{\"0\":{\"233\":1},\"1\":{\"233\":8,\"243\":3,\"320\":1,\"682\":1,\"683\":1,\"695\":2,\"706\":1,\"707\":1}}],[\"js\",{\"0\":{\"257\":1,\"261\":1,\"268\":1,\"481\":1},\"1\":{\"211\":1,\"221\":1,\"226\":1,\"234\":1,\"236\":2,\"239\":1,\"240\":1,\"241\":1,\"243\":1,\"244\":5,\"248\":4,\"259\":1,\"260\":4,\"261\":4,\"262\":2,\"263\":2,\"264\":1,\"267\":1,\"318\":1,\"320\":1,\"331\":4,\"361\":1,\"382\":2,\"473\":1,\"481\":1,\"494\":2,\"512\":1,\"513\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"545\":1,\"546\":1,\"551\":1,\"552\":2,\"553\":1,\"555\":2,\"580\":2,\"582\":2,\"583\":2,\"663\":1,\"706\":1}}],[\"jpg\",{\"1\":{\"142\":1,\"627\":1,\"659\":1}}],[\"jbutton\",{\"1\":{\"83\":2}}],[\"jdk\",{\"1\":{\"32\":1}}],[\"jdk动态代理\",{\"1\":{\"32\":1}}],[\"jdk动态代理和cglib动态代理是什么\",{\"0\":{\"32\":1}}],[\"jdk1\",{\"0\":{\"49\":1,\"50\":1,\"52\":1,\"53\":1,\"68\":1,\"69\":1,\"71\":1,\"72\":1},\"1\":{\"27\":1,\"46\":2,\"57\":2}}],[\"jvm编译器通过上下文推断出数据类型\",{\"1\":{\"78\":1}}],[\"jvm\",{\"1\":{\"13\":1,\"32\":2}}],[\"用来同步建立连接\",{\"1\":{\"711\":1}}],[\"用来描述\",{\"1\":{\"648\":1}}],[\"用来代替mutation进行异步操作的\",{\"1\":{\"554\":1}}],[\"用来解释执行\",{\"1\":{\"260\":1}}],[\"用户数据报协议\",{\"1\":{\"710\":1}}],[\"用户名\",{\"1\":{\"628\":1}}],[\"用户体验差\",{\"1\":{\"583\":1}}],[\"用户体验好\",{\"1\":{\"583\":1}}],[\"用户登录状态\",{\"1\":{\"544\":1}}],[\"用户查询成功~~~\",{\"1\":{\"243\":1}}],[\"用v\",{\"1\":{\"529\":2}}],[\"用$event获取浏览器参数的event对象\",{\"1\":{\"521\":1}}],[\"用\",{\"1\":{\"205\":1}}],[\"用途\",{\"1\":{\"93\":1}}],[\"用lambda\",{\"1\":{\"81\":1}}],[\"用于限制一个源如何与另一个源的资源进行交互\",{\"1\":{\"703\":1}}],[\"用于提交数据\",{\"1\":{\"700\":1}}],[\"用于获取数据\",{\"1\":{\"700\":1}}],[\"用于在浏览器本地临时保存数据\",{\"1\":{\"680\":1}}],[\"用于在浏览器本地长久保存数据\",{\"1\":{\"679\":1}}],[\"用于防止盗链\",{\"1\":{\"633\":1}}],[\"用于去除a元素和input元素的默认focus轮廓效果\",{\"1\":{\"633\":1}}],[\"用于清除浮动\",{\"1\":{\"630\":1}}],[\"用于隐藏未编译的\",{\"1\":{\"521\":1}}],[\"用于指定跳转的路径\",{\"1\":{\"507\":1}}],[\"用于明确获取其中的一个特定的组件\",{\"1\":{\"488\":1}}],[\"用于扩展\",{\"1\":{\"454\":1}}],[\"用于\",{\"1\":{\"258\":1,\"260\":1}}],[\"用于确定构造函数是否为new调用的\",{\"1\":{\"198\":1}}],[\"用于存放箭头函数的地址\",{\"1\":{\"195\":1,\"364\":1}}],[\"用于存储键值对数据\",{\"1\":{\"52\":1,\"71\":1}}],[\"用于处理\",{\"1\":{\"35\":1}}],[\"用于捕获异常\",{\"1\":{\"35\":1}}],[\"用于拦截增强被代理类的方法\",{\"1\":{\"32\":1}}],[\"用于声明属性\",{\"1\":{\"13\":1}}],[\"用implements实现多继承\",{\"1\":{\"8\":1}}],[\"⼦类⽅法的访问权限应⽐⽗类⽅法的访问权限更⼤或相等\",{\"1\":{\"12\":1}}],[\"⼦类⽅法声明抛出的异常类应⽐⽗类⽅法声明抛出的异常类更⼩或相等\",{\"1\":{\"12\":1}}],[\"⼦类⽅法返回值类型应⽐⽗类⽅法返回值类型更⼩或相等\",{\"1\":{\"12\":1}}],[\"返回数据的压缩算法\",{\"1\":{\"695\":1}}],[\"返回数据的大小\",{\"1\":{\"695\":1}}],[\"返回数据的格式\",{\"1\":{\"695\":1}}],[\"返回的函数\",{\"1\":{\"376\":1,\"377\":1}}],[\"返回箭头函数的普通函数\",{\"1\":{\"376\":1}}],[\"返回普通函数的普通函数\",{\"1\":{\"376\":1}}],[\"返回普通值\",{\"1\":{\"203\":1}}],[\"返回值为\",{\"1\":{\"358\":1}}],[\"返回值为数据类型的字符串\",{\"1\":{\"357\":1}}],[\"返回值\",{\"1\":{\"336\":1,\"337\":1,\"379\":2}}],[\"返回值类型\",{\"1\":{\"12\":1}}],[\"返回新的\",{\"1\":{\"319\":1,\"321\":1,\"338\":1}}],[\"返回新数组\",{\"1\":{\"287\":1}}],[\"返回以上一次请求结果为参数的新请求\",{\"1\":{\"307\":1}}],[\"返回被删的数组\",{\"1\":{\"287\":1}}],[\"返回\",{\"1\":{\"203\":2,\"713\":2}}],[\"返回一个actions成功的回调\",{\"1\":{\"555\":1}}],[\"返回一个为成功状态的\",{\"1\":{\"336\":1,\"337\":1}}],[\"返回一个符合迭代器协议的对象\",{\"1\":{\"299\":1}}],[\"返回一个函数\",{\"1\":{\"291\":1,\"362\":1,\"549\":1}}],[\"返回一个有\",{\"1\":{\"218\":1,\"222\":1,\"298\":1}}],[\"返回一个\",{\"1\":{\"202\":1}}],[\"返回这个临时对象\",{\"1\":{\"192\":2,\"363\":2}}],[\"返回顶部按钮\",{\"1\":{\"107\":1,\"146\":1}}],[\"返回该对象值\",{\"1\":{\"93\":2}}],[\"返回符合条件的stream\",{\"1\":{\"91\":1}}],[\"返回类型\",{\"1\":{\"12\":1}}],[\"综上\",{\"1\":{\"12\":1}}],[\"⼤于等于⽗类\",{\"1\":{\"12\":1}}],[\"是服务端随机生成的初始序号\",{\"1\":{\"712\":1}}],[\"是客户端随机生成的初始序号\",{\"1\":{\"712\":1}}],[\"是互联网早期常用的子域名\",{\"1\":{\"704\":1}}],[\"是幂等的\",{\"1\":{\"700\":1}}],[\"是加密传输的\",{\"1\":{\"699\":1}}],[\"是明文传输的\",{\"1\":{\"699\":1}}],[\"是常用的会话跟踪技术\",{\"1\":{\"675\":1}}],[\"是无状态的协议\",{\"1\":{\"675\":1,\"693\":1}}],[\"是无序的数据集合\",{\"1\":{\"179\":1}}],[\"是无序的\",{\"1\":{\"47\":1}}],[\"是做什么用的\",{\"1\":{\"663\":1}}],[\"是横屏的\",{\"1\":{\"663\":1}}],[\"是相对于最近的滚动祖先包含的滚动视口\",{\"1\":{\"629\":1}}],[\"是指在不对页面进行任何布局控制时\",{\"1\":{\"586\":1}}],[\"是前后端分离时提出的一种解决方案\",{\"1\":{\"582\":1}}],[\"是vue内置的一个组件\",{\"1\":{\"516\":1}}],[\"是第一版\",{\"1\":{\"357\":1}}],[\"是对象\",{\"1\":{\"350\":1}}],[\"是存放共有属性\",{\"1\":{\"350\":1}}],[\"是单线程语言\",{\"1\":{\"331\":1}}],[\"是单线程的\",{\"1\":{\"248\":1}}],[\"是下面这样的\",{\"1\":{\"322\":1}}],[\"是异步\",{\"0\":{\"317\":1}}],[\"是非\",{\"1\":{\"309\":1,\"319\":1}}],[\"是函数\",{\"1\":{\"309\":1,\"319\":1}}],[\"是则改变状态\",{\"1\":{\"309\":2,\"313\":2,\"314\":2,\"316\":2,\"318\":2,\"319\":2}}],[\"是则结束执行\",{\"1\":{\"292\":1}}],[\"是否独占一行\",{\"1\":{\"674\":1}}],[\"是否显示边框\",{\"1\":{\"669\":1}}],[\"是否循环播放\",{\"1\":{\"659\":1}}],[\"是否自动播放\",{\"1\":{\"659\":1}}],[\"是否出现在某个实例对象的原型链上\",{\"1\":{\"358\":1}}],[\"是否大于等于需要柯里化的函数形参个数\",{\"1\":{\"292\":1}}],[\"是否可被重写\",{\"0\":{\"11\":1}}],[\"是实现继承的语法糖\",{\"1\":{\"285\":1}}],[\"是电脑的\",{\"1\":{\"266\":1}}],[\"是如何成功的\",{\"1\":{\"266\":1}}],[\"是用\",{\"1\":{\"262\":1}}],[\"是定义函数与调用函数的作用域不同的时候\",{\"1\":{\"209\":1}}],[\"是浏览器对标准的实现\",{\"1\":{\"190\":1,\"351\":1}}],[\"是一个用于传输超媒体文档\",{\"1\":{\"693\":1}}],[\"是一个\",{\"1\":{\"636\":1}}],[\"是一个抽象组件\",{\"1\":{\"489\":1}}],[\"是一个数组类型\",{\"1\":{\"488\":1}}],[\"是一个无参数函数\",{\"1\":{\"299\":1}}],[\"是一个无参数或接受一个参数的函数\",{\"1\":{\"298\":1}}],[\"是一个对象\",{\"1\":{\"182\":1}}],[\"是一种基于非连接的\",{\"1\":{\"710\":1}}],[\"是一种基于连接的\",{\"1\":{\"710\":1}}],[\"是一种描述网页的\",{\"1\":{\"662\":1}}],[\"是一种样式表语言\",{\"1\":{\"648\":1}}],[\"是一种中间码\",{\"1\":{\"266\":1}}],[\"是一种包含执行程序\",{\"1\":{\"266\":1}}],[\"是一种数据存储方式\",{\"1\":{\"173\":1}}],[\"是一种数组和链表结构\",{\"1\":{\"52\":1,\"71\":1}}],[\"是一种可重入锁\",{\"1\":{\"52\":1,\"71\":1}}],[\"是字符串传输\",{\"1\":{\"696\":1}}],[\"是字符串\",{\"1\":{\"181\":1}}],[\"是键值对的集合\",{\"1\":{\"179\":1}}],[\"是\",{\"1\":{\"115\":1,\"190\":1,\"263\":1,\"307\":1,\"309\":1,\"319\":1,\"321\":1,\"351\":1,\"582\":1,\"589\":5,\"594\":2,\"674\":1,\"679\":1,\"680\":1}}],[\"是⼦类对⽗类的允许访问的⽅法的实现过程进⾏重新编写\",{\"1\":{\"12\":1}}],[\"⽅法名相同\",{\"1\":{\"12\":1}}],[\"⽅法名\",{\"1\":{\"12\":1}}],[\"⽅法名必须相同\",{\"1\":{\"12\":1}}],[\"⽅法返回值和访问修饰符可以不同\",{\"1\":{\"12\":1}}],[\"的角度\",{\"1\":{\"700\":1}}],[\"的认证\",{\"1\":{\"698\":2}}],[\"的应用层协议\",{\"1\":{\"693\":1}}],[\"的请求\",{\"1\":{\"689\":1}}],[\"的响应\",{\"1\":{\"689\":1}}],[\"的响应给客户端\",{\"1\":{\"677\":1}}],[\"的跨域认证方案\",{\"1\":{\"682\":1}}],[\"的标签页\",{\"1\":{\"680\":1}}],[\"的方式发送给服务端\",{\"1\":{\"677\":1}}],[\"的方案\",{\"1\":{\"264\":1}}],[\"的名字\",{\"1\":{\"667\":2}}],[\"的名字来源于汽车的\",{\"1\":{\"262\":1}}],[\"的情况下也能呈现较好的内容结构与代码结构\",{\"1\":{\"658\":1}}],[\"的异同点\",{\"1\":{\"657\":1}}],[\"的脚部\",{\"1\":{\"657\":1}}],[\"的头部\",{\"1\":{\"657\":1}}],[\"的简写形式\",{\"1\":{\"645\":1}}],[\"的宽度\",{\"1\":{\"636\":1}}],[\"的默认属性为\",{\"1\":{\"635\":1}}],[\"的元素\",{\"1\":{\"623\":1}}],[\"的尺寸\",{\"1\":{\"607\":1,\"615\":1}}],[\"的写法\",{\"1\":{\"594\":2}}],[\"的写法简化成compose\",{\"1\":{\"293\":1}}],[\"的高度时\",{\"1\":{\"592\":1}}],[\"的块级元素\",{\"1\":{\"589\":1}}],[\"的理解\",{\"1\":{\"583\":1}}],[\"的解析\",{\"1\":{\"581\":2}}],[\"的最后\",{\"1\":{\"580\":1}}],[\"的版本里\",{\"1\":{\"521\":1}}],[\"的联合类型\",{\"1\":{\"413\":1}}],[\"的箭头函数外层有普通函数\",{\"1\":{\"385\":1}}],[\"的箭头函数外层没有普通函数\",{\"1\":{\"385\":1}}],[\"的普通函数的\",{\"1\":{\"385\":1}}],[\"的优先级比\",{\"1\":{\"687\":1}}],[\"的优先级高于\",{\"1\":{\"368\":1}}],[\"的优化\",{\"1\":{\"243\":1}}],[\"的二进制表示全都是\",{\"1\":{\"357\":1}}],[\"的原型链上\",{\"1\":{\"351\":2}}],[\"的显式原型\",{\"1\":{\"351\":2}}],[\"的隐式原型\",{\"1\":{\"351\":4}}],[\"的地方\",{\"1\":{\"351\":1}}],[\"的状态\",{\"1\":{\"349\":1,\"556\":2}}],[\"的错误\",{\"1\":{\"347\":1}}],[\"的缺点\",{\"1\":{\"345\":1}}],[\"的值仅限于下列三者之一\",{\"1\":{\"707\":1}}],[\"的值\",{\"1\":{\"343\":1}}],[\"的值被设置\",{\"1\":{\"184\":2}}],[\"的值被获取\",{\"1\":{\"184\":2}}],[\"的三种参数\",{\"0\":{\"341\":1}}],[\"的问题\",{\"1\":{\"334\":1}}],[\"的别名用于指定发生错误时的回调函数\",{\"1\":{\"321\":1}}],[\"的为准\",{\"1\":{\"313\":1}}],[\"的结果是\",{\"1\":{\"373\":1}}],[\"的结果\",{\"1\":{\"332\":1}}],[\"的结果值\",{\"1\":{\"309\":1,\"319\":1}}],[\"的结构类似\",{\"1\":{\"53\":1,\"72\":1}}],[\"的结构和\",{\"1\":{\"52\":1,\"71\":1}}],[\"的第一个\",{\"1\":{\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1}}],[\"的由来\",{\"0\":{\"307\":1},\"1\":{\"332\":1}}],[\"的这个对象\",{\"1\":{\"299\":1}}],[\"的属性\",{\"1\":{\"299\":1}}],[\"的过程\",{\"1\":{\"267\":1}}],[\"的虚拟机\",{\"1\":{\"263\":1}}],[\"的回调\",{\"1\":{\"254\":4}}],[\"的回调函数放入宏任务队列\",{\"1\":{\"253\":1}}],[\"的回调函数引用了上级\",{\"1\":{\"218\":1}}],[\"的回调函数\",{\"1\":{\"218\":2,\"334\":2}}],[\"的等价替换\",{\"1\":{\"252\":1}}],[\"的下边代码进入微任务队列\",{\"1\":{\"252\":1}}],[\"的全部性能\",{\"1\":{\"248\":1,\"331\":1}}],[\"的计算能力\",{\"1\":{\"248\":1}}],[\"的数组\",{\"1\":{\"242\":1}}],[\"的structuredclone\",{\"1\":{\"235\":1}}],[\"的引用赋值与传值赋值\",{\"1\":{\"236\":1}}],[\"的引用\",{\"1\":{\"224\":1}}],[\"的引用捆绑在一起\",{\"1\":{\"209\":1}}],[\"的垃圾回收机制的\",{\"1\":{\"224\":1}}],[\"的对象\",{\"1\":{\"218\":1,\"222\":1,\"521\":1}}],[\"的查找在\",{\"1\":{\"211\":1}}],[\"的图片失败`\",{\"1\":{\"206\":1,\"348\":1}}],[\"的返回值放入\",{\"1\":{\"205\":1,\"252\":1}}],[\"的关系\",{\"0\":{\"202\":1}}],[\"的上层作用域\",{\"1\":{\"195\":1,\"364\":1}}],[\"的2种方式\",{\"1\":{\"181\":1}}],[\"的差异\",{\"0\":{\"171\":1}}],[\"的实现原理\",{\"0\":{\"170\":1}}],[\"的基础之上\",{\"1\":{\"167\":2}}],[\"的\",{\"1\":{\"123\":1,\"144\":1,\"181\":1,\"202\":2,\"204\":1,\"205\":1,\"309\":2,\"317\":2,\"319\":2,\"341\":1,\"373\":1,\"582\":1,\"655\":1,\"677\":1,\"699\":1,\"707\":1}}],[\"的一部分\",{\"1\":{\"74\":1}}],[\"的锁\",{\"1\":{\"52\":1,\"71\":1}}],[\"的hashcode经过扰动函数\",{\"1\":{\"49\":1,\"68\":1}}],[\"的泛型其实是伪泛型\",{\"1\":{\"27\":1}}],[\"的主要作用就是通过服务端记录用户的状态\",{\"1\":{\"25\":1}}],[\"的⽅法能够被再次声明\",{\"1\":{\"12\":1}}],[\"的构造方法是不能被重写的\",{\"1\":{\"11\":1}}],[\"的区别是什么\",{\"0\":{\"14\":1}}],[\"的区别\",{\"0\":{\"4\":1,\"10\":1,\"24\":1,\"58\":1,\"681\":1,\"699\":1,\"700\":1},\"1\":{\"594\":1,\"696\":1,\"710\":1}}],[\"但响应会被浏览器拦截\",{\"1\":{\"703\":1}}],[\"但也有免费的\",{\"1\":{\"699\":1}}],[\"但请求者应继续使用原有位置来进行以后的请求\",{\"1\":{\"694\":1}}],[\"但尚未处理\",{\"1\":{\"694\":1}}],[\"但随着移动端的兴起\",{\"1\":{\"663\":1}}],[\"但尽量少用\",{\"1\":{\"640\":1}}],[\"但可以使用this\",{\"1\":{\"525\":1}}],[\"但语法不太明晰\",{\"1\":{\"337\":1}}],[\"但前端目前不需要太高性能\",{\"1\":{\"331\":1}}],[\"但不响应syn+ack\",{\"1\":{\"710\":1}}],[\"但不稳定会丢包\",{\"1\":{\"710\":1}}],[\"但不执行函数\",{\"1\":{\"362\":1}}],[\"但不够统一规范\",{\"1\":{\"332\":1}}],[\"但不可枚举\",{\"1\":{\"279\":2,\"281\":1,\"282\":1}}],[\"但不能用\",{\"1\":{\"11\":1}}],[\"但对于\",{\"1\":{\"262\":1}}],[\"但拷贝前后对象的引用类型数据因为指向同一个内存地址\",{\"1\":{\"227\":1}}],[\"但因为函数内部引用外部变量\",{\"1\":{\"217\":1}}],[\"但因为函数作用域是随着函数执行完毕就被销毁的\",{\"1\":{\"215\":1}}],[\"但因为全局作用域是长久存在的\",{\"1\":{\"214\":1}}],[\"但由于多数函数调用与函数定义都在同一作用域内\",{\"1\":{\"209\":1}}],[\"但本质还是基于回调函数\",{\"1\":{\"201\":1,\"334\":1}}],[\"但又引入了另一个缺点\",{\"1\":{\"190\":1}}],[\"但仍可以使用\",{\"1\":{\"182\":1}}],[\"但允许有null\",{\"1\":{\"172\":1}}],[\"但性能会有影响\",{\"1\":{\"31\":1}}],[\"但是没有及时从上游服务器收到请求\",{\"1\":{\"694\":1}}],[\"但是没有使用final\",{\"1\":{\"14\":1}}],[\"但是从上游服务器得到错误响应\",{\"1\":{\"694\":1}}],[\"但是浏览器会显示滚动条以便查看其余的内容\",{\"1\":{\"625\":1}}],[\"但是平时为了兼容性\",{\"1\":{\"594\":1}}],[\"但是缺乏响应式\",{\"1\":{\"543\":1}}],[\"但是方法本身是需要一个参数的\",{\"1\":{\"521\":1}}],[\"但是内容由子组件来提供\",{\"1\":{\"495\":1}}],[\"但是当子组件过多\",{\"1\":{\"488\":1}}],[\"但是数组中存放的是什么类型的元素呢\",{\"1\":{\"464\":1}}],[\"但是参数不同的几个函数\",{\"1\":{\"437\":1}}],[\"但是如果第一次发送的\",{\"1\":{\"713\":1}}],[\"但是如果它是对象类型\",{\"1\":{\"395\":1}}],[\"但是如果⽅法的返回值是引⽤类型\",{\"1\":{\"12\":1}}],[\"但是失败结果\",{\"1\":{\"328\":1}}],[\"但是错误的\",{\"1\":{\"322\":1}}],[\"但是目前的\",{\"1\":{\"317\":1}}],[\"但是并不会赋值\",{\"1\":{\"271\":1}}],[\"但是子线程完全受主线程控制\",{\"1\":{\"248\":1}}],[\"但是对表中查询的行数上的不一致\",{\"1\":{\"165\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"145\":1}}],[\"但是我们不一直坐在水壶前面等\",{\"1\":{\"39\":1}}],[\"但是object类型不能存储int型\",{\"1\":{\"28\":1}}],[\"但是他没有把你退回来\",{\"1\":{\"24\":1}}],[\"但是客户端并不知道\",{\"1\":{\"24\":1}}],[\"但是被\",{\"1\":{\"12\":1}}],[\"但是可以这样\",{\"1\":{\"91\":1}}],[\"但是可以\",{\"1\":{\"11\":1}}],[\"重绘\",{\"0\":{\"587\":1},\"1\":{\"587\":1}}],[\"重绘不一定引起回流\",{\"1\":{\"585\":1}}],[\"重点\",{\"1\":{\"622\":1}}],[\"重点阶段为\",{\"1\":{\"254\":1}}],[\"重点难点\",{\"0\":{\"170\":1}}],[\"重新定义属性描述符\",{\"1\":{\"182\":1}}],[\"重新登录一般要将\",{\"1\":{\"25\":1}}],[\"重做日志\",{\"1\":{\"164\":1}}],[\"重定向默认路径\",{\"1\":{\"506\":1,\"507\":1}}],[\"重定向\",{\"1\":{\"24\":1,\"694\":1}}],[\"重定向是客户端行为\",{\"1\":{\"24\":1}}],[\"重载⽅法\",{\"1\":{\"12\":1}}],[\"重载和重写的区别\",{\"0\":{\"12\":1}}],[\"重载\",{\"1\":{\"11\":1,\"12\":1}}],[\"重写时是可以返回该引⽤类型的⼦类的\",{\"1\":{\"12\":1}}],[\"重写⽅法\",{\"1\":{\"12\":1}}],[\"重写就是⼦类对⽗类⽅法的重新改造\",{\"1\":{\"12\":1}}],[\"重写发⽣在运⾏期\",{\"1\":{\"12\":1}}],[\"重写的方法名不变\",{\"1\":{\"11\":1}}],[\"重写是子类方法重写父类的方法\",{\"1\":{\"11\":1}}],[\"重写\",{\"1\":{\"11\":1,\"12\":1,\"25\":1}}],[\"重要的内容\",{\"1\":{\"125\":1}}],[\"重要\",{\"0\":{\"9\":1},\"1\":{\"621\":1,\"623\":2}}],[\"ok\",{\"1\":{\"686\":1}}],[\"oblique\",{\"1\":{\"622\":1}}],[\"objfoo\",{\"1\":{\"360\":4}}],[\"objcustom\",{\"1\":{\"300\":3}}],[\"obj3\",{\"1\":{\"187\":5}}],[\"obj2\",{\"1\":{\"54\":1,\"180\":2,\"184\":4,\"187\":7,\"195\":8,\"228\":4,\"230\":4,\"361\":5,\"364\":4,\"373\":8,\"385\":4,\"452\":1}}],[\"obj1\",{\"1\":{\"54\":1,\"180\":4,\"184\":3,\"187\":4,\"195\":9,\"228\":12,\"230\":8,\"358\":1,\"361\":6,\"364\":6,\"373\":8,\"385\":3,\"452\":1}}],[\"obj\",{\"1\":{\"54\":1,\"181\":10,\"182\":3,\"183\":8,\"184\":5,\"185\":5,\"186\":6,\"192\":3,\"195\":1,\"233\":5,\"234\":19,\"235\":5,\"240\":4,\"243\":2,\"282\":4,\"283\":2,\"288\":2,\"341\":5,\"351\":3,\"360\":11,\"361\":9,\"362\":18,\"363\":3,\"364\":1,\"366\":3,\"367\":2,\"368\":1,\"371\":10,\"378\":13,\"381\":5,\"384\":5}}],[\"object\",{\"1\":{\"22\":1,\"31\":1,\"32\":2,\"37\":1,\"38\":1,\"43\":2,\"45\":2,\"54\":3,\"180\":2,\"181\":2,\"182\":2,\"183\":2,\"184\":2,\"185\":2,\"186\":6,\"187\":3,\"189\":1,\"230\":4,\"234\":1,\"241\":5,\"270\":1,\"272\":1,\"276\":1,\"282\":4,\"284\":1,\"296\":1,\"300\":1,\"309\":2,\"319\":2,\"323\":1,\"335\":1,\"350\":3,\"351\":18,\"353\":1,\"354\":3,\"355\":4,\"357\":5,\"358\":1,\"384\":1,\"521\":2,\"533\":3}}],[\"object类型\",{\"0\":{\"465\":1}}],[\"object类的一个方法\",{\"1\":{\"13\":1}}],[\"object类equals\",{\"1\":{\"10\":1}}],[\"oldval\",{\"1\":{\"536\":1}}],[\"oldformat\",{\"1\":{\"95\":1}}],[\"o>\",{\"1\":{\"441\":1}}],[\"otherprop\",{\"1\":{\"521\":1}}],[\"other\",{\"1\":{\"255\":2,\"521\":1}}],[\"onfocus\",{\"1\":{\"673\":1}}],[\"onfulfilled\",{\"1\":{\"309\":6,\"316\":5,\"317\":5,\"318\":6,\"319\":6,\"321\":1}}],[\"onfulfilledcallbacks\",{\"1\":{\"309\":3,\"318\":3,\"319\":3}}],[\"onsubmit\",{\"1\":{\"672\":1}}],[\"onscroll\",{\"1\":{\"223\":1}}],[\"on修饰符\",{\"1\":{\"521\":1}}],[\"onchange\",{\"1\":{\"673\":1}}],[\"once=\",{\"1\":{\"532\":1}}],[\"once\",{\"1\":{\"521\":2}}],[\"onclick\",{\"1\":{\"371\":1}}],[\"only\",{\"1\":{\"499\":2,\"623\":2,\"655\":1}}],[\"onload\",{\"0\":{\"584\":1},\"1\":{\"206\":1,\"348\":1,\"671\":1}}],[\"onrejected\",{\"1\":{\"309\":6,\"316\":5,\"317\":5,\"318\":6,\"319\":6,\"321\":3}}],[\"onrejectedcallbacks\",{\"1\":{\"309\":3,\"318\":3,\"319\":3}}],[\"on\",{\"0\":{\"532\":1},\"1\":{\"254\":1,\"521\":2,\"528\":3,\"532\":3,\"534\":1,\"535\":1,\"538\":3}}],[\"onerror\",{\"1\":{\"206\":1,\"348\":1,\"513\":1,\"671\":1}}],[\"opacity\",{\"1\":{\"624\":1}}],[\"optimization\",{\"1\":{\"582\":1}}],[\"option\",{\"1\":{\"674\":1}}],[\"option>\",{\"1\":{\"521\":8}}],[\"options预检请求\",{\"1\":{\"707\":1}}],[\"options\",{\"1\":{\"423\":5,\"707\":1}}],[\"options1\",{\"1\":{\"423\":1}}],[\"optional容器类的常用方法\",{\"1\":{\"93\":1}}],[\"optional\",{\"0\":{\"93\":1},\"1\":{\"93\":10}}],[\"optional<double>\",{\"1\":{\"90\":1}}],[\"op\",{\"1\":{\"266\":1}}],[\"opera\",{\"1\":{\"258\":1}}],[\"operated\",{\"1\":{\"91\":1}}],[\"operation\",{\"1\":{\"84\":2}}],[\"offsetwidth\",{\"0\":{\"636\":1},\"1\":{\"636\":2}}],[\"ofpattern\",{\"1\":{\"95\":1}}],[\"ofnullable\",{\"1\":{\"93\":4}}],[\"of\",{\"0\":{\"300\":1},\"1\":{\"90\":1,\"91\":1,\"93\":3,\"94\":1,\"96\":3,\"299\":2,\"300\":3,\"301\":1,\"306\":2,\"434\":1,\"623\":5,\"710\":1}}],[\"o2\",{\"1\":{\"82\":10}}],[\"o1\",{\"1\":{\"82\":10}}],[\"oom内存溢出发生概率小\",{\"1\":{\"75\":1}}],[\"o\",{\"0\":{\"38\":1},\"1\":{\"39\":6,\"93\":4,\"249\":1,\"254\":2,\"255\":1,\"441\":1}}],[\"outline\",{\"1\":{\"633\":2}}],[\"outer\",{\"1\":{\"264\":1}}],[\"outstream\",{\"1\":{\"37\":1}}],[\"outxxx\",{\"1\":{\"37\":1}}],[\"out\",{\"1\":{\"35\":1,\"78\":4,\"81\":2,\"82\":1,\"84\":2,\"85\":4,\"87\":8,\"91\":8,\"93\":3,\"95\":6,\"631\":2}}],[\"org\",{\"1\":{\"423\":2,\"489\":1,\"650\":1,\"704\":1}}],[\"origin\",{\"1\":{\"631\":1,\"704\":2,\"707\":4}}],[\"originhobbies\",{\"1\":{\"521\":2}}],[\"original\",{\"1\":{\"283\":2}}],[\"orinoco\",{\"1\":{\"262\":1}}],[\"order\",{\"1\":{\"142\":1,\"646\":1}}],[\"orelseget\",{\"1\":{\"93\":1}}],[\"orelse\",{\"1\":{\"93\":1}}],[\"or\",{\"1\":{\"17\":1,\"85\":1,\"91\":1}}],[\"overline\",{\"1\":{\"621\":1}}],[\"overload\",{\"1\":{\"11\":1}}],[\"overflow\",{\"1\":{\"589\":1,\"591\":1,\"592\":1,\"593\":1,\"625\":1,\"633\":2,\"654\":2}}],[\"override\",{\"1\":{\"11\":1,\"81\":1,\"82\":2,\"83\":1,\"87\":1}}],[\"则从父级作用域继承\",{\"1\":{\"654\":1}}],[\"则它们将等分剩余空间\",{\"1\":{\"646\":1}}],[\"则相对于视口进行定位\",{\"1\":{\"629\":1}}],[\"则浏览器会显示滚动条以便查看其余的内容\",{\"1\":{\"625\":1}}],[\"则暂停渲染\",{\"1\":{\"580\":1}}],[\"则使用$router\",{\"1\":{\"510\":1}}],[\"则使用上一次的结果\",{\"1\":{\"322\":1}}],[\"则报\",{\"1\":{\"347\":1}}],[\"则报变量未定义的错误\",{\"1\":{\"212\":1}}],[\"则新\",{\"1\":{\"345\":1}}],[\"则请求成功\",{\"1\":{\"332\":1}}],[\"则直接\",{\"1\":{\"309\":2,\"319\":2}}],[\"则直接返回\",{\"1\":{\"202\":1}}],[\"则\",{\"1\":{\"309\":2,\"319\":2}}],[\"则终止生成器函数的执行\",{\"1\":{\"304\":1}}],[\"则为\",{\"1\":{\"298\":2}}],[\"则会打印\",{\"1\":{\"344\":1}}],[\"则会被\",{\"1\":{\"322\":1,\"344\":1}}],[\"则会返回一个默认返回值\",{\"1\":{\"298\":1}}],[\"则会产生一个异常\",{\"1\":{\"182\":1}}],[\"则可以用\",{\"1\":{\"293\":1}}],[\"则标记为热点代码\",{\"1\":{\"263\":1}}],[\"则停留在此阶段\",{\"1\":{\"254\":1}}],[\"则继续执行微任务\",{\"1\":{\"250\":1}}],[\"则目标对象的属性会覆盖源对象\",{\"1\":{\"230\":1}}],[\"则给闭包对象\",{\"1\":{\"217\":1}}],[\"则封装成\",{\"1\":{\"202\":1}}],[\"则是独立函数调用\",{\"1\":{\"195\":1}}],[\"则选择该字段为默认的主键\",{\"1\":{\"172\":1}}],[\"则用supplier<t>\",{\"1\":{\"88\":1}}],[\"则必须跟一个\",{\"1\":{\"35\":1}}],[\"则⼦类就不能重写该⽅法\",{\"1\":{\"12\":1}}],[\"则返回一个失败状态的\",{\"1\":{\"328\":1}}],[\"则返回首先有结果的\",{\"1\":{\"327\":1}}],[\"则返回的\",{\"1\":{\"327\":1}}],[\"则返回成功状态的\",{\"1\":{\"325\":1,\"326\":1}}],[\"则返回值重写时不可修改\",{\"1\":{\"12\":1}}],[\"则返回\",{\"1\":{\"10\":1,\"689\":2}}],[\"则不再计算第二个表达式\",{\"1\":{\"4\":1}}],[\"一条视频讲清楚tcp协议与udp协议\",{\"1\":{\"717\":1}}],[\"一次\",{\"1\":{\"695\":1}}],[\"一把梭\",{\"1\":{\"613\":1}}],[\"一起搞懂\",{\"1\":{\"619\":1}}],[\"一起传给子组件\",{\"1\":{\"521\":1}}],[\"一起使用\",{\"1\":{\"368\":1,\"521\":1}}],[\"一下两者等价\",{\"1\":{\"499\":1}}],[\"一种基于\",{\"1\":{\"682\":1}}],[\"一种组合类型的方式\",{\"1\":{\"452\":1}}],[\"一种概念时用抽象类\",{\"1\":{\"8\":1}}],[\"一定要等任务执行完了\",{\"1\":{\"331\":1}}],[\"一定不能修改\",{\"1\":{\"12\":1}}],[\"一切js变量都可以导出\",{\"1\":{\"244\":1}}],[\"一但声明必须初始化\",{\"1\":{\"238\":1}}],[\"一篇文章看懂js闭包\",{\"1\":{\"226\":1}}],[\"一文颠覆大众对闭包的认知\",{\"1\":{\"217\":1,\"226\":1}}],[\"一张表允许创建多个普通索引\",{\"1\":{\"172\":1}}],[\"一张表允许创建多个唯一索引\",{\"1\":{\"172\":1}}],[\"一张数据表有只能有一个主键\",{\"1\":{\"172\":1}}],[\"一致性锁定读\",{\"1\":{\"169\":1}}],[\"一致性非锁定读\",{\"1\":{\"169\":1}}],[\"一致性才能得到保障\",{\"1\":{\"164\":1}}],[\"一致性\",{\"1\":{\"163\":1}}],[\"一个被数字\",{\"1\":{\"574\":1}}],[\"一个被星标了的苹果文章\",{\"1\":{\"564\":1}}],[\"一个数组中在typescript开发中\",{\"1\":{\"464\":1}}],[\"一个参数一个可选类型的时候\",{\"1\":{\"413\":1}}],[\"一个函数作为参数需要依赖另一个函数执行调用\",{\"1\":{\"333\":1}}],[\"一个函数和对其周围状态\",{\"1\":{\"209\":1}}],[\"一个是成功回调\",{\"1\":{\"316\":1,\"336\":1}}],[\"一个带有\",{\"1\":{\"306\":1}}],[\"一个对象必须实现\",{\"1\":{\"299\":1}}],[\"一个事务被提交之后\",{\"1\":{\"163\":1}}],[\"一个用户的事务不被其他事务所干扰\",{\"1\":{\"163\":1}}],[\"一个普通\",{\"1\":{\"135\":1}}],[\"一个拥有\",{\"1\":{\"123\":1}}],[\"一个stream只能操作一次\",{\"1\":{\"91\":1}}],[\"一个\",{\"1\":{\"52\":2,\"71\":2,\"92\":1}}],[\"一般放在\",{\"1\":{\"700\":1}}],[\"一般为用户名和密码\",{\"1\":{\"682\":1}}],[\"一般不监听\",{\"1\":{\"674\":1}}],[\"一般使用\",{\"1\":{\"635\":1}}],[\"一般用于获取来源图片\",{\"1\":{\"633\":1}}],[\"一般用于对当前元素微调\",{\"1\":{\"629\":1}}],[\"一般用来保存用户信息\",{\"1\":{\"25\":1}}],[\"一般将异步操作放在promise中\",{\"1\":{\"555\":1}}],[\"一般和iframe一起使用\",{\"1\":{\"667\":2}}],[\"一般和\",{\"1\":{\"521\":1}}],[\"一般情况下是不加\",{\"1\":{\"463\":1}}],[\"一般地\",{\"1\":{\"302\":1}}],[\"一般我们都覆盖equals\",{\"1\":{\"10\":1}}],[\"类比写信\",{\"1\":{\"710\":1}}],[\"类比打电话\",{\"1\":{\"710\":1}}],[\"类选择器\",{\"1\":{\"623\":1}}],[\"类可以实现多个接口\",{\"1\":{\"453\":1}}],[\"类实现接口\",{\"1\":{\"453\":1}}],[\"类似diff算法\",{\"0\":{\"524\":1}}],[\"类似三目运算符\",{\"1\":{\"420\":1}}],[\"类似于视差滚动\",{\"1\":{\"627\":1}}],[\"类似于computed计算属性用法\",{\"1\":{\"549\":1}}],[\"类似于mustache语法的插值\",{\"1\":{\"521\":1}}],[\"类似于java中的导包\",{\"1\":{\"244\":1}}],[\"类似于一维数组流或addall\",{\"1\":{\"90\":1}}],[\"类似于二维数组流或add\",{\"1\":{\"90\":1}}],[\"类似于\",{\"1\":{\"44\":1}}],[\"类的类型\",{\"0\":{\"399\":1}}],[\"类的使用\",{\"0\":{\"389\":1}}],[\"类的方法\",{\"1\":{\"377\":1}}],[\"类创建的实例对象方法与类方法不同\",{\"1\":{\"363\":2}}],[\"类声明\",{\"1\":{\"350\":1}}],[\"类特有的方法\",{\"1\":{\"335\":1}}],[\"类中定义的方法\",{\"1\":{\"335\":1}}],[\"类中使用\",{\"1\":{\"14\":1}}],[\"类方法可以不用实例化就可以调用\",{\"1\":{\"363\":1}}],[\"类方法使用\",{\"1\":{\"363\":1}}],[\"类方法通过\",{\"1\":{\"363\":1}}],[\"类方法\",{\"0\":{\"339\":1},\"1\":{\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1,\"328\":1}}],[\"类名\",{\"1\":{\"88\":1,\"228\":1,\"657\":1}}],[\"类\",{\"1\":{\"88\":3,\"350\":1,\"639\":1,\"640\":1}}],[\"类型是对象或者数组时\",{\"1\":{\"487\":1}}],[\"类型限制\",{\"1\":{\"487\":1}}],[\"类型必须是text\",{\"1\":{\"485\":1}}],[\"类型推导\",{\"1\":{\"460\":1}}],[\"类型推到\",{\"1\":{\"440\":1}}],[\"类型注解\",{\"1\":{\"460\":1,\"464\":1}}],[\"类型约束\",{\"0\":{\"444\":1}}],[\"类型的参数化\",{\"1\":{\"440\":1}}],[\"类型缩小\",{\"0\":{\"424\":1}}],[\"类型断言\",{\"0\":{\"415\":1},\"1\":{\"415\":1}}],[\"类型别名\",{\"0\":{\"414\":1}}],[\"类型|undefined\",{\"1\":{\"413\":1}}],[\"类型擦除\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"类型\",{\"1\":{\"13\":1,\"509\":1}}],[\"类不可继承\",{\"1\":{\"13\":1}}],[\"类覆盖了equals\",{\"1\":{\"10\":1}}],[\"类没有覆盖equals\",{\"1\":{\"10\":1}}],[\"类优先原则\",{\"1\":{\"8\":1,\"98\":1}}],[\"值分别与首次请求的\",{\"1\":{\"689\":1}}],[\"值绑定v\",{\"1\":{\"521\":1}}],[\"值或普通对象\",{\"1\":{\"341\":2}}],[\"值类型存放在栈中\",{\"1\":{\"296\":1}}],[\"值被捕获到\",{\"1\":{\"204\":1}}],[\"值只有在函数执行时才能确定调用者\",{\"1\":{\"195\":1}}],[\"值指向\",{\"1\":{\"195\":1,\"364\":1}}],[\"值\",{\"0\":{\"181\":1},\"1\":{\"181\":1,\"195\":2,\"300\":1,\"364\":2,\"630\":1}}],[\"值来查找用户即可\",{\"1\":{\"25\":1}}],[\"值也要相等\",{\"1\":{\"9\":1}}],[\"值不相等\",{\"1\":{\"9\":1}}],[\"值相等\",{\"1\":{\"9\":1}}],[\"方便其他设备的解析\",{\"1\":{\"658\":1}}],[\"方便开发\",{\"1\":{\"195\":1}}],[\"方式创建\",{\"1\":{\"590\":1}}],[\"方式会创建\",{\"1\":{\"589\":1}}],[\"方法已加载\",{\"1\":{\"539\":1}}],[\"方法未加载\",{\"1\":{\"539\":1}}],[\"方法定义时\",{\"1\":{\"521\":1}}],[\"方法定义在构造函数中\",{\"1\":{\"280\":1}}],[\"方法注册组件\",{\"1\":{\"484\":1}}],[\"方法创建组件构造器\",{\"1\":{\"484\":1}}],[\"方法创建代理对象\",{\"1\":{\"32\":1}}],[\"方法放在\",{\"1\":{\"363\":2}}],[\"方法放在原型上\",{\"1\":{\"363\":1}}],[\"方法通过\",{\"1\":{\"363\":1}}],[\"方法决定状态\",{\"1\":{\"341\":1}}],[\"方法一样\",{\"1\":{\"337\":1}}],[\"方法的\",{\"1\":{\"341\":1}}],[\"方法的第二个参数即第二个回调函数可以捕获异常和拒绝状态\",{\"1\":{\"337\":1}}],[\"方法的对象\",{\"1\":{\"336\":1,\"341\":1,\"350\":1}}],[\"方法的对象创建迭代器\",{\"1\":{\"306\":1}}],[\"方法传入的回调函数本身有返回值\",{\"1\":{\"336\":1}}],[\"方法传入的回调函数\",{\"1\":{\"334\":2}}],[\"方法传递参数\",{\"0\":{\"303\":1}}],[\"方法是\",{\"1\":{\"338\":1}}],[\"方法是同步执行的\",{\"1\":{\"317\":1}}],[\"方法是异步执行的\",{\"1\":{\"317\":1}}],[\"方法不接受参数\",{\"1\":{\"338\":1}}],[\"方法不是表示最终都会执行\",{\"1\":{\"322\":1}}],[\"方法不能重复调用\",{\"1\":{\"309\":1,\"319\":1}}],[\"方法不可覆盖\",{\"1\":{\"13\":1}}],[\"方法抛出异常\",{\"0\":{\"305\":1}}],[\"方法提前终止函数\",{\"0\":{\"304\":1}}],[\"方法把源对象自身的\",{\"1\":{\"230\":1}}],[\"方法名\",{\"1\":{\"228\":1}}],[\"方法就是对象能够提供的服务\",{\"1\":{\"228\":1}}],[\"方法即修改字面量的内容\",{\"1\":{\"228\":2}}],[\"方法添加到原型上\",{\"1\":{\"191\":1}}],[\"方法参数都是函数式接口类型\",{\"1\":{\"92\":1}}],[\"方法引用语法格式\",{\"1\":{\"88\":1}}],[\"方法引用与构造引用\",{\"0\":{\"88\":1}}],[\"方法区属于堆中永久区\",{\"1\":{\"74\":1}}],[\"方法用来排序\",{\"1\":{\"54\":2}}],[\"方法类似\",{\"1\":{\"32\":1}}],[\"方法和类\",{\"1\":{\"13\":1}}],[\"方法来比较两个对象中的属性是否相等\",{\"1\":{\"10\":1}}],[\"方法\",{\"0\":{\"315\":1},\"1\":{\"10\":3,\"14\":1,\"32\":2,\"94\":1,\"182\":2,\"230\":1,\"281\":2,\"298\":1,\"299\":1,\"302\":1,\"304\":1,\"309\":3,\"316\":1,\"317\":1,\"318\":1,\"319\":3,\"320\":1,\"321\":2,\"322\":1,\"336\":1,\"341\":1,\"351\":1}}],[\"方法存在两种使用情况\",{\"1\":{\"10\":1}}],[\"方法判断两个对象是相等的\",{\"1\":{\"9\":1}}],[\"方法返回的新的\",{\"1\":{\"309\":1,\"319\":1}}],[\"方法返回\",{\"1\":{\"9\":1}}],[\"方块熊猫\",{\"1\":{\"0\":1}}],[\"edu\",{\"1\":{\"704\":1}}],[\"edge\",{\"1\":{\"258\":2}}],[\"etag\",{\"0\":{\"690\":1},\"1\":{\"689\":3,\"690\":2}}],[\"em\",{\"1\":{\"655\":1}}],[\"emmet\",{\"1\":{\"632\":1}}],[\"emmet语法\",{\"0\":{\"632\":1}}],[\"email\",{\"1\":{\"628\":1,\"673\":1}}],[\"empty2\",{\"1\":{\"234\":3}}],[\"empty1\",{\"1\":{\"234\":3}}],[\"empty\",{\"1\":{\"93\":2,\"623\":1}}],[\"employees\",{\"1\":{\"90\":1}}],[\"employee\",{\"1\":{\"87\":6,\"90\":1}}],[\"event=event事件\",{\"1\":{\"521\":1}}],[\"event=undefined\",{\"1\":{\"521\":1}}],[\"event=123\",{\"1\":{\"521\":1}}],[\"event\",{\"1\":{\"521\":5}}],[\"eval\",{\"0\":{\"380\":1,\"382\":1},\"1\":{\"195\":1,\"382\":2,\"384\":4}}],[\"ellipsis\",{\"1\":{\"633\":1,\"654\":4}}],[\"el\",{\"1\":{\"415\":2,\"484\":2,\"487\":2,\"488\":1,\"494\":1,\"499\":2,\"505\":1,\"521\":4,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"545\":1}}],[\"else>\",{\"1\":{\"535\":1}}],[\"else><slot\",{\"1\":{\"474\":1,\"475\":1,\"480\":1}}],[\"else和v\",{\"0\":{\"535\":1}}],[\"else\",{\"0\":{\"535\":1},\"1\":{\"292\":1,\"298\":1,\"299\":1,\"301\":1,\"306\":2,\"309\":3,\"319\":3,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"332\":4,\"403\":1,\"412\":1,\"424\":5,\"535\":2,\"536\":1,\"537\":2}}],[\"ease\",{\"1\":{\"631\":4}}],[\"earth\",{\"1\":{\"279\":1,\"280\":2,\"281\":2,\"282\":2,\"283\":3,\"284\":2,\"285\":2,\"355\":1}}],[\"eating\",{\"1\":{\"390\":3,\"391\":9,\"399\":3,\"435\":3,\"436\":7,\"453\":3}}],[\"eating`\",{\"1\":{\"352\":1}}],[\"eat\",{\"1\":{\"352\":2}}],[\"eat3\",{\"1\":{\"241\":2}}],[\"eat2\",{\"1\":{\"241\":3}}],[\"eat1\",{\"1\":{\"241\":2}}],[\"equiv=\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":2,\"706\":1}}],[\"equal\",{\"1\":{\"88\":1}}],[\"equals\",{\"0\":{\"9\":1,\"10\":1},\"1\":{\"9\":1,\"10\":1,\"91\":2}}],[\"es12\",{\"1\":{\"347\":1}}],[\"es11\",{\"1\":{\"345\":1}}],[\"es9\",{\"1\":{\"338\":1}}],[\"es\",{\"1\":{\"221\":1}}],[\"es5之前\",{\"1\":{\"277\":2}}],[\"es5\",{\"1\":{\"218\":1,\"335\":1,\"353\":1,\"354\":1,\"363\":1}}],[\"es6语法\",{\"0\":{\"237\":1}}],[\"es6\",{\"0\":{\"285\":1},\"1\":{\"200\":1,\"218\":1,\"222\":1,\"331\":1,\"335\":1,\"337\":1,\"353\":1,\"354\":1,\"363\":1,\"379\":1},\"2\":{\"246\":1}}],[\"example\",{\"1\":{\"639\":2,\"704\":5}}],[\"exclude=\",{\"1\":{\"516\":1}}],[\"exclude\",{\"1\":{\"516\":1}}],[\"excution\",{\"1\":{\"277\":2}}],[\"extend的步骤\",{\"1\":{\"484\":1}}],[\"extend\",{\"1\":{\"484\":2,\"654\":1}}],[\"extends\",{\"1\":{\"285\":2,\"350\":1,\"352\":1,\"358\":1,\"391\":3,\"392\":3,\"394\":1,\"398\":2,\"415\":1,\"444\":2,\"451\":1,\"453\":1}}],[\"exec\",{\"1\":{\"307\":3}}],[\"execgenerator\",{\"1\":{\"307\":2}}],[\"execution\",{\"1\":{\"271\":2,\"272\":1}}],[\"executor\",{\"1\":{\"205\":1,\"309\":3,\"312\":3,\"313\":3,\"314\":3,\"316\":3,\"318\":3,\"319\":3,\"334\":2}}],[\"expires\",{\"0\":{\"687\":1},\"1\":{\"686\":3,\"687\":2}}],[\"exports\",{\"1\":{\"320\":1}}],[\"export\",{\"1\":{\"244\":4,\"390\":1,\"391\":1,\"393\":1,\"394\":1,\"399\":1,\"403\":1,\"406\":1,\"407\":2,\"410\":1,\"411\":1,\"422\":1,\"423\":1,\"435\":1,\"436\":1,\"437\":1,\"452\":1,\"455\":1,\"457\":1,\"460\":1,\"463\":1,\"467\":1,\"470\":1,\"471\":2,\"472\":3,\"473\":3,\"474\":2,\"475\":2,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"481\":1,\"505\":1,\"545\":1,\"546\":2}}],[\"export用于规定模块的对外接口\",{\"1\":{\"244\":1}}],[\"expression\",{\"1\":{\"218\":1}}],[\"expr1只能是一个整数表达式或者枚举常量\",{\"1\":{\"6\":1}}],[\"expr1\",{\"1\":{\"6\":1}}],[\"err2\",{\"1\":{\"337\":2}}],[\"err1\",{\"1\":{\"337\":2}}],[\"errmessage\",{\"1\":{\"332\":8}}],[\"errors\",{\"1\":{\"328\":5,\"347\":3}}],[\"error\",{\"1\":{\"202\":1,\"204\":2,\"206\":2,\"243\":13,\"314\":2,\"324\":2,\"334\":1,\"337\":7,\"348\":2,\"349\":2,\"405\":1,\"513\":1}}],[\"err\",{\"1\":{\"202\":2,\"204\":2,\"205\":4,\"206\":4,\"243\":9,\"309\":10,\"314\":2,\"316\":4,\"317\":4,\"318\":6,\"319\":10,\"321\":2,\"322\":2,\"323\":2,\"324\":2,\"325\":4,\"327\":4,\"328\":7,\"332\":4,\"337\":19,\"338\":4,\"341\":8,\"343\":4,\"344\":4,\"345\":3,\"346\":4,\"347\":10,\"348\":4,\"349\":2,\"473\":2,\"474\":2,\"475\":2,\"480\":2}}],[\"ecstack\",{\"1\":{\"271\":1}}],[\"ecma\",{\"1\":{\"190\":1,\"351\":1}}],[\"echarts\",{\"0\":{\"130\":1}}],[\"e\",{\"1\":{\"83\":4,\"233\":2,\"239\":1,\"305\":2,\"309\":2,\"319\":2,\"441\":2}}],[\"encoding\",{\"1\":{\"695\":2}}],[\"engine\",{\"1\":{\"582\":1}}],[\"enter\",{\"1\":{\"521\":1}}],[\"entries\",{\"1\":{\"241\":2}}],[\"entry数组\",{\"1\":{\"50\":1,\"69\":1}}],[\"enum\",{\"1\":{\"456\":1,\"457\":1}}],[\"enumerable\",{\"1\":{\"182\":3,\"183\":2,\"184\":2,\"185\":2,\"186\":7,\"355\":1}}],[\"en\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"623\":1,\"663\":1}}],[\"endswith\",{\"1\":{\"239\":1}}],[\"end\",{\"1\":{\"205\":4,\"252\":2,\"306\":2,\"646\":1}}],[\"enhance\",{\"1\":{\"118\":1}}],[\"enhancer类的\",{\"1\":{\"32\":1}}],[\"ensureexplicitcapacity\",{\"1\":{\"59\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"59\":1}}],[\"credentials\",{\"1\":{\"707\":1}}],[\"createstore\",{\"1\":{\"556\":1}}],[\"created\",{\"1\":{\"539\":1}}],[\"createrangeiterator\",{\"1\":{\"306\":2}}],[\"createarrayiterator\",{\"1\":{\"298\":2,\"306\":2}}],[\"createchild\",{\"1\":{\"283\":3}}],[\"createcache\",{\"1\":{\"218\":2,\"222\":2}}],[\"createelement\",{\"1\":{\"206\":1,\"348\":1}}],[\"createperson\",{\"1\":{\"189\":3}}],[\"create\",{\"1\":{\"32\":1,\"282\":2,\"284\":1,\"351\":4,\"354\":3,\"355\":2,\"499\":1}}],[\"cross\",{\"1\":{\"707\":1}}],[\"ctrl+f5\",{\"1\":{\"691\":1}}],[\"ctrl=\",{\"1\":{\"532\":1}}],[\"ctx\",{\"1\":{\"660\":1}}],[\"cell\",{\"0\":{\"614\":1},\"1\":{\"589\":1,\"611\":2,\"614\":1}}],[\"center>\",{\"1\":{\"493\":1}}],[\"center\",{\"1\":{\"422\":2,\"452\":1,\"470\":1,\"471\":1,\"472\":2,\"474\":2,\"475\":2,\"480\":2,\"493\":2,\"603\":1,\"605\":1,\"606\":1,\"613\":1,\"616\":1,\"621\":1,\"627\":4,\"646\":1}}],[\"cn\",{\"1\":{\"489\":1,\"663\":2,\"695\":1,\"704\":2,\"706\":1}}],[\"cnblogs\",{\"1\":{\"169\":1}}],[\"cmessage\",{\"1\":{\"487\":4}}],[\"cmessage=\",{\"1\":{\"487\":1}}],[\"cmovies\",{\"1\":{\"487\":4}}],[\"cmovies=\",{\"1\":{\"487\":1}}],[\"cmd\",{\"1\":{\"221\":1}}],[\"cpn组件的name\",{\"1\":{\"488\":2}}],[\"cpn2\",{\"1\":{\"484\":1}}],[\"cpn1\",{\"1\":{\"484\":1}}],[\"cpn\",{\"1\":{\"484\":5,\"485\":6,\"486\":2,\"487\":8,\"488\":7,\"492\":1,\"493\":1,\"494\":3,\"495\":3}}],[\"cpnclick\",{\"1\":{\"487\":3}}],[\"cpnc\",{\"1\":{\"484\":3}}],[\"cpn>\",{\"1\":{\"484\":5,\"487\":2,\"488\":3,\"492\":4,\"493\":2,\"494\":2,\"495\":1}}],[\"cpn><\",{\"1\":{\"484\":5,\"488\":2}}],[\"cpu\",{\"1\":{\"248\":2,\"266\":1,\"331\":1}}],[\"cba\",{\"1\":{\"404\":1,\"409\":1,\"437\":1,\"443\":2,\"444\":1}}],[\"circle\",{\"1\":{\"398\":4}}],[\"circular\",{\"1\":{\"233\":1}}],[\"curriedsum\",{\"1\":{\"292\":5}}],[\"curry\",{\"1\":{\"292\":6,\"549\":1}}],[\"currying\",{\"1\":{\"289\":1}}],[\"currentstate\",{\"1\":{\"407\":6}}],[\"currentvalue\",{\"1\":{\"242\":1}}],[\"currenthashmap\",{\"0\":{\"70\":1}}],[\"currenthashmap的底层原理\",{\"0\":{\"51\":1}}],[\"c++\",{\"1\":{\"262\":1,\"495\":1}}],[\"cdn\",{\"1\":{\"243\":1,\"650\":1,\"687\":2}}],[\"csfr\",{\"1\":{\"703\":1}}],[\"csr\",{\"0\":{\"582\":1,\"583\":1},\"1\":{\"582\":2,\"583\":1}}],[\"css常用函数\",{\"1\":{\"633\":1}}],[\"css常见选择器\",{\"0\":{\"623\":1}}],[\"css字体的属性\",{\"0\":{\"622\":1}}],[\"css文本的属性\",{\"0\":{\"621\":1}}],[\"css设置居中的方案总结\",{\"1\":{\"619\":1}}],[\"css3正在标准化\",{\"1\":{\"648\":1}}],[\"css3\",{\"1\":{\"589\":1,\"594\":1}}],[\"css2\",{\"1\":{\"589\":1,\"594\":1,\"648\":1}}],[\"cssom\",{\"1\":{\"580\":2}}],[\"css\",{\"0\":{\"600\":1,\"637\":1,\"641\":1,\"723\":1},\"1\":{\"239\":1,\"240\":1,\"241\":1,\"259\":1,\"449\":1,\"470\":2,\"471\":2,\"472\":2,\"473\":2,\"474\":2,\"475\":2,\"477\":2,\"580\":1,\"586\":1,\"598\":1,\"619\":1,\"632\":1,\"633\":2,\"641\":1,\"648\":1,\"650\":1,\"657\":1,\"658\":1}}],[\"cswiki\",{\"1\":{\"169\":1}}],[\"chip\",{\"1\":{\"643\":1}}],[\"children\",{\"1\":{\"512\":2}}],[\"childprotomethod\",{\"1\":{\"284\":2}}],[\"child3\",{\"1\":{\"282\":2}}],[\"child2\",{\"1\":{\"279\":2,\"280\":5,\"281\":5,\"282\":3,\"283\":2,\"284\":4,\"285\":4,\"354\":2}}],[\"child1\",{\"1\":{\"279\":6,\"280\":8,\"281\":8,\"282\":5,\"283\":8,\"284\":11,\"285\":10,\"354\":2}}],[\"childvalue\",{\"1\":{\"279\":6,\"280\":6,\"281\":6,\"284\":4}}],[\"child\",{\"1\":{\"230\":8,\"231\":8,\"235\":10,\"279\":7,\"280\":5,\"281\":6,\"284\":10,\"285\":5,\"351\":2,\"355\":10,\"488\":5,\"521\":1,\"598\":1,\"599\":1,\"606\":2,\"607\":4,\"610\":1,\"611\":2,\"615\":4,\"616\":1,\"617\":2,\"623\":5,\"629\":1}}],[\"chromium\",{\"1\":{\"261\":1}}],[\"chrome\",{\"1\":{\"258\":2,\"261\":2,\"262\":1,\"266\":1,\"267\":1}}],[\"checked\",{\"1\":{\"673\":1}}],[\"checkbox多选框\",{\"1\":{\"521\":1}}],[\"checkbox\",{\"1\":{\"521\":6,\"531\":3,\"628\":1,\"673\":1}}],[\"checkbox单选框\",{\"1\":{\"521\":1}}],[\"check\",{\"1\":{\"254\":2,\"255\":2,\"405\":1}}],[\"chakra\",{\"1\":{\"260\":1}}],[\"changestate\",{\"1\":{\"407\":4}}],[\"change\",{\"1\":{\"228\":1}}],[\"changed\",{\"1\":{\"228\":8,\"230\":3,\"231\":3,\"235\":2}}],[\"charset\",{\"1\":{\"663\":1}}],[\"charset=\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":1,\"706\":1}}],[\"charsequence\",{\"1\":{\"14\":1}}],[\"character\",{\"1\":{\"15\":1,\"17\":1}}],[\"char上\",{\"1\":{\"6\":1}}],[\"char\",{\"1\":{\"5\":1,\"14\":1,\"15\":2}}],[\"c2ff47a1390407c1a16b5e5fc3aa5e1f~300x300\",{\"1\":{\"206\":1,\"348\":1}}],[\"c\",{\"1\":{\"205\":6,\"230\":3,\"233\":1,\"239\":4,\"240\":4,\"241\":2,\"262\":2,\"333\":2,\"379\":2,\"449\":1,\"495\":1}}],[\"clear属性\",{\"1\":{\"630\":1}}],[\"clear\",{\"1\":{\"594\":2,\"630\":3}}],[\"clearfix\",{\"1\":{\"594\":5}}],[\"clip\",{\"0\":{\"643\":1},\"1\":{\"633\":1,\"643\":1}}],[\"clientheight\",{\"1\":{\"655\":1}}],[\"client\",{\"1\":{\"582\":1,\"707\":1}}],[\"cli3项目结构\",{\"1\":{\"499\":1}}],[\"cli3初始化配置\",{\"1\":{\"499\":1}}],[\"cli3\",{\"0\":{\"499\":1}}],[\"cli2项目结构\",{\"1\":{\"498\":1}}],[\"cli2初始化配置\",{\"1\":{\"498\":1}}],[\"cli2\",{\"0\":{\"498\":1}}],[\"cli4可以通过\",{\"1\":{\"478\":1}}],[\"click绑定事件\",{\"1\":{\"528\":1}}],[\"click自定义事件\",{\"1\":{\"487\":1}}],[\"click=\",{\"1\":{\"473\":1,\"474\":1,\"475\":1,\"480\":1,\"487\":2,\"521\":4,\"528\":2,\"532\":2,\"534\":1,\"535\":1,\"538\":3,\"539\":1,\"546\":2}}],[\"click\",{\"1\":{\"135\":1,\"371\":1,\"487\":1,\"521\":2,\"532\":4,\"674\":1}}],[\"cloak\",{\"1\":{\"521\":2}}],[\"clone\",{\"1\":{\"283\":3}}],[\"cloneobj\",{\"1\":{\"234\":4}}],[\"close\",{\"1\":{\"254\":2,\"255\":3}}],[\"closed\",{\"1\":{\"91\":1}}],[\"closure\",{\"1\":{\"217\":10,\"218\":3,\"224\":3}}],[\"class2\",{\"1\":{\"632\":1}}],[\"class属性等\",{\"1\":{\"632\":1}}],[\"class名\",{\"1\":{\"530\":1}}],[\"classc\",{\"1\":{\"521\":1}}],[\"classb\",{\"1\":{\"521\":2}}],[\"classa\",{\"1\":{\"521\":2}}],[\"class=\",{\"1\":{\"371\":2,\"470\":4,\"471\":4,\"472\":2,\"473\":1,\"474\":2,\"475\":1,\"480\":1,\"521\":3,\"530\":1,\"591\":4,\"592\":2,\"593\":2,\"594\":1,\"598\":2,\"599\":2,\"611\":2,\"617\":2,\"633\":5}}],[\"class1\",{\"1\":{\"301\":3,\"306\":3,\"632\":1}}],[\"classnum\",{\"1\":{\"301\":3,\"306\":3}}],[\"class<\",{\"1\":{\"32\":1}}],[\"classloader\",{\"1\":{\"32\":1}}],[\"class类\",{\"1\":{\"31\":1}}],[\"class\",{\"0\":{\"352\":1},\"1\":{\"14\":1,\"31\":1,\"84\":1,\"93\":2,\"285\":3,\"301\":3,\"306\":3,\"309\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"350\":4,\"351\":1,\"352\":2,\"353\":1,\"358\":2,\"363\":1,\"379\":1,\"390\":1,\"391\":5,\"392\":4,\"393\":1,\"394\":2,\"395\":1,\"396\":1,\"397\":2,\"398\":3,\"399\":1,\"415\":2,\"424\":2,\"443\":1,\"453\":3,\"507\":1,\"521\":1,\"530\":1,\"594\":1,\"623\":1,\"674\":1}}],[\"ccontent\",{\"1\":{\"695\":1}}],[\"ccpn\",{\"1\":{\"488\":2}}],[\"ccc\",{\"1\":{\"487\":1,\"592\":1,\"594\":1}}],[\"cc\",{\"1\":{\"90\":3,\"91\":1}}],[\"ca\",{\"1\":{\"698\":2,\"699\":1}}],[\"caps\",{\"1\":{\"622\":1}}],[\"capitalize\",{\"1\":{\"621\":1}}],[\"cart\",{\"1\":{\"473\":6,\"474\":1,\"475\":1,\"478\":1,\"481\":5}}],[\"cache\",{\"0\":{\"687\":1},\"1\":{\"218\":3,\"222\":4,\"686\":4,\"687\":3,\"692\":1}}],[\"calcfn\",{\"1\":{\"212\":2,\"450\":6}}],[\"calc\",{\"1\":{\"212\":3,\"431\":3,\"450\":2,\"633\":1}}],[\"caller\",{\"1\":{\"379\":2}}],[\"called\",{\"1\":{\"309\":7,\"319\":7,\"341\":1}}],[\"callee\",{\"1\":{\"196\":1}}],[\"callback=getname\",{\"1\":{\"706\":1}}],[\"callbacks\",{\"1\":{\"254\":2}}],[\"callback\",{\"1\":{\"242\":1,\"309\":4,\"318\":4,\"319\":4,\"322\":6,\"331\":1,\"706\":2}}],[\"call\",{\"0\":{\"369\":1},\"1\":{\"192\":1,\"195\":3,\"197\":1,\"280\":1,\"281\":1,\"284\":1,\"309\":1,\"319\":1,\"362\":7,\"363\":1,\"364\":3,\"368\":1,\"369\":3,\"372\":3,\"376\":8,\"377\":9,\"378\":5,\"436\":1}}],[\"cat\",{\"1\":{\"594\":1}}],[\"categories\",{\"1\":{\"487\":2}}],[\"category\",{\"1\":{\"142\":1,\"470\":1,\"471\":1,\"472\":1,\"473\":7,\"474\":3,\"475\":3,\"478\":3,\"481\":5}}],[\"catch块\",{\"1\":{\"35\":1}}],[\"catch\",{\"0\":{\"35\":1,\"321\":1,\"337\":1},\"1\":{\"35\":3,\"202\":5,\"204\":1,\"205\":3,\"206\":1,\"243\":1,\"305\":1,\"309\":6,\"314\":1,\"316\":1,\"318\":1,\"319\":6,\"321\":5,\"322\":3,\"324\":1,\"325\":1,\"327\":1,\"328\":1,\"334\":6,\"337\":12,\"338\":1,\"341\":2,\"343\":2,\"344\":2,\"345\":1,\"346\":1,\"347\":2,\"348\":1,\"349\":7,\"473\":1,\"474\":1,\"475\":1,\"480\":1}}],[\"cascading\",{\"1\":{\"648\":1}}],[\"case\",{\"1\":{\"405\":3,\"424\":2,\"456\":4,\"457\":4}}],[\"cas\",{\"1\":{\"53\":1,\"57\":1,\"72\":1}}],[\"cas无锁算法\",{\"0\":{\"53\":1,\"72\":1}}],[\"cas乐观锁\",{\"1\":{\"46\":1}}],[\"canvaslet\",{\"1\":{\"660\":1}}],[\"canvas\",{\"0\":{\"660\":1},\"1\":{\"660\":4}}],[\"cancel\",{\"1\":{\"528\":2,\"532\":2}}],[\"can\",{\"1\":{\"8\":1}}],[\"cglib动态代理\",{\"1\":{\"32\":1}}],[\"cors\",{\"0\":{\"707\":1},\"1\":{\"705\":1,\"707\":3}}],[\"corse\",{\"1\":{\"243\":6}}],[\"co\",{\"1\":{\"307\":4}}],[\"coderwhy\",{\"1\":{\"391\":1,\"396\":1,\"423\":2}}],[\"coderwhy总结\",{\"2\":{\"388\":1}}],[\"code\",{\"1\":{\"263\":1,\"266\":2}}],[\"copyobject\",{\"1\":{\"283\":2}}],[\"copyobject2\",{\"1\":{\"282\":2}}],[\"copyobject1\",{\"1\":{\"282\":2}}],[\"copyobj\",{\"1\":{\"235\":3}}],[\"copyobj2\",{\"1\":{\"233\":1}}],[\"copyobj1\",{\"1\":{\"233\":2}}],[\"copyright\",{\"0\":{\"143\":1}}],[\"cover1\",{\"1\":{\"142\":1}}],[\"cover\",{\"1\":{\"142\":1,\"627\":2}}],[\"collapse\",{\"1\":{\"633\":2,\"670\":2}}],[\"collectors\",{\"1\":{\"90\":1,\"91\":3}}],[\"collect\",{\"1\":{\"90\":1,\"91\":4}}],[\"collection\",{\"0\":{\"58\":1},\"1\":{\"58\":1}}],[\"collection实现比较的接口comparable\",{\"0\":{\"54\":1}}],[\"collections\",{\"0\":{\"58\":1},\"1\":{\"22\":3,\"58\":1,\"82\":3}}],[\"color1\",{\"1\":{\"530\":2}}],[\"color\",{\"0\":{\"642\":1},\"1\":{\"128\":1,\"135\":1,\"470\":1,\"471\":1,\"472\":1,\"474\":1,\"475\":2,\"479\":1,\"480\":2,\"530\":1,\"594\":1,\"627\":1,\"628\":1,\"633\":6,\"642\":2,\"652\":1,\"653\":3,\"654\":2}}],[\"counter><\",{\"1\":{\"538\":1}}],[\"counter>\",{\"1\":{\"538\":6}}],[\"counter\",{\"1\":{\"407\":6,\"538\":2}}],[\"count++\",{\"1\":{\"325\":1,\"326\":2,\"328\":1,\"538\":3,\"546\":1}}],[\"counting\",{\"1\":{\"90\":1}}],[\"count\",{\"1\":{\"90\":1,\"91\":3,\"212\":2,\"325\":3,\"326\":3,\"328\":2,\"538\":6,\"546\":4,\"552\":3,\"553\":6,\"555\":3,\"631\":2}}],[\"commit\",{\"1\":{\"546\":3,\"551\":1,\"552\":2,\"553\":2,\"555\":2}}],[\"committed\",{\"1\":{\"166\":1}}],[\"commonjs\",{\"1\":{\"221\":1}}],[\"compiler\",{\"1\":{\"499\":2,\"500\":1}}],[\"compilation\",{\"1\":{\"262\":1}}],[\"computed和methods区别\",{\"0\":{\"522\":1}}],[\"computed\",{\"1\":{\"474\":1,\"475\":1,\"480\":1,\"536\":1}}],[\"component>\",{\"1\":{\"521\":2}}],[\"component\",{\"1\":{\"473\":4,\"481\":4,\"484\":3,\"485\":1,\"486\":1,\"505\":2,\"506\":2,\"512\":3,\"513\":1,\"521\":3,\"538\":1}}],[\"components\",{\"1\":{\"470\":1,\"471\":2,\"472\":3,\"473\":3,\"474\":3,\"475\":3,\"477\":2,\"478\":3,\"484\":2,\"485\":1,\"487\":2,\"488\":3,\"489\":1,\"494\":1,\"495\":1,\"499\":1,\"506\":2,\"511\":2,\"538\":1}}],[\"compose\",{\"1\":{\"293\":3}}],[\"compose可以把类似于f\",{\"1\":{\"293\":1}}],[\"compatible\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":2,\"706\":1}}],[\"compare\",{\"1\":{\"78\":3,\"82\":5,\"90\":1}}],[\"comparator\",{\"1\":{\"90\":3}}],[\"comparator<integer>\",{\"1\":{\"78\":2,\"82\":6}}],[\"comparator接口实际上是出自java\",{\"1\":{\"54\":1}}],[\"comparator的区别\",{\"0\":{\"54\":1}}],[\"comparable接口中compareto方法\",{\"1\":{\"90\":1}}],[\"comparable\",{\"1\":{\"54\":1}}],[\"comparable<string>\",{\"1\":{\"14\":1}}],[\"comperator\",{\"0\":{\"82\":1},\"1\":{\"82\":2}}],[\"com\",{\"1\":{\"78\":2,\"82\":3,\"90\":2,\"169\":1,\"172\":1,\"206\":2,\"243\":1,\"348\":2,\"529\":1,\"530\":1,\"532\":1,\"666\":3,\"704\":5,\"706\":1}}],[\"connection\",{\"1\":{\"695\":1}}],[\"convert\",{\"1\":{\"654\":1}}],[\"converting\",{\"1\":{\"233\":1}}],[\"continue\",{\"1\":{\"700\":1}}],[\"control\",{\"0\":{\"687\":1},\"1\":{\"686\":3,\"687\":2,\"692\":1,\"707\":6,\"710\":1}}],[\"controls\",{\"1\":{\"659\":3}}],[\"contain\",{\"1\":{\"627\":1}}],[\"container在主轴方向上有剩余size时\",{\"1\":{\"646\":1}}],[\"container容器\",{\"0\":{\"645\":1}}],[\"container\",{\"1\":{\"592\":2,\"633\":2}}],[\"content属性\",{\"1\":{\"645\":2}}],[\"content最后一行布局问题\",{\"1\":{\"633\":1}}],[\"content\",{\"1\":{\"420\":3,\"521\":1,\"594\":2,\"605\":1,\"616\":2,\"630\":1,\"635\":4,\"636\":1,\"645\":2,\"695\":3,\"707\":2}}],[\"content=\",{\"1\":{\"238\":2,\"239\":2,\"240\":2,\"241\":2,\"242\":2,\"243\":2,\"528\":2,\"529\":2,\"530\":2,\"531\":2,\"532\":2,\"533\":2,\"534\":2,\"535\":2,\"536\":2,\"537\":2,\"538\":2,\"539\":2,\"663\":3,\"674\":1,\"706\":2}}],[\"context\",{\"1\":{\"271\":2,\"272\":1,\"277\":2,\"555\":4}}],[\"configurable\",{\"1\":{\"182\":2,\"183\":2,\"184\":2,\"185\":2,\"186\":7,\"187\":2,\"384\":1}}],[\"concat\",{\"1\":{\"91\":2,\"231\":2}}],[\"concurrentlevel=16\",{\"1\":{\"52\":1,\"71\":1}}],[\"concurrenthashmap线程安全\",{\"0\":{\"57\":1}}],[\"concurrenthashmap和hashtable的区别\",{\"0\":{\"55\":1}}],[\"concurrenthashmap2\",{\"1\":{\"53\":1}}],[\"concurrenthashmap1\",{\"1\":{\"53\":1,\"57\":2}}],[\"concurrenthashmap取消了\",{\"1\":{\"53\":1,\"72\":1}}],[\"concurrenthashmap里包含一个\",{\"1\":{\"52\":1,\"71\":1}}],[\"concurrenthashmap是由\",{\"1\":{\"52\":1,\"71\":1}}],[\"concurrenthashmap\",{\"1\":{\"46\":1}}],[\"console\",{\"1\":{\"180\":2,\"181\":5,\"183\":3,\"184\":6,\"185\":1,\"186\":3,\"187\":3,\"189\":2,\"190\":2,\"191\":6,\"194\":1,\"195\":4,\"196\":2,\"199\":2,\"202\":9,\"203\":1,\"204\":3,\"205\":21,\"206\":1,\"211\":1,\"212\":4,\"214\":1,\"215\":1,\"217\":2,\"218\":13,\"222\":2,\"223\":4,\"224\":1,\"228\":9,\"230\":3,\"231\":1,\"233\":1,\"234\":13,\"235\":3,\"238\":6,\"239\":8,\"240\":10,\"241\":11,\"242\":4,\"243\":14,\"244\":1,\"251\":5,\"252\":13,\"253\":10,\"256\":13,\"273\":2,\"274\":1,\"279\":4,\"280\":7,\"281\":7,\"282\":6,\"283\":5,\"284\":7,\"285\":6,\"288\":3,\"290\":4,\"291\":1,\"292\":4,\"298\":5,\"299\":9,\"300\":2,\"301\":2,\"302\":4,\"303\":5,\"304\":6,\"305\":4,\"306\":12,\"307\":12,\"312\":2,\"313\":1,\"314\":1,\"316\":2,\"317\":10,\"318\":12,\"321\":4,\"322\":3,\"323\":3,\"324\":1,\"325\":3,\"326\":1,\"327\":2,\"328\":3,\"332\":6,\"333\":3,\"335\":1,\"336\":9,\"337\":10,\"338\":3,\"341\":6,\"343\":2,\"344\":2,\"345\":2,\"346\":2,\"347\":5,\"348\":2,\"349\":9,\"352\":5,\"354\":2,\"355\":10,\"360\":7,\"361\":4,\"362\":2,\"363\":4,\"364\":1,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"371\":5,\"372\":1,\"373\":1,\"375\":1,\"376\":5,\"377\":6,\"378\":4,\"379\":4,\"381\":2,\"382\":1,\"384\":7,\"385\":5,\"390\":3,\"391\":11,\"392\":3,\"393\":1,\"394\":1,\"395\":2,\"396\":1,\"397\":2,\"398\":2,\"399\":1,\"402\":1,\"403\":1,\"404\":2,\"405\":3,\"406\":3,\"409\":1,\"410\":2,\"411\":3,\"412\":2,\"413\":2,\"416\":2,\"417\":7,\"419\":2,\"420\":1,\"424\":8,\"427\":1,\"428\":2,\"431\":2,\"433\":1,\"434\":3,\"435\":1,\"436\":1,\"437\":2,\"445\":1,\"448\":2,\"453\":3,\"454\":1,\"455\":3,\"456\":4,\"457\":5,\"461\":1,\"463\":1,\"465\":1,\"487\":1,\"488\":6,\"513\":1,\"539\":19,\"555\":1,\"706\":1}}],[\"const字面量推理\",{\"1\":{\"423\":1}}],[\"constant\",{\"1\":{\"238\":1}}],[\"const声明之后不允许改变\",{\"1\":{\"238\":2}}],[\"const\",{\"0\":{\"238\":1},\"1\":{\"119\":1,\"180\":2,\"195\":3,\"202\":2,\"205\":6,\"206\":6,\"218\":2,\"223\":2,\"230\":3,\"233\":4,\"234\":2,\"235\":2,\"238\":2,\"239\":6,\"240\":1,\"241\":9,\"244\":1,\"290\":2,\"292\":3,\"293\":9,\"298\":2,\"299\":5,\"301\":2,\"302\":3,\"303\":7,\"304\":4,\"305\":1,\"306\":6,\"307\":10,\"309\":2,\"312\":4,\"313\":3,\"314\":3,\"316\":2,\"318\":2,\"319\":2,\"325\":5,\"326\":3,\"327\":2,\"328\":3,\"336\":4,\"337\":4,\"338\":1,\"340\":2,\"341\":2,\"342\":2,\"343\":1,\"344\":3,\"345\":3,\"346\":2,\"347\":6,\"348\":4,\"350\":1,\"351\":4,\"358\":1,\"362\":2,\"371\":1,\"379\":3,\"381\":3,\"382\":2,\"385\":2,\"390\":1,\"391\":2,\"392\":1,\"393\":1,\"394\":1,\"395\":1,\"396\":1,\"397\":1,\"398\":2,\"399\":2,\"402\":1,\"405\":1,\"406\":6,\"407\":10,\"409\":1,\"415\":4,\"417\":1,\"419\":3,\"420\":2,\"422\":1,\"423\":4,\"424\":2,\"431\":3,\"434\":1,\"435\":1,\"436\":1,\"437\":2,\"442\":1,\"443\":5,\"445\":1,\"448\":1,\"449\":2,\"450\":1,\"451\":1,\"452\":2,\"454\":1,\"455\":4,\"456\":1,\"457\":1,\"460\":3,\"463\":3,\"464\":2,\"465\":1,\"467\":3,\"473\":6,\"481\":6,\"484\":4,\"487\":4,\"494\":1,\"505\":2,\"506\":1,\"507\":3,\"511\":1,\"521\":4,\"538\":1,\"545\":1,\"546\":1,\"549\":1,\"552\":1,\"556\":4}}],[\"constructor类\",{\"1\":{\"31\":1}}],[\"constructor\",{\"1\":{\"12\":1,\"191\":3,\"234\":1,\"284\":2,\"285\":3,\"301\":1,\"306\":1,\"309\":2,\"312\":2,\"313\":2,\"314\":2,\"316\":2,\"318\":2,\"319\":2,\"351\":7,\"352\":4,\"358\":1,\"363\":4,\"379\":1,\"390\":1,\"391\":2,\"395\":1,\"396\":1,\"398\":2,\"443\":1}}],[\"consumer<string>\",{\"1\":{\"87\":2}}],[\"consumer<t>\",{\"1\":{\"87\":2}}],[\"cookie只能存放一对字符串k\",{\"1\":{\"25\":1}}],[\"cookie数据不安全\",{\"1\":{\"25\":1}}],[\"cookie是存放在浏览器上的\",{\"1\":{\"25\":1}}],[\"cookie\",{\"0\":{\"675\":1,\"676\":1,\"678\":1,\"681\":1},\"1\":{\"25\":3,\"675\":1,\"676\":3,\"677\":3,\"678\":2,\"681\":1,\"683\":1,\"695\":1,\"707\":1}}],[\"cookie和session的区别\",{\"0\":{\"25\":1}}],[\"ico\",{\"1\":{\"663\":2}}],[\"icon\",{\"1\":{\"142\":1,\"472\":5,\"473\":5,\"474\":10,\"475\":10,\"478\":8,\"480\":2,\"663\":2}}],[\"ip\",{\"1\":{\"580\":2}}],[\"iperson\",{\"1\":{\"442\":1,\"454\":1,\"455\":4}}],[\"iperson<t1\",{\"1\":{\"442\":1}}],[\"i>\",{\"1\":{\"492\":1,\"633\":2}}],[\"ibar\",{\"1\":{\"454\":2}}],[\"iaction\",{\"1\":{\"451\":2}}],[\"iinfotype\",{\"1\":{\"448\":2}}],[\"iife\",{\"1\":{\"218\":1}}],[\"ilanguageyear\",{\"1\":{\"449\":2}}],[\"ilength>\",{\"1\":{\"444\":1}}],[\"ilength>限制参数化类型\",{\"1\":{\"444\":1}}],[\"ilength\",{\"1\":{\"444\":1}}],[\"illegalstateexception\",{\"1\":{\"91\":1}}],[\"ignition\",{\"0\":{\"265\":1},\"1\":{\"262\":1,\"263\":2,\"264\":1,\"266\":2}}],[\"ieat\",{\"1\":{\"453\":2}}],[\"ie\",{\"1\":{\"258\":1,\"260\":1,\"613\":1,\"635\":2,\"636\":1,\"663\":2}}],[\"ie=edge\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":2,\"706\":1}}],[\"ie6\",{\"1\":{\"224\":1,\"630\":1}}],[\"important最高\",{\"1\":{\"640\":1}}],[\"important\",{\"1\":{\"640\":1}}],[\"import\",{\"1\":{\"244\":2,\"470\":1,\"471\":2,\"472\":3,\"473\":9,\"474\":3,\"475\":3,\"477\":2,\"478\":2,\"481\":6,\"505\":2,\"506\":2,\"511\":2,\"545\":1,\"546\":2,\"633\":1,\"638\":2}}],[\"import用于导入其他模块提供的功能\",{\"1\":{\"244\":1}}],[\"implements\",{\"1\":{\"14\":1,\"453\":2}}],[\"immediately\",{\"1\":{\"218\":1}}],[\"image\",{\"1\":{\"206\":1,\"348\":1,\"596\":1,\"618\":1,\"627\":1,\"628\":1,\"633\":1}}],[\"imagesrc\",{\"1\":{\"521\":2}}],[\"images\",{\"1\":{\"142\":1,\"521\":1}}],[\"imgs\",{\"1\":{\"659\":1}}],[\"img2\",{\"1\":{\"206\":2,\"348\":5}}],[\"img1\",{\"1\":{\"206\":2,\"348\":2}}],[\"img\",{\"0\":{\"671\":1},\"1\":{\"206\":7,\"348\":7,\"470\":5,\"471\":5,\"472\":6,\"473\":4,\"474\":9,\"475\":9,\"478\":8,\"480\":1,\"594\":2,\"627\":1}}],[\"ir⋯\",{\"1\":{\"133\":1}}],[\"id属性\",{\"1\":{\"632\":1}}],[\"id选择器\",{\"1\":{\"623\":1}}],[\"id就可以访问到该组件了\",{\"1\":{\"488\":1}}],[\"id为app实例下的局部组件\",{\"1\":{\"484\":1}}],[\"idtype\",{\"1\":{\"414\":2,\"424\":2}}],[\"idle\",{\"1\":{\"254\":1}}],[\"identifier\",{\"1\":{\"228\":1,\"238\":1}}],[\"id``\",{\"1\":{\"170\":2}}],[\"id=123\",{\"1\":{\"509\":1}}],[\"id=\",{\"1\":{\"135\":1,\"415\":1,\"470\":2,\"471\":2,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"477\":1,\"479\":1,\"484\":1,\"485\":1,\"487\":4,\"492\":2,\"493\":1,\"494\":2,\"495\":1,\"521\":7,\"528\":2,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":2,\"546\":1,\"628\":4,\"663\":1}}],[\"id\",{\"1\":{\"123\":1,\"168\":1,\"174\":2,\"243\":6,\"285\":4,\"352\":6,\"412\":4,\"414\":1,\"424\":5,\"485\":1,\"487\":4,\"493\":1,\"508\":3,\"521\":1,\"537\":3,\"549\":4,\"552\":1,\"623\":1,\"632\":1,\"639\":1,\"640\":1,\"666\":1,\"674\":1}}],[\"i++\",{\"1\":{\"87\":1,\"218\":3}}],[\"italic\",{\"1\":{\"622\":1}}],[\"iterable\",{\"1\":{\"299\":7,\"325\":2,\"326\":1,\"327\":1,\"328\":1}}],[\"iterableobj\",{\"1\":{\"299\":4}}],[\"iteration\",{\"1\":{\"631\":2}}],[\"iterator\",{\"1\":{\"196\":1,\"299\":7,\"301\":1,\"306\":2}}],[\"iterate\",{\"1\":{\"90\":1}}],[\"item项目\",{\"0\":{\"646\":1}}],[\"item4\",{\"1\":{\"633\":1}}],[\"item3\",{\"1\":{\"633\":1}}],[\"item2\",{\"1\":{\"633\":1}}],[\"item1\",{\"1\":{\"633\":1}}],[\"item$\",{\"1\":{\"632\":1}}],[\"items属性\",{\"1\":{\"645\":1}}],[\"items\",{\"1\":{\"521\":2,\"533\":2,\"613\":1,\"645\":1}}],[\"itemstatechanged\",{\"1\":{\"83\":1}}],[\"itemclick\",{\"1\":{\"473\":2,\"474\":2,\"475\":2,\"480\":2,\"487\":1}}],[\"item>父组件传入一个activecolor属性\",{\"1\":{\"475\":1}}],[\"item>\",{\"1\":{\"472\":8,\"473\":4,\"474\":4,\"475\":4,\"478\":4}}],[\"item根据上下文的环境推导出来的\",{\"1\":{\"409\":1}}],[\"item=>\",{\"1\":{\"242\":1}}],[\"item\",{\"1\":{\"242\":3,\"299\":2,\"306\":2,\"325\":2,\"326\":2,\"327\":2,\"328\":2,\"371\":4,\"409\":2,\"470\":6,\"471\":6,\"472\":13,\"473\":15,\"474\":22,\"475\":22,\"478\":16,\"480\":6,\"487\":11,\"494\":1,\"495\":4,\"521\":7,\"524\":3,\"533\":2,\"633\":4}}],[\"itemevent\",{\"1\":{\"83\":1}}],[\"itemlistener\",{\"1\":{\"83\":1}}],[\"it\",{\"1\":{\"81\":1,\"116\":2}}],[\"iframe\",{\"0\":{\"669\":1},\"1\":{\"667\":1}}],[\"if显示\",{\"1\":{\"534\":1}}],[\"if指令的元素\",{\"1\":{\"523\":1}}],[\"if和v\",{\"0\":{\"523\":1,\"534\":1}}],[\"if=\",{\"1\":{\"474\":1,\"475\":1,\"480\":1,\"533\":1,\"534\":1,\"535\":3}}],[\"ifoo\",{\"1\":{\"454\":3}}],[\"ifly\",{\"1\":{\"451\":2,\"452\":3}}],[\"if判断\",{\"1\":{\"424\":1}}],[\"ifpresent\",{\"1\":{\"93\":2}}],[\"if\",{\"0\":{\"535\":1},\"1\":{\"35\":1,\"87\":1,\"93\":2,\"195\":1,\"223\":1,\"234\":6,\"292\":1,\"298\":1,\"299\":1,\"301\":2,\"306\":2,\"307\":1,\"309\":14,\"313\":2,\"314\":2,\"316\":4,\"317\":2,\"318\":7,\"319\":14,\"323\":2,\"325\":4,\"326\":2,\"327\":2,\"328\":2,\"332\":4,\"379\":1,\"395\":1,\"403\":1,\"412\":1,\"416\":1,\"417\":2,\"424\":6,\"428\":1,\"437\":1,\"523\":1,\"534\":1,\"536\":1,\"537\":2,\"689\":4,\"690\":4}}],[\"indent\",{\"1\":{\"621\":1}}],[\"index属性在static下无效\",{\"1\":{\"629\":1}}],[\"indexof\",{\"1\":{\"474\":1,\"475\":1,\"480\":1}}],[\"indexlanguage\",{\"1\":{\"449\":2}}],[\"index++\",{\"1\":{\"298\":1,\"299\":1,\"301\":1,\"306\":3}}],[\"index\",{\"0\":{\"481\":1},\"1\":{\"242\":1,\"298\":2,\"299\":2,\"301\":2,\"306\":6,\"325\":2,\"326\":3,\"449\":1,\"473\":1,\"481\":1,\"512\":1,\"513\":1,\"521\":2,\"533\":6,\"551\":1,\"552\":2,\"553\":1,\"555\":2,\"666\":2}}],[\"inline\",{\"1\":{\"589\":3,\"611\":2,\"616\":3,\"624\":2,\"633\":2,\"645\":2}}],[\"incrementcount\",{\"1\":{\"553\":4}}],[\"increment\",{\"1\":{\"546\":2,\"551\":2,\"552\":2,\"555\":9}}],[\"include\",{\"1\":{\"516\":1}}],[\"includes\",{\"1\":{\"239\":2}}],[\"inject\",{\"1\":{\"488\":2}}],[\"init\",{\"1\":{\"498\":1}}],[\"initalnum\",{\"1\":{\"434\":2}}],[\"initialvalue\",{\"1\":{\"242\":2}}],[\"initial\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"303\":2,\"304\":2,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":1,\"674\":1,\"706\":1}}],[\"inheritprototype\",{\"1\":{\"284\":2}}],[\"innerheight\",{\"1\":{\"655\":1}}],[\"innertext\",{\"1\":{\"539\":5}}],[\"inner\",{\"1\":{\"264\":2}}],[\"innodb引擎通过\",{\"1\":{\"164\":1}}],[\"innodb引擎使用\",{\"1\":{\"164\":1}}],[\"innodb\",{\"1\":{\"162\":1}}],[\"infotype\",{\"1\":{\"448\":1}}],[\"info对象\",{\"1\":{\"435\":1}}],[\"infoobj\",{\"1\":{\"406\":1}}],[\"info\",{\"1\":{\"239\":2,\"279\":2,\"280\":6,\"281\":6,\"282\":4,\"283\":5,\"284\":6,\"285\":6,\"384\":4,\"406\":5,\"417\":10,\"423\":2,\"435\":2,\"436\":2,\"448\":5,\"455\":5,\"465\":2,\"467\":1}}],[\"infinity\",{\"1\":{\"233\":4}}],[\"install\",{\"1\":{\"320\":1,\"504\":1,\"650\":1}}],[\"instanceof\",{\"0\":{\"356\":1,\"358\":1},\"1\":{\"234\":2,\"309\":1,\"319\":1,\"323\":2,\"350\":6,\"351\":5,\"355\":1,\"358\":5,\"379\":1,\"424\":3}}],[\"insert\",{\"1\":{\"170\":1}}],[\"in\",{\"0\":{\"300\":1},\"1\":{\"169\":1,\"181\":2,\"205\":1,\"234\":1,\"262\":1,\"300\":3,\"323\":1,\"355\":5,\"424\":2,\"487\":2,\"494\":1,\"495\":2,\"521\":5,\"524\":1,\"533\":8,\"537\":1,\"631\":2,\"654\":1}}],[\"input的\",{\"1\":{\"674\":1}}],[\"input不能\",{\"1\":{\"672\":1}}],[\"input会自动获得焦点\",{\"1\":{\"628\":1}}],[\"input和label的关联\",{\"1\":{\"628\":1}}],[\"input\",{\"0\":{\"673\":1},\"1\":{\"628\":1,\"674\":1}}],[\"input=\",{\"1\":{\"521\":2}}],[\"inputstream\",{\"1\":{\"37\":1}}],[\"inputxxx\",{\"1\":{\"37\":1}}],[\"invoked\",{\"1\":{\"218\":1}}],[\"invoke\",{\"1\":{\"32\":1}}],[\"invocationhandler\",{\"1\":{\"32\":3}}],[\"intsummarystatistics\",{\"1\":{\"91\":1}}],[\"interface和type的区别\",{\"0\":{\"454\":1}}],[\"interface\",{\"1\":{\"84\":2,\"442\":1,\"444\":1,\"448\":1,\"449\":2,\"450\":1,\"451\":3,\"452\":2,\"453\":2,\"454\":4,\"455\":1}}],[\"interfaces\",{\"1\":{\"32\":1}}],[\"interceptset\",{\"1\":{\"184\":2}}],[\"interceptget\",{\"1\":{\"184\":2}}],[\"intercept\",{\"1\":{\"32\":2}}],[\"integer默认值为null\",{\"1\":{\"16\":1}}],[\"integer\",{\"0\":{\"16\":1},\"1\":{\"15\":1,\"17\":1,\"18\":4,\"78\":5,\"82\":11,\"84\":5,\"87\":2,\"90\":2}}],[\"integer包装类型\",{\"1\":{\"6\":1}}],[\"intvalue\",{\"1\":{\"18\":1}}],[\"int的默认值为0\",{\"1\":{\"16\":1}}],[\"int的区别\",{\"0\":{\"16\":1}}],[\"int\",{\"1\":{\"15\":2,\"18\":3,\"35\":2,\"82\":2,\"87\":3,\"90\":1,\"93\":2}}],[\"int类型\",{\"1\":{\"6\":1,\"38\":1}}],[\"int基本类型或\",{\"1\":{\"6\":1}}],[\"i\",{\"0\":{\"38\":1},\"1\":{\"18\":6,\"39\":5,\"84\":2,\"87\":2,\"218\":13,\"234\":1,\"249\":1,\"254\":2,\"255\":1,\"300\":4,\"533\":2,\"633\":1}}],[\"ios\",{\"1\":{\"663\":1}}],[\"io流\",{\"0\":{\"36\":1}}],[\"io\",{\"0\":{\"37\":1},\"1\":{\"14\":1,\"39\":1}}],[\"isn\",{\"1\":{\"712\":2}}],[\"isc\",{\"1\":{\"521\":1}}],[\"isb\",{\"1\":{\"521\":1}}],[\"isred\",{\"1\":{\"521\":1}}],[\"isshow\",{\"1\":{\"494\":4}}],[\"isagree\",{\"1\":{\"521\":4}}],[\"isactive\",{\"1\":{\"474\":4,\"475\":3,\"480\":3,\"530\":2}}],[\"isarray\",{\"1\":{\"325\":1,\"326\":1,\"327\":1,\"328\":1}}],[\"iswim\",{\"1\":{\"451\":2,\"452\":3,\"453\":4}}],[\"isprototypeof\",{\"1\":{\"355\":2}}],[\"ispresent\",{\"1\":{\"93\":1}}],[\"isempty\",{\"1\":{\"91\":1}}],[\"is\",{\"1\":{\"8\":1,\"81\":1,\"128\":2,\"238\":2,\"325\":2,\"326\":1,\"327\":1,\"328\":1,\"352\":2,\"384\":1,\"489\":1}}],[\"如图片\",{\"1\":{\"672\":1}}],[\"如图片等\",{\"1\":{\"633\":1}}],[\"如屏幕阅读器\",{\"1\":{\"658\":1}}],[\"如calc\",{\"1\":{\"633\":1}}],[\"如父元素的高度由子元素撑开\",{\"1\":{\"629\":1}}],[\"如行内级元素可以设置宽高\",{\"1\":{\"629\":1}}],[\"如用在小程序默认插槽\",{\"1\":{\"623\":1}}],[\"如button\",{\"1\":{\"507\":1}}],[\"如何通过\",{\"1\":{\"707\":1}}],[\"如何在开发中使用的是\",{\"1\":{\"499\":1}}],[\"如何在开发中使用template\",{\"1\":{\"499\":1}}],[\"如何理解泛型的编译器检查\",{\"0\":{\"29\":1}}],[\"如vue\",{\"1\":{\"489\":1,\"543\":1}}],[\"如上\",{\"1\":{\"344\":1}}],[\"如今\",{\"1\":{\"248\":1}}],[\"如柯里化\",{\"1\":{\"223\":1,\"225\":1}}],[\"如下\",{\"1\":{\"594\":1}}],[\"如下代码\",{\"1\":{\"217\":1}}],[\"如下所示\",{\"1\":{\"211\":1}}],[\"如x\",{\"1\":{\"88\":1}}],[\"如果收不到\",{\"1\":{\"716\":1}}],[\"如果需要携带\",{\"1\":{\"707\":1}}],[\"如果服务器响应\",{\"1\":{\"700\":1}}],[\"如果相等\",{\"1\":{\"689\":1}}],[\"如果用户系统时间不准确\",{\"1\":{\"687\":1}}],[\"如果资源过期\",{\"1\":{\"686\":1}}],[\"如果资源没有过期\",{\"1\":{\"686\":1}}],[\"如果浏览器禁用了\",{\"1\":{\"677\":1}}],[\"如果项目只有一根轴线\",{\"1\":{\"645\":1}}],[\"如果想实现其中的任一个三角形\",{\"1\":{\"642\":1}}],[\"如果name相同\",{\"1\":{\"628\":1}}],[\"如果只设置一个值\",{\"1\":{\"627\":1}}],[\"如果块级元素的顶部线和父元素的顶部线重叠\",{\"1\":{\"626\":1}}],[\"如果内容被修剪\",{\"1\":{\"625\":1}}],[\"如果可以推导出对应的标识符的类型时\",{\"1\":{\"463\":1}}],[\"如果所有项目的flex\",{\"1\":{\"646\":1}}],[\"如果所有\",{\"1\":{\"347\":1}}],[\"如果任意一个\",{\"1\":{\"344\":1}}],[\"如果几个任务互相独立\",{\"1\":{\"331\":1}}],[\"如果传入的不为空数组\",{\"1\":{\"327\":1}}],[\"如果传入的是空数组\",{\"1\":{\"325\":1,\"326\":1,\"327\":1,\"328\":1}}],[\"如果不相等\",{\"1\":{\"689\":1}}],[\"如果不使用计数器\",{\"1\":{\"325\":1}}],[\"如果不使用\",{\"1\":{\"325\":1}}],[\"如果不加\",{\"1\":{\"168\":1}}],[\"如果返回含有\",{\"1\":{\"336\":1}}],[\"如果返回新的\",{\"1\":{\"336\":1}}],[\"如果返回的是一个值或普通对象\",{\"1\":{\"336\":1}}],[\"如果返回的是失败的\",{\"1\":{\"322\":1}}],[\"如果返回的是成功的\",{\"1\":{\"322\":1}}],[\"如果返回一个\",{\"1\":{\"202\":1}}],[\"如果定时器内有\",{\"1\":{\"318\":1}}],[\"如果\",{\"1\":{\"309\":2,\"319\":2,\"322\":1}}],[\"如果迭代器已将序列迭代完毕\",{\"1\":{\"298\":1}}],[\"如果迭代器可以产生序列中的下一个值\",{\"1\":{\"298\":1}}],[\"如果发现重复执行多次的代码\",{\"1\":{\"263\":1}}],[\"如果存储空间中没有就存进\",{\"1\":{\"234\":1}}],[\"如果有效会根据储存在服务端秘钥对登录凭证进行签名生成\",{\"1\":{\"682\":1}}],[\"如果有的话\",{\"1\":{\"646\":1}}],[\"如果有的话直接返回\",{\"1\":{\"234\":2}}],[\"如果有唯一索引\",{\"1\":{\"172\":1}}],[\"如果目标对象与源对象具有相同的键\",{\"1\":{\"230\":1}}],[\"如果函数内部引用了外部自由变量\",{\"1\":{\"213\":1,\"225\":1}}],[\"如果找到全局作用域还没找到\",{\"1\":{\"212\":1}}],[\"如果直接返回一个值\",{\"1\":{\"202\":1}}],[\"如果箭头函数外层没有普通函数\",{\"1\":{\"195\":1,\"364\":1}}],[\"如果箭头函数被非箭头函数包含\",{\"1\":{\"195\":1,\"364\":1}}],[\"如果构造函数里有方法\",{\"1\":{\"190\":1}}],[\"如果一个元素拥有滚动机制\",{\"1\":{\"627\":1}}],[\"如果一个描述符同时拥有\",{\"1\":{\"182\":1}}],[\"如果一个父类提供了具体实现方法\",{\"1\":{\"98\":1}}],[\"如果数据有索引\",{\"1\":{\"175\":1}}],[\"如果全部命中了索引\",{\"1\":{\"174\":1}}],[\"如果行被锁定了\",{\"1\":{\"171\":1}}],[\"如果加\",{\"1\":{\"169\":1}}],[\"如果你使用块元素如\",{\"1\":{\"645\":1}}],[\"如果你的状态信息是保存到多个store对象中的\",{\"1\":{\"548\":1}}],[\"如果你不了解它\",{\"1\":{\"115\":1}}],[\"如果你是一个新手\",{\"1\":{\"114\":1}}],[\"如果实现的2个接口同时提供了一个具有相同名称和参数列表的方法\",{\"1\":{\"98\":1}}],[\"如果调用对象含值\",{\"1\":{\"93\":2}}],[\"如果当前数组的总长度小于\",{\"1\":{\"50\":1,\"69\":1}}],[\"如果是修饰\",{\"1\":{\"38\":1}}],[\"如果没有传\",{\"1\":{\"525\":1}}],[\"如果没有\",{\"1\":{\"35\":1}}],[\"如果考虑到安全应使用session\",{\"1\":{\"25\":1}}],[\"如果原对象内部的属性是引用类型的话\",{\"1\":{\"21\":1}}],[\"如果⽅法的返回类型是void和基本数据类型\",{\"1\":{\"12\":1}}],[\"如果⽗类⽅法访问修饰符为\",{\"1\":{\"12\":1}}],[\"如果两个对象的hashcode值相等并且equals\",{\"1\":{\"9\":1}}],[\"如果两个对象的hashcode\",{\"1\":{\"9\":2}}],[\"如\",{\"1\":{\"8\":1,\"88\":1,\"90\":2,\"174\":1,\"195\":1,\"254\":1,\"357\":1,\"494\":1,\"509\":2,\"544\":1,\"623\":1,\"695\":5}}],[\"描述\",{\"1\":{\"694\":1}}],[\"描述数据的数据\",{\"1\":{\"513\":1}}],[\"描述一种操作时用接口\",{\"1\":{\"8\":1}}],[\"描述事物的本质\",{\"1\":{\"8\":1}}],[\"抽象语法树转换成字节码并执行\",{\"1\":{\"262\":1}}],[\"抽象语法树\",{\"1\":{\"262\":1,\"263\":1,\"264\":1,\"267\":1}}],[\"抽象方法默认类型且只能是public\",{\"1\":{\"8\":1}}],[\"抽象类\",{\"0\":{\"398\":1},\"1\":{\"8\":1}}],[\"抽象类和接口有什么区别\",{\"0\":{\"8\":1}}],[\"f5\",{\"1\":{\"691\":1}}],[\"f00\",{\"1\":{\"633\":1,\"654\":1}}],[\"fff\",{\"1\":{\"627\":1,\"653\":1}}],[\"fc\",{\"1\":{\"589\":2}}],[\"f6f6f6\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"479\":1}}],[\"fullname3\",{\"1\":{\"556\":1}}],[\"fullname2\",{\"1\":{\"556\":2}}],[\"fullname\",{\"1\":{\"556\":2}}],[\"fulfilled\",{\"1\":{\"309\":4,\"312\":4,\"313\":4,\"314\":3,\"316\":4,\"317\":1,\"318\":4,\"319\":4,\"326\":3,\"334\":5,\"341\":1,\"345\":2}}],[\"fun2\",{\"1\":{\"224\":2,\"228\":4}}],[\"fun1\",{\"1\":{\"224\":1,\"228\":12}}],[\"fun\",{\"1\":{\"224\":2,\"239\":2,\"240\":4}}],[\"func\",{\"1\":{\"360\":2}}],[\"func2\",{\"1\":{\"87\":1}}],[\"func1\",{\"1\":{\"87\":2}}],[\"functional\",{\"1\":{\"272\":1}}],[\"functionalinterface\",{\"1\":{\"84\":2}}],[\"functionalinterface修饰\",{\"1\":{\"80\":1}}],[\"function<employee\",{\"1\":{\"87\":2}}],[\"function<t\",{\"1\":{\"87\":2}}],[\"function\",{\"1\":{\"81\":1,\"93\":2,\"180\":2,\"184\":6,\"185\":2,\"186\":2,\"189\":2,\"190\":3,\"191\":4,\"192\":1,\"195\":3,\"196\":1,\"199\":1,\"202\":10,\"203\":2,\"204\":2,\"205\":7,\"206\":2,\"211\":2,\"212\":8,\"214\":1,\"215\":2,\"217\":3,\"218\":19,\"221\":2,\"222\":1,\"223\":5,\"224\":3,\"233\":1,\"234\":2,\"239\":1,\"240\":6,\"241\":1,\"243\":9,\"244\":1,\"252\":8,\"253\":1,\"256\":2,\"273\":2,\"274\":2,\"277\":1,\"279\":4,\"280\":4,\"281\":4,\"282\":4,\"283\":4,\"284\":6,\"288\":3,\"290\":4,\"291\":1,\"292\":3,\"293\":3,\"296\":1,\"298\":2,\"299\":1,\"300\":2,\"302\":2,\"303\":1,\"304\":1,\"305\":1,\"306\":5,\"307\":5,\"309\":5,\"316\":2,\"317\":2,\"318\":2,\"319\":5,\"320\":1,\"321\":1,\"322\":1,\"323\":1,\"332\":5,\"333\":3,\"336\":1,\"341\":1,\"348\":1,\"350\":2,\"351\":17,\"354\":1,\"357\":2,\"360\":9,\"361\":4,\"362\":2,\"363\":4,\"364\":4,\"366\":1,\"367\":1,\"368\":1,\"369\":1,\"371\":5,\"372\":1,\"373\":1,\"375\":2,\"376\":4,\"377\":5,\"378\":4,\"379\":4,\"384\":2,\"385\":3,\"392\":1,\"398\":1,\"399\":2,\"403\":2,\"404\":2,\"405\":3,\"407\":2,\"408\":1,\"409\":2,\"410\":1,\"411\":1,\"412\":1,\"413\":2,\"414\":2,\"415\":1,\"416\":1,\"423\":1,\"424\":5,\"427\":1,\"428\":1,\"431\":5,\"432\":1,\"433\":1,\"434\":2,\"436\":1,\"437\":3,\"440\":1,\"441\":1,\"444\":1,\"450\":1,\"453\":2,\"455\":1,\"456\":1,\"457\":1,\"513\":1,\"537\":1,\"539\":1,\"549\":1,\"584\":2,\"631\":3,\"706\":1}}],[\"female\",{\"1\":{\"521\":2,\"628\":3}}],[\"feature\",{\"1\":{\"291\":3}}],[\"fec\",{\"1\":{\"277\":1}}],[\"fec开始执行代码\",{\"1\":{\"272\":1}}],[\"fec被放入到ecs中\",{\"1\":{\"272\":1}}],[\"fec中包含三部分内容\",{\"1\":{\"272\":1}}],[\"f2\",{\"1\":{\"234\":3}}],[\"f1\",{\"1\":{\"234\":3}}],[\"favicon\",{\"1\":{\"663\":2}}],[\"face\",{\"1\":{\"622\":2}}],[\"family是必须的\",{\"1\":{\"622\":1}}],[\"family\",{\"1\":{\"622\":3}}],[\"failurecallback\",{\"1\":{\"332\":2}}],[\"father\",{\"1\":{\"217\":12,\"218\":36}}],[\"false\",{\"1\":{\"4\":1,\"15\":1,\"17\":1,\"182\":4,\"183\":1,\"187\":3,\"234\":6,\"235\":1,\"298\":5,\"299\":7,\"301\":1,\"302\":1,\"303\":2,\"304\":1,\"306\":10,\"309\":1,\"319\":1,\"351\":1,\"355\":2,\"358\":1,\"384\":2,\"474\":1,\"494\":2,\"513\":1,\"521\":1}}],[\"fns\",{\"1\":{\"293\":4}}],[\"fn2\",{\"1\":{\"196\":2,\"199\":2,\"202\":2}}],[\"fn1\",{\"1\":{\"196\":2,\"199\":2,\"202\":5,\"379\":4}}],[\"fn\",{\"1\":{\"195\":2,\"202\":3,\"211\":2,\"218\":2,\"223\":2,\"282\":4,\"283\":4,\"292\":11,\"293\":4,\"332\":2,\"333\":6,\"351\":5,\"360\":2,\"379\":6,\"431\":4}}],[\"frameborder\",{\"1\":{\"669\":1}}],[\"fruits\",{\"1\":{\"521\":3}}],[\"fruit\",{\"1\":{\"521\":3}}],[\"freshness擦除\",{\"1\":{\"455\":1}}],[\"freeze\",{\"1\":{\"187\":1}}],[\"friend\",{\"1\":{\"395\":8,\"417\":10,\"448\":3}}],[\"frontlanguage\",{\"1\":{\"449\":1}}],[\"frontmatter\",{\"1\":{\"107\":1,\"115\":3,\"144\":1,\"146\":1}}],[\"from\",{\"1\":{\"168\":1,\"174\":1,\"244\":2,\"299\":1,\"471\":1,\"472\":2,\"473\":4,\"474\":2,\"475\":2,\"477\":1,\"478\":2,\"481\":2,\"505\":2,\"506\":2,\"511\":1,\"513\":3,\"545\":1,\"546\":2,\"631\":1,\"686\":1}}],[\"focus\",{\"1\":{\"623\":1}}],[\"font缩写属性\",{\"1\":{\"622\":1}}],[\"fonts\",{\"1\":{\"622\":1}}],[\"fontsize\",{\"1\":{\"521\":1,\"530\":1}}],[\"font\",{\"1\":{\"472\":1,\"474\":1,\"475\":1,\"480\":1,\"622\":19,\"633\":4,\"652\":1,\"653\":2,\"655\":3}}],[\"foo没有添加类型注解\",{\"1\":{\"460\":1}}],[\"foo<number\",{\"1\":{\"441\":1}}],[\"foo<t\",{\"1\":{\"441\":1}}],[\"foofntype\",{\"1\":{\"431\":2}}],[\"foo4\",{\"1\":{\"376\":10,\"377\":7}}],[\"food\",{\"1\":{\"241\":8}}],[\"foo3\",{\"1\":{\"212\":3,\"376\":11,\"377\":8}}],[\"foo2返回函数\",{\"1\":{\"378\":1}}],[\"foo2所在\",{\"1\":{\"378\":1}}],[\"foo2\",{\"1\":{\"195\":4,\"212\":4,\"360\":3,\"364\":4,\"376\":6,\"377\":5,\"378\":6}}],[\"foo1~4\",{\"1\":{\"376\":1,\"377\":2}}],[\"foo1\",{\"1\":{\"195\":6,\"212\":6,\"360\":3,\"364\":6,\"367\":1,\"376\":6,\"377\":3,\"378\":10}}],[\"foo\",{\"1\":{\"180\":2,\"203\":3,\"204\":2,\"211\":4,\"214\":3,\"215\":7,\"217\":6,\"218\":11,\"273\":2,\"274\":2,\"300\":3,\"302\":2,\"303\":2,\"304\":2,\"305\":2,\"360\":10,\"361\":12,\"362\":13,\"363\":8,\"366\":4,\"367\":3,\"368\":3,\"369\":3,\"372\":8,\"373\":8,\"375\":2,\"381\":4,\"384\":4,\"385\":2,\"403\":2,\"405\":1,\"409\":1,\"413\":3,\"427\":3,\"428\":5,\"431\":2,\"432\":3,\"433\":2,\"454\":1,\"456\":1,\"457\":1,\"460\":3,\"521\":1}}],[\"footer\",{\"1\":{\"142\":1}}],[\"form\",{\"0\":{\"672\":1},\"1\":{\"674\":2,\"707\":3}}],[\"format\",{\"1\":{\"95\":22}}],[\"for使用过程添加key可以提高性能\",{\"0\":{\"524\":1}}],[\"for=\",{\"1\":{\"487\":2,\"494\":1,\"495\":2,\"521\":9,\"524\":1,\"533\":8,\"537\":1,\"628\":4}}],[\"foreach遍历\",{\"1\":{\"91\":1}}],[\"foreach\",{\"1\":{\"85\":4,\"90\":1,\"91\":4,\"309\":2,\"318\":2,\"319\":2,\"325\":2,\"326\":1,\"327\":1,\"328\":1,\"371\":1,\"392\":1,\"409\":1}}],[\"foreg\",{\"1\":{\"84\":1}}],[\"for\",{\"0\":{\"300\":2,\"533\":1},\"1\":{\"85\":1,\"87\":4,\"169\":1,\"181\":2,\"218\":4,\"234\":1,\"299\":2,\"300\":6,\"301\":1,\"306\":2,\"355\":2,\"434\":1,\"521\":2}}],[\"forname\",{\"1\":{\"31\":1}}],[\"forwards\",{\"1\":{\"631\":1}}],[\"forward只有一次请求\",{\"1\":{\"24\":1}}],[\"forward效率高\",{\"1\":{\"24\":1}}],[\"forward一般用于用户登录的时候\",{\"1\":{\"24\":1}}],[\"forward是服务器内部的重定向\",{\"1\":{\"24\":1}}],[\"forward\",{\"0\":{\"24\":1},\"1\":{\"503\":1}}],[\"flow\",{\"1\":{\"586\":1,\"645\":1}}],[\"float\",{\"1\":{\"15\":3,\"17\":1,\"589\":1,\"592\":1,\"593\":1,\"594\":2}}],[\"flexible\",{\"1\":{\"655\":1}}],[\"flex布局\",{\"1\":{\"647\":1}}],[\"flex布局常见问题\",{\"1\":{\"633\":1}}],[\"flex布局中justify\",{\"1\":{\"633\":1}}],[\"flex\",{\"0\":{\"605\":1,\"613\":1,\"644\":1,\"645\":1,\"646\":1},\"1\":{\"470\":2,\"471\":2,\"472\":2,\"474\":1,\"475\":1,\"479\":1,\"480\":1,\"589\":3,\"605\":1,\"613\":2,\"645\":11,\"646\":8,\"647\":1}}],[\"flying\",{\"1\":{\"451\":2,\"452\":3}}],[\"flag\",{\"1\":{\"403\":2,\"419\":4,\"445\":2,\"462\":2}}],[\"flatmap\",{\"1\":{\"90\":1,\"93\":4}}],[\"f\",{\"1\":{\"35\":2,\"84\":1,\"93\":1,\"224\":1,\"233\":2,\"293\":1,\"589\":1}}],[\"fit=cover\",{\"1\":{\"663\":1}}],[\"first\",{\"1\":{\"623\":4}}],[\"fish\",{\"1\":{\"392\":4,\"424\":5,\"453\":4}}],[\"fixed\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"479\":1,\"589\":1,\"627\":2,\"629\":2,\"670\":1}}],[\"fix\",{\"1\":{\"291\":4,\"630\":2}}],[\"fill\",{\"1\":{\"631\":2}}],[\"filename\",{\"1\":{\"521\":1}}],[\"file\",{\"1\":{\"142\":1,\"628\":1,\"673\":1}}],[\"filters\",{\"1\":{\"537\":2}}],[\"filterstr\",{\"1\":{\"87\":1}}],[\"filter\",{\"1\":{\"90\":1,\"91\":3,\"371\":1,\"537\":1,\"549\":4,\"633\":2}}],[\"fin\",{\"1\":{\"711\":2,\"714\":4,\"715\":2,\"716\":1}}],[\"findany\",{\"1\":{\"90\":1}}],[\"findfirst\",{\"1\":{\"90\":1}}],[\"finalprivate\",{\"1\":{\"14\":1}}],[\"finalize\",{\"1\":{\"13\":1}}],[\"finalize区别\",{\"0\":{\"13\":1}}],[\"finally块\",{\"1\":{\"35\":1}}],[\"finally中finally注意事项\",{\"0\":{\"35\":1}}],[\"finally\",{\"0\":{\"13\":1,\"322\":1,\"338\":1},\"1\":{\"13\":1,\"35\":6,\"322\":8,\"338\":5}}],[\"final\",{\"0\":{\"13\":1},\"1\":{\"8\":1,\"12\":1,\"13\":2,\"14\":2}}],[\"field类\",{\"1\":{\"31\":1}}],[\"可靠的传输层协议\",{\"1\":{\"710\":1}}],[\"可缓存\",{\"1\":{\"700\":1}}],[\"可引入lib\",{\"1\":{\"655\":1}}],[\"可设置宽度和高度\",{\"1\":{\"624\":2}}],[\"可返回\",{\"1\":{\"503\":1}}],[\"可调用的接口\",{\"1\":{\"450\":1}}],[\"可选参数\",{\"1\":{\"433\":1}}],[\"可选链的使用\",{\"0\":{\"417\":1}}],[\"可选类型是必须写在必选类型的后面的\",{\"1\":{\"432\":1}}],[\"可选类型和联合类型的关系\",{\"0\":{\"413\":1}}],[\"可选类型\",{\"0\":{\"411\":1,\"432\":1}}],[\"可读性差\",{\"1\":{\"382\":1}}],[\"可见是语法糖\",{\"1\":{\"350\":1}}],[\"可通过\",{\"1\":{\"347\":1}}],[\"可通过常量\",{\"1\":{\"299\":1}}],[\"可计算属性\",{\"1\":{\"299\":1}}],[\"可迭代协议要求\",{\"1\":{\"299\":1}}],[\"可迭代协议允许对象自定义它们的迭代行为\",{\"1\":{\"299\":1}}],[\"可迭代对象时一个符合可迭代协议的对象\",{\"1\":{\"299\":1}}],[\"可迭代对象\",{\"0\":{\"299\":1}}],[\"可直接解读的\",{\"1\":{\"266\":1}}],[\"可重新定义属性描述符\",{\"1\":{\"183\":1}}],[\"可重复读\",{\"1\":{\"166\":1,\"171\":1}}],[\"可重复的\",{\"1\":{\"47\":3}}],[\"可删除\",{\"1\":{\"183\":1}}],[\"可写\",{\"1\":{\"182\":1}}],[\"可枚举属性拷贝给目标对象\",{\"1\":{\"230\":1}}],[\"可枚举\",{\"1\":{\"182\":1}}],[\"可配置\",{\"1\":{\"182\":1}}],[\"可能还有数据要发送\",{\"1\":{\"715\":1}}],[\"可能还没有到达叶子节点\",{\"1\":{\"176\":1}}],[\"可能在某个网络节点滞留\",{\"1\":{\"713\":1}}],[\"可能会导致图片部分看不见\",{\"1\":{\"627\":1}}],[\"可能会二次查询\",{\"1\":{\"173\":1}}],[\"可回滚\",{\"1\":{\"168\":1}}],[\"可将流转化为其他形式\",{\"1\":{\"90\":1}}],[\"可使用\",{\"1\":{\"88\":1}}],[\"可扩容\",{\"1\":{\"45\":1}}],[\"可变长数组\",{\"1\":{\"45\":1}}],[\"可变性\",{\"1\":{\"14\":1}}],[\"可修改\",{\"1\":{\"12\":3}}],[\"可以听到\",{\"1\":{\"712\":1}}],[\"可以得到当前网页源\",{\"1\":{\"704\":1}}],[\"可以保存在cookie或者\",{\"1\":{\"682\":1}}],[\"可以保证数据库表中每一行数据的唯一性\",{\"1\":{\"175\":1}}],[\"可以用多个文件进行层叠\",{\"1\":{\"648\":1}}],[\"可以用不同选择器对同一个元素进行样式声明\",{\"1\":{\"648\":1}}],[\"可以多次对同一选择器进行样式声明\",{\"1\":{\"648\":1}}],[\"可以随意设置宽高\",{\"1\":{\"629\":1}}],[\"可以设置字体的小型大写字母\",{\"1\":{\"622\":1}}],[\"可以去除a元素下划线\",{\"1\":{\"621\":1}}],[\"可以使被包含的组件保留状态\",{\"1\":{\"516\":1}}],[\"可以使用清除浮动技巧依据计算\",{\"1\":{\"592\":1}}],[\"可以使用\",{\"1\":{\"80\":1,\"196\":1,\"248\":1,\"337\":1}}],[\"可以实现动态组件\",{\"1\":{\"489\":1}}],[\"可以不添加类型注解\",{\"1\":{\"409\":1}}],[\"可以不设主键\",{\"1\":{\"172\":1}}],[\"可以自己指定\",{\"1\":{\"371\":1}}],[\"可以简单地认为显式原型是用来存放共有属性\",{\"1\":{\"351\":1}}],[\"可以控制函数的执行与暂停\",{\"1\":{\"302\":1}}],[\"可以向父类型的构造函数中传递参数\",{\"1\":{\"284\":1}}],[\"可以继承到父类的属性和方法\",{\"1\":{\"282\":1}}],[\"可以继承到父类原型链上的属性和方法\",{\"1\":{\"281\":1}}],[\"可以继承父类构造函数和原型链上的属性\",{\"1\":{\"281\":1}}],[\"可以继承父类构造函数的属性和方法\",{\"1\":{\"280\":1,\"281\":1}}],[\"可以访问父类构造函数\",{\"1\":{\"279\":1}}],[\"可以直接执行源码\",{\"1\":{\"262\":1}}],[\"可以获取name\",{\"1\":{\"510\":1}}],[\"可以获取map的键值对等object\",{\"1\":{\"241\":1}}],[\"可以获取到对象的属性\",{\"1\":{\"182\":1}}],[\"可以声明多次\",{\"1\":{\"238\":1}}],[\"可以接受所有类型作为键名\",{\"1\":{\"234\":1}}],[\"可以标识变量名\",{\"1\":{\"228\":1}}],[\"可以查找到\",{\"1\":{\"217\":1}}],[\"可以作为其他函数的参数或返回值\",{\"1\":{\"216\":1}}],[\"可以作为引用类型\",{\"1\":{\"8\":1}}],[\"可以通过插件关闭\",{\"1\":{\"703\":1}}],[\"可以通过将\",{\"1\":{\"677\":1}}],[\"可以通过服务端渲染框架\",{\"1\":{\"582\":1}}],[\"可以通过在网页中右键显示网页源代码能否查看到完整页面内容判断是否为服务端渲染\",{\"1\":{\"582\":1}}],[\"可以通过代码跳转路由\",{\"1\":{\"510\":1}}],[\"可以通过\",{\"1\":{\"222\":1}}],[\"可以通过把方法定义在构造函数外部解决这个缺点\",{\"1\":{\"190\":1}}],[\"可以通过反射获取任意一个类的所有属性和方法\",{\"1\":{\"31\":1}}],[\"可以看到不可枚举到的属性会变浅色\",{\"1\":{\"182\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"113\":1}}],[\"可以划分为字节流\",{\"1\":{\"37\":1}}],[\"可以分为输入流\",{\"1\":{\"37\":1}}],[\"可以代理未实现任何接口的类且需要添加依赖\",{\"1\":{\"32\":1}}],[\"可以理解为常量\",{\"1\":{\"14\":1}}],[\"可以覆盖此方法提供垃圾收集时的其他资源回收\",{\"1\":{\"13\":1}}],[\"可以包含静态方法\",{\"1\":{\"8\":1}}],[\"可以有普通成员变量\",{\"1\":{\"8\":1}}],[\"可有抽象方法和具体实现方法\",{\"1\":{\"8\":1}}],[\"可有构造方法\",{\"1\":{\"8\":1}}],[\"都设置成透明即可\",{\"1\":{\"642\":1}}],[\"都是可以传入\",{\"1\":{\"453\":1}}],[\"都是唯一\",{\"0\":{\"44\":1}}],[\"都会给参数加上类型注解的\",{\"1\":{\"409\":1}}],[\"都会被\",{\"1\":{\"343\":1}}],[\"都会被执行的代码\",{\"1\":{\"338\":1}}],[\"都会被实例继承\",{\"1\":{\"335\":1}}],[\"都会被catch捕获\",{\"1\":{\"325\":1}}],[\"都会创建一个闭包对象\",{\"1\":{\"217\":1}}],[\"都会创建一个函数\",{\"1\":{\"190\":1}}],[\"都先看一下这个对象是不是已经拷贝过了\",{\"1\":{\"234\":1}}],[\"都要2020年了\",{\"1\":{\"226\":1}}],[\"都已销毁\",{\"1\":{\"215\":1}}],[\"都需要对其中的抽象方法全部实现\",{\"1\":{\"8\":1}}],[\"都可以用作逻辑与的运算符\",{\"1\":{\"4\":1}}],[\"不建议\",{\"1\":{\"703\":1}}],[\"不建议使用\",{\"1\":{\"638\":1}}],[\"不需要证书\",{\"1\":{\"699\":1}}],[\"不需要去计算html的font\",{\"1\":{\"655\":1}}],[\"不需要马上执行的则进行预解析\",{\"1\":{\"264\":1}}],[\"不常用\",{\"1\":{\"655\":1}}],[\"不换行\",{\"1\":{\"645\":2}}],[\"不利于修改\",{\"1\":{\"633\":1}}],[\"不利于维护\",{\"1\":{\"633\":1}}],[\"不利于seo\",{\"1\":{\"633\":1}}],[\"不合并单元格边框\",{\"1\":{\"633\":1}}],[\"不发送来源地址\",{\"1\":{\"633\":1}}],[\"不再给父元素汇报宽高数据\",{\"1\":{\"629\":1}}],[\"不再为上层范围引入新变量\",{\"1\":{\"384\":1}}],[\"不脱离标准流\",{\"1\":{\"629\":1}}],[\"不占据空间\",{\"1\":{\"624\":2,\"633\":1}}],[\"不分隔\",{\"1\":{\"623\":1}}],[\"不友好\",{\"1\":{\"583\":1}}],[\"不将value写死\",{\"1\":{\"521\":1}}],[\"不执行元素的编译\",{\"1\":{\"521\":1}}],[\"不带\",{\"1\":{\"503\":1}}],[\"不好的习惯\",{\"1\":{\"464\":1}}],[\"不推荐使用\",{\"0\":{\"669\":1},\"1\":{\"617\":1,\"686\":1}}],[\"不推荐\",{\"1\":{\"443\":1,\"464\":1}}],[\"不使用强缓存\",{\"1\":{\"687\":1}}],[\"不使用变量声明关键字\",{\"1\":{\"384\":1}}],[\"不使用的原因\",{\"1\":{\"382\":1}}],[\"不使用闭包\",{\"1\":{\"218\":2}}],[\"不要将content省略\",{\"1\":{\"623\":1}}],[\"不要用\",{\"0\":{\"381\":1,\"382\":1}}],[\"不要在\",{\"1\":{\"35\":1}}],[\"不指向更上一层\",{\"1\":{\"351\":2}}],[\"不受\",{\"1\":{\"343\":1}}],[\"不等任务执行完\",{\"1\":{\"331\":1}}],[\"不是所有浏览器都支持\",{\"1\":{\"668\":1}}],[\"不是编程\",{\"1\":{\"648\":1}}],[\"不是\",{\"1\":{\"589\":2,\"700\":1}}],[\"不是对象或函数\",{\"1\":{\"309\":1,\"319\":1}}],[\"不是函数\",{\"1\":{\"309\":1,\"319\":1}}],[\"不是则抛出传入值作为错误\",{\"1\":{\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1}}],[\"不是则接收传入值作为输出值\",{\"1\":{\"309\":1,\"316\":1,\"317\":1,\"318\":1,\"319\":1}}],[\"不是标识符\",{\"1\":{\"181\":1}}],[\"不加slot\",{\"1\":{\"495\":1}}],[\"不加\",{\"1\":{\"306\":1}}],[\"不遍历\",{\"1\":{\"300\":1}}],[\"不为空则继续执行微任务\",{\"1\":{\"250\":1,\"251\":1}}],[\"不设置100\",{\"1\":{\"242\":1}}],[\"不包括数组中被删除或从未被赋值的元素\",{\"1\":{\"242\":1}}],[\"不定参数\",{\"1\":{\"240\":1}}],[\"不存在变量提升\",{\"1\":{\"238\":2}}],[\"不引用父函数的变量\",{\"1\":{\"218\":1}}],[\"不被实例继承\",{\"1\":{\"335\":1}}],[\"不被引用就需要使所有子函数都被销毁\",{\"1\":{\"218\":1}}],[\"不被回收的闭包\",{\"1\":{\"215\":1}}],[\"不严谨\",{\"1\":{\"213\":1,\"225\":1}}],[\"不适用场景\",{\"1\":{\"200\":1}}],[\"不一定\",{\"1\":{\"174\":1}}],[\"不一直坐在水壶前面等\",{\"1\":{\"39\":1}}],[\"不会自动过期\",{\"1\":{\"681\":1}}],[\"不会因为设置html的font\",{\"1\":{\"655\":1}}],[\"不会因此去等待行上锁的释放\",{\"1\":{\"169\":1}}],[\"不会触发\",{\"1\":{\"334\":1}}],[\"不会执行失败回调\",{\"1\":{\"321\":1}}],[\"不会出现先前连接的报文\",{\"1\":{\"716\":1}}],[\"不会出现状态的交接\",{\"1\":{\"343\":1}}],[\"不会出现\",{\"1\":{\"309\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":1,\"319\":1}}],[\"不会修改原数组\",{\"1\":{\"287\":1}}],[\"不会影响到所有的子类实例\",{\"1\":{\"280\":1}}],[\"不会随着函数执行结束而被回收\",{\"1\":{\"225\":1}}],[\"不会污染全局\",{\"1\":{\"219\":1,\"225\":1}}],[\"不会被回收\",{\"1\":{\"213\":1,\"225\":1}}],[\"不会有任何结果\",{\"1\":{\"90\":1}}],[\"不可靠的传输层协议\",{\"1\":{\"710\":1}}],[\"不可缓存\",{\"1\":{\"687\":1,\"700\":1}}],[\"不可以设置宽度和高度\",{\"1\":{\"624\":1}}],[\"不可以直接修改friend\",{\"1\":{\"395\":1}}],[\"不可返回\",{\"1\":{\"503\":1}}],[\"不可写\",{\"1\":{\"384\":1}}],[\"不可配置\",{\"1\":{\"384\":1}}],[\"不可修改\",{\"1\":{\"187\":1}}],[\"不可回滚\",{\"1\":{\"168\":2}}],[\"不可重复读\",{\"1\":{\"165\":2}}],[\"不可重复的\",{\"1\":{\"47\":2}}],[\"不允许用户缩放\",{\"1\":{\"674\":1}}],[\"不允许使用with语句\",{\"1\":{\"384\":1}}],[\"不允许使用原先的八进制格式\",{\"1\":{\"384\":1}}],[\"不允许函数有相同的参数名称\",{\"1\":{\"384\":1}}],[\"不允许分割\",{\"1\":{\"163\":1}}],[\"不允许key为空\",{\"1\":{\"46\":1}}],[\"不支持\",{\"1\":{\"696\":3}}],[\"不支持私有属性\",{\"1\":{\"353\":1}}],[\"不支持数据库异常崩溃后的安全恢复\",{\"1\":{\"162\":1}}],[\"不支持外键\",{\"1\":{\"162\":1}}],[\"不支持null存储\",{\"1\":{\"45\":1}}],[\"不提供事务支持\",{\"1\":{\"162\":1}}],[\"不改变数据源\",{\"1\":{\"92\":1}}],[\"不保存数据\",{\"1\":{\"92\":1}}],[\"不保证此方法总被调用\",{\"1\":{\"13\":1}}],[\"不冲突\",{\"1\":{\"53\":1,\"72\":1}}],[\"不同源\",{\"1\":{\"704\":3}}],[\"不同\",{\"1\":{\"493\":1}}],[\"不同则\",{\"1\":{\"50\":1,\"69\":1}}],[\"不同则拉链法解决冲突\",{\"1\":{\"49\":1,\"68\":1}}],[\"不同点\",{\"1\":{\"4\":1,\"8\":1,\"173\":1}}],[\"不安全\",{\"1\":{\"46\":1,\"676\":1,\"699\":1}}],[\"不过在需要时你也可以提供一个\",{\"1\":{\"522\":1}}],[\"不过\",{\"1\":{\"21\":1}}],[\"不能超出包含块\",{\"1\":{\"630\":1}}],[\"不能超出本行高度\",{\"1\":{\"630\":1}}],[\"不能用在标签内\",{\"1\":{\"529\":1}}],[\"不能写驼峰\",{\"1\":{\"487\":1}}],[\"不能这么写\",{\"1\":{\"486\":1}}],[\"不能与\",{\"1\":{\"368\":1}}],[\"不能向父类传参\",{\"1\":{\"282\":1}}],[\"不能继承原型链上的属性和方法\",{\"1\":{\"280\":1}}],[\"不能给父类构造函数传参\",{\"1\":{\"279\":2,\"282\":1}}],[\"不能直接执行源码\",{\"1\":{\"262\":1}}],[\"不能重命名函数参数\",{\"0\":{\"199\":1}}],[\"不能重复\",{\"1\":{\"172\":1}}],[\"不能通过\",{\"1\":{\"197\":1,\"198\":1}}],[\"不能指定\",{\"0\":{\"197\":1}}],[\"不能断开\",{\"1\":{\"91\":1}}],[\"不能修饰类和方法\",{\"1\":{\"38\":1}}],[\"不能\",{\"0\":{\"198\":1},\"1\":{\"28\":1}}],[\"不能被回收的\",{\"1\":{\"215\":1}}],[\"不能被继承\",{\"1\":{\"12\":1}}],[\"不能被实例化\",{\"1\":{\"8\":1}}],[\"不能有构造方法\",{\"1\":{\"8\":1}}],[\"不能创建实例对象\",{\"1\":{\"8\":1}}],[\"因此不安全\",{\"1\":{\"700\":1}}],[\"因此可以借助于\",{\"1\":{\"116\":1}}],[\"因此可以正确编译\",{\"1\":{\"7\":1}}],[\"因此\",{\"1\":{\"113\":1}}],[\"因此forward会将request的信息带到被重定向的jsp或者servlet中使用\",{\"1\":{\"24\":1}}],[\"因此用forward的话\",{\"1\":{\"24\":1}}],[\"因此构造⽅法⽆法被重写\",{\"1\":{\"12\":1}}],[\"因为网络恢复正常\",{\"1\":{\"713\":1}}],[\"因为指定了类型\",{\"1\":{\"706\":1}}],[\"因为不依赖font\",{\"1\":{\"655\":1}}],[\"因为不能隐式转换成\",{\"1\":{\"6\":1}}],[\"因为vuex可以更明确的追踪状态的变化\",{\"1\":{\"546\":1}}],[\"因为mustache\",{\"1\":{\"521\":1}}],[\"因为编译作用域\",{\"1\":{\"495\":1}}],[\"因为浏览器会把\",{\"1\":{\"487\":1}}],[\"因为我们执行的是全局代码\",{\"1\":{\"271\":1}}],[\"因为马力十足而广为人知\",{\"1\":{\"262\":1}}],[\"因为闭包包含外层函数的作用域\",{\"1\":{\"224\":1,\"225\":1}}],[\"因为内层函数引用外层函数作用域的自由变量\",{\"1\":{\"215\":1}}],[\"因为是赋值\",{\"1\":{\"191\":1}}],[\"因为是添加\",{\"1\":{\"191\":1}}],[\"因为要加锁\",{\"1\":{\"166\":1}}],[\"因为它的抽象方法t\",{\"1\":{\"88\":1}}],[\"因为类型擦除后\",{\"1\":{\"28\":1}}],[\"因为\",{\"1\":{\"25\":1,\"27\":1,\"211\":1,\"318\":1,\"331\":1,\"379\":1}}],[\"因为参数直接暴露在url上\",{\"1\":{\"23\":1}}],[\"因为可以隐式转化为int类型\",{\"1\":{\"6\":1}}],[\"语义化好处\",{\"0\":{\"658\":1}}],[\"语义化标签\",{\"0\":{\"657\":1}}],[\"语言伪类\",{\"1\":{\"623\":1}}],[\"语言规定的运算符\",{\"1\":{\"7\":1}}],[\"语法不能作用在\",{\"1\":{\"521\":1}}],[\"语法\",{\"0\":{\"133\":1},\"1\":{\"118\":1,\"331\":1,\"334\":1}}],[\"语法进行了扩展\",{\"1\":{\"117\":1}}],[\"语法扩展\",{\"1\":{\"116\":1}}],[\"语句\",{\"0\":{\"381\":1},\"1\":{\"287\":1}}],[\"语句不会被执行\",{\"1\":{\"35\":1}}],[\"语句中都有\",{\"1\":{\"35\":1}}],[\"语句和\",{\"1\":{\"35\":1}}],[\"语句块中的\",{\"1\":{\"35\":1}}],[\"语句块中使用\",{\"1\":{\"35\":1}}],[\"语句块将在方法返回之前被执行\",{\"1\":{\"35\":1}}],[\"语句时\",{\"1\":{\"35\":2}}],[\"语句能否作用在\",{\"0\":{\"6\":1}}],[\"+footer>p\",{\"1\":{\"632\":1}}],[\"+绝对定位元素的高度\",{\"1\":{\"629\":1}}],[\"+绝对定位元素的宽度\",{\"1\":{\"629\":1}}],[\"+v\",{\"1\":{\"521\":1}}],[\"++\",{\"1\":{\"262\":1}}],[\"+b\",{\"1\":{\"242\":1}}],[\"+a\",{\"1\":{\"242\":1}}],[\"+name\",{\"1\":{\"240\":1}}],[\"+statistics\",{\"1\":{\"91\":4}}],[\"+红黑树\",{\"1\":{\"50\":1,\"69\":1}}],[\"+=\",{\"0\":{\"7\":1},\"1\":{\"7\":1,\"434\":1,\"552\":1,\"553\":1,\"555\":1}}],[\"+\",{\"0\":{\"7\":1,\"191\":1},\"1\":{\"7\":1,\"45\":1,\"46\":1,\"49\":1,\"50\":1,\"57\":2,\"68\":1,\"69\":1,\"84\":1,\"87\":2,\"90\":1,\"91\":1,\"187\":3,\"212\":2,\"223\":6,\"234\":2,\"239\":1,\"240\":9,\"241\":8,\"242\":1,\"243\":3,\"244\":3,\"285\":1,\"288\":2,\"290\":8,\"292\":2,\"293\":2,\"303\":3,\"304\":3,\"307\":1,\"331\":1,\"362\":1,\"390\":1,\"404\":2,\"408\":1,\"431\":2,\"434\":1,\"435\":1,\"436\":1,\"437\":2,\"450\":1,\"509\":2,\"521\":2,\"536\":1,\"539\":13,\"556\":3,\"607\":3,\"611\":2,\"615\":3,\"629\":6,\"632\":1,\"633\":1,\"635\":2,\"636\":2,\"674\":1,\"697\":1,\"698\":2,\"704\":7,\"712\":3,\"713\":2}}],[\"=val\",{\"1\":{\"623\":1}}],[\"=2\",{\"1\":{\"532\":1}}],[\"=src\",{\"1\":{\"478\":1}}],[\"=>\",{\"1\":{\"135\":1,\"194\":1,\"195\":3,\"196\":1,\"199\":1,\"202\":1,\"203\":3,\"204\":1,\"205\":1,\"206\":3,\"218\":4,\"222\":2,\"223\":8,\"228\":3,\"234\":1,\"240\":5,\"241\":2,\"242\":2,\"243\":9,\"251\":4,\"252\":1,\"253\":10,\"256\":7,\"290\":6,\"292\":2,\"293\":11,\"299\":1,\"301\":2,\"306\":2,\"307\":12,\"309\":17,\"312\":4,\"313\":3,\"314\":3,\"316\":7,\"317\":10,\"318\":18,\"319\":17,\"320\":1,\"321\":4,\"322\":10,\"323\":4,\"324\":2,\"325\":11,\"326\":11,\"327\":8,\"328\":12,\"332\":10,\"333\":6,\"336\":18,\"337\":14,\"338\":4,\"340\":1,\"341\":9,\"342\":1,\"343\":3,\"344\":8,\"345\":8,\"346\":6,\"347\":16,\"348\":7,\"349\":9,\"351\":1,\"364\":2,\"376\":2,\"377\":2,\"378\":1,\"381\":1,\"385\":2,\"392\":1,\"407\":4,\"424\":2,\"431\":4,\"450\":2,\"451\":2,\"452\":2,\"453\":2,\"473\":5,\"474\":1,\"475\":1,\"480\":1,\"481\":4,\"499\":1,\"513\":2,\"545\":1,\"549\":5,\"555\":4,\"556\":2}}],[\"=e\",{\"1\":{\"87\":1}}],[\"==>\",{\"1\":{\"533\":3,\"537\":4}}],[\"=========updated=============\",{\"1\":{\"539\":1}}],[\"=========mounted=============\",{\"1\":{\"539\":1}}],[\"=========beforeupdate=============\",{\"1\":{\"539\":1}}],[\"=========beforemount=============\",{\"1\":{\"539\":1}}],[\"=========beforecreate=============\",{\"1\":{\"539\":1}}],[\"=========created=============\",{\"1\":{\"539\":1}}],[\"====================\",{\"1\":{\"87\":2}}],[\"===\",{\"1\":{\"234\":14,\"235\":1,\"279\":1,\"301\":1,\"309\":12,\"313\":2,\"314\":2,\"316\":6,\"317\":4,\"318\":7,\"319\":12,\"325\":3,\"326\":3,\"328\":2,\"332\":4,\"351\":26,\"354\":2,\"355\":1,\"357\":6,\"412\":1,\"424\":3,\"437\":2,\"474\":1,\"475\":1,\"480\":1}}],[\"==对于基本类型和引用类型的作用效果是不同的\",{\"1\":{\"10\":1}}],[\"==\",{\"0\":{\"10\":1},\"1\":{\"10\":3,\"35\":1,\"234\":1,\"309\":1,\"319\":1,\"424\":2,\"474\":1,\"475\":1,\"480\":1,\"533\":3,\"537\":3}}],[\"=\",{\"0\":{\"7\":3,\"20\":1},\"1\":{\"7\":3,\"18\":6,\"22\":8,\"78\":2,\"82\":5,\"83\":1,\"84\":1,\"85\":2,\"87\":9,\"90\":3,\"91\":13,\"93\":5,\"95\":12,\"96\":6,\"119\":1,\"133\":1,\"174\":1,\"180\":4,\"181\":4,\"182\":1,\"183\":2,\"184\":9,\"185\":3,\"186\":3,\"187\":8,\"189\":6,\"190\":6,\"191\":10,\"192\":3,\"194\":1,\"195\":8,\"196\":1,\"199\":1,\"202\":2,\"205\":6,\"206\":9,\"211\":3,\"212\":7,\"214\":1,\"215\":2,\"217\":13,\"218\":17,\"221\":2,\"222\":3,\"223\":6,\"224\":2,\"228\":18,\"230\":9,\"231\":6,\"233\":5,\"234\":6,\"235\":3,\"238\":10,\"239\":16,\"240\":14,\"241\":17,\"242\":4,\"243\":1,\"244\":3,\"273\":2,\"274\":2,\"279\":10,\"280\":9,\"281\":10,\"282\":7,\"283\":7,\"284\":13,\"285\":6,\"288\":4,\"290\":2,\"291\":3,\"292\":3,\"293\":9,\"298\":3,\"299\":5,\"300\":4,\"301\":4,\"302\":3,\"303\":7,\"304\":4,\"305\":1,\"306\":9,\"307\":10,\"309\":25,\"312\":13,\"313\":12,\"314\":12,\"316\":13,\"317\":2,\"318\":15,\"319\":25,\"320\":6,\"323\":1,\"325\":8,\"326\":7,\"327\":2,\"328\":5,\"332\":8,\"336\":4,\"337\":4,\"338\":1,\"340\":2,\"341\":2,\"342\":2,\"343\":1,\"344\":3,\"345\":3,\"346\":2,\"347\":6,\"348\":7,\"350\":1,\"351\":6,\"352\":3,\"354\":3,\"355\":2,\"358\":1,\"360\":6,\"361\":6,\"362\":2,\"363\":9,\"364\":9,\"366\":1,\"367\":2,\"368\":2,\"371\":4,\"373\":6,\"375\":4,\"376\":3,\"377\":8,\"378\":5,\"379\":7,\"381\":3,\"382\":2,\"384\":11,\"385\":2,\"390\":3,\"391\":11,\"392\":1,\"393\":3,\"394\":2,\"395\":6,\"396\":4,\"397\":5,\"398\":5,\"399\":3,\"402\":5,\"403\":6,\"405\":1,\"406\":6,\"407\":14,\"409\":1,\"414\":2,\"415\":5,\"417\":2,\"419\":3,\"420\":3,\"422\":8,\"423\":6,\"424\":7,\"427\":1,\"428\":2,\"431\":5,\"433\":1,\"434\":1,\"435\":1,\"436\":2,\"437\":2,\"442\":3,\"443\":8,\"445\":1,\"448\":4,\"449\":2,\"450\":2,\"451\":1,\"452\":7,\"454\":4,\"455\":4,\"456\":2,\"457\":8,\"460\":6,\"461\":7,\"462\":2,\"463\":6,\"464\":2,\"465\":1,\"466\":2,\"467\":3,\"473\":6,\"481\":6,\"484\":4,\"485\":1,\"487\":4,\"493\":1,\"494\":1,\"505\":3,\"506\":1,\"507\":3,\"511\":1,\"513\":1,\"521\":7,\"525\":1,\"528\":1,\"530\":1,\"531\":1,\"533\":1,\"534\":2,\"535\":4,\"536\":3,\"537\":1,\"538\":1,\"539\":1,\"543\":1,\"545\":1,\"546\":1,\"549\":1,\"552\":1,\"556\":4,\"594\":1,\"629\":2,\"635\":3,\"636\":1,\"655\":1,\"660\":2,\"666\":1,\"674\":1,\"697\":1,\"704\":2,\"712\":5}}],[\"中引入了\",{\"1\":{\"663\":1}}],[\"中已经被删除或重新定义\",{\"1\":{\"656\":1}}],[\"中划线\",{\"1\":{\"621\":1}}],[\"中声明\",{\"1\":{\"521\":1}}],[\"中断当前导航\",{\"1\":{\"513\":1}}],[\"中间状态\",{\"1\":{\"631\":1}}],[\"中间变量指向这个函数\",{\"1\":{\"362\":1}}],[\"中间操作\",{\"1\":{\"90\":1}}],[\"中数组也是对象\",{\"1\":{\"361\":1}}],[\"中同步代码\",{\"1\":{\"323\":2}}],[\"中抛出异常相当于执行\",{\"1\":{\"314\":1}}],[\"中可以放入\",{\"1\":{\"239\":1}}],[\"中无\",{\"1\":{\"217\":1}}],[\"中调用全局变量\",{\"1\":{\"195\":1,\"364\":1}}],[\"中将箭头函数赋值给\",{\"1\":{\"195\":1,\"364\":1}}],[\"中设置页面信息\",{\"1\":{\"144\":1}}],[\"中使用模板时\",{\"1\":{\"487\":1}}],[\"中使用箭头函数\",{\"1\":{\"195\":1,\"309\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":1,\"319\":1}}],[\"中使用\",{\"1\":{\"119\":1}}],[\"中很重要的一个概念\",{\"1\":{\"115\":1}}],[\"中保存已经登录过得用户信息\",{\"1\":{\"25\":1}}],[\"中的几个已经被废弃\",{\"1\":{\"656\":1}}],[\"中的几种基本数据类型\",{\"0\":{\"15\":1}}],[\"中的拒绝或异常\",{\"1\":{\"337\":2}}],[\"中的\",{\"1\":{\"32\":1,\"117\":1,\"260\":1}}],[\"中的对象是不可变的\",{\"1\":{\"14\":1}}],[\"中\",{\"0\":{\"37\":1},\"1\":{\"6\":1,\"25\":1,\"179\":1,\"205\":2,\"209\":1,\"239\":1,\"252\":2,\"307\":1,\"363\":1,\"677\":1,\"700\":1}}],[\"能否作用在\",{\"0\":{\"6\":1}}],[\"上展示\",{\"1\":{\"663\":1}}],[\"上的介绍\",{\"1\":{\"643\":1}}],[\"上划线\",{\"1\":{\"621\":1}}],[\"上下文let\",{\"1\":{\"660\":1}}],[\"上下文中的函数\",{\"1\":{\"409\":1}}],[\"上下角标\",{\"0\":{\"121\":1}}],[\"上层作用域中是\",{\"1\":{\"377\":1}}],[\"上层作用域是全局\",{\"1\":{\"376\":1}}],[\"上面两句等价于下面一句\",{\"1\":{\"362\":1}}],[\"上一个函数的输出是下一个函数的输入\",{\"1\":{\"333\":1}}],[\"上一个请求接口返回的数据作为下一个请求的参数\",{\"1\":{\"307\":1}}],[\"上一段代码的返回值的\",{\"1\":{\"303\":1}}],[\"上一步的结果\",{\"1\":{\"243\":1}}],[\"上一次处理后\",{\"1\":{\"242\":1}}],[\"上一次调用回调返回的值\",{\"1\":{\"242\":1}}],[\"上一篇\",{\"1\":{\"107\":1}}],[\"上\",{\"0\":{\"6\":1},\"1\":{\"195\":1,\"373\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"493\":1}}],[\"smallfontsize\",{\"1\":{\"652\":1,\"653\":1}}],[\"small\",{\"1\":{\"622\":1}}],[\"skew3d\",{\"1\":{\"631\":1}}],[\"skew\",{\"1\":{\"631\":1}}],[\"skyblue\",{\"1\":{\"593\":1,\"654\":1}}],[\"skip\",{\"1\":{\"90\":1}}],[\"slot可以用在<template>上也可以用在普通元素上\",{\"1\":{\"493\":1}}],[\"slot只能添加在<template>\",{\"1\":{\"493\":1}}],[\"slot\",{\"1\":{\"493\":3,\"495\":3}}],[\"slot插槽\",{\"0\":{\"491\":1}}],[\"slot=\",{\"1\":{\"472\":8,\"473\":8,\"474\":12,\"475\":12,\"478\":12,\"493\":1}}],[\"slot><\",{\"1\":{\"474\":3,\"475\":3,\"480\":3}}],[\"slot>\",{\"1\":{\"472\":3,\"473\":2,\"479\":1,\"492\":2,\"493\":3,\"495\":1}}],[\"slice\",{\"1\":{\"231\":2,\"287\":1}}],[\"swmming\",{\"1\":{\"453\":1}}],[\"swift\",{\"1\":{\"495\":1}}],[\"swimable\",{\"1\":{\"453\":2}}],[\"swimaction\",{\"1\":{\"453\":4}}],[\"swimming\",{\"1\":{\"392\":1,\"424\":5,\"451\":2,\"452\":2,\"453\":6}}],[\"switch判断\",{\"1\":{\"424\":1}}],[\"switch语句能作用在\",{\"1\":{\"6\":2}}],[\"switch\",{\"0\":{\"6\":1},\"1\":{\"6\":1,\"405\":1,\"424\":2,\"456\":1,\"457\":1}}],[\"sno\",{\"1\":{\"391\":6}}],[\"spacing\",{\"1\":{\"670\":1}}],[\"space\",{\"1\":{\"633\":1,\"654\":1}}],[\"spa\",{\"0\":{\"582\":1},\"1\":{\"582\":4}}],[\"span><\",{\"1\":{\"493\":5}}],[\"span>\",{\"1\":{\"492\":1,\"495\":1,\"529\":2,\"530\":1,\"533\":1,\"535\":1,\"539\":1,\"599\":1,\"611\":1}}],[\"span>强大\",{\"1\":{\"135\":1}}],[\"span\",{\"1\":{\"135\":1,\"633\":1}}],[\"special=\",{\"1\":{\"521\":1}}],[\"split\",{\"1\":{\"402\":1,\"409\":1}}],[\"splice\",{\"1\":{\"287\":1,\"525\":2}}],[\"spidermonkey\",{\"1\":{\"260\":1}}],[\"save\",{\"1\":{\"504\":1}}],[\"sayhello\",{\"1\":{\"415\":2}}],[\"sayhi\",{\"1\":{\"352\":3}}],[\"sayname\",{\"1\":{\"189\":3,\"190\":4,\"191\":6,\"375\":7}}],[\"safari\",{\"1\":{\"258\":1,\"663\":1}}],[\"sx\",{\"1\":{\"234\":1}}],[\"solid\",{\"1\":{\"532\":2,\"594\":1,\"598\":1,\"599\":1,\"611\":1,\"617\":1,\"642\":1,\"654\":1}}],[\"something\",{\"1\":{\"521\":1}}],[\"someprop\",{\"1\":{\"521\":1}}],[\"someone\",{\"1\":{\"241\":3}}],[\"socket\",{\"1\":{\"254\":1,\"697\":1}}],[\"source2\",{\"1\":{\"241\":3}}],[\"source1\",{\"1\":{\"241\":3}}],[\"source\",{\"1\":{\"230\":2,\"659\":3}}],[\"son\",{\"1\":{\"218\":11}}],[\"son2\",{\"1\":{\"217\":4,\"218\":4}}],[\"son1\",{\"1\":{\"217\":5,\"218\":2}}],[\"sorted\",{\"1\":{\"90\":2,\"91\":2}}],[\"sort\",{\"1\":{\"82\":3,\"525\":1}}],[\"screen\",{\"1\":{\"633\":6,\"655\":2}}],[\"scroll\",{\"1\":{\"625\":1,\"627\":1}}],[\"script标签\",{\"1\":{\"485\":1}}],[\"scripts\",{\"1\":{\"320\":2}}],[\"script主线程代码首先执行\",{\"1\":{\"250\":1}}],[\"script>\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":2,\"470\":1,\"471\":2,\"472\":3,\"473\":2,\"474\":2,\"475\":2,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"485\":1,\"494\":2,\"528\":2,\"529\":2,\"530\":2,\"531\":2,\"532\":2,\"533\":2,\"534\":2,\"535\":2,\"536\":2,\"537\":2,\"538\":2,\"539\":2,\"546\":1,\"650\":1,\"663\":1,\"706\":2}}],[\"script\",{\"0\":{\"581\":1},\"1\":{\"205\":2,\"211\":3,\"217\":5,\"218\":2,\"249\":1,\"252\":2,\"259\":2,\"485\":1,\"706\":3}}],[\"scalable=no\",{\"1\":{\"674\":1}}],[\"scale3d\",{\"1\":{\"631\":1}}],[\"scale\",{\"1\":{\"631\":1,\"633\":1}}],[\"scale=1\",{\"1\":{\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"663\":3,\"674\":3,\"706\":1}}],[\"scanner\",{\"1\":{\"264\":2}}],[\"score\",{\"1\":{\"243\":3}}],[\"scope=\",{\"1\":{\"495\":1}}],[\"scope的话\",{\"1\":{\"495\":1}}],[\"scoped>\",{\"1\":{\"471\":1,\"472\":2,\"474\":1,\"475\":1,\"479\":1,\"480\":1}}],[\"scopes\",{\"1\":{\"217\":4,\"218\":1}}],[\"scopres\",{\"1\":{\"217\":1}}],[\"s=400\",{\"1\":{\"206\":1,\"348\":1}}],[\"src单向绑定\",{\"1\":{\"521\":1}}],[\"src→\",{\"1\":{\"521\":1}}],[\"src=\",{\"1\":{\"243\":1,\"470\":4,\"471\":4,\"472\":5,\"473\":4,\"474\":8,\"475\":8,\"478\":8,\"494\":1,\"521\":3,\"528\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"594\":1,\"650\":1,\"659\":2,\"663\":1,\"706\":1}}],[\"src\",{\"1\":{\"206\":4,\"348\":4,\"415\":1,\"622\":1,\"663\":1,\"669\":1,\"671\":1,\"706\":1}}],[\"sql\",{\"1\":{\"175\":1}}],[\"sheets\",{\"1\":{\"648\":1}}],[\"shrink\",{\"1\":{\"646\":2}}],[\"shznum\",{\"1\":{\"536\":3}}],[\"shzprice\",{\"1\":{\"536\":3}}],[\"shift+command+r\",{\"1\":{\"691\":1}}],[\"shift\",{\"1\":{\"525\":1}}],[\"show显示\",{\"1\":{\"534\":1}}],[\"show只是给我们的元素添加一个行内样式\",{\"1\":{\"523\":1}}],[\"show\",{\"0\":{\"534\":1},\"1\":{\"523\":1,\"534\":6,\"539\":3}}],[\"show区别\",{\"0\":{\"523\":1}}],[\"show=\",{\"1\":{\"494\":2,\"534\":1}}],[\"showrefscpn\",{\"1\":{\"488\":1}}],[\"shopcart\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"473\":1,\"474\":2,\"475\":2,\"478\":2}}],[\"short\",{\"0\":{\"7\":2},\"1\":{\"5\":1,\"6\":1,\"7\":2,\"15\":3,\"17\":1}}],[\"sharing\",{\"1\":{\"707\":1}}],[\"shareobj即所有的组件都可访问该变量\",{\"1\":{\"543\":1}}],[\"shareobj\",{\"1\":{\"543\":1}}],[\"shareobj=shareobj即所有的组件都可访问该变量\",{\"1\":{\"489\":1}}],[\"share\",{\"1\":{\"169\":1}}],[\"shadow\",{\"1\":{\"470\":1,\"471\":1,\"472\":1,\"479\":1}}],[\"shape\",{\"1\":{\"398\":7}}],[\"svg>\",{\"1\":{\"521\":1}}],[\"svg\",{\"1\":{\"128\":1,\"470\":4,\"471\":4,\"472\":5,\"473\":4,\"474\":8,\"475\":8,\"478\":8}}],[\"sdfdt\",{\"1\":{\"95\":2}}],[\"sdft\",{\"1\":{\"95\":2}}],[\"sdf\",{\"1\":{\"95\":2,\"96\":2}}],[\"ssl\",{\"1\":{\"697\":2,\"701\":1}}],[\"ssr\",{\"0\":{\"582\":1,\"583\":1},\"1\":{\"582\":2,\"583\":2}}],[\"ss\",{\"1\":{\"95\":8,\"239\":2}}],[\"since高\",{\"1\":{\"690\":1}}],[\"since\",{\"1\":{\"689\":2,\"690\":1}}],[\"single\",{\"1\":{\"582\":1}}],[\"sizing\",{\"1\":{\"600\":1,\"635\":1}}],[\"size尺寸被篡改\",{\"1\":{\"655\":1}}],[\"size的尺寸\",{\"1\":{\"655\":1}}],[\"size后面\",{\"1\":{\"622\":1}}],[\"size和line\",{\"1\":{\"622\":1}}],[\"size和font\",{\"1\":{\"622\":1}}],[\"size\",{\"1\":{\"22\":1,\"472\":1,\"474\":1,\"475\":1,\"480\":1,\"521\":1,\"530\":2,\"622\":2,\"627\":1,\"633\":4,\"652\":1,\"653\":2,\"654\":3,\"655\":8}}],[\"side\",{\"1\":{\"582\":2}}],[\"site\",{\"1\":{\"128\":2}}],[\"simpledateformat\",{\"1\":{\"95\":6,\"96\":2}}],[\"simpledateformat类\",{\"1\":{\"94\":1}}],[\"successcallback\",{\"1\":{\"332\":2}}],[\"success\",{\"1\":{\"243\":7}}],[\"submit的按钮input或button\",{\"1\":{\"674\":1}}],[\"submit\",{\"1\":{\"628\":1,\"672\":2,\"673\":1}}],[\"subtraction\",{\"1\":{\"546\":2}}],[\"sub\",{\"1\":{\"212\":2}}],[\"sum<any\",{\"1\":{\"440\":1}}],[\"sum<\",{\"1\":{\"440\":1}}],[\"sum<number>\",{\"1\":{\"440\":1}}],[\"sum<type>\",{\"1\":{\"440\":1}}],[\"sum4\",{\"1\":{\"290\":2}}],[\"sum3\",{\"1\":{\"223\":2,\"240\":2,\"290\":2}}],[\"sum2\",{\"1\":{\"223\":2,\"240\":2,\"290\":2,\"404\":1}}],[\"sum1\",{\"1\":{\"223\":2,\"290\":2,\"404\":3}}],[\"summarystatistics\",{\"1\":{\"91\":1}}],[\"sum\",{\"1\":{\"90\":3,\"240\":1,\"244\":3,\"288\":1,\"292\":2,\"408\":2,\"434\":5,\"440\":2}}],[\"super调用父类的构造器\",{\"1\":{\"391\":1}}],[\"super\",{\"1\":{\"194\":1,\"285\":2,\"352\":1,\"391\":2,\"398\":2}}],[\"sup\",{\"1\":{\"87\":2}}],[\"supplier\",{\"1\":{\"93\":1}}],[\"supplier<integer>\",{\"1\":{\"87\":1}}],[\"supplier<t>\",{\"1\":{\"87\":2}}],[\"supplier提供0\",{\"1\":{\"87\":1}}],[\"syn\",{\"1\":{\"710\":2,\"711\":2,\"712\":4,\"713\":5}}],[\"syntax\",{\"1\":{\"262\":1,\"264\":1}}],[\"synchronized\",{\"0\":{\"56\":1},\"1\":{\"46\":1,\"53\":2,\"57\":1,\"72\":2}}],[\"synchronized同一把锁\",{\"1\":{\"46\":1}}],[\"symbol类型\",{\"0\":{\"467\":1}}],[\"symbol\",{\"1\":{\"179\":1,\"196\":2,\"233\":2,\"234\":1,\"296\":1,\"299\":5,\"301\":1,\"306\":2,\"467\":2}}],[\"system\",{\"1\":{\"35\":1,\"78\":4,\"81\":2,\"82\":1,\"84\":2,\"85\":3,\"87\":8,\"91\":8,\"93\":3,\"95\":6}}],[\"seq\",{\"1\":{\"711\":1,\"712\":2}}],[\"send\",{\"1\":{\"706\":1}}],[\"secure\",{\"1\":{\"697\":1}}],[\"security\",{\"1\":{\"697\":1}}],[\"separate\",{\"1\":{\"633\":1}}],[\"search\",{\"1\":{\"582\":1,\"628\":1,\"673\":1}}],[\"seal\",{\"1\":{\"187\":1}}],[\"seo\",{\"1\":{\"582\":1,\"583\":2,\"658\":1}}],[\"sex\",{\"1\":{\"521\":4,\"628\":2}}],[\"service\",{\"1\":{\"710\":1}}],[\"server\",{\"1\":{\"262\":1,\"582\":1,\"707\":1}}],[\"serializable\",{\"1\":{\"14\":1,\"166\":1}}],[\"self属性\",{\"1\":{\"646\":1}}],[\"self\",{\"1\":{\"233\":1,\"234\":3,\"646\":1,\"667\":1}}],[\"select>\",{\"1\":{\"521\":2}}],[\"select\",{\"1\":{\"169\":2,\"174\":1,\"674\":1}}],[\"segmentfault\",{\"1\":{\"172\":1}}],[\"segment数组\",{\"1\":{\"57\":1}}],[\"segment\",{\"1\":{\"52\":8,\"53\":1,\"71\":8,\"72\":1,\"716\":1}}],[\"setcounter\",{\"1\":{\"407\":8}}],[\"setname\",{\"1\":{\"393\":2}}],[\"setprototypeof\",{\"1\":{\"282\":2}}],[\"setimmediate\",{\"1\":{\"249\":1,\"254\":2,\"255\":1,\"256\":1}}],[\"setinterval等\",{\"1\":{\"270\":1}}],[\"setinterval\",{\"1\":{\"249\":1,\"254\":2,\"255\":1}}],[\"settitle\",{\"1\":{\"407\":2}}],[\"settimeout2\",{\"1\":{\"253\":2}}],[\"settimeout1\",{\"1\":{\"253\":2}}],[\"settimeout\",{\"1\":{\"195\":4,\"203\":1,\"218\":8,\"223\":1,\"249\":1,\"251\":2,\"252\":2,\"253\":3,\"254\":2,\"255\":1,\"256\":2,\"270\":1,\"307\":1,\"318\":3,\"322\":1,\"325\":1,\"326\":3,\"327\":2,\"328\":3,\"332\":4,\"333\":3,\"336\":1,\"344\":3,\"345\":3,\"346\":2,\"347\":6,\"364\":2,\"371\":2,\"385\":7,\"555\":2}}],[\"settled\",{\"1\":{\"345\":1}}],[\"setter方法\",{\"0\":{\"396\":1}}],[\"setter\",{\"1\":{\"182\":1,\"184\":2,\"218\":2,\"222\":1,\"396\":1,\"522\":1}}],[\"set\",{\"0\":{\"44\":1,\"47\":1},\"1\":{\"47\":1,\"58\":1,\"182\":4,\"184\":4,\"185\":1,\"186\":3,\"218\":2,\"222\":2,\"234\":1,\"299\":2,\"396\":1,\"525\":1,\"676\":1}}],[\"sessionid\",{\"1\":{\"677\":6}}],[\"sessionstorage\",{\"0\":{\"675\":1,\"680\":1,\"681\":1},\"1\":{\"680\":2,\"681\":1}}],[\"session会增加服务端的内存压力\",{\"1\":{\"25\":1}}],[\"session是存放在服务器上的\",{\"1\":{\"25\":1}}],[\"session\",{\"0\":{\"675\":1,\"677\":1,\"678\":1},\"1\":{\"25\":2,\"675\":1,\"677\":1,\"678\":2}}],[\"s\",{\"0\":{\"20\":1},\"1\":{\"81\":1,\"85\":4,\"87\":8,\"91\":4,\"93\":1,\"95\":6,\"169\":2,\"549\":8}}],[\"store\",{\"1\":{\"545\":6,\"546\":3,\"549\":2,\"551\":1,\"552\":2,\"553\":1,\"555\":2,\"556\":1,\"687\":1}}],[\"stop=\",{\"1\":{\"532\":2}}],[\"stop\",{\"1\":{\"521\":1}}],[\"studying\",{\"1\":{\"391\":4,\"415\":2,\"424\":2}}],[\"student\",{\"1\":{\"350\":4,\"352\":4,\"358\":3,\"391\":5,\"394\":2,\"397\":3,\"415\":3,\"424\":4}}],[\"students\",{\"1\":{\"301\":6,\"306\":7,\"549\":5,\"552\":1}}],[\"stu1\",{\"1\":{\"350\":4,\"352\":3,\"358\":4}}],[\"stu\",{\"1\":{\"301\":3,\"306\":2,\"391\":11,\"394\":2,\"415\":2,\"424\":2,\"552\":4}}],[\"stylesheet\",{\"1\":{\"633\":1,\"650\":1}}],[\"styleobjectb\",{\"1\":{\"521\":1}}],[\"styleobjecta\",{\"1\":{\"521\":1}}],[\"style=\",{\"1\":{\"475\":1,\"480\":1,\"521\":2,\"530\":1,\"532\":2,\"598\":2,\"599\":2,\"611\":2,\"638\":1}}],[\"style>\",{\"1\":{\"470\":1,\"471\":2,\"472\":3,\"473\":1,\"474\":2,\"475\":2,\"477\":1,\"479\":1,\"480\":1,\"638\":1,\"663\":1}}],[\"style\",{\"1\":{\"259\":2,\"521\":1,\"530\":1,\"622\":3,\"642\":1,\"648\":1,\"650\":2,\"674\":1}}],[\"sticky\",{\"1\":{\"142\":1,\"629\":1}}],[\"stretch\",{\"1\":{\"645\":2}}],[\"stream操作是延迟执行的\",{\"1\":{\"92\":1}}],[\"stream<string>\",{\"1\":{\"91\":4}}],[\"stream静态方法of\",{\"1\":{\"90\":1}}],[\"stream三个操作步骤\",{\"0\":{\"90\":1}}],[\"stream\",{\"0\":{\"89\":1},\"1\":{\"90\":7,\"91\":20,\"92\":3,\"264\":1}}],[\"strict\",{\"1\":{\"384\":2,\"385\":1}}],[\"string类型\",{\"0\":{\"463\":1}}],[\"string类型断言为字面量类型\",{\"1\":{\"423\":1}}],[\"string和string的区别\",{\"1\":{\"460\":1}}],[\"string|null\",{\"1\":{\"420\":1}}],[\"string处理方式处理message\",{\"1\":{\"405\":1}}],[\"stringify\",{\"1\":{\"233\":3}}],[\"stringconsumer\",{\"1\":{\"87\":2}}],[\"string>func2\",{\"1\":{\"87\":1}}],[\"string>\",{\"1\":{\"85\":1,\"87\":1}}],[\"strings2\",{\"1\":{\"91\":2}}],[\"stringstream\",{\"1\":{\"91\":2}}],[\"strings\",{\"1\":{\"82\":4,\"85\":4,\"91\":10}}],[\"stringbuffe\",{\"1\":{\"14\":1}}],[\"stringbuffer对方法加了同步锁或者对调用的方法加了同步锁\",{\"1\":{\"14\":1}}],[\"stringbuffer都继承自\",{\"1\":{\"14\":1}}],[\"stringbuffer和stringbuilder\",{\"0\":{\"14\":1}}],[\"stringbuilde\",{\"1\":{\"14\":1}}],[\"stringbuilder并没有对方法进行加同步锁\",{\"1\":{\"14\":1}}],[\"stringbuilder与\",{\"1\":{\"14\":1}}],[\"stringbuilder\",{\"1\":{\"14\":1}}],[\"string\",{\"0\":{\"14\":2,\"20\":3},\"1\":{\"14\":3,\"20\":1,\"22\":4,\"35\":1,\"85\":1,\"87\":4,\"91\":7,\"95\":10,\"179\":1,\"234\":3,\"270\":1,\"296\":1,\"299\":1,\"362\":1,\"366\":1,\"369\":1,\"372\":1,\"390\":2,\"391\":5,\"393\":1,\"394\":1,\"395\":2,\"396\":2,\"397\":2,\"399\":1,\"403\":1,\"405\":2,\"406\":1,\"409\":1,\"412\":1,\"413\":2,\"414\":1,\"416\":2,\"417\":3,\"423\":2,\"424\":3,\"427\":2,\"436\":2,\"437\":5,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"448\":3,\"449\":2,\"452\":2,\"454\":2,\"455\":1,\"457\":1,\"460\":4,\"463\":2,\"464\":2,\"473\":1,\"474\":1,\"475\":2,\"480\":2,\"487\":2}}],[\"string上\",{\"1\":{\"6\":1}}],[\"structuredclone\",{\"0\":{\"235\":1},\"1\":{\"235\":1,\"236\":1}}],[\"structure\",{\"1\":{\"233\":1}}],[\"str\",{\"1\":{\"87\":5,\"239\":5,\"382\":2,\"384\":2}}],[\"strlist\",{\"1\":{\"87\":4}}],[\"state单一状态树\",{\"0\":{\"548\":1}}],[\"state\",{\"1\":{\"407\":4,\"545\":1,\"546\":7,\"549\":9,\"551\":1,\"552\":4,\"553\":2,\"555\":2,\"556\":8,\"631\":2}}],[\"status\",{\"1\":{\"326\":5,\"337\":3,\"345\":3}}],[\"statistics\",{\"1\":{\"91\":1}}],[\"static\",{\"1\":{\"8\":1,\"12\":2,\"35\":2,\"38\":1,\"84\":2,\"309\":3,\"312\":3,\"313\":3,\"314\":3,\"316\":3,\"318\":3,\"319\":3,\"323\":1,\"324\":1,\"325\":2,\"326\":1,\"327\":1,\"328\":1,\"335\":1,\"363\":3,\"397\":2,\"629\":1}}],[\"stack\",{\"1\":{\"271\":1}}],[\"star\",{\"1\":{\"142\":1}}],[\"startswith\",{\"1\":{\"239\":1}}],[\"start\",{\"1\":{\"81\":2,\"205\":6,\"252\":2,\"306\":2,\"645\":1}}],[\"s1时\",{\"1\":{\"7\":1}}],[\"s1+1运算时会自动提升表达式的类型\",{\"1\":{\"7\":1}}],[\"s1\",{\"0\":{\"7\":5},\"1\":{\"7\":5}}],[\"整型\",{\"1\":{\"357\":1}}],[\"整个\",{\"1\":{\"253\":1}}],[\"整个运算结果才为\",{\"1\":{\"4\":1}}],[\"整数表达式可以是\",{\"1\":{\"6\":1}}],[\"整数和浮点数的存储规则不一样\",{\"1\":{\"5\":1}}],[\">提交<\",{\"1\":{\"672\":1}}],[\">日期<\",{\"1\":{\"657\":1}}],[\">480\",{\"1\":{\"633\":1}}],[\">4<\",{\"1\":{\"633\":1}}],[\">3<\",{\"1\":{\"633\":1}}],[\">2<\",{\"1\":{\"633\":1}}],[\">1<\",{\"1\":{\"633\":1}}],[\">多行文字<br>多行文字<br>多行文字<br>多行<\",{\"1\":{\"611\":1}}],[\">文字<\",{\"1\":{\"598\":1,\"599\":1}}],[\">赞\",{\"1\":{\"539\":1}}],[\">我被点击了\",{\"1\":{\"538\":3}}],[\">我的<\",{\"1\":{\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"478\":1}}],[\">show=看到我<\",{\"1\":{\"534\":1}}],[\">system\",{\"1\":{\"85\":1}}],[\">if=看到我\",{\"1\":{\"534\":1}}],[\">int\",{\"1\":{\"5\":1}}],[\">点我呀<\",{\"1\":{\"534\":1,\"535\":1}}],[\">点赞<\",{\"1\":{\"528\":1,\"532\":1}}],[\">去百度<\",{\"1\":{\"532\":1}}],[\">你好<\",{\"1\":{\"530\":1}}],[\">gogogo<\",{\"1\":{\"530\":1}}],[\">取消<\",{\"1\":{\"528\":1,\"532\":1}}],[\">葡萄<\",{\"1\":{\"521\":2}}],[\">榴莲<\",{\"1\":{\"521\":2}}],[\">香蕉<\",{\"1\":{\"521\":2}}],[\">苹果<\",{\"1\":{\"521\":2}}],[\">羽毛球\",{\"1\":{\"521\":1}}],[\">乒乓球\",{\"1\":{\"521\":1}}],[\">足球\",{\"1\":{\"521\":1}}],[\">篮球\",{\"1\":{\"521\":1}}],[\">下一步<\",{\"1\":{\"521\":1}}],[\">同意协议\",{\"1\":{\"521\":1}}],[\">女\",{\"1\":{\"521\":1,\"628\":1}}],[\">男\",{\"1\":{\"521\":1,\"628\":1}}],[\">双向绑定原理\",{\"1\":{\"521\":1}}],[\">消息<\",{\"1\":{\"512\":1}}],[\">新闻<\",{\"1\":{\"512\":1}}],[\">关于<\",{\"1\":{\"506\":1}}],[\">按钮<\",{\"1\":{\"494\":1,\"521\":4}}],[\">标题<\",{\"1\":{\"493\":1}}],[\">购物车<\",{\"1\":{\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"478\":1}}],[\">分类<\",{\"1\":{\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"478\":1}}],[\">主页<\",{\"1\":{\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"478\":1,\"506\":1}}],[\">=\",{\"1\":{\"292\":2}}],[\"><br\",{\"1\":{\"532\":1}}],[\"><span>右插槽<\",{\"1\":{\"493\":1}}],[\"><span>中插槽<\",{\"1\":{\"493\":1}}],[\"><span>左插槽<\",{\"1\":{\"493\":1}}],[\"><slot\",{\"1\":{\"474\":2,\"475\":2,\"480\":2}}],[\"><\",{\"1\":{\"243\":1,\"371\":2,\"472\":2,\"473\":2,\"474\":3,\"475\":3,\"480\":3,\"487\":2,\"488\":1,\"494\":3,\"521\":16,\"528\":1,\"529\":3,\"530\":1,\"531\":1,\"532\":1,\"533\":2,\"534\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"546\":2,\"591\":2,\"592\":1,\"593\":2,\"650\":1,\"663\":2,\"706\":1}}],[\">非常<\",{\"1\":{\"135\":1}}],[\">打印元素\",{\"1\":{\"91\":1}}],[\">e\",{\"1\":{\"87\":1}}],[\">\",{\"1\":{\"32\":1,\"78\":6,\"81\":1,\"82\":4,\"83\":1,\"84\":2,\"85\":1,\"87\":4,\"90\":1,\"91\":5,\"93\":6,\"211\":2,\"212\":3,\"218\":4,\"238\":5,\"239\":4,\"240\":4,\"241\":4,\"242\":4,\"243\":4,\"327\":1,\"360\":1,\"381\":3,\"410\":1,\"411\":1,\"415\":1,\"416\":1,\"432\":1,\"440\":2,\"462\":1,\"470\":10,\"471\":10,\"472\":8,\"473\":10,\"474\":15,\"475\":14,\"477\":2,\"478\":12,\"479\":1,\"480\":1,\"484\":2,\"485\":2,\"487\":6,\"492\":3,\"493\":5,\"494\":4,\"495\":9,\"509\":1,\"516\":1,\"521\":32,\"524\":1,\"528\":7,\"529\":8,\"530\":7,\"531\":12,\"532\":14,\"533\":11,\"534\":8,\"535\":8,\"536\":8,\"537\":7,\"538\":5,\"539\":6,\"546\":1,\"549\":4,\"556\":2,\"591\":2,\"592\":1,\"594\":2,\"598\":1,\"599\":1,\"611\":1,\"617\":2,\"628\":6,\"632\":1,\"633\":6,\"639\":1,\"650\":1,\"659\":4,\"663\":9,\"672\":1,\"674\":1,\"706\":5}}],[\">效率高\",{\"1\":{\"14\":1}}],[\">效率低\",{\"1\":{\"14\":1}}],[\">double\",{\"1\":{\"5\":1}}],[\">float\",{\"1\":{\"5\":1}}],[\">long\",{\"1\":{\"5\":1}}],[\"1xx\",{\"1\":{\"694\":1}}],[\"17\",{\"1\":{\"657\":1}}],[\"1vw刚好是百分之一的viewport的大小\",{\"1\":{\"655\":1}}],[\"1rem\",{\"1\":{\"655\":1}}],[\"1+1\",{\"1\":{\"529\":1}}],[\"1px\",{\"1\":{\"470\":2,\"471\":2,\"472\":2,\"479\":2,\"532\":2,\"594\":1,\"598\":1,\"599\":1,\"611\":1,\"617\":1}}],[\"19\",{\"1\":{\"454\":1}}],[\"1999\",{\"1\":{\"656\":1}}],[\"1996\",{\"1\":{\"449\":1}}],[\"1995\",{\"1\":{\"449\":1}}],[\"1972\",{\"1\":{\"449\":1}}],[\"19th\",{\"1\":{\"121\":1}}],[\"1>\",{\"1\":{\"428\":1}}],[\"14px\",{\"1\":{\"472\":1,\"474\":1,\"475\":1,\"480\":1}}],[\"14\",{\"1\":{\"398\":1}}],[\"1~3\",{\"1\":{\"357\":1}}],[\"1秒后打印\",{\"1\":{\"318\":2,\"336\":1}}],[\"1秒后输出\",{\"1\":{\"307\":4}}],[\"1班\",{\"1\":{\"301\":1,\"306\":1}}],[\"13\",{\"1\":{\"256\":1}}],[\"138\",{\"1\":{\"128\":1}}],[\"18px\",{\"1\":{\"633\":1}}],[\"18\",{\"1\":{\"190\":2,\"191\":3,\"390\":1,\"391\":1,\"406\":4,\"423\":1,\"437\":1,\"442\":1,\"448\":1,\"454\":1,\"455\":4,\"460\":1,\"463\":1,\"465\":1,\"533\":2,\"549\":1}}],[\"1nf\",{\"1\":{\"167\":2}}],[\"15px\",{\"1\":{\"633\":1}}],[\"150px\",{\"1\":{\"593\":2}}],[\"1500\",{\"1\":{\"333\":1}}],[\"15307265\",{\"1\":{\"169\":1}}],[\"15\",{\"1\":{\"128\":1,\"241\":3,\"288\":1}}],[\"113\",{\"1\":{\"549\":1}}],[\"112\",{\"1\":{\"549\":1}}],[\"111\",{\"1\":{\"391\":1,\"411\":1,\"549\":1}}],[\"110px\",{\"1\":{\"633\":1}}],[\"110\",{\"1\":{\"357\":1,\"549\":1}}],[\"1190000040177994\",{\"1\":{\"172\":1}}],[\"11\",{\"1\":{\"90\":2,\"212\":1,\"240\":1,\"256\":1}}],[\"1条语句\",{\"1\":{\"82\":1}}],[\"1个或2个\",{\"1\":{\"20\":1}}],[\"10vw\",{\"1\":{\"655\":1}}],[\"10px\",{\"1\":{\"632\":2,\"633\":2,\"652\":1,\"654\":1}}],[\"100vw\",{\"1\":{\"655\":1}}],[\"100vh\",{\"1\":{\"655\":1}}],[\"100px\",{\"1\":{\"591\":2,\"592\":2,\"593\":2,\"598\":2,\"632\":2,\"654\":3}}],[\"100行\",{\"1\":{\"391\":1}}],[\"1000\",{\"1\":{\"203\":1,\"223\":1,\"307\":1,\"318\":2,\"322\":1,\"325\":1,\"328\":1,\"332\":3,\"333\":1,\"336\":1,\"385\":4,\"407\":2}}],[\"10000000\",{\"1\":{\"224\":1}}],[\"10000\",{\"1\":{\"87\":1}}],[\"1001\",{\"1\":{\"87\":1}}],[\"100随机数放到集合中\",{\"1\":{\"87\":1}}],[\"100\",{\"1\":{\"84\":2,\"87\":1,\"242\":1,\"288\":1,\"326\":1,\"327\":1,\"344\":1,\"345\":1,\"346\":1,\"347\":2,\"357\":1,\"379\":2,\"444\":1,\"461\":1,\"470\":3,\"471\":3,\"472\":3,\"479\":3,\"539\":1,\"616\":2,\"631\":1,\"633\":1,\"671\":1,\"694\":1,\"700\":1}}],[\"10\",{\"1\":{\"18\":3,\"87\":1,\"90\":1,\"189\":2,\"212\":4,\"223\":3,\"238\":1,\"239\":1,\"240\":2,\"242\":1,\"253\":1,\"256\":1,\"273\":1,\"288\":2,\"290\":4,\"306\":1,\"379\":2,\"391\":1,\"398\":1,\"407\":2,\"441\":1,\"549\":1,\"574\":1,\"655\":1}}],[\"12px\",{\"1\":{\"652\":1}}],[\"12\",{\"1\":{\"96\":8,\"240\":1,\"256\":1,\"397\":1}}],[\"12345\",{\"1\":{\"87\":1}}],[\"1234\",{\"1\":{\"87\":1}}],[\"123\",{\"1\":{\"87\":1,\"273\":1,\"362\":8,\"384\":1,\"394\":1,\"395\":1,\"397\":1,\"398\":2,\"399\":1,\"402\":1,\"403\":1,\"405\":1,\"408\":1,\"410\":1,\"411\":2,\"412\":1,\"422\":2,\"427\":1,\"428\":2,\"448\":1,\"460\":1,\"461\":2,\"464\":1,\"509\":3,\"521\":1}}],[\"127\",{\"1\":{\"17\":2}}],[\"128\",{\"1\":{\"17\":1}}],[\"16\",{\"1\":{\"15\":2}}],[\"1\",{\"0\":{\"7\":4,\"74\":1,\"81\":1,\"194\":1,\"312\":1,\"316\":1,\"366\":1,\"371\":1,\"559\":1,\"569\":1,\"591\":1,\"605\":1,\"613\":1},\"1\":{\"4\":2,\"7\":4,\"15\":4,\"46\":2,\"72\":1,\"82\":1,\"85\":1,\"90\":1,\"91\":2,\"96\":2,\"110\":12,\"119\":1,\"124\":1,\"126\":1,\"142\":1,\"144\":2,\"168\":1,\"174\":1,\"180\":1,\"181\":2,\"183\":1,\"184\":1,\"186\":1,\"187\":1,\"192\":1,\"194\":1,\"196\":3,\"199\":3,\"202\":7,\"203\":1,\"205\":8,\"212\":5,\"214\":1,\"217\":1,\"218\":4,\"230\":3,\"231\":1,\"234\":4,\"238\":5,\"239\":3,\"240\":6,\"241\":2,\"242\":2,\"243\":4,\"244\":2,\"251\":1,\"252\":3,\"253\":1,\"256\":1,\"266\":1,\"282\":1,\"292\":4,\"293\":2,\"294\":1,\"296\":1,\"298\":2,\"299\":5,\"300\":1,\"302\":2,\"303\":2,\"304\":2,\"306\":5,\"307\":6,\"317\":4,\"318\":4,\"320\":1,\"325\":3,\"332\":1,\"336\":1,\"341\":1,\"349\":6,\"351\":1,\"355\":1,\"357\":1,\"361\":1,\"362\":4,\"363\":1,\"371\":3,\"384\":2,\"385\":1,\"395\":1,\"406\":6,\"415\":1,\"424\":2,\"431\":1,\"440\":1,\"443\":6,\"449\":1,\"453\":1,\"455\":4,\"460\":2,\"463\":1,\"470\":1,\"471\":1,\"472\":1,\"474\":2,\"475\":2,\"480\":2,\"484\":1,\"485\":2,\"487\":2,\"488\":2,\"503\":1,\"505\":1,\"521\":2,\"525\":1,\"528\":4,\"532\":1,\"533\":2,\"534\":1,\"535\":1,\"536\":2,\"537\":5,\"538\":4,\"552\":1,\"583\":4,\"589\":1,\"607\":1,\"615\":1,\"630\":1,\"640\":4,\"646\":6,\"648\":1,\"663\":3,\"686\":3,\"689\":3,\"690\":1,\"696\":8,\"707\":1,\"712\":3}}],[\"即便两个不同的域名指向同一个ip地址\",{\"1\":{\"704\":1}}],[\"即项目本来的大小\",{\"1\":{\"646\":1}}],[\"即flex\",{\"1\":{\"645\":1}}],[\"即如果空间不足\",{\"1\":{\"646\":1}}],[\"即如果存在多余空间\",{\"1\":{\"646\":1}}],[\"即如果项目未设置高度或者设为\",{\"1\":{\"645\":1}}],[\"即如果第一个表达式为\",{\"1\":{\"4\":1}}],[\"即可实现文本在div内部垂直居中\",{\"1\":{\"622\":1}}],[\"即可以共享数据\",{\"1\":{\"24\":1}}],[\"即将要进入的目标的路由对象\",{\"1\":{\"513\":1}}],[\"即上层作用域为全局\",{\"1\":{\"385\":1}}],[\"即为最终结果\",{\"1\":{\"346\":1}}],[\"即回调函数嵌套过多\",{\"1\":{\"334\":1}}],[\"即值类型\",{\"1\":{\"309\":1,\"319\":1}}],[\"即子函数\",{\"1\":{\"218\":1}}],[\"即使一个元素拥有滚动机制\",{\"1\":{\"627\":1}}],[\"即使浮动元素也是如此\",{\"1\":{\"588\":1}}],[\"即使是\",{\"1\":{\"384\":1}}],[\"即使创建这个闭包的外层函数\",{\"1\":{\"215\":1}}],[\"即使数据库发生故障也不应该对其有任何影响\",{\"1\":{\"163\":1}}],[\"即在函数执行之前\",{\"1\":{\"211\":1}}],[\"即一组变量绑定\",{\"1\":{\"209\":1}}],[\"即最新的历史版本\",{\"1\":{\"169\":1}}],[\"即接口中只有一个抽象方法的接口\",{\"1\":{\"80\":1}}],[\"即类型推断\",{\"1\":{\"78\":1}}],[\"即lambda体\",{\"0\":{\"78\":1}}],[\"即链表长度>8\",{\"1\":{\"50\":1,\"69\":1}}],[\"即不能被继承\",{\"1\":{\"11\":1}}],[\"即\",{\"1\":{\"10\":1,\"182\":1,\"250\":1,\"361\":1,\"635\":1,\"706\":1}}],[\"即两位同时为\",{\"1\":{\"4\":1}}],[\"还需要避免使用大写字符来命名键名\",{\"1\":{\"487\":1}}],[\"还是会用一个冒号的写法\",{\"1\":{\"594\":1}}],[\"还是\",{\"1\":{\"334\":1}}],[\"还是失败状态\",{\"1\":{\"326\":1,\"345\":1}}],[\"还支持使用\",{\"1\":{\"240\":1}}],[\"还要包括对函数定义所在作用域的引用\",{\"1\":{\"209\":1}}],[\"还不会编写\",{\"1\":{\"114\":1}}],[\"还可以在html控制台vm\",{\"1\":{\"528\":1}}],[\"还可以调用这些方法和属性\",{\"1\":{\"31\":1}}],[\"还可以用作位运算符\",{\"1\":{\"4\":1}}],[\"还具有短路的功能\",{\"1\":{\"4\":1}}],[\"时使用来源地址\",{\"1\":{\"633\":1}}],[\"时会返回\",{\"1\":{\"357\":1}}],[\"时可省略\",{\"1\":{\"298\":1}}],[\"时间\",{\"1\":{\"657\":1}}],[\"时间格式线程安全问题\",{\"0\":{\"97\":1}}],[\"时间日期api\",{\"0\":{\"94\":1}}],[\"时将链表转换为红黑树\",{\"1\":{\"53\":1,\"72\":1}}],[\"时是无害的\",{\"1\":{\"23\":1}}],[\"时\",{\"1\":{\"4\":1,\"50\":1,\"69\":1,\"345\":1,\"372\":1,\"521\":1,\"582\":2,\"629\":1,\"694\":1}}],[\"和a元素结合\",{\"1\":{\"669\":1}}],[\"和mediaquerylist\",{\"1\":{\"633\":1}}],[\"和其它行内元素在同一行\",{\"1\":{\"624\":2}}],[\"和伪元素\",{\"1\":{\"594\":1}}],[\"和数值组成\",{\"1\":{\"357\":1}}],[\"和生成器的语法糖\",{\"1\":{\"307\":1}}],[\"和实例属性\",{\"1\":{\"300\":1}}],[\"和父级vo组成\",{\"1\":{\"272\":1}}],[\"和语法分析\",{\"1\":{\"263\":1,\"264\":1}}],[\"和方法\",{\"1\":{\"228\":1}}],[\"和原对象字面量是否指向同一地址\",{\"1\":{\"227\":1}}],[\"和equals\",{\"1\":{\"90\":1}}],[\"和sortedmap\",{\"1\":{\"46\":1}}],[\"和string上\",{\"0\":{\"6\":1}}],[\"和字符流\",{\"1\":{\"37\":1}}],[\"和输出流\",{\"1\":{\"37\":1}}],[\"和重定向\",{\"0\":{\"24\":1}}],[\"和\",{\"0\":{\"4\":1,\"10\":1,\"54\":1,\"58\":1,\"581\":1},\"1\":{\"6\":1,\"14\":1,\"32\":1,\"53\":1,\"57\":1,\"72\":1,\"114\":1,\"144\":1,\"176\":1,\"182\":1,\"218\":1,\"222\":1,\"262\":2,\"298\":1,\"318\":2,\"488\":1,\"499\":1,\"525\":1,\"589\":1,\"594\":2,\"645\":1,\"646\":1,\"657\":2,\"672\":1,\"675\":1,\"696\":1}}],[\"菜鸟\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
